// Package inat provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package inat

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	AppJwtRequiredScopes  = "appJwtRequired.Scopes"
	UserJwtOptionalScopes = "userJwtOptional.Scopes"
	UserJwtRequiredScopes = "userJwtRequired.Scopes"
)

// Defines values for AuthorizedApplicationScopes.
const (
	AuthorizedApplicationScopesAccountDelete AuthorizedApplicationScopes = "account_delete"
	AuthorizedApplicationScopesLogin         AuthorizedApplicationScopes = "login"
	AuthorizedApplicationScopesWrite         AuthorizedApplicationScopes = "write"
)

// Defines values for CommentsCreateCommentParentType.
const (
	CommentsCreateCommentParentTypeObservation CommentsCreateCommentParentType = "Observation"
	CommentsCreateCommentParentTypePost        CommentsCreateCommentParentType = "Post"
)

// Defines values for ListedTaxonEstablishmentMeans.
const (
	Endemic    ListedTaxonEstablishmentMeans = "endemic"
	Introduced ListedTaxonEstablishmentMeans = "introduced"
	Native     ListedTaxonEstablishmentMeans = "native"
)

// Defines values for ProjectUsersUpdateProjectUserPrefersCuratorCoordinateAccessFor.
const (
	ProjectUsersUpdateProjectUserPrefersCuratorCoordinateAccessForAny   ProjectUsersUpdateProjectUserPrefersCuratorCoordinateAccessFor = "any"
	ProjectUsersUpdateProjectUserPrefersCuratorCoordinateAccessForNone  ProjectUsersUpdateProjectUserPrefersCuratorCoordinateAccessFor = "none"
	ProjectUsersUpdateProjectUserPrefersCuratorCoordinateAccessForTaxon ProjectUsersUpdateProjectUserPrefersCuratorCoordinateAccessFor = "taxon"
)

// Defines values for ProviderAuthorizationProviderName.
const (
	Apple        ProviderAuthorizationProviderName = "apple"
	Facebook     ProviderAuthorizationProviderName = "facebook"
	Flickr       ProviderAuthorizationProviderName = "flickr"
	GoogleOauth2 ProviderAuthorizationProviderName = "google_oauth2"
	OpenID       ProviderAuthorizationProviderName = "open_id"
	Orcid        ProviderAuthorizationProviderName = "orcid"
	Soundcloud   ProviderAuthorizationProviderName = "soundcloud"
	Twitter      ProviderAuthorizationProviderName = "twitter"
)

// Defines values for ResultsProjectsPostsResultsParentType.
const (
	ResultsProjectsPostsResultsParentTypeProject ResultsProjectsPostsResultsParentType = "Project"
)

// Defines values for ResultsSearchResultsType.
const (
	ResultsSearchResultsTypePlace   ResultsSearchResultsType = "place"
	ResultsSearchResultsTypeProject ResultsSearchResultsType = "project"
	ResultsSearchResultsTypeTaxon   ResultsSearchResultsType = "taxon"
	ResultsSearchResultsTypeUser    ResultsSearchResultsType = "user"
)

// Defines values for ResultsTaxaSuggestQueryOrderBy.
const (
	ResultsTaxaSuggestQueryOrderByDefault  ResultsTaxaSuggestQueryOrderBy = "default"
	ResultsTaxaSuggestQueryOrderBySciname  ResultsTaxaSuggestQueryOrderBy = "sciname"
	ResultsTaxaSuggestQueryOrderByTaxonomy ResultsTaxaSuggestQueryOrderBy = "taxonomy"
)

// Defines values for ResultsTaxaSuggestQuerySource.
const (
	ResultsTaxaSuggestQuerySourceCaptiveObservations ResultsTaxaSuggestQuerySource = "captive_observations"
	ResultsTaxaSuggestQuerySourceChecklist           ResultsTaxaSuggestQuerySource = "checklist"
	ResultsTaxaSuggestQuerySourceMisidentifications  ResultsTaxaSuggestQuerySource = "misidentifications"
	ResultsTaxaSuggestQuerySourceObservations        ResultsTaxaSuggestQuerySource = "observations"
	ResultsTaxaSuggestQuerySourceRgObservations      ResultsTaxaSuggestQuerySource = "rg_observations"
	ResultsTaxaSuggestQuerySourceVisual              ResultsTaxaSuggestQuerySource = "visual"
)

// Defines values for SavedLocationGeoprivacy.
const (
	SavedLocationGeoprivacyObscured SavedLocationGeoprivacy = "obscured"
	SavedLocationGeoprivacyOpen     SavedLocationGeoprivacy = "open"
	SavedLocationGeoprivacyPrivate  SavedLocationGeoprivacy = "private"
)

// Defines values for SavedLocationsCreateSavedLocationGeoprivacy.
const (
	SavedLocationsCreateSavedLocationGeoprivacyObscured SavedLocationsCreateSavedLocationGeoprivacy = "obscured"
	SavedLocationsCreateSavedLocationGeoprivacyOpen     SavedLocationsCreateSavedLocationGeoprivacy = "open"
	SavedLocationsCreateSavedLocationGeoprivacyPrivate  SavedLocationsCreateSavedLocationGeoprivacy = "private"
)

// Defines values for UserPreferencesPrefersObservationFieldsBy.
const (
	Anyone   UserPreferencesPrefersObservationFieldsBy = "anyone"
	Curators UserPreferencesPrefersObservationFieldsBy = "curators"
	Observer UserPreferencesPrefersObservationFieldsBy = "observer"
)

// Defines values for UserPreferencesPrefersProjectAdditionBy.
const (
	UserPreferencesPrefersProjectAdditionByAny    UserPreferencesPrefersProjectAdditionBy = "any"
	UserPreferencesPrefersProjectAdditionByJoined UserPreferencesPrefersProjectAdditionBy = "joined"
	UserPreferencesPrefersProjectAdditionByNone   UserPreferencesPrefersProjectAdditionBy = "none"
)

// Defines values for GetAnnouncementsParamsPlacement.
const (
	Mobile                GetAnnouncementsParamsPlacement = "mobile"
	MobileHome            GetAnnouncementsParamsPlacement = "mobile/home"
	UsersDashboard        GetAnnouncementsParamsPlacement = "users/dashboard"
	UsersDashboardSidebar GetAnnouncementsParamsPlacement = "users/dashboard#sidebar"
	WelcomeIndex          GetAnnouncementsParamsPlacement = "welcome/index"
)

// Defines values for GetAnnouncementsParamsClient.
const (
	InatAndroid GetAnnouncementsParamsClient = "inat-android"
	InatIOS     GetAnnouncementsParamsClient = "inat-ios"
	Inatrn      GetAnnouncementsParamsClient = "inatrn"
	Seek        GetAnnouncementsParamsClient = "seek"
)

// Defines values for GetGeomodelIDZoomXYPngParamsTileSize.
const (
	GetGeomodelIDZoomXYPngParamsTileSizeN256 GetGeomodelIDZoomXYPngParamsTileSize = 256
	GetGeomodelIDZoomXYPngParamsTileSizeN512 GetGeomodelIDZoomXYPngParamsTileSize = 512
)

// Defines values for GetGeomodelComparisonIDZoomXYPngParamsTileSize.
const (
	GetGeomodelComparisonIDZoomXYPngParamsTileSizeN256 GetGeomodelComparisonIDZoomXYPngParamsTileSize = 256
	GetGeomodelComparisonIDZoomXYPngParamsTileSizeN512 GetGeomodelComparisonIDZoomXYPngParamsTileSize = 512
)

// Defines values for GetGeomodelTaxonRangeIDZoomXYPngParamsTileSize.
const (
	GetGeomodelTaxonRangeIDZoomXYPngParamsTileSizeN256 GetGeomodelTaxonRangeIDZoomXYPngParamsTileSize = 256
	GetGeomodelTaxonRangeIDZoomXYPngParamsTileSizeN512 GetGeomodelTaxonRangeIDZoomXYPngParamsTileSize = 512
)

// Defines values for GetGridZoomXYGridJSONParamsTileSize.
const (
	GetGridZoomXYGridJSONParamsTileSizeN256 GetGridZoomXYGridJSONParamsTileSize = 256
	GetGridZoomXYGridJSONParamsTileSizeN512 GetGridZoomXYGridJSONParamsTileSize = 512
)

// Defines values for GetGridZoomXYGridJSONParamsLicense.
const (
	GetGridZoomXYGridJSONParamsLicenseCc0      GetGridZoomXYGridJSONParamsLicense = "cc0"
	GetGridZoomXYGridJSONParamsLicenseCcBy     GetGridZoomXYGridJSONParamsLicense = "cc-by"
	GetGridZoomXYGridJSONParamsLicenseCcByNc   GetGridZoomXYGridJSONParamsLicense = "cc-by-nc"
	GetGridZoomXYGridJSONParamsLicenseCcByNcNd GetGridZoomXYGridJSONParamsLicense = "cc-by-nc-nd"
	GetGridZoomXYGridJSONParamsLicenseCcByNcSa GetGridZoomXYGridJSONParamsLicense = "cc-by-nc-sa"
	GetGridZoomXYGridJSONParamsLicenseCcByNd   GetGridZoomXYGridJSONParamsLicense = "cc-by-nd"
	GetGridZoomXYGridJSONParamsLicenseCcBySa   GetGridZoomXYGridJSONParamsLicense = "cc-by-sa"
)

// Defines values for GetGridZoomXYGridJSONParamsPhotoLicense.
const (
	GetGridZoomXYGridJSONParamsPhotoLicenseCc0      GetGridZoomXYGridJSONParamsPhotoLicense = "cc0"
	GetGridZoomXYGridJSONParamsPhotoLicenseCcBy     GetGridZoomXYGridJSONParamsPhotoLicense = "cc-by"
	GetGridZoomXYGridJSONParamsPhotoLicenseCcByNc   GetGridZoomXYGridJSONParamsPhotoLicense = "cc-by-nc"
	GetGridZoomXYGridJSONParamsPhotoLicenseCcByNcNd GetGridZoomXYGridJSONParamsPhotoLicense = "cc-by-nc-nd"
	GetGridZoomXYGridJSONParamsPhotoLicenseCcByNcSa GetGridZoomXYGridJSONParamsPhotoLicense = "cc-by-nc-sa"
	GetGridZoomXYGridJSONParamsPhotoLicenseCcByNd   GetGridZoomXYGridJSONParamsPhotoLicense = "cc-by-nd"
	GetGridZoomXYGridJSONParamsPhotoLicenseCcBySa   GetGridZoomXYGridJSONParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetGridZoomXYGridJSONParamsRank.
const (
	GetGridZoomXYGridJSONParamsRankClass         GetGridZoomXYGridJSONParamsRank = "class"
	GetGridZoomXYGridJSONParamsRankComplex       GetGridZoomXYGridJSONParamsRank = "complex"
	GetGridZoomXYGridJSONParamsRankEpifamily     GetGridZoomXYGridJSONParamsRank = "epifamily"
	GetGridZoomXYGridJSONParamsRankFamily        GetGridZoomXYGridJSONParamsRank = "family"
	GetGridZoomXYGridJSONParamsRankForm          GetGridZoomXYGridJSONParamsRank = "form"
	GetGridZoomXYGridJSONParamsRankGenus         GetGridZoomXYGridJSONParamsRank = "genus"
	GetGridZoomXYGridJSONParamsRankGenushybrid   GetGridZoomXYGridJSONParamsRank = "genushybrid"
	GetGridZoomXYGridJSONParamsRankHybrid        GetGridZoomXYGridJSONParamsRank = "hybrid"
	GetGridZoomXYGridJSONParamsRankInfraclass    GetGridZoomXYGridJSONParamsRank = "infraclass"
	GetGridZoomXYGridJSONParamsRankInfrahybrid   GetGridZoomXYGridJSONParamsRank = "infrahybrid"
	GetGridZoomXYGridJSONParamsRankInfraorder    GetGridZoomXYGridJSONParamsRank = "infraorder"
	GetGridZoomXYGridJSONParamsRankKingdom       GetGridZoomXYGridJSONParamsRank = "kingdom"
	GetGridZoomXYGridJSONParamsRankOrder         GetGridZoomXYGridJSONParamsRank = "order"
	GetGridZoomXYGridJSONParamsRankParvorder     GetGridZoomXYGridJSONParamsRank = "parvorder"
	GetGridZoomXYGridJSONParamsRankPhylum        GetGridZoomXYGridJSONParamsRank = "phylum"
	GetGridZoomXYGridJSONParamsRankSection       GetGridZoomXYGridJSONParamsRank = "section"
	GetGridZoomXYGridJSONParamsRankSpecies       GetGridZoomXYGridJSONParamsRank = "species"
	GetGridZoomXYGridJSONParamsRankSubclass      GetGridZoomXYGridJSONParamsRank = "subclass"
	GetGridZoomXYGridJSONParamsRankSubfamily     GetGridZoomXYGridJSONParamsRank = "subfamily"
	GetGridZoomXYGridJSONParamsRankSubgenus      GetGridZoomXYGridJSONParamsRank = "subgenus"
	GetGridZoomXYGridJSONParamsRankSuborder      GetGridZoomXYGridJSONParamsRank = "suborder"
	GetGridZoomXYGridJSONParamsRankSubphylum     GetGridZoomXYGridJSONParamsRank = "subphylum"
	GetGridZoomXYGridJSONParamsRankSubsection    GetGridZoomXYGridJSONParamsRank = "subsection"
	GetGridZoomXYGridJSONParamsRankSubspecies    GetGridZoomXYGridJSONParamsRank = "subspecies"
	GetGridZoomXYGridJSONParamsRankSubterclass   GetGridZoomXYGridJSONParamsRank = "subterclass"
	GetGridZoomXYGridJSONParamsRankSubtribe      GetGridZoomXYGridJSONParamsRank = "subtribe"
	GetGridZoomXYGridJSONParamsRankSuperclass    GetGridZoomXYGridJSONParamsRank = "superclass"
	GetGridZoomXYGridJSONParamsRankSuperfamily   GetGridZoomXYGridJSONParamsRank = "superfamily"
	GetGridZoomXYGridJSONParamsRankSuperorder    GetGridZoomXYGridJSONParamsRank = "superorder"
	GetGridZoomXYGridJSONParamsRankSupertribe    GetGridZoomXYGridJSONParamsRank = "supertribe"
	GetGridZoomXYGridJSONParamsRankTribe         GetGridZoomXYGridJSONParamsRank = "tribe"
	GetGridZoomXYGridJSONParamsRankVariety       GetGridZoomXYGridJSONParamsRank = "variety"
	GetGridZoomXYGridJSONParamsRankZoosection    GetGridZoomXYGridJSONParamsRank = "zoosection"
	GetGridZoomXYGridJSONParamsRankZoosubsection GetGridZoomXYGridJSONParamsRank = "zoosubsection"
)

// Defines values for GetGridZoomXYGridJSONParamsSoundLicense.
const (
	GetGridZoomXYGridJSONParamsSoundLicenseCc0      GetGridZoomXYGridJSONParamsSoundLicense = "cc0"
	GetGridZoomXYGridJSONParamsSoundLicenseCcBy     GetGridZoomXYGridJSONParamsSoundLicense = "cc-by"
	GetGridZoomXYGridJSONParamsSoundLicenseCcByNc   GetGridZoomXYGridJSONParamsSoundLicense = "cc-by-nc"
	GetGridZoomXYGridJSONParamsSoundLicenseCcByNcNd GetGridZoomXYGridJSONParamsSoundLicense = "cc-by-nc-nd"
	GetGridZoomXYGridJSONParamsSoundLicenseCcByNcSa GetGridZoomXYGridJSONParamsSoundLicense = "cc-by-nc-sa"
	GetGridZoomXYGridJSONParamsSoundLicenseCcByNd   GetGridZoomXYGridJSONParamsSoundLicense = "cc-by-nd"
	GetGridZoomXYGridJSONParamsSoundLicenseCcBySa   GetGridZoomXYGridJSONParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetGridZoomXYGridJSONParamsCsi.
const (
	GetGridZoomXYGridJSONParamsCsiCR GetGridZoomXYGridJSONParamsCsi = "CR"
	GetGridZoomXYGridJSONParamsCsiEN GetGridZoomXYGridJSONParamsCsi = "EN"
	GetGridZoomXYGridJSONParamsCsiEW GetGridZoomXYGridJSONParamsCsi = "EW"
	GetGridZoomXYGridJSONParamsCsiEX GetGridZoomXYGridJSONParamsCsi = "EX"
	GetGridZoomXYGridJSONParamsCsiLC GetGridZoomXYGridJSONParamsCsi = "LC"
	GetGridZoomXYGridJSONParamsCsiNT GetGridZoomXYGridJSONParamsCsi = "NT"
	GetGridZoomXYGridJSONParamsCsiVU GetGridZoomXYGridJSONParamsCsi = "VU"
)

// Defines values for GetGridZoomXYGridJSONParamsGeoprivacy.
const (
	GetGridZoomXYGridJSONParamsGeoprivacyObscured        GetGridZoomXYGridJSONParamsGeoprivacy = "obscured"
	GetGridZoomXYGridJSONParamsGeoprivacyObscuredPrivate GetGridZoomXYGridJSONParamsGeoprivacy = "obscured_private"
	GetGridZoomXYGridJSONParamsGeoprivacyOpen            GetGridZoomXYGridJSONParamsGeoprivacy = "open"
	GetGridZoomXYGridJSONParamsGeoprivacyPrivate         GetGridZoomXYGridJSONParamsGeoprivacy = "private"
)

// Defines values for GetGridZoomXYGridJSONParamsTaxonGeoprivacy.
const (
	GetGridZoomXYGridJSONParamsTaxonGeoprivacyObscured        GetGridZoomXYGridJSONParamsTaxonGeoprivacy = "obscured"
	GetGridZoomXYGridJSONParamsTaxonGeoprivacyObscuredPrivate GetGridZoomXYGridJSONParamsTaxonGeoprivacy = "obscured_private"
	GetGridZoomXYGridJSONParamsTaxonGeoprivacyOpen            GetGridZoomXYGridJSONParamsTaxonGeoprivacy = "open"
	GetGridZoomXYGridJSONParamsTaxonGeoprivacyPrivate         GetGridZoomXYGridJSONParamsTaxonGeoprivacy = "private"
)

// Defines values for GetGridZoomXYGridJSONParamsObscuration.
const (
	GetGridZoomXYGridJSONParamsObscurationNone     GetGridZoomXYGridJSONParamsObscuration = "none"
	GetGridZoomXYGridJSONParamsObscurationObscured GetGridZoomXYGridJSONParamsObscuration = "obscured"
	GetGridZoomXYGridJSONParamsObscurationPrivate  GetGridZoomXYGridJSONParamsObscuration = "private"
)

// Defines values for GetGridZoomXYGridJSONParamsHrank.
const (
	GetGridZoomXYGridJSONParamsHrankClass         GetGridZoomXYGridJSONParamsHrank = "class"
	GetGridZoomXYGridJSONParamsHrankComplex       GetGridZoomXYGridJSONParamsHrank = "complex"
	GetGridZoomXYGridJSONParamsHrankEpifamily     GetGridZoomXYGridJSONParamsHrank = "epifamily"
	GetGridZoomXYGridJSONParamsHrankFamily        GetGridZoomXYGridJSONParamsHrank = "family"
	GetGridZoomXYGridJSONParamsHrankForm          GetGridZoomXYGridJSONParamsHrank = "form"
	GetGridZoomXYGridJSONParamsHrankGenus         GetGridZoomXYGridJSONParamsHrank = "genus"
	GetGridZoomXYGridJSONParamsHrankGenushybrid   GetGridZoomXYGridJSONParamsHrank = "genushybrid"
	GetGridZoomXYGridJSONParamsHrankHybrid        GetGridZoomXYGridJSONParamsHrank = "hybrid"
	GetGridZoomXYGridJSONParamsHrankInfraclass    GetGridZoomXYGridJSONParamsHrank = "infraclass"
	GetGridZoomXYGridJSONParamsHrankInfrahybrid   GetGridZoomXYGridJSONParamsHrank = "infrahybrid"
	GetGridZoomXYGridJSONParamsHrankInfraorder    GetGridZoomXYGridJSONParamsHrank = "infraorder"
	GetGridZoomXYGridJSONParamsHrankKingdom       GetGridZoomXYGridJSONParamsHrank = "kingdom"
	GetGridZoomXYGridJSONParamsHrankOrder         GetGridZoomXYGridJSONParamsHrank = "order"
	GetGridZoomXYGridJSONParamsHrankParvorder     GetGridZoomXYGridJSONParamsHrank = "parvorder"
	GetGridZoomXYGridJSONParamsHrankPhylum        GetGridZoomXYGridJSONParamsHrank = "phylum"
	GetGridZoomXYGridJSONParamsHrankSection       GetGridZoomXYGridJSONParamsHrank = "section"
	GetGridZoomXYGridJSONParamsHrankSpecies       GetGridZoomXYGridJSONParamsHrank = "species"
	GetGridZoomXYGridJSONParamsHrankSubclass      GetGridZoomXYGridJSONParamsHrank = "subclass"
	GetGridZoomXYGridJSONParamsHrankSubfamily     GetGridZoomXYGridJSONParamsHrank = "subfamily"
	GetGridZoomXYGridJSONParamsHrankSubgenus      GetGridZoomXYGridJSONParamsHrank = "subgenus"
	GetGridZoomXYGridJSONParamsHrankSuborder      GetGridZoomXYGridJSONParamsHrank = "suborder"
	GetGridZoomXYGridJSONParamsHrankSubphylum     GetGridZoomXYGridJSONParamsHrank = "subphylum"
	GetGridZoomXYGridJSONParamsHrankSubsection    GetGridZoomXYGridJSONParamsHrank = "subsection"
	GetGridZoomXYGridJSONParamsHrankSubspecies    GetGridZoomXYGridJSONParamsHrank = "subspecies"
	GetGridZoomXYGridJSONParamsHrankSubterclass   GetGridZoomXYGridJSONParamsHrank = "subterclass"
	GetGridZoomXYGridJSONParamsHrankSubtribe      GetGridZoomXYGridJSONParamsHrank = "subtribe"
	GetGridZoomXYGridJSONParamsHrankSuperclass    GetGridZoomXYGridJSONParamsHrank = "superclass"
	GetGridZoomXYGridJSONParamsHrankSuperfamily   GetGridZoomXYGridJSONParamsHrank = "superfamily"
	GetGridZoomXYGridJSONParamsHrankSuperorder    GetGridZoomXYGridJSONParamsHrank = "superorder"
	GetGridZoomXYGridJSONParamsHrankSupertribe    GetGridZoomXYGridJSONParamsHrank = "supertribe"
	GetGridZoomXYGridJSONParamsHrankTribe         GetGridZoomXYGridJSONParamsHrank = "tribe"
	GetGridZoomXYGridJSONParamsHrankVariety       GetGridZoomXYGridJSONParamsHrank = "variety"
	GetGridZoomXYGridJSONParamsHrankZoosection    GetGridZoomXYGridJSONParamsHrank = "zoosection"
	GetGridZoomXYGridJSONParamsHrankZoosubsection GetGridZoomXYGridJSONParamsHrank = "zoosubsection"
)

// Defines values for GetGridZoomXYGridJSONParamsLrank.
const (
	GetGridZoomXYGridJSONParamsLrankClass         GetGridZoomXYGridJSONParamsLrank = "class"
	GetGridZoomXYGridJSONParamsLrankComplex       GetGridZoomXYGridJSONParamsLrank = "complex"
	GetGridZoomXYGridJSONParamsLrankEpifamily     GetGridZoomXYGridJSONParamsLrank = "epifamily"
	GetGridZoomXYGridJSONParamsLrankFamily        GetGridZoomXYGridJSONParamsLrank = "family"
	GetGridZoomXYGridJSONParamsLrankForm          GetGridZoomXYGridJSONParamsLrank = "form"
	GetGridZoomXYGridJSONParamsLrankGenus         GetGridZoomXYGridJSONParamsLrank = "genus"
	GetGridZoomXYGridJSONParamsLrankGenushybrid   GetGridZoomXYGridJSONParamsLrank = "genushybrid"
	GetGridZoomXYGridJSONParamsLrankHybrid        GetGridZoomXYGridJSONParamsLrank = "hybrid"
	GetGridZoomXYGridJSONParamsLrankInfraclass    GetGridZoomXYGridJSONParamsLrank = "infraclass"
	GetGridZoomXYGridJSONParamsLrankInfrahybrid   GetGridZoomXYGridJSONParamsLrank = "infrahybrid"
	GetGridZoomXYGridJSONParamsLrankInfraorder    GetGridZoomXYGridJSONParamsLrank = "infraorder"
	GetGridZoomXYGridJSONParamsLrankKingdom       GetGridZoomXYGridJSONParamsLrank = "kingdom"
	GetGridZoomXYGridJSONParamsLrankOrder         GetGridZoomXYGridJSONParamsLrank = "order"
	GetGridZoomXYGridJSONParamsLrankParvorder     GetGridZoomXYGridJSONParamsLrank = "parvorder"
	GetGridZoomXYGridJSONParamsLrankPhylum        GetGridZoomXYGridJSONParamsLrank = "phylum"
	GetGridZoomXYGridJSONParamsLrankSection       GetGridZoomXYGridJSONParamsLrank = "section"
	GetGridZoomXYGridJSONParamsLrankSpecies       GetGridZoomXYGridJSONParamsLrank = "species"
	GetGridZoomXYGridJSONParamsLrankSubclass      GetGridZoomXYGridJSONParamsLrank = "subclass"
	GetGridZoomXYGridJSONParamsLrankSubfamily     GetGridZoomXYGridJSONParamsLrank = "subfamily"
	GetGridZoomXYGridJSONParamsLrankSubgenus      GetGridZoomXYGridJSONParamsLrank = "subgenus"
	GetGridZoomXYGridJSONParamsLrankSuborder      GetGridZoomXYGridJSONParamsLrank = "suborder"
	GetGridZoomXYGridJSONParamsLrankSubphylum     GetGridZoomXYGridJSONParamsLrank = "subphylum"
	GetGridZoomXYGridJSONParamsLrankSubsection    GetGridZoomXYGridJSONParamsLrank = "subsection"
	GetGridZoomXYGridJSONParamsLrankSubspecies    GetGridZoomXYGridJSONParamsLrank = "subspecies"
	GetGridZoomXYGridJSONParamsLrankSubterclass   GetGridZoomXYGridJSONParamsLrank = "subterclass"
	GetGridZoomXYGridJSONParamsLrankSubtribe      GetGridZoomXYGridJSONParamsLrank = "subtribe"
	GetGridZoomXYGridJSONParamsLrankSuperclass    GetGridZoomXYGridJSONParamsLrank = "superclass"
	GetGridZoomXYGridJSONParamsLrankSuperfamily   GetGridZoomXYGridJSONParamsLrank = "superfamily"
	GetGridZoomXYGridJSONParamsLrankSuperorder    GetGridZoomXYGridJSONParamsLrank = "superorder"
	GetGridZoomXYGridJSONParamsLrankSupertribe    GetGridZoomXYGridJSONParamsLrank = "supertribe"
	GetGridZoomXYGridJSONParamsLrankTribe         GetGridZoomXYGridJSONParamsLrank = "tribe"
	GetGridZoomXYGridJSONParamsLrankVariety       GetGridZoomXYGridJSONParamsLrank = "variety"
	GetGridZoomXYGridJSONParamsLrankZoosection    GetGridZoomXYGridJSONParamsLrank = "zoosection"
	GetGridZoomXYGridJSONParamsLrankZoosubsection GetGridZoomXYGridJSONParamsLrank = "zoosubsection"
)

// Defines values for GetGridZoomXYGridJSONParamsIconicTaxa.
const (
	GetGridZoomXYGridJSONParamsIconicTaxaActinopterygii GetGridZoomXYGridJSONParamsIconicTaxa = "Actinopterygii"
	GetGridZoomXYGridJSONParamsIconicTaxaAmphibia       GetGridZoomXYGridJSONParamsIconicTaxa = "Amphibia"
	GetGridZoomXYGridJSONParamsIconicTaxaAnimalia       GetGridZoomXYGridJSONParamsIconicTaxa = "Animalia"
	GetGridZoomXYGridJSONParamsIconicTaxaArachnida      GetGridZoomXYGridJSONParamsIconicTaxa = "Arachnida"
	GetGridZoomXYGridJSONParamsIconicTaxaAves           GetGridZoomXYGridJSONParamsIconicTaxa = "Aves"
	GetGridZoomXYGridJSONParamsIconicTaxaChromista      GetGridZoomXYGridJSONParamsIconicTaxa = "Chromista"
	GetGridZoomXYGridJSONParamsIconicTaxaFungi          GetGridZoomXYGridJSONParamsIconicTaxa = "Fungi"
	GetGridZoomXYGridJSONParamsIconicTaxaInsecta        GetGridZoomXYGridJSONParamsIconicTaxa = "Insecta"
	GetGridZoomXYGridJSONParamsIconicTaxaMammalia       GetGridZoomXYGridJSONParamsIconicTaxa = "Mammalia"
	GetGridZoomXYGridJSONParamsIconicTaxaMollusca       GetGridZoomXYGridJSONParamsIconicTaxa = "Mollusca"
	GetGridZoomXYGridJSONParamsIconicTaxaPlantae        GetGridZoomXYGridJSONParamsIconicTaxa = "Plantae"
	GetGridZoomXYGridJSONParamsIconicTaxaProtozoa       GetGridZoomXYGridJSONParamsIconicTaxa = "Protozoa"
	GetGridZoomXYGridJSONParamsIconicTaxaReptilia       GetGridZoomXYGridJSONParamsIconicTaxa = "Reptilia"
	GetGridZoomXYGridJSONParamsIconicTaxaUnknown        GetGridZoomXYGridJSONParamsIconicTaxa = "unknown"
)

// Defines values for GetGridZoomXYGridJSONParamsIdentifications.
const (
	GetGridZoomXYGridJSONParamsIdentificationsMostAgree    GetGridZoomXYGridJSONParamsIdentifications = "most_agree"
	GetGridZoomXYGridJSONParamsIdentificationsMostDisagree GetGridZoomXYGridJSONParamsIdentifications = "most_disagree"
	GetGridZoomXYGridJSONParamsIdentificationsSomeAgree    GetGridZoomXYGridJSONParamsIdentifications = "some_agree"
)

// Defines values for GetGridZoomXYGridJSONParamsSearchOn.
const (
	GetGridZoomXYGridJSONParamsSearchOnDescription        GetGridZoomXYGridJSONParamsSearchOn = "description"
	GetGridZoomXYGridJSONParamsSearchOnNames              GetGridZoomXYGridJSONParamsSearchOn = "names"
	GetGridZoomXYGridJSONParamsSearchOnPlace              GetGridZoomXYGridJSONParamsSearchOn = "place"
	GetGridZoomXYGridJSONParamsSearchOnTags               GetGridZoomXYGridJSONParamsSearchOn = "tags"
	GetGridZoomXYGridJSONParamsSearchOnTaxonPageObsPhotos GetGridZoomXYGridJSONParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetGridZoomXYGridJSONParamsQualityGrade.
const (
	GetGridZoomXYGridJSONParamsQualityGradeCasual   GetGridZoomXYGridJSONParamsQualityGrade = "casual"
	GetGridZoomXYGridJSONParamsQualityGradeNeedsID  GetGridZoomXYGridJSONParamsQualityGrade = "needs_id"
	GetGridZoomXYGridJSONParamsQualityGradeResearch GetGridZoomXYGridJSONParamsQualityGrade = "research"
)

// Defines values for GetGridZoomXYGridJSONParamsOrder.
const (
	GetGridZoomXYGridJSONParamsOrderAsc  GetGridZoomXYGridJSONParamsOrder = "asc"
	GetGridZoomXYGridJSONParamsOrderDesc GetGridZoomXYGridJSONParamsOrder = "desc"
)

// Defines values for GetGridZoomXYGridJSONParamsOrderBy.
const (
	GetGridZoomXYGridJSONParamsOrderByCreatedAt    GetGridZoomXYGridJSONParamsOrderBy = "created_at"
	GetGridZoomXYGridJSONParamsOrderByGeoScore     GetGridZoomXYGridJSONParamsOrderBy = "geo_score"
	GetGridZoomXYGridJSONParamsOrderByID           GetGridZoomXYGridJSONParamsOrderBy = "id"
	GetGridZoomXYGridJSONParamsOrderByObservedOn   GetGridZoomXYGridJSONParamsOrderBy = "observed_on"
	GetGridZoomXYGridJSONParamsOrderByRandom       GetGridZoomXYGridJSONParamsOrderBy = "random"
	GetGridZoomXYGridJSONParamsOrderBySpeciesGuess GetGridZoomXYGridJSONParamsOrderBy = "species_guess"
	GetGridZoomXYGridJSONParamsOrderByUpdatedAt    GetGridZoomXYGridJSONParamsOrderBy = "updated_at"
	GetGridZoomXYGridJSONParamsOrderByVotes        GetGridZoomXYGridJSONParamsOrderBy = "votes"
)

// Defines values for GetGridZoomXYPngParamsTileSize.
const (
	GetGridZoomXYPngParamsTileSizeN256 GetGridZoomXYPngParamsTileSize = 256
	GetGridZoomXYPngParamsTileSizeN512 GetGridZoomXYPngParamsTileSize = 512
)

// Defines values for GetGridZoomXYPngParamsLicense.
const (
	GetGridZoomXYPngParamsLicenseCc0      GetGridZoomXYPngParamsLicense = "cc0"
	GetGridZoomXYPngParamsLicenseCcBy     GetGridZoomXYPngParamsLicense = "cc-by"
	GetGridZoomXYPngParamsLicenseCcByNc   GetGridZoomXYPngParamsLicense = "cc-by-nc"
	GetGridZoomXYPngParamsLicenseCcByNcNd GetGridZoomXYPngParamsLicense = "cc-by-nc-nd"
	GetGridZoomXYPngParamsLicenseCcByNcSa GetGridZoomXYPngParamsLicense = "cc-by-nc-sa"
	GetGridZoomXYPngParamsLicenseCcByNd   GetGridZoomXYPngParamsLicense = "cc-by-nd"
	GetGridZoomXYPngParamsLicenseCcBySa   GetGridZoomXYPngParamsLicense = "cc-by-sa"
)

// Defines values for GetGridZoomXYPngParamsPhotoLicense.
const (
	GetGridZoomXYPngParamsPhotoLicenseCc0      GetGridZoomXYPngParamsPhotoLicense = "cc0"
	GetGridZoomXYPngParamsPhotoLicenseCcBy     GetGridZoomXYPngParamsPhotoLicense = "cc-by"
	GetGridZoomXYPngParamsPhotoLicenseCcByNc   GetGridZoomXYPngParamsPhotoLicense = "cc-by-nc"
	GetGridZoomXYPngParamsPhotoLicenseCcByNcNd GetGridZoomXYPngParamsPhotoLicense = "cc-by-nc-nd"
	GetGridZoomXYPngParamsPhotoLicenseCcByNcSa GetGridZoomXYPngParamsPhotoLicense = "cc-by-nc-sa"
	GetGridZoomXYPngParamsPhotoLicenseCcByNd   GetGridZoomXYPngParamsPhotoLicense = "cc-by-nd"
	GetGridZoomXYPngParamsPhotoLicenseCcBySa   GetGridZoomXYPngParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetGridZoomXYPngParamsRank.
const (
	GetGridZoomXYPngParamsRankClass         GetGridZoomXYPngParamsRank = "class"
	GetGridZoomXYPngParamsRankComplex       GetGridZoomXYPngParamsRank = "complex"
	GetGridZoomXYPngParamsRankEpifamily     GetGridZoomXYPngParamsRank = "epifamily"
	GetGridZoomXYPngParamsRankFamily        GetGridZoomXYPngParamsRank = "family"
	GetGridZoomXYPngParamsRankForm          GetGridZoomXYPngParamsRank = "form"
	GetGridZoomXYPngParamsRankGenus         GetGridZoomXYPngParamsRank = "genus"
	GetGridZoomXYPngParamsRankGenushybrid   GetGridZoomXYPngParamsRank = "genushybrid"
	GetGridZoomXYPngParamsRankHybrid        GetGridZoomXYPngParamsRank = "hybrid"
	GetGridZoomXYPngParamsRankInfraclass    GetGridZoomXYPngParamsRank = "infraclass"
	GetGridZoomXYPngParamsRankInfrahybrid   GetGridZoomXYPngParamsRank = "infrahybrid"
	GetGridZoomXYPngParamsRankInfraorder    GetGridZoomXYPngParamsRank = "infraorder"
	GetGridZoomXYPngParamsRankKingdom       GetGridZoomXYPngParamsRank = "kingdom"
	GetGridZoomXYPngParamsRankOrder         GetGridZoomXYPngParamsRank = "order"
	GetGridZoomXYPngParamsRankParvorder     GetGridZoomXYPngParamsRank = "parvorder"
	GetGridZoomXYPngParamsRankPhylum        GetGridZoomXYPngParamsRank = "phylum"
	GetGridZoomXYPngParamsRankSection       GetGridZoomXYPngParamsRank = "section"
	GetGridZoomXYPngParamsRankSpecies       GetGridZoomXYPngParamsRank = "species"
	GetGridZoomXYPngParamsRankSubclass      GetGridZoomXYPngParamsRank = "subclass"
	GetGridZoomXYPngParamsRankSubfamily     GetGridZoomXYPngParamsRank = "subfamily"
	GetGridZoomXYPngParamsRankSubgenus      GetGridZoomXYPngParamsRank = "subgenus"
	GetGridZoomXYPngParamsRankSuborder      GetGridZoomXYPngParamsRank = "suborder"
	GetGridZoomXYPngParamsRankSubphylum     GetGridZoomXYPngParamsRank = "subphylum"
	GetGridZoomXYPngParamsRankSubsection    GetGridZoomXYPngParamsRank = "subsection"
	GetGridZoomXYPngParamsRankSubspecies    GetGridZoomXYPngParamsRank = "subspecies"
	GetGridZoomXYPngParamsRankSubterclass   GetGridZoomXYPngParamsRank = "subterclass"
	GetGridZoomXYPngParamsRankSubtribe      GetGridZoomXYPngParamsRank = "subtribe"
	GetGridZoomXYPngParamsRankSuperclass    GetGridZoomXYPngParamsRank = "superclass"
	GetGridZoomXYPngParamsRankSuperfamily   GetGridZoomXYPngParamsRank = "superfamily"
	GetGridZoomXYPngParamsRankSuperorder    GetGridZoomXYPngParamsRank = "superorder"
	GetGridZoomXYPngParamsRankSupertribe    GetGridZoomXYPngParamsRank = "supertribe"
	GetGridZoomXYPngParamsRankTribe         GetGridZoomXYPngParamsRank = "tribe"
	GetGridZoomXYPngParamsRankVariety       GetGridZoomXYPngParamsRank = "variety"
	GetGridZoomXYPngParamsRankZoosection    GetGridZoomXYPngParamsRank = "zoosection"
	GetGridZoomXYPngParamsRankZoosubsection GetGridZoomXYPngParamsRank = "zoosubsection"
)

// Defines values for GetGridZoomXYPngParamsSoundLicense.
const (
	GetGridZoomXYPngParamsSoundLicenseCc0      GetGridZoomXYPngParamsSoundLicense = "cc0"
	GetGridZoomXYPngParamsSoundLicenseCcBy     GetGridZoomXYPngParamsSoundLicense = "cc-by"
	GetGridZoomXYPngParamsSoundLicenseCcByNc   GetGridZoomXYPngParamsSoundLicense = "cc-by-nc"
	GetGridZoomXYPngParamsSoundLicenseCcByNcNd GetGridZoomXYPngParamsSoundLicense = "cc-by-nc-nd"
	GetGridZoomXYPngParamsSoundLicenseCcByNcSa GetGridZoomXYPngParamsSoundLicense = "cc-by-nc-sa"
	GetGridZoomXYPngParamsSoundLicenseCcByNd   GetGridZoomXYPngParamsSoundLicense = "cc-by-nd"
	GetGridZoomXYPngParamsSoundLicenseCcBySa   GetGridZoomXYPngParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetGridZoomXYPngParamsCsi.
const (
	GetGridZoomXYPngParamsCsiCR GetGridZoomXYPngParamsCsi = "CR"
	GetGridZoomXYPngParamsCsiEN GetGridZoomXYPngParamsCsi = "EN"
	GetGridZoomXYPngParamsCsiEW GetGridZoomXYPngParamsCsi = "EW"
	GetGridZoomXYPngParamsCsiEX GetGridZoomXYPngParamsCsi = "EX"
	GetGridZoomXYPngParamsCsiLC GetGridZoomXYPngParamsCsi = "LC"
	GetGridZoomXYPngParamsCsiNT GetGridZoomXYPngParamsCsi = "NT"
	GetGridZoomXYPngParamsCsiVU GetGridZoomXYPngParamsCsi = "VU"
)

// Defines values for GetGridZoomXYPngParamsGeoprivacy.
const (
	GetGridZoomXYPngParamsGeoprivacyObscured        GetGridZoomXYPngParamsGeoprivacy = "obscured"
	GetGridZoomXYPngParamsGeoprivacyObscuredPrivate GetGridZoomXYPngParamsGeoprivacy = "obscured_private"
	GetGridZoomXYPngParamsGeoprivacyOpen            GetGridZoomXYPngParamsGeoprivacy = "open"
	GetGridZoomXYPngParamsGeoprivacyPrivate         GetGridZoomXYPngParamsGeoprivacy = "private"
)

// Defines values for GetGridZoomXYPngParamsTaxonGeoprivacy.
const (
	GetGridZoomXYPngParamsTaxonGeoprivacyObscured        GetGridZoomXYPngParamsTaxonGeoprivacy = "obscured"
	GetGridZoomXYPngParamsTaxonGeoprivacyObscuredPrivate GetGridZoomXYPngParamsTaxonGeoprivacy = "obscured_private"
	GetGridZoomXYPngParamsTaxonGeoprivacyOpen            GetGridZoomXYPngParamsTaxonGeoprivacy = "open"
	GetGridZoomXYPngParamsTaxonGeoprivacyPrivate         GetGridZoomXYPngParamsTaxonGeoprivacy = "private"
)

// Defines values for GetGridZoomXYPngParamsObscuration.
const (
	GetGridZoomXYPngParamsObscurationNone     GetGridZoomXYPngParamsObscuration = "none"
	GetGridZoomXYPngParamsObscurationObscured GetGridZoomXYPngParamsObscuration = "obscured"
	GetGridZoomXYPngParamsObscurationPrivate  GetGridZoomXYPngParamsObscuration = "private"
)

// Defines values for GetGridZoomXYPngParamsHrank.
const (
	GetGridZoomXYPngParamsHrankClass         GetGridZoomXYPngParamsHrank = "class"
	GetGridZoomXYPngParamsHrankComplex       GetGridZoomXYPngParamsHrank = "complex"
	GetGridZoomXYPngParamsHrankEpifamily     GetGridZoomXYPngParamsHrank = "epifamily"
	GetGridZoomXYPngParamsHrankFamily        GetGridZoomXYPngParamsHrank = "family"
	GetGridZoomXYPngParamsHrankForm          GetGridZoomXYPngParamsHrank = "form"
	GetGridZoomXYPngParamsHrankGenus         GetGridZoomXYPngParamsHrank = "genus"
	GetGridZoomXYPngParamsHrankGenushybrid   GetGridZoomXYPngParamsHrank = "genushybrid"
	GetGridZoomXYPngParamsHrankHybrid        GetGridZoomXYPngParamsHrank = "hybrid"
	GetGridZoomXYPngParamsHrankInfraclass    GetGridZoomXYPngParamsHrank = "infraclass"
	GetGridZoomXYPngParamsHrankInfrahybrid   GetGridZoomXYPngParamsHrank = "infrahybrid"
	GetGridZoomXYPngParamsHrankInfraorder    GetGridZoomXYPngParamsHrank = "infraorder"
	GetGridZoomXYPngParamsHrankKingdom       GetGridZoomXYPngParamsHrank = "kingdom"
	GetGridZoomXYPngParamsHrankOrder         GetGridZoomXYPngParamsHrank = "order"
	GetGridZoomXYPngParamsHrankParvorder     GetGridZoomXYPngParamsHrank = "parvorder"
	GetGridZoomXYPngParamsHrankPhylum        GetGridZoomXYPngParamsHrank = "phylum"
	GetGridZoomXYPngParamsHrankSection       GetGridZoomXYPngParamsHrank = "section"
	GetGridZoomXYPngParamsHrankSpecies       GetGridZoomXYPngParamsHrank = "species"
	GetGridZoomXYPngParamsHrankSubclass      GetGridZoomXYPngParamsHrank = "subclass"
	GetGridZoomXYPngParamsHrankSubfamily     GetGridZoomXYPngParamsHrank = "subfamily"
	GetGridZoomXYPngParamsHrankSubgenus      GetGridZoomXYPngParamsHrank = "subgenus"
	GetGridZoomXYPngParamsHrankSuborder      GetGridZoomXYPngParamsHrank = "suborder"
	GetGridZoomXYPngParamsHrankSubphylum     GetGridZoomXYPngParamsHrank = "subphylum"
	GetGridZoomXYPngParamsHrankSubsection    GetGridZoomXYPngParamsHrank = "subsection"
	GetGridZoomXYPngParamsHrankSubspecies    GetGridZoomXYPngParamsHrank = "subspecies"
	GetGridZoomXYPngParamsHrankSubterclass   GetGridZoomXYPngParamsHrank = "subterclass"
	GetGridZoomXYPngParamsHrankSubtribe      GetGridZoomXYPngParamsHrank = "subtribe"
	GetGridZoomXYPngParamsHrankSuperclass    GetGridZoomXYPngParamsHrank = "superclass"
	GetGridZoomXYPngParamsHrankSuperfamily   GetGridZoomXYPngParamsHrank = "superfamily"
	GetGridZoomXYPngParamsHrankSuperorder    GetGridZoomXYPngParamsHrank = "superorder"
	GetGridZoomXYPngParamsHrankSupertribe    GetGridZoomXYPngParamsHrank = "supertribe"
	GetGridZoomXYPngParamsHrankTribe         GetGridZoomXYPngParamsHrank = "tribe"
	GetGridZoomXYPngParamsHrankVariety       GetGridZoomXYPngParamsHrank = "variety"
	GetGridZoomXYPngParamsHrankZoosection    GetGridZoomXYPngParamsHrank = "zoosection"
	GetGridZoomXYPngParamsHrankZoosubsection GetGridZoomXYPngParamsHrank = "zoosubsection"
)

// Defines values for GetGridZoomXYPngParamsLrank.
const (
	GetGridZoomXYPngParamsLrankClass         GetGridZoomXYPngParamsLrank = "class"
	GetGridZoomXYPngParamsLrankComplex       GetGridZoomXYPngParamsLrank = "complex"
	GetGridZoomXYPngParamsLrankEpifamily     GetGridZoomXYPngParamsLrank = "epifamily"
	GetGridZoomXYPngParamsLrankFamily        GetGridZoomXYPngParamsLrank = "family"
	GetGridZoomXYPngParamsLrankForm          GetGridZoomXYPngParamsLrank = "form"
	GetGridZoomXYPngParamsLrankGenus         GetGridZoomXYPngParamsLrank = "genus"
	GetGridZoomXYPngParamsLrankGenushybrid   GetGridZoomXYPngParamsLrank = "genushybrid"
	GetGridZoomXYPngParamsLrankHybrid        GetGridZoomXYPngParamsLrank = "hybrid"
	GetGridZoomXYPngParamsLrankInfraclass    GetGridZoomXYPngParamsLrank = "infraclass"
	GetGridZoomXYPngParamsLrankInfrahybrid   GetGridZoomXYPngParamsLrank = "infrahybrid"
	GetGridZoomXYPngParamsLrankInfraorder    GetGridZoomXYPngParamsLrank = "infraorder"
	GetGridZoomXYPngParamsLrankKingdom       GetGridZoomXYPngParamsLrank = "kingdom"
	GetGridZoomXYPngParamsLrankOrder         GetGridZoomXYPngParamsLrank = "order"
	GetGridZoomXYPngParamsLrankParvorder     GetGridZoomXYPngParamsLrank = "parvorder"
	GetGridZoomXYPngParamsLrankPhylum        GetGridZoomXYPngParamsLrank = "phylum"
	GetGridZoomXYPngParamsLrankSection       GetGridZoomXYPngParamsLrank = "section"
	GetGridZoomXYPngParamsLrankSpecies       GetGridZoomXYPngParamsLrank = "species"
	GetGridZoomXYPngParamsLrankSubclass      GetGridZoomXYPngParamsLrank = "subclass"
	GetGridZoomXYPngParamsLrankSubfamily     GetGridZoomXYPngParamsLrank = "subfamily"
	GetGridZoomXYPngParamsLrankSubgenus      GetGridZoomXYPngParamsLrank = "subgenus"
	GetGridZoomXYPngParamsLrankSuborder      GetGridZoomXYPngParamsLrank = "suborder"
	GetGridZoomXYPngParamsLrankSubphylum     GetGridZoomXYPngParamsLrank = "subphylum"
	GetGridZoomXYPngParamsLrankSubsection    GetGridZoomXYPngParamsLrank = "subsection"
	GetGridZoomXYPngParamsLrankSubspecies    GetGridZoomXYPngParamsLrank = "subspecies"
	GetGridZoomXYPngParamsLrankSubterclass   GetGridZoomXYPngParamsLrank = "subterclass"
	GetGridZoomXYPngParamsLrankSubtribe      GetGridZoomXYPngParamsLrank = "subtribe"
	GetGridZoomXYPngParamsLrankSuperclass    GetGridZoomXYPngParamsLrank = "superclass"
	GetGridZoomXYPngParamsLrankSuperfamily   GetGridZoomXYPngParamsLrank = "superfamily"
	GetGridZoomXYPngParamsLrankSuperorder    GetGridZoomXYPngParamsLrank = "superorder"
	GetGridZoomXYPngParamsLrankSupertribe    GetGridZoomXYPngParamsLrank = "supertribe"
	GetGridZoomXYPngParamsLrankTribe         GetGridZoomXYPngParamsLrank = "tribe"
	GetGridZoomXYPngParamsLrankVariety       GetGridZoomXYPngParamsLrank = "variety"
	GetGridZoomXYPngParamsLrankZoosection    GetGridZoomXYPngParamsLrank = "zoosection"
	GetGridZoomXYPngParamsLrankZoosubsection GetGridZoomXYPngParamsLrank = "zoosubsection"
)

// Defines values for GetGridZoomXYPngParamsIconicTaxa.
const (
	GetGridZoomXYPngParamsIconicTaxaActinopterygii GetGridZoomXYPngParamsIconicTaxa = "Actinopterygii"
	GetGridZoomXYPngParamsIconicTaxaAmphibia       GetGridZoomXYPngParamsIconicTaxa = "Amphibia"
	GetGridZoomXYPngParamsIconicTaxaAnimalia       GetGridZoomXYPngParamsIconicTaxa = "Animalia"
	GetGridZoomXYPngParamsIconicTaxaArachnida      GetGridZoomXYPngParamsIconicTaxa = "Arachnida"
	GetGridZoomXYPngParamsIconicTaxaAves           GetGridZoomXYPngParamsIconicTaxa = "Aves"
	GetGridZoomXYPngParamsIconicTaxaChromista      GetGridZoomXYPngParamsIconicTaxa = "Chromista"
	GetGridZoomXYPngParamsIconicTaxaFungi          GetGridZoomXYPngParamsIconicTaxa = "Fungi"
	GetGridZoomXYPngParamsIconicTaxaInsecta        GetGridZoomXYPngParamsIconicTaxa = "Insecta"
	GetGridZoomXYPngParamsIconicTaxaMammalia       GetGridZoomXYPngParamsIconicTaxa = "Mammalia"
	GetGridZoomXYPngParamsIconicTaxaMollusca       GetGridZoomXYPngParamsIconicTaxa = "Mollusca"
	GetGridZoomXYPngParamsIconicTaxaPlantae        GetGridZoomXYPngParamsIconicTaxa = "Plantae"
	GetGridZoomXYPngParamsIconicTaxaProtozoa       GetGridZoomXYPngParamsIconicTaxa = "Protozoa"
	GetGridZoomXYPngParamsIconicTaxaReptilia       GetGridZoomXYPngParamsIconicTaxa = "Reptilia"
	GetGridZoomXYPngParamsIconicTaxaUnknown        GetGridZoomXYPngParamsIconicTaxa = "unknown"
)

// Defines values for GetGridZoomXYPngParamsIdentifications.
const (
	GetGridZoomXYPngParamsIdentificationsMostAgree    GetGridZoomXYPngParamsIdentifications = "most_agree"
	GetGridZoomXYPngParamsIdentificationsMostDisagree GetGridZoomXYPngParamsIdentifications = "most_disagree"
	GetGridZoomXYPngParamsIdentificationsSomeAgree    GetGridZoomXYPngParamsIdentifications = "some_agree"
)

// Defines values for GetGridZoomXYPngParamsSearchOn.
const (
	GetGridZoomXYPngParamsSearchOnDescription        GetGridZoomXYPngParamsSearchOn = "description"
	GetGridZoomXYPngParamsSearchOnNames              GetGridZoomXYPngParamsSearchOn = "names"
	GetGridZoomXYPngParamsSearchOnPlace              GetGridZoomXYPngParamsSearchOn = "place"
	GetGridZoomXYPngParamsSearchOnTags               GetGridZoomXYPngParamsSearchOn = "tags"
	GetGridZoomXYPngParamsSearchOnTaxonPageObsPhotos GetGridZoomXYPngParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetGridZoomXYPngParamsQualityGrade.
const (
	GetGridZoomXYPngParamsQualityGradeCasual   GetGridZoomXYPngParamsQualityGrade = "casual"
	GetGridZoomXYPngParamsQualityGradeNeedsID  GetGridZoomXYPngParamsQualityGrade = "needs_id"
	GetGridZoomXYPngParamsQualityGradeResearch GetGridZoomXYPngParamsQualityGrade = "research"
)

// Defines values for GetGridZoomXYPngParamsOrder.
const (
	GetGridZoomXYPngParamsOrderAsc  GetGridZoomXYPngParamsOrder = "asc"
	GetGridZoomXYPngParamsOrderDesc GetGridZoomXYPngParamsOrder = "desc"
)

// Defines values for GetGridZoomXYPngParamsOrderBy.
const (
	GetGridZoomXYPngParamsOrderByCreatedAt    GetGridZoomXYPngParamsOrderBy = "created_at"
	GetGridZoomXYPngParamsOrderByGeoScore     GetGridZoomXYPngParamsOrderBy = "geo_score"
	GetGridZoomXYPngParamsOrderByID           GetGridZoomXYPngParamsOrderBy = "id"
	GetGridZoomXYPngParamsOrderByObservedOn   GetGridZoomXYPngParamsOrderBy = "observed_on"
	GetGridZoomXYPngParamsOrderByRandom       GetGridZoomXYPngParamsOrderBy = "random"
	GetGridZoomXYPngParamsOrderBySpeciesGuess GetGridZoomXYPngParamsOrderBy = "species_guess"
	GetGridZoomXYPngParamsOrderByUpdatedAt    GetGridZoomXYPngParamsOrderBy = "updated_at"
	GetGridZoomXYPngParamsOrderByVotes        GetGridZoomXYPngParamsOrderBy = "votes"
)

// Defines values for GetHeatmapZoomXYPngParamsTileSize.
const (
	GetHeatmapZoomXYPngParamsTileSizeN256 GetHeatmapZoomXYPngParamsTileSize = 256
	GetHeatmapZoomXYPngParamsTileSizeN512 GetHeatmapZoomXYPngParamsTileSize = 512
)

// Defines values for GetHeatmapZoomXYPngParamsLicense.
const (
	GetHeatmapZoomXYPngParamsLicenseCc0      GetHeatmapZoomXYPngParamsLicense = "cc0"
	GetHeatmapZoomXYPngParamsLicenseCcBy     GetHeatmapZoomXYPngParamsLicense = "cc-by"
	GetHeatmapZoomXYPngParamsLicenseCcByNc   GetHeatmapZoomXYPngParamsLicense = "cc-by-nc"
	GetHeatmapZoomXYPngParamsLicenseCcByNcNd GetHeatmapZoomXYPngParamsLicense = "cc-by-nc-nd"
	GetHeatmapZoomXYPngParamsLicenseCcByNcSa GetHeatmapZoomXYPngParamsLicense = "cc-by-nc-sa"
	GetHeatmapZoomXYPngParamsLicenseCcByNd   GetHeatmapZoomXYPngParamsLicense = "cc-by-nd"
	GetHeatmapZoomXYPngParamsLicenseCcBySa   GetHeatmapZoomXYPngParamsLicense = "cc-by-sa"
)

// Defines values for GetHeatmapZoomXYPngParamsPhotoLicense.
const (
	GetHeatmapZoomXYPngParamsPhotoLicenseCc0      GetHeatmapZoomXYPngParamsPhotoLicense = "cc0"
	GetHeatmapZoomXYPngParamsPhotoLicenseCcBy     GetHeatmapZoomXYPngParamsPhotoLicense = "cc-by"
	GetHeatmapZoomXYPngParamsPhotoLicenseCcByNc   GetHeatmapZoomXYPngParamsPhotoLicense = "cc-by-nc"
	GetHeatmapZoomXYPngParamsPhotoLicenseCcByNcNd GetHeatmapZoomXYPngParamsPhotoLicense = "cc-by-nc-nd"
	GetHeatmapZoomXYPngParamsPhotoLicenseCcByNcSa GetHeatmapZoomXYPngParamsPhotoLicense = "cc-by-nc-sa"
	GetHeatmapZoomXYPngParamsPhotoLicenseCcByNd   GetHeatmapZoomXYPngParamsPhotoLicense = "cc-by-nd"
	GetHeatmapZoomXYPngParamsPhotoLicenseCcBySa   GetHeatmapZoomXYPngParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetHeatmapZoomXYPngParamsRank.
const (
	GetHeatmapZoomXYPngParamsRankClass         GetHeatmapZoomXYPngParamsRank = "class"
	GetHeatmapZoomXYPngParamsRankComplex       GetHeatmapZoomXYPngParamsRank = "complex"
	GetHeatmapZoomXYPngParamsRankEpifamily     GetHeatmapZoomXYPngParamsRank = "epifamily"
	GetHeatmapZoomXYPngParamsRankFamily        GetHeatmapZoomXYPngParamsRank = "family"
	GetHeatmapZoomXYPngParamsRankForm          GetHeatmapZoomXYPngParamsRank = "form"
	GetHeatmapZoomXYPngParamsRankGenus         GetHeatmapZoomXYPngParamsRank = "genus"
	GetHeatmapZoomXYPngParamsRankGenushybrid   GetHeatmapZoomXYPngParamsRank = "genushybrid"
	GetHeatmapZoomXYPngParamsRankHybrid        GetHeatmapZoomXYPngParamsRank = "hybrid"
	GetHeatmapZoomXYPngParamsRankInfraclass    GetHeatmapZoomXYPngParamsRank = "infraclass"
	GetHeatmapZoomXYPngParamsRankInfrahybrid   GetHeatmapZoomXYPngParamsRank = "infrahybrid"
	GetHeatmapZoomXYPngParamsRankInfraorder    GetHeatmapZoomXYPngParamsRank = "infraorder"
	GetHeatmapZoomXYPngParamsRankKingdom       GetHeatmapZoomXYPngParamsRank = "kingdom"
	GetHeatmapZoomXYPngParamsRankOrder         GetHeatmapZoomXYPngParamsRank = "order"
	GetHeatmapZoomXYPngParamsRankParvorder     GetHeatmapZoomXYPngParamsRank = "parvorder"
	GetHeatmapZoomXYPngParamsRankPhylum        GetHeatmapZoomXYPngParamsRank = "phylum"
	GetHeatmapZoomXYPngParamsRankSection       GetHeatmapZoomXYPngParamsRank = "section"
	GetHeatmapZoomXYPngParamsRankSpecies       GetHeatmapZoomXYPngParamsRank = "species"
	GetHeatmapZoomXYPngParamsRankSubclass      GetHeatmapZoomXYPngParamsRank = "subclass"
	GetHeatmapZoomXYPngParamsRankSubfamily     GetHeatmapZoomXYPngParamsRank = "subfamily"
	GetHeatmapZoomXYPngParamsRankSubgenus      GetHeatmapZoomXYPngParamsRank = "subgenus"
	GetHeatmapZoomXYPngParamsRankSuborder      GetHeatmapZoomXYPngParamsRank = "suborder"
	GetHeatmapZoomXYPngParamsRankSubphylum     GetHeatmapZoomXYPngParamsRank = "subphylum"
	GetHeatmapZoomXYPngParamsRankSubsection    GetHeatmapZoomXYPngParamsRank = "subsection"
	GetHeatmapZoomXYPngParamsRankSubspecies    GetHeatmapZoomXYPngParamsRank = "subspecies"
	GetHeatmapZoomXYPngParamsRankSubterclass   GetHeatmapZoomXYPngParamsRank = "subterclass"
	GetHeatmapZoomXYPngParamsRankSubtribe      GetHeatmapZoomXYPngParamsRank = "subtribe"
	GetHeatmapZoomXYPngParamsRankSuperclass    GetHeatmapZoomXYPngParamsRank = "superclass"
	GetHeatmapZoomXYPngParamsRankSuperfamily   GetHeatmapZoomXYPngParamsRank = "superfamily"
	GetHeatmapZoomXYPngParamsRankSuperorder    GetHeatmapZoomXYPngParamsRank = "superorder"
	GetHeatmapZoomXYPngParamsRankSupertribe    GetHeatmapZoomXYPngParamsRank = "supertribe"
	GetHeatmapZoomXYPngParamsRankTribe         GetHeatmapZoomXYPngParamsRank = "tribe"
	GetHeatmapZoomXYPngParamsRankVariety       GetHeatmapZoomXYPngParamsRank = "variety"
	GetHeatmapZoomXYPngParamsRankZoosection    GetHeatmapZoomXYPngParamsRank = "zoosection"
	GetHeatmapZoomXYPngParamsRankZoosubsection GetHeatmapZoomXYPngParamsRank = "zoosubsection"
)

// Defines values for GetHeatmapZoomXYPngParamsSoundLicense.
const (
	GetHeatmapZoomXYPngParamsSoundLicenseCc0      GetHeatmapZoomXYPngParamsSoundLicense = "cc0"
	GetHeatmapZoomXYPngParamsSoundLicenseCcBy     GetHeatmapZoomXYPngParamsSoundLicense = "cc-by"
	GetHeatmapZoomXYPngParamsSoundLicenseCcByNc   GetHeatmapZoomXYPngParamsSoundLicense = "cc-by-nc"
	GetHeatmapZoomXYPngParamsSoundLicenseCcByNcNd GetHeatmapZoomXYPngParamsSoundLicense = "cc-by-nc-nd"
	GetHeatmapZoomXYPngParamsSoundLicenseCcByNcSa GetHeatmapZoomXYPngParamsSoundLicense = "cc-by-nc-sa"
	GetHeatmapZoomXYPngParamsSoundLicenseCcByNd   GetHeatmapZoomXYPngParamsSoundLicense = "cc-by-nd"
	GetHeatmapZoomXYPngParamsSoundLicenseCcBySa   GetHeatmapZoomXYPngParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetHeatmapZoomXYPngParamsCsi.
const (
	GetHeatmapZoomXYPngParamsCsiCR GetHeatmapZoomXYPngParamsCsi = "CR"
	GetHeatmapZoomXYPngParamsCsiEN GetHeatmapZoomXYPngParamsCsi = "EN"
	GetHeatmapZoomXYPngParamsCsiEW GetHeatmapZoomXYPngParamsCsi = "EW"
	GetHeatmapZoomXYPngParamsCsiEX GetHeatmapZoomXYPngParamsCsi = "EX"
	GetHeatmapZoomXYPngParamsCsiLC GetHeatmapZoomXYPngParamsCsi = "LC"
	GetHeatmapZoomXYPngParamsCsiNT GetHeatmapZoomXYPngParamsCsi = "NT"
	GetHeatmapZoomXYPngParamsCsiVU GetHeatmapZoomXYPngParamsCsi = "VU"
)

// Defines values for GetHeatmapZoomXYPngParamsGeoprivacy.
const (
	GetHeatmapZoomXYPngParamsGeoprivacyObscured        GetHeatmapZoomXYPngParamsGeoprivacy = "obscured"
	GetHeatmapZoomXYPngParamsGeoprivacyObscuredPrivate GetHeatmapZoomXYPngParamsGeoprivacy = "obscured_private"
	GetHeatmapZoomXYPngParamsGeoprivacyOpen            GetHeatmapZoomXYPngParamsGeoprivacy = "open"
	GetHeatmapZoomXYPngParamsGeoprivacyPrivate         GetHeatmapZoomXYPngParamsGeoprivacy = "private"
)

// Defines values for GetHeatmapZoomXYPngParamsTaxonGeoprivacy.
const (
	GetHeatmapZoomXYPngParamsTaxonGeoprivacyObscured        GetHeatmapZoomXYPngParamsTaxonGeoprivacy = "obscured"
	GetHeatmapZoomXYPngParamsTaxonGeoprivacyObscuredPrivate GetHeatmapZoomXYPngParamsTaxonGeoprivacy = "obscured_private"
	GetHeatmapZoomXYPngParamsTaxonGeoprivacyOpen            GetHeatmapZoomXYPngParamsTaxonGeoprivacy = "open"
	GetHeatmapZoomXYPngParamsTaxonGeoprivacyPrivate         GetHeatmapZoomXYPngParamsTaxonGeoprivacy = "private"
)

// Defines values for GetHeatmapZoomXYPngParamsObscuration.
const (
	GetHeatmapZoomXYPngParamsObscurationNone     GetHeatmapZoomXYPngParamsObscuration = "none"
	GetHeatmapZoomXYPngParamsObscurationObscured GetHeatmapZoomXYPngParamsObscuration = "obscured"
	GetHeatmapZoomXYPngParamsObscurationPrivate  GetHeatmapZoomXYPngParamsObscuration = "private"
)

// Defines values for GetHeatmapZoomXYPngParamsHrank.
const (
	GetHeatmapZoomXYPngParamsHrankClass         GetHeatmapZoomXYPngParamsHrank = "class"
	GetHeatmapZoomXYPngParamsHrankComplex       GetHeatmapZoomXYPngParamsHrank = "complex"
	GetHeatmapZoomXYPngParamsHrankEpifamily     GetHeatmapZoomXYPngParamsHrank = "epifamily"
	GetHeatmapZoomXYPngParamsHrankFamily        GetHeatmapZoomXYPngParamsHrank = "family"
	GetHeatmapZoomXYPngParamsHrankForm          GetHeatmapZoomXYPngParamsHrank = "form"
	GetHeatmapZoomXYPngParamsHrankGenus         GetHeatmapZoomXYPngParamsHrank = "genus"
	GetHeatmapZoomXYPngParamsHrankGenushybrid   GetHeatmapZoomXYPngParamsHrank = "genushybrid"
	GetHeatmapZoomXYPngParamsHrankHybrid        GetHeatmapZoomXYPngParamsHrank = "hybrid"
	GetHeatmapZoomXYPngParamsHrankInfraclass    GetHeatmapZoomXYPngParamsHrank = "infraclass"
	GetHeatmapZoomXYPngParamsHrankInfrahybrid   GetHeatmapZoomXYPngParamsHrank = "infrahybrid"
	GetHeatmapZoomXYPngParamsHrankInfraorder    GetHeatmapZoomXYPngParamsHrank = "infraorder"
	GetHeatmapZoomXYPngParamsHrankKingdom       GetHeatmapZoomXYPngParamsHrank = "kingdom"
	GetHeatmapZoomXYPngParamsHrankOrder         GetHeatmapZoomXYPngParamsHrank = "order"
	GetHeatmapZoomXYPngParamsHrankParvorder     GetHeatmapZoomXYPngParamsHrank = "parvorder"
	GetHeatmapZoomXYPngParamsHrankPhylum        GetHeatmapZoomXYPngParamsHrank = "phylum"
	GetHeatmapZoomXYPngParamsHrankSection       GetHeatmapZoomXYPngParamsHrank = "section"
	GetHeatmapZoomXYPngParamsHrankSpecies       GetHeatmapZoomXYPngParamsHrank = "species"
	GetHeatmapZoomXYPngParamsHrankSubclass      GetHeatmapZoomXYPngParamsHrank = "subclass"
	GetHeatmapZoomXYPngParamsHrankSubfamily     GetHeatmapZoomXYPngParamsHrank = "subfamily"
	GetHeatmapZoomXYPngParamsHrankSubgenus      GetHeatmapZoomXYPngParamsHrank = "subgenus"
	GetHeatmapZoomXYPngParamsHrankSuborder      GetHeatmapZoomXYPngParamsHrank = "suborder"
	GetHeatmapZoomXYPngParamsHrankSubphylum     GetHeatmapZoomXYPngParamsHrank = "subphylum"
	GetHeatmapZoomXYPngParamsHrankSubsection    GetHeatmapZoomXYPngParamsHrank = "subsection"
	GetHeatmapZoomXYPngParamsHrankSubspecies    GetHeatmapZoomXYPngParamsHrank = "subspecies"
	GetHeatmapZoomXYPngParamsHrankSubterclass   GetHeatmapZoomXYPngParamsHrank = "subterclass"
	GetHeatmapZoomXYPngParamsHrankSubtribe      GetHeatmapZoomXYPngParamsHrank = "subtribe"
	GetHeatmapZoomXYPngParamsHrankSuperclass    GetHeatmapZoomXYPngParamsHrank = "superclass"
	GetHeatmapZoomXYPngParamsHrankSuperfamily   GetHeatmapZoomXYPngParamsHrank = "superfamily"
	GetHeatmapZoomXYPngParamsHrankSuperorder    GetHeatmapZoomXYPngParamsHrank = "superorder"
	GetHeatmapZoomXYPngParamsHrankSupertribe    GetHeatmapZoomXYPngParamsHrank = "supertribe"
	GetHeatmapZoomXYPngParamsHrankTribe         GetHeatmapZoomXYPngParamsHrank = "tribe"
	GetHeatmapZoomXYPngParamsHrankVariety       GetHeatmapZoomXYPngParamsHrank = "variety"
	GetHeatmapZoomXYPngParamsHrankZoosection    GetHeatmapZoomXYPngParamsHrank = "zoosection"
	GetHeatmapZoomXYPngParamsHrankZoosubsection GetHeatmapZoomXYPngParamsHrank = "zoosubsection"
)

// Defines values for GetHeatmapZoomXYPngParamsLrank.
const (
	GetHeatmapZoomXYPngParamsLrankClass         GetHeatmapZoomXYPngParamsLrank = "class"
	GetHeatmapZoomXYPngParamsLrankComplex       GetHeatmapZoomXYPngParamsLrank = "complex"
	GetHeatmapZoomXYPngParamsLrankEpifamily     GetHeatmapZoomXYPngParamsLrank = "epifamily"
	GetHeatmapZoomXYPngParamsLrankFamily        GetHeatmapZoomXYPngParamsLrank = "family"
	GetHeatmapZoomXYPngParamsLrankForm          GetHeatmapZoomXYPngParamsLrank = "form"
	GetHeatmapZoomXYPngParamsLrankGenus         GetHeatmapZoomXYPngParamsLrank = "genus"
	GetHeatmapZoomXYPngParamsLrankGenushybrid   GetHeatmapZoomXYPngParamsLrank = "genushybrid"
	GetHeatmapZoomXYPngParamsLrankHybrid        GetHeatmapZoomXYPngParamsLrank = "hybrid"
	GetHeatmapZoomXYPngParamsLrankInfraclass    GetHeatmapZoomXYPngParamsLrank = "infraclass"
	GetHeatmapZoomXYPngParamsLrankInfrahybrid   GetHeatmapZoomXYPngParamsLrank = "infrahybrid"
	GetHeatmapZoomXYPngParamsLrankInfraorder    GetHeatmapZoomXYPngParamsLrank = "infraorder"
	GetHeatmapZoomXYPngParamsLrankKingdom       GetHeatmapZoomXYPngParamsLrank = "kingdom"
	GetHeatmapZoomXYPngParamsLrankOrder         GetHeatmapZoomXYPngParamsLrank = "order"
	GetHeatmapZoomXYPngParamsLrankParvorder     GetHeatmapZoomXYPngParamsLrank = "parvorder"
	GetHeatmapZoomXYPngParamsLrankPhylum        GetHeatmapZoomXYPngParamsLrank = "phylum"
	GetHeatmapZoomXYPngParamsLrankSection       GetHeatmapZoomXYPngParamsLrank = "section"
	GetHeatmapZoomXYPngParamsLrankSpecies       GetHeatmapZoomXYPngParamsLrank = "species"
	GetHeatmapZoomXYPngParamsLrankSubclass      GetHeatmapZoomXYPngParamsLrank = "subclass"
	GetHeatmapZoomXYPngParamsLrankSubfamily     GetHeatmapZoomXYPngParamsLrank = "subfamily"
	GetHeatmapZoomXYPngParamsLrankSubgenus      GetHeatmapZoomXYPngParamsLrank = "subgenus"
	GetHeatmapZoomXYPngParamsLrankSuborder      GetHeatmapZoomXYPngParamsLrank = "suborder"
	GetHeatmapZoomXYPngParamsLrankSubphylum     GetHeatmapZoomXYPngParamsLrank = "subphylum"
	GetHeatmapZoomXYPngParamsLrankSubsection    GetHeatmapZoomXYPngParamsLrank = "subsection"
	GetHeatmapZoomXYPngParamsLrankSubspecies    GetHeatmapZoomXYPngParamsLrank = "subspecies"
	GetHeatmapZoomXYPngParamsLrankSubterclass   GetHeatmapZoomXYPngParamsLrank = "subterclass"
	GetHeatmapZoomXYPngParamsLrankSubtribe      GetHeatmapZoomXYPngParamsLrank = "subtribe"
	GetHeatmapZoomXYPngParamsLrankSuperclass    GetHeatmapZoomXYPngParamsLrank = "superclass"
	GetHeatmapZoomXYPngParamsLrankSuperfamily   GetHeatmapZoomXYPngParamsLrank = "superfamily"
	GetHeatmapZoomXYPngParamsLrankSuperorder    GetHeatmapZoomXYPngParamsLrank = "superorder"
	GetHeatmapZoomXYPngParamsLrankSupertribe    GetHeatmapZoomXYPngParamsLrank = "supertribe"
	GetHeatmapZoomXYPngParamsLrankTribe         GetHeatmapZoomXYPngParamsLrank = "tribe"
	GetHeatmapZoomXYPngParamsLrankVariety       GetHeatmapZoomXYPngParamsLrank = "variety"
	GetHeatmapZoomXYPngParamsLrankZoosection    GetHeatmapZoomXYPngParamsLrank = "zoosection"
	GetHeatmapZoomXYPngParamsLrankZoosubsection GetHeatmapZoomXYPngParamsLrank = "zoosubsection"
)

// Defines values for GetHeatmapZoomXYPngParamsIconicTaxa.
const (
	GetHeatmapZoomXYPngParamsIconicTaxaActinopterygii GetHeatmapZoomXYPngParamsIconicTaxa = "Actinopterygii"
	GetHeatmapZoomXYPngParamsIconicTaxaAmphibia       GetHeatmapZoomXYPngParamsIconicTaxa = "Amphibia"
	GetHeatmapZoomXYPngParamsIconicTaxaAnimalia       GetHeatmapZoomXYPngParamsIconicTaxa = "Animalia"
	GetHeatmapZoomXYPngParamsIconicTaxaArachnida      GetHeatmapZoomXYPngParamsIconicTaxa = "Arachnida"
	GetHeatmapZoomXYPngParamsIconicTaxaAves           GetHeatmapZoomXYPngParamsIconicTaxa = "Aves"
	GetHeatmapZoomXYPngParamsIconicTaxaChromista      GetHeatmapZoomXYPngParamsIconicTaxa = "Chromista"
	GetHeatmapZoomXYPngParamsIconicTaxaFungi          GetHeatmapZoomXYPngParamsIconicTaxa = "Fungi"
	GetHeatmapZoomXYPngParamsIconicTaxaInsecta        GetHeatmapZoomXYPngParamsIconicTaxa = "Insecta"
	GetHeatmapZoomXYPngParamsIconicTaxaMammalia       GetHeatmapZoomXYPngParamsIconicTaxa = "Mammalia"
	GetHeatmapZoomXYPngParamsIconicTaxaMollusca       GetHeatmapZoomXYPngParamsIconicTaxa = "Mollusca"
	GetHeatmapZoomXYPngParamsIconicTaxaPlantae        GetHeatmapZoomXYPngParamsIconicTaxa = "Plantae"
	GetHeatmapZoomXYPngParamsIconicTaxaProtozoa       GetHeatmapZoomXYPngParamsIconicTaxa = "Protozoa"
	GetHeatmapZoomXYPngParamsIconicTaxaReptilia       GetHeatmapZoomXYPngParamsIconicTaxa = "Reptilia"
	GetHeatmapZoomXYPngParamsIconicTaxaUnknown        GetHeatmapZoomXYPngParamsIconicTaxa = "unknown"
)

// Defines values for GetHeatmapZoomXYPngParamsIdentifications.
const (
	GetHeatmapZoomXYPngParamsIdentificationsMostAgree    GetHeatmapZoomXYPngParamsIdentifications = "most_agree"
	GetHeatmapZoomXYPngParamsIdentificationsMostDisagree GetHeatmapZoomXYPngParamsIdentifications = "most_disagree"
	GetHeatmapZoomXYPngParamsIdentificationsSomeAgree    GetHeatmapZoomXYPngParamsIdentifications = "some_agree"
)

// Defines values for GetHeatmapZoomXYPngParamsSearchOn.
const (
	GetHeatmapZoomXYPngParamsSearchOnDescription        GetHeatmapZoomXYPngParamsSearchOn = "description"
	GetHeatmapZoomXYPngParamsSearchOnNames              GetHeatmapZoomXYPngParamsSearchOn = "names"
	GetHeatmapZoomXYPngParamsSearchOnPlace              GetHeatmapZoomXYPngParamsSearchOn = "place"
	GetHeatmapZoomXYPngParamsSearchOnTags               GetHeatmapZoomXYPngParamsSearchOn = "tags"
	GetHeatmapZoomXYPngParamsSearchOnTaxonPageObsPhotos GetHeatmapZoomXYPngParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetHeatmapZoomXYPngParamsQualityGrade.
const (
	GetHeatmapZoomXYPngParamsQualityGradeCasual   GetHeatmapZoomXYPngParamsQualityGrade = "casual"
	GetHeatmapZoomXYPngParamsQualityGradeNeedsID  GetHeatmapZoomXYPngParamsQualityGrade = "needs_id"
	GetHeatmapZoomXYPngParamsQualityGradeResearch GetHeatmapZoomXYPngParamsQualityGrade = "research"
)

// Defines values for GetHeatmapZoomXYPngParamsOrder.
const (
	GetHeatmapZoomXYPngParamsOrderAsc  GetHeatmapZoomXYPngParamsOrder = "asc"
	GetHeatmapZoomXYPngParamsOrderDesc GetHeatmapZoomXYPngParamsOrder = "desc"
)

// Defines values for GetHeatmapZoomXYPngParamsOrderBy.
const (
	GetHeatmapZoomXYPngParamsOrderByCreatedAt    GetHeatmapZoomXYPngParamsOrderBy = "created_at"
	GetHeatmapZoomXYPngParamsOrderByGeoScore     GetHeatmapZoomXYPngParamsOrderBy = "geo_score"
	GetHeatmapZoomXYPngParamsOrderByID           GetHeatmapZoomXYPngParamsOrderBy = "id"
	GetHeatmapZoomXYPngParamsOrderByObservedOn   GetHeatmapZoomXYPngParamsOrderBy = "observed_on"
	GetHeatmapZoomXYPngParamsOrderByRandom       GetHeatmapZoomXYPngParamsOrderBy = "random"
	GetHeatmapZoomXYPngParamsOrderBySpeciesGuess GetHeatmapZoomXYPngParamsOrderBy = "species_guess"
	GetHeatmapZoomXYPngParamsOrderByUpdatedAt    GetHeatmapZoomXYPngParamsOrderBy = "updated_at"
	GetHeatmapZoomXYPngParamsOrderByVotes        GetHeatmapZoomXYPngParamsOrderBy = "votes"
)

// Defines values for GetIdentificationsIdentifiersParamsQualityGrade.
const (
	GetIdentificationsIdentifiersParamsQualityGradeCasual   GetIdentificationsIdentifiersParamsQualityGrade = "casual"
	GetIdentificationsIdentifiersParamsQualityGradeNeedsID  GetIdentificationsIdentifiersParamsQualityGrade = "needs_id"
	GetIdentificationsIdentifiersParamsQualityGradeResearch GetIdentificationsIdentifiersParamsQualityGrade = "research"
)

// Defines values for GetIdentificationsRecentTaxaParamsQualityGrade.
const (
	GetIdentificationsRecentTaxaParamsQualityGradeCasual   GetIdentificationsRecentTaxaParamsQualityGrade = "casual"
	GetIdentificationsRecentTaxaParamsQualityGradeNeedsID  GetIdentificationsRecentTaxaParamsQualityGrade = "needs_id"
	GetIdentificationsRecentTaxaParamsQualityGradeResearch GetIdentificationsRecentTaxaParamsQualityGrade = "research"
)

// Defines values for GetIdentificationsSimilarSpeciesParamsQualityGrade.
const (
	GetIdentificationsSimilarSpeciesParamsQualityGradeCasual   GetIdentificationsSimilarSpeciesParamsQualityGrade = "casual"
	GetIdentificationsSimilarSpeciesParamsQualityGradeNeedsID  GetIdentificationsSimilarSpeciesParamsQualityGrade = "needs_id"
	GetIdentificationsSimilarSpeciesParamsQualityGradeResearch GetIdentificationsSimilarSpeciesParamsQualityGrade = "research"
)

// Defines values for GetObservationsParamsLicense.
const (
	GetObservationsParamsLicenseCc0      GetObservationsParamsLicense = "cc0"
	GetObservationsParamsLicenseCcBy     GetObservationsParamsLicense = "cc-by"
	GetObservationsParamsLicenseCcByNc   GetObservationsParamsLicense = "cc-by-nc"
	GetObservationsParamsLicenseCcByNcNd GetObservationsParamsLicense = "cc-by-nc-nd"
	GetObservationsParamsLicenseCcByNcSa GetObservationsParamsLicense = "cc-by-nc-sa"
	GetObservationsParamsLicenseCcByNd   GetObservationsParamsLicense = "cc-by-nd"
	GetObservationsParamsLicenseCcBySa   GetObservationsParamsLicense = "cc-by-sa"
)

// Defines values for GetObservationsParamsPhotoLicense.
const (
	GetObservationsParamsPhotoLicenseCc0      GetObservationsParamsPhotoLicense = "cc0"
	GetObservationsParamsPhotoLicenseCcBy     GetObservationsParamsPhotoLicense = "cc-by"
	GetObservationsParamsPhotoLicenseCcByNc   GetObservationsParamsPhotoLicense = "cc-by-nc"
	GetObservationsParamsPhotoLicenseCcByNcNd GetObservationsParamsPhotoLicense = "cc-by-nc-nd"
	GetObservationsParamsPhotoLicenseCcByNcSa GetObservationsParamsPhotoLicense = "cc-by-nc-sa"
	GetObservationsParamsPhotoLicenseCcByNd   GetObservationsParamsPhotoLicense = "cc-by-nd"
	GetObservationsParamsPhotoLicenseCcBySa   GetObservationsParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetObservationsParamsRank.
const (
	GetObservationsParamsRankClass         GetObservationsParamsRank = "class"
	GetObservationsParamsRankComplex       GetObservationsParamsRank = "complex"
	GetObservationsParamsRankEpifamily     GetObservationsParamsRank = "epifamily"
	GetObservationsParamsRankFamily        GetObservationsParamsRank = "family"
	GetObservationsParamsRankForm          GetObservationsParamsRank = "form"
	GetObservationsParamsRankGenus         GetObservationsParamsRank = "genus"
	GetObservationsParamsRankGenushybrid   GetObservationsParamsRank = "genushybrid"
	GetObservationsParamsRankHybrid        GetObservationsParamsRank = "hybrid"
	GetObservationsParamsRankInfraclass    GetObservationsParamsRank = "infraclass"
	GetObservationsParamsRankInfrahybrid   GetObservationsParamsRank = "infrahybrid"
	GetObservationsParamsRankInfraorder    GetObservationsParamsRank = "infraorder"
	GetObservationsParamsRankKingdom       GetObservationsParamsRank = "kingdom"
	GetObservationsParamsRankOrder         GetObservationsParamsRank = "order"
	GetObservationsParamsRankParvorder     GetObservationsParamsRank = "parvorder"
	GetObservationsParamsRankPhylum        GetObservationsParamsRank = "phylum"
	GetObservationsParamsRankSection       GetObservationsParamsRank = "section"
	GetObservationsParamsRankSpecies       GetObservationsParamsRank = "species"
	GetObservationsParamsRankSubclass      GetObservationsParamsRank = "subclass"
	GetObservationsParamsRankSubfamily     GetObservationsParamsRank = "subfamily"
	GetObservationsParamsRankSubgenus      GetObservationsParamsRank = "subgenus"
	GetObservationsParamsRankSuborder      GetObservationsParamsRank = "suborder"
	GetObservationsParamsRankSubphylum     GetObservationsParamsRank = "subphylum"
	GetObservationsParamsRankSubsection    GetObservationsParamsRank = "subsection"
	GetObservationsParamsRankSubspecies    GetObservationsParamsRank = "subspecies"
	GetObservationsParamsRankSubterclass   GetObservationsParamsRank = "subterclass"
	GetObservationsParamsRankSubtribe      GetObservationsParamsRank = "subtribe"
	GetObservationsParamsRankSuperclass    GetObservationsParamsRank = "superclass"
	GetObservationsParamsRankSuperfamily   GetObservationsParamsRank = "superfamily"
	GetObservationsParamsRankSuperorder    GetObservationsParamsRank = "superorder"
	GetObservationsParamsRankSupertribe    GetObservationsParamsRank = "supertribe"
	GetObservationsParamsRankTribe         GetObservationsParamsRank = "tribe"
	GetObservationsParamsRankVariety       GetObservationsParamsRank = "variety"
	GetObservationsParamsRankZoosection    GetObservationsParamsRank = "zoosection"
	GetObservationsParamsRankZoosubsection GetObservationsParamsRank = "zoosubsection"
)

// Defines values for GetObservationsParamsSoundLicense.
const (
	GetObservationsParamsSoundLicenseCc0      GetObservationsParamsSoundLicense = "cc0"
	GetObservationsParamsSoundLicenseCcBy     GetObservationsParamsSoundLicense = "cc-by"
	GetObservationsParamsSoundLicenseCcByNc   GetObservationsParamsSoundLicense = "cc-by-nc"
	GetObservationsParamsSoundLicenseCcByNcNd GetObservationsParamsSoundLicense = "cc-by-nc-nd"
	GetObservationsParamsSoundLicenseCcByNcSa GetObservationsParamsSoundLicense = "cc-by-nc-sa"
	GetObservationsParamsSoundLicenseCcByNd   GetObservationsParamsSoundLicense = "cc-by-nd"
	GetObservationsParamsSoundLicenseCcBySa   GetObservationsParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetObservationsParamsCsi.
const (
	GetObservationsParamsCsiCR GetObservationsParamsCsi = "CR"
	GetObservationsParamsCsiEN GetObservationsParamsCsi = "EN"
	GetObservationsParamsCsiEW GetObservationsParamsCsi = "EW"
	GetObservationsParamsCsiEX GetObservationsParamsCsi = "EX"
	GetObservationsParamsCsiLC GetObservationsParamsCsi = "LC"
	GetObservationsParamsCsiNT GetObservationsParamsCsi = "NT"
	GetObservationsParamsCsiVU GetObservationsParamsCsi = "VU"
)

// Defines values for GetObservationsParamsGeoprivacy.
const (
	GetObservationsParamsGeoprivacyObscured        GetObservationsParamsGeoprivacy = "obscured"
	GetObservationsParamsGeoprivacyObscuredPrivate GetObservationsParamsGeoprivacy = "obscured_private"
	GetObservationsParamsGeoprivacyOpen            GetObservationsParamsGeoprivacy = "open"
	GetObservationsParamsGeoprivacyPrivate         GetObservationsParamsGeoprivacy = "private"
)

// Defines values for GetObservationsParamsTaxonGeoprivacy.
const (
	GetObservationsParamsTaxonGeoprivacyObscured        GetObservationsParamsTaxonGeoprivacy = "obscured"
	GetObservationsParamsTaxonGeoprivacyObscuredPrivate GetObservationsParamsTaxonGeoprivacy = "obscured_private"
	GetObservationsParamsTaxonGeoprivacyOpen            GetObservationsParamsTaxonGeoprivacy = "open"
	GetObservationsParamsTaxonGeoprivacyPrivate         GetObservationsParamsTaxonGeoprivacy = "private"
)

// Defines values for GetObservationsParamsObscuration.
const (
	GetObservationsParamsObscurationNone     GetObservationsParamsObscuration = "none"
	GetObservationsParamsObscurationObscured GetObservationsParamsObscuration = "obscured"
	GetObservationsParamsObscurationPrivate  GetObservationsParamsObscuration = "private"
)

// Defines values for GetObservationsParamsHrank.
const (
	GetObservationsParamsHrankClass         GetObservationsParamsHrank = "class"
	GetObservationsParamsHrankComplex       GetObservationsParamsHrank = "complex"
	GetObservationsParamsHrankEpifamily     GetObservationsParamsHrank = "epifamily"
	GetObservationsParamsHrankFamily        GetObservationsParamsHrank = "family"
	GetObservationsParamsHrankForm          GetObservationsParamsHrank = "form"
	GetObservationsParamsHrankGenus         GetObservationsParamsHrank = "genus"
	GetObservationsParamsHrankGenushybrid   GetObservationsParamsHrank = "genushybrid"
	GetObservationsParamsHrankHybrid        GetObservationsParamsHrank = "hybrid"
	GetObservationsParamsHrankInfraclass    GetObservationsParamsHrank = "infraclass"
	GetObservationsParamsHrankInfrahybrid   GetObservationsParamsHrank = "infrahybrid"
	GetObservationsParamsHrankInfraorder    GetObservationsParamsHrank = "infraorder"
	GetObservationsParamsHrankKingdom       GetObservationsParamsHrank = "kingdom"
	GetObservationsParamsHrankOrder         GetObservationsParamsHrank = "order"
	GetObservationsParamsHrankParvorder     GetObservationsParamsHrank = "parvorder"
	GetObservationsParamsHrankPhylum        GetObservationsParamsHrank = "phylum"
	GetObservationsParamsHrankSection       GetObservationsParamsHrank = "section"
	GetObservationsParamsHrankSpecies       GetObservationsParamsHrank = "species"
	GetObservationsParamsHrankSubclass      GetObservationsParamsHrank = "subclass"
	GetObservationsParamsHrankSubfamily     GetObservationsParamsHrank = "subfamily"
	GetObservationsParamsHrankSubgenus      GetObservationsParamsHrank = "subgenus"
	GetObservationsParamsHrankSuborder      GetObservationsParamsHrank = "suborder"
	GetObservationsParamsHrankSubphylum     GetObservationsParamsHrank = "subphylum"
	GetObservationsParamsHrankSubsection    GetObservationsParamsHrank = "subsection"
	GetObservationsParamsHrankSubspecies    GetObservationsParamsHrank = "subspecies"
	GetObservationsParamsHrankSubterclass   GetObservationsParamsHrank = "subterclass"
	GetObservationsParamsHrankSubtribe      GetObservationsParamsHrank = "subtribe"
	GetObservationsParamsHrankSuperclass    GetObservationsParamsHrank = "superclass"
	GetObservationsParamsHrankSuperfamily   GetObservationsParamsHrank = "superfamily"
	GetObservationsParamsHrankSuperorder    GetObservationsParamsHrank = "superorder"
	GetObservationsParamsHrankSupertribe    GetObservationsParamsHrank = "supertribe"
	GetObservationsParamsHrankTribe         GetObservationsParamsHrank = "tribe"
	GetObservationsParamsHrankVariety       GetObservationsParamsHrank = "variety"
	GetObservationsParamsHrankZoosection    GetObservationsParamsHrank = "zoosection"
	GetObservationsParamsHrankZoosubsection GetObservationsParamsHrank = "zoosubsection"
)

// Defines values for GetObservationsParamsLrank.
const (
	GetObservationsParamsLrankClass         GetObservationsParamsLrank = "class"
	GetObservationsParamsLrankComplex       GetObservationsParamsLrank = "complex"
	GetObservationsParamsLrankEpifamily     GetObservationsParamsLrank = "epifamily"
	GetObservationsParamsLrankFamily        GetObservationsParamsLrank = "family"
	GetObservationsParamsLrankForm          GetObservationsParamsLrank = "form"
	GetObservationsParamsLrankGenus         GetObservationsParamsLrank = "genus"
	GetObservationsParamsLrankGenushybrid   GetObservationsParamsLrank = "genushybrid"
	GetObservationsParamsLrankHybrid        GetObservationsParamsLrank = "hybrid"
	GetObservationsParamsLrankInfraclass    GetObservationsParamsLrank = "infraclass"
	GetObservationsParamsLrankInfrahybrid   GetObservationsParamsLrank = "infrahybrid"
	GetObservationsParamsLrankInfraorder    GetObservationsParamsLrank = "infraorder"
	GetObservationsParamsLrankKingdom       GetObservationsParamsLrank = "kingdom"
	GetObservationsParamsLrankOrder         GetObservationsParamsLrank = "order"
	GetObservationsParamsLrankParvorder     GetObservationsParamsLrank = "parvorder"
	GetObservationsParamsLrankPhylum        GetObservationsParamsLrank = "phylum"
	GetObservationsParamsLrankSection       GetObservationsParamsLrank = "section"
	GetObservationsParamsLrankSpecies       GetObservationsParamsLrank = "species"
	GetObservationsParamsLrankSubclass      GetObservationsParamsLrank = "subclass"
	GetObservationsParamsLrankSubfamily     GetObservationsParamsLrank = "subfamily"
	GetObservationsParamsLrankSubgenus      GetObservationsParamsLrank = "subgenus"
	GetObservationsParamsLrankSuborder      GetObservationsParamsLrank = "suborder"
	GetObservationsParamsLrankSubphylum     GetObservationsParamsLrank = "subphylum"
	GetObservationsParamsLrankSubsection    GetObservationsParamsLrank = "subsection"
	GetObservationsParamsLrankSubspecies    GetObservationsParamsLrank = "subspecies"
	GetObservationsParamsLrankSubterclass   GetObservationsParamsLrank = "subterclass"
	GetObservationsParamsLrankSubtribe      GetObservationsParamsLrank = "subtribe"
	GetObservationsParamsLrankSuperclass    GetObservationsParamsLrank = "superclass"
	GetObservationsParamsLrankSuperfamily   GetObservationsParamsLrank = "superfamily"
	GetObservationsParamsLrankSuperorder    GetObservationsParamsLrank = "superorder"
	GetObservationsParamsLrankSupertribe    GetObservationsParamsLrank = "supertribe"
	GetObservationsParamsLrankTribe         GetObservationsParamsLrank = "tribe"
	GetObservationsParamsLrankVariety       GetObservationsParamsLrank = "variety"
	GetObservationsParamsLrankZoosection    GetObservationsParamsLrank = "zoosection"
	GetObservationsParamsLrankZoosubsection GetObservationsParamsLrank = "zoosubsection"
)

// Defines values for GetObservationsParamsIconicTaxa.
const (
	GetObservationsParamsIconicTaxaActinopterygii GetObservationsParamsIconicTaxa = "Actinopterygii"
	GetObservationsParamsIconicTaxaAmphibia       GetObservationsParamsIconicTaxa = "Amphibia"
	GetObservationsParamsIconicTaxaAnimalia       GetObservationsParamsIconicTaxa = "Animalia"
	GetObservationsParamsIconicTaxaArachnida      GetObservationsParamsIconicTaxa = "Arachnida"
	GetObservationsParamsIconicTaxaAves           GetObservationsParamsIconicTaxa = "Aves"
	GetObservationsParamsIconicTaxaChromista      GetObservationsParamsIconicTaxa = "Chromista"
	GetObservationsParamsIconicTaxaFungi          GetObservationsParamsIconicTaxa = "Fungi"
	GetObservationsParamsIconicTaxaInsecta        GetObservationsParamsIconicTaxa = "Insecta"
	GetObservationsParamsIconicTaxaMammalia       GetObservationsParamsIconicTaxa = "Mammalia"
	GetObservationsParamsIconicTaxaMollusca       GetObservationsParamsIconicTaxa = "Mollusca"
	GetObservationsParamsIconicTaxaPlantae        GetObservationsParamsIconicTaxa = "Plantae"
	GetObservationsParamsIconicTaxaProtozoa       GetObservationsParamsIconicTaxa = "Protozoa"
	GetObservationsParamsIconicTaxaReptilia       GetObservationsParamsIconicTaxa = "Reptilia"
	GetObservationsParamsIconicTaxaUnknown        GetObservationsParamsIconicTaxa = "unknown"
)

// Defines values for GetObservationsParamsIdentifications.
const (
	GetObservationsParamsIdentificationsMostAgree    GetObservationsParamsIdentifications = "most_agree"
	GetObservationsParamsIdentificationsMostDisagree GetObservationsParamsIdentifications = "most_disagree"
	GetObservationsParamsIdentificationsSomeAgree    GetObservationsParamsIdentifications = "some_agree"
)

// Defines values for GetObservationsParamsSearchOn.
const (
	GetObservationsParamsSearchOnDescription        GetObservationsParamsSearchOn = "description"
	GetObservationsParamsSearchOnNames              GetObservationsParamsSearchOn = "names"
	GetObservationsParamsSearchOnPlace              GetObservationsParamsSearchOn = "place"
	GetObservationsParamsSearchOnTags               GetObservationsParamsSearchOn = "tags"
	GetObservationsParamsSearchOnTaxonPageObsPhotos GetObservationsParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetObservationsParamsQualityGrade.
const (
	GetObservationsParamsQualityGradeCasual   GetObservationsParamsQualityGrade = "casual"
	GetObservationsParamsQualityGradeNeedsID  GetObservationsParamsQualityGrade = "needs_id"
	GetObservationsParamsQualityGradeResearch GetObservationsParamsQualityGrade = "research"
)

// Defines values for GetObservationsParamsOrder.
const (
	GetObservationsParamsOrderAsc  GetObservationsParamsOrder = "asc"
	GetObservationsParamsOrderDesc GetObservationsParamsOrder = "desc"
)

// Defines values for GetObservationsParamsOrderBy.
const (
	GetObservationsParamsOrderByCreatedAt    GetObservationsParamsOrderBy = "created_at"
	GetObservationsParamsOrderByGeoScore     GetObservationsParamsOrderBy = "geo_score"
	GetObservationsParamsOrderByID           GetObservationsParamsOrderBy = "id"
	GetObservationsParamsOrderByObservedOn   GetObservationsParamsOrderBy = "observed_on"
	GetObservationsParamsOrderByRandom       GetObservationsParamsOrderBy = "random"
	GetObservationsParamsOrderBySpeciesGuess GetObservationsParamsOrderBy = "species_guess"
	GetObservationsParamsOrderByUpdatedAt    GetObservationsParamsOrderBy = "updated_at"
	GetObservationsParamsOrderByVotes        GetObservationsParamsOrderBy = "votes"
)

// Defines values for GetObservationsHistogramParamsLicense.
const (
	GetObservationsHistogramParamsLicenseCc0      GetObservationsHistogramParamsLicense = "cc0"
	GetObservationsHistogramParamsLicenseCcBy     GetObservationsHistogramParamsLicense = "cc-by"
	GetObservationsHistogramParamsLicenseCcByNc   GetObservationsHistogramParamsLicense = "cc-by-nc"
	GetObservationsHistogramParamsLicenseCcByNcNd GetObservationsHistogramParamsLicense = "cc-by-nc-nd"
	GetObservationsHistogramParamsLicenseCcByNcSa GetObservationsHistogramParamsLicense = "cc-by-nc-sa"
	GetObservationsHistogramParamsLicenseCcByNd   GetObservationsHistogramParamsLicense = "cc-by-nd"
	GetObservationsHistogramParamsLicenseCcBySa   GetObservationsHistogramParamsLicense = "cc-by-sa"
)

// Defines values for GetObservationsHistogramParamsPhotoLicense.
const (
	GetObservationsHistogramParamsPhotoLicenseCc0      GetObservationsHistogramParamsPhotoLicense = "cc0"
	GetObservationsHistogramParamsPhotoLicenseCcBy     GetObservationsHistogramParamsPhotoLicense = "cc-by"
	GetObservationsHistogramParamsPhotoLicenseCcByNc   GetObservationsHistogramParamsPhotoLicense = "cc-by-nc"
	GetObservationsHistogramParamsPhotoLicenseCcByNcNd GetObservationsHistogramParamsPhotoLicense = "cc-by-nc-nd"
	GetObservationsHistogramParamsPhotoLicenseCcByNcSa GetObservationsHistogramParamsPhotoLicense = "cc-by-nc-sa"
	GetObservationsHistogramParamsPhotoLicenseCcByNd   GetObservationsHistogramParamsPhotoLicense = "cc-by-nd"
	GetObservationsHistogramParamsPhotoLicenseCcBySa   GetObservationsHistogramParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetObservationsHistogramParamsRank.
const (
	GetObservationsHistogramParamsRankClass         GetObservationsHistogramParamsRank = "class"
	GetObservationsHistogramParamsRankComplex       GetObservationsHistogramParamsRank = "complex"
	GetObservationsHistogramParamsRankEpifamily     GetObservationsHistogramParamsRank = "epifamily"
	GetObservationsHistogramParamsRankFamily        GetObservationsHistogramParamsRank = "family"
	GetObservationsHistogramParamsRankForm          GetObservationsHistogramParamsRank = "form"
	GetObservationsHistogramParamsRankGenus         GetObservationsHistogramParamsRank = "genus"
	GetObservationsHistogramParamsRankGenushybrid   GetObservationsHistogramParamsRank = "genushybrid"
	GetObservationsHistogramParamsRankHybrid        GetObservationsHistogramParamsRank = "hybrid"
	GetObservationsHistogramParamsRankInfraclass    GetObservationsHistogramParamsRank = "infraclass"
	GetObservationsHistogramParamsRankInfrahybrid   GetObservationsHistogramParamsRank = "infrahybrid"
	GetObservationsHistogramParamsRankInfraorder    GetObservationsHistogramParamsRank = "infraorder"
	GetObservationsHistogramParamsRankKingdom       GetObservationsHistogramParamsRank = "kingdom"
	GetObservationsHistogramParamsRankOrder         GetObservationsHistogramParamsRank = "order"
	GetObservationsHistogramParamsRankParvorder     GetObservationsHistogramParamsRank = "parvorder"
	GetObservationsHistogramParamsRankPhylum        GetObservationsHistogramParamsRank = "phylum"
	GetObservationsHistogramParamsRankSection       GetObservationsHistogramParamsRank = "section"
	GetObservationsHistogramParamsRankSpecies       GetObservationsHistogramParamsRank = "species"
	GetObservationsHistogramParamsRankSubclass      GetObservationsHistogramParamsRank = "subclass"
	GetObservationsHistogramParamsRankSubfamily     GetObservationsHistogramParamsRank = "subfamily"
	GetObservationsHistogramParamsRankSubgenus      GetObservationsHistogramParamsRank = "subgenus"
	GetObservationsHistogramParamsRankSuborder      GetObservationsHistogramParamsRank = "suborder"
	GetObservationsHistogramParamsRankSubphylum     GetObservationsHistogramParamsRank = "subphylum"
	GetObservationsHistogramParamsRankSubsection    GetObservationsHistogramParamsRank = "subsection"
	GetObservationsHistogramParamsRankSubspecies    GetObservationsHistogramParamsRank = "subspecies"
	GetObservationsHistogramParamsRankSubterclass   GetObservationsHistogramParamsRank = "subterclass"
	GetObservationsHistogramParamsRankSubtribe      GetObservationsHistogramParamsRank = "subtribe"
	GetObservationsHistogramParamsRankSuperclass    GetObservationsHistogramParamsRank = "superclass"
	GetObservationsHistogramParamsRankSuperfamily   GetObservationsHistogramParamsRank = "superfamily"
	GetObservationsHistogramParamsRankSuperorder    GetObservationsHistogramParamsRank = "superorder"
	GetObservationsHistogramParamsRankSupertribe    GetObservationsHistogramParamsRank = "supertribe"
	GetObservationsHistogramParamsRankTribe         GetObservationsHistogramParamsRank = "tribe"
	GetObservationsHistogramParamsRankVariety       GetObservationsHistogramParamsRank = "variety"
	GetObservationsHistogramParamsRankZoosection    GetObservationsHistogramParamsRank = "zoosection"
	GetObservationsHistogramParamsRankZoosubsection GetObservationsHistogramParamsRank = "zoosubsection"
)

// Defines values for GetObservationsHistogramParamsSoundLicense.
const (
	GetObservationsHistogramParamsSoundLicenseCc0      GetObservationsHistogramParamsSoundLicense = "cc0"
	GetObservationsHistogramParamsSoundLicenseCcBy     GetObservationsHistogramParamsSoundLicense = "cc-by"
	GetObservationsHistogramParamsSoundLicenseCcByNc   GetObservationsHistogramParamsSoundLicense = "cc-by-nc"
	GetObservationsHistogramParamsSoundLicenseCcByNcNd GetObservationsHistogramParamsSoundLicense = "cc-by-nc-nd"
	GetObservationsHistogramParamsSoundLicenseCcByNcSa GetObservationsHistogramParamsSoundLicense = "cc-by-nc-sa"
	GetObservationsHistogramParamsSoundLicenseCcByNd   GetObservationsHistogramParamsSoundLicense = "cc-by-nd"
	GetObservationsHistogramParamsSoundLicenseCcBySa   GetObservationsHistogramParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetObservationsHistogramParamsCsi.
const (
	GetObservationsHistogramParamsCsiCR GetObservationsHistogramParamsCsi = "CR"
	GetObservationsHistogramParamsCsiEN GetObservationsHistogramParamsCsi = "EN"
	GetObservationsHistogramParamsCsiEW GetObservationsHistogramParamsCsi = "EW"
	GetObservationsHistogramParamsCsiEX GetObservationsHistogramParamsCsi = "EX"
	GetObservationsHistogramParamsCsiLC GetObservationsHistogramParamsCsi = "LC"
	GetObservationsHistogramParamsCsiNT GetObservationsHistogramParamsCsi = "NT"
	GetObservationsHistogramParamsCsiVU GetObservationsHistogramParamsCsi = "VU"
)

// Defines values for GetObservationsHistogramParamsGeoprivacy.
const (
	GetObservationsHistogramParamsGeoprivacyObscured        GetObservationsHistogramParamsGeoprivacy = "obscured"
	GetObservationsHistogramParamsGeoprivacyObscuredPrivate GetObservationsHistogramParamsGeoprivacy = "obscured_private"
	GetObservationsHistogramParamsGeoprivacyOpen            GetObservationsHistogramParamsGeoprivacy = "open"
	GetObservationsHistogramParamsGeoprivacyPrivate         GetObservationsHistogramParamsGeoprivacy = "private"
)

// Defines values for GetObservationsHistogramParamsTaxonGeoprivacy.
const (
	GetObservationsHistogramParamsTaxonGeoprivacyObscured        GetObservationsHistogramParamsTaxonGeoprivacy = "obscured"
	GetObservationsHistogramParamsTaxonGeoprivacyObscuredPrivate GetObservationsHistogramParamsTaxonGeoprivacy = "obscured_private"
	GetObservationsHistogramParamsTaxonGeoprivacyOpen            GetObservationsHistogramParamsTaxonGeoprivacy = "open"
	GetObservationsHistogramParamsTaxonGeoprivacyPrivate         GetObservationsHistogramParamsTaxonGeoprivacy = "private"
)

// Defines values for GetObservationsHistogramParamsObscuration.
const (
	GetObservationsHistogramParamsObscurationNone     GetObservationsHistogramParamsObscuration = "none"
	GetObservationsHistogramParamsObscurationObscured GetObservationsHistogramParamsObscuration = "obscured"
	GetObservationsHistogramParamsObscurationPrivate  GetObservationsHistogramParamsObscuration = "private"
)

// Defines values for GetObservationsHistogramParamsHrank.
const (
	GetObservationsHistogramParamsHrankClass         GetObservationsHistogramParamsHrank = "class"
	GetObservationsHistogramParamsHrankComplex       GetObservationsHistogramParamsHrank = "complex"
	GetObservationsHistogramParamsHrankEpifamily     GetObservationsHistogramParamsHrank = "epifamily"
	GetObservationsHistogramParamsHrankFamily        GetObservationsHistogramParamsHrank = "family"
	GetObservationsHistogramParamsHrankForm          GetObservationsHistogramParamsHrank = "form"
	GetObservationsHistogramParamsHrankGenus         GetObservationsHistogramParamsHrank = "genus"
	GetObservationsHistogramParamsHrankGenushybrid   GetObservationsHistogramParamsHrank = "genushybrid"
	GetObservationsHistogramParamsHrankHybrid        GetObservationsHistogramParamsHrank = "hybrid"
	GetObservationsHistogramParamsHrankInfraclass    GetObservationsHistogramParamsHrank = "infraclass"
	GetObservationsHistogramParamsHrankInfrahybrid   GetObservationsHistogramParamsHrank = "infrahybrid"
	GetObservationsHistogramParamsHrankInfraorder    GetObservationsHistogramParamsHrank = "infraorder"
	GetObservationsHistogramParamsHrankKingdom       GetObservationsHistogramParamsHrank = "kingdom"
	GetObservationsHistogramParamsHrankOrder         GetObservationsHistogramParamsHrank = "order"
	GetObservationsHistogramParamsHrankParvorder     GetObservationsHistogramParamsHrank = "parvorder"
	GetObservationsHistogramParamsHrankPhylum        GetObservationsHistogramParamsHrank = "phylum"
	GetObservationsHistogramParamsHrankSection       GetObservationsHistogramParamsHrank = "section"
	GetObservationsHistogramParamsHrankSpecies       GetObservationsHistogramParamsHrank = "species"
	GetObservationsHistogramParamsHrankSubclass      GetObservationsHistogramParamsHrank = "subclass"
	GetObservationsHistogramParamsHrankSubfamily     GetObservationsHistogramParamsHrank = "subfamily"
	GetObservationsHistogramParamsHrankSubgenus      GetObservationsHistogramParamsHrank = "subgenus"
	GetObservationsHistogramParamsHrankSuborder      GetObservationsHistogramParamsHrank = "suborder"
	GetObservationsHistogramParamsHrankSubphylum     GetObservationsHistogramParamsHrank = "subphylum"
	GetObservationsHistogramParamsHrankSubsection    GetObservationsHistogramParamsHrank = "subsection"
	GetObservationsHistogramParamsHrankSubspecies    GetObservationsHistogramParamsHrank = "subspecies"
	GetObservationsHistogramParamsHrankSubterclass   GetObservationsHistogramParamsHrank = "subterclass"
	GetObservationsHistogramParamsHrankSubtribe      GetObservationsHistogramParamsHrank = "subtribe"
	GetObservationsHistogramParamsHrankSuperclass    GetObservationsHistogramParamsHrank = "superclass"
	GetObservationsHistogramParamsHrankSuperfamily   GetObservationsHistogramParamsHrank = "superfamily"
	GetObservationsHistogramParamsHrankSuperorder    GetObservationsHistogramParamsHrank = "superorder"
	GetObservationsHistogramParamsHrankSupertribe    GetObservationsHistogramParamsHrank = "supertribe"
	GetObservationsHistogramParamsHrankTribe         GetObservationsHistogramParamsHrank = "tribe"
	GetObservationsHistogramParamsHrankVariety       GetObservationsHistogramParamsHrank = "variety"
	GetObservationsHistogramParamsHrankZoosection    GetObservationsHistogramParamsHrank = "zoosection"
	GetObservationsHistogramParamsHrankZoosubsection GetObservationsHistogramParamsHrank = "zoosubsection"
)

// Defines values for GetObservationsHistogramParamsLrank.
const (
	GetObservationsHistogramParamsLrankClass         GetObservationsHistogramParamsLrank = "class"
	GetObservationsHistogramParamsLrankComplex       GetObservationsHistogramParamsLrank = "complex"
	GetObservationsHistogramParamsLrankEpifamily     GetObservationsHistogramParamsLrank = "epifamily"
	GetObservationsHistogramParamsLrankFamily        GetObservationsHistogramParamsLrank = "family"
	GetObservationsHistogramParamsLrankForm          GetObservationsHistogramParamsLrank = "form"
	GetObservationsHistogramParamsLrankGenus         GetObservationsHistogramParamsLrank = "genus"
	GetObservationsHistogramParamsLrankGenushybrid   GetObservationsHistogramParamsLrank = "genushybrid"
	GetObservationsHistogramParamsLrankHybrid        GetObservationsHistogramParamsLrank = "hybrid"
	GetObservationsHistogramParamsLrankInfraclass    GetObservationsHistogramParamsLrank = "infraclass"
	GetObservationsHistogramParamsLrankInfrahybrid   GetObservationsHistogramParamsLrank = "infrahybrid"
	GetObservationsHistogramParamsLrankInfraorder    GetObservationsHistogramParamsLrank = "infraorder"
	GetObservationsHistogramParamsLrankKingdom       GetObservationsHistogramParamsLrank = "kingdom"
	GetObservationsHistogramParamsLrankOrder         GetObservationsHistogramParamsLrank = "order"
	GetObservationsHistogramParamsLrankParvorder     GetObservationsHistogramParamsLrank = "parvorder"
	GetObservationsHistogramParamsLrankPhylum        GetObservationsHistogramParamsLrank = "phylum"
	GetObservationsHistogramParamsLrankSection       GetObservationsHistogramParamsLrank = "section"
	GetObservationsHistogramParamsLrankSpecies       GetObservationsHistogramParamsLrank = "species"
	GetObservationsHistogramParamsLrankSubclass      GetObservationsHistogramParamsLrank = "subclass"
	GetObservationsHistogramParamsLrankSubfamily     GetObservationsHistogramParamsLrank = "subfamily"
	GetObservationsHistogramParamsLrankSubgenus      GetObservationsHistogramParamsLrank = "subgenus"
	GetObservationsHistogramParamsLrankSuborder      GetObservationsHistogramParamsLrank = "suborder"
	GetObservationsHistogramParamsLrankSubphylum     GetObservationsHistogramParamsLrank = "subphylum"
	GetObservationsHistogramParamsLrankSubsection    GetObservationsHistogramParamsLrank = "subsection"
	GetObservationsHistogramParamsLrankSubspecies    GetObservationsHistogramParamsLrank = "subspecies"
	GetObservationsHistogramParamsLrankSubterclass   GetObservationsHistogramParamsLrank = "subterclass"
	GetObservationsHistogramParamsLrankSubtribe      GetObservationsHistogramParamsLrank = "subtribe"
	GetObservationsHistogramParamsLrankSuperclass    GetObservationsHistogramParamsLrank = "superclass"
	GetObservationsHistogramParamsLrankSuperfamily   GetObservationsHistogramParamsLrank = "superfamily"
	GetObservationsHistogramParamsLrankSuperorder    GetObservationsHistogramParamsLrank = "superorder"
	GetObservationsHistogramParamsLrankSupertribe    GetObservationsHistogramParamsLrank = "supertribe"
	GetObservationsHistogramParamsLrankTribe         GetObservationsHistogramParamsLrank = "tribe"
	GetObservationsHistogramParamsLrankVariety       GetObservationsHistogramParamsLrank = "variety"
	GetObservationsHistogramParamsLrankZoosection    GetObservationsHistogramParamsLrank = "zoosection"
	GetObservationsHistogramParamsLrankZoosubsection GetObservationsHistogramParamsLrank = "zoosubsection"
)

// Defines values for GetObservationsHistogramParamsIconicTaxa.
const (
	GetObservationsHistogramParamsIconicTaxaActinopterygii GetObservationsHistogramParamsIconicTaxa = "Actinopterygii"
	GetObservationsHistogramParamsIconicTaxaAmphibia       GetObservationsHistogramParamsIconicTaxa = "Amphibia"
	GetObservationsHistogramParamsIconicTaxaAnimalia       GetObservationsHistogramParamsIconicTaxa = "Animalia"
	GetObservationsHistogramParamsIconicTaxaArachnida      GetObservationsHistogramParamsIconicTaxa = "Arachnida"
	GetObservationsHistogramParamsIconicTaxaAves           GetObservationsHistogramParamsIconicTaxa = "Aves"
	GetObservationsHistogramParamsIconicTaxaChromista      GetObservationsHistogramParamsIconicTaxa = "Chromista"
	GetObservationsHistogramParamsIconicTaxaFungi          GetObservationsHistogramParamsIconicTaxa = "Fungi"
	GetObservationsHistogramParamsIconicTaxaInsecta        GetObservationsHistogramParamsIconicTaxa = "Insecta"
	GetObservationsHistogramParamsIconicTaxaMammalia       GetObservationsHistogramParamsIconicTaxa = "Mammalia"
	GetObservationsHistogramParamsIconicTaxaMollusca       GetObservationsHistogramParamsIconicTaxa = "Mollusca"
	GetObservationsHistogramParamsIconicTaxaPlantae        GetObservationsHistogramParamsIconicTaxa = "Plantae"
	GetObservationsHistogramParamsIconicTaxaProtozoa       GetObservationsHistogramParamsIconicTaxa = "Protozoa"
	GetObservationsHistogramParamsIconicTaxaReptilia       GetObservationsHistogramParamsIconicTaxa = "Reptilia"
	GetObservationsHistogramParamsIconicTaxaUnknown        GetObservationsHistogramParamsIconicTaxa = "unknown"
)

// Defines values for GetObservationsHistogramParamsIdentifications.
const (
	GetObservationsHistogramParamsIdentificationsMostAgree    GetObservationsHistogramParamsIdentifications = "most_agree"
	GetObservationsHistogramParamsIdentificationsMostDisagree GetObservationsHistogramParamsIdentifications = "most_disagree"
	GetObservationsHistogramParamsIdentificationsSomeAgree    GetObservationsHistogramParamsIdentifications = "some_agree"
)

// Defines values for GetObservationsHistogramParamsSearchOn.
const (
	GetObservationsHistogramParamsSearchOnDescription        GetObservationsHistogramParamsSearchOn = "description"
	GetObservationsHistogramParamsSearchOnNames              GetObservationsHistogramParamsSearchOn = "names"
	GetObservationsHistogramParamsSearchOnPlace              GetObservationsHistogramParamsSearchOn = "place"
	GetObservationsHistogramParamsSearchOnTags               GetObservationsHistogramParamsSearchOn = "tags"
	GetObservationsHistogramParamsSearchOnTaxonPageObsPhotos GetObservationsHistogramParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetObservationsHistogramParamsQualityGrade.
const (
	GetObservationsHistogramParamsQualityGradeCasual   GetObservationsHistogramParamsQualityGrade = "casual"
	GetObservationsHistogramParamsQualityGradeNeedsID  GetObservationsHistogramParamsQualityGrade = "needs_id"
	GetObservationsHistogramParamsQualityGradeResearch GetObservationsHistogramParamsQualityGrade = "research"
)

// Defines values for GetObservationsHistogramParamsOrder.
const (
	GetObservationsHistogramParamsOrderAsc  GetObservationsHistogramParamsOrder = "asc"
	GetObservationsHistogramParamsOrderDesc GetObservationsHistogramParamsOrder = "desc"
)

// Defines values for GetObservationsHistogramParamsOrderBy.
const (
	GetObservationsHistogramParamsOrderByCreatedAt    GetObservationsHistogramParamsOrderBy = "created_at"
	GetObservationsHistogramParamsOrderByGeoScore     GetObservationsHistogramParamsOrderBy = "geo_score"
	GetObservationsHistogramParamsOrderByID           GetObservationsHistogramParamsOrderBy = "id"
	GetObservationsHistogramParamsOrderByObservedOn   GetObservationsHistogramParamsOrderBy = "observed_on"
	GetObservationsHistogramParamsOrderByRandom       GetObservationsHistogramParamsOrderBy = "random"
	GetObservationsHistogramParamsOrderBySpeciesGuess GetObservationsHistogramParamsOrderBy = "species_guess"
	GetObservationsHistogramParamsOrderByUpdatedAt    GetObservationsHistogramParamsOrderBy = "updated_at"
	GetObservationsHistogramParamsOrderByVotes        GetObservationsHistogramParamsOrderBy = "votes"
)

// Defines values for GetObservationsHistogramParamsDateField.
const (
	GetObservationsHistogramParamsDateFieldCreated  GetObservationsHistogramParamsDateField = "created"
	GetObservationsHistogramParamsDateFieldObserved GetObservationsHistogramParamsDateField = "observed"
)

// Defines values for GetObservationsHistogramParamsInterval.
const (
	GetObservationsHistogramParamsIntervalDay         GetObservationsHistogramParamsInterval = "day"
	GetObservationsHistogramParamsIntervalHour        GetObservationsHistogramParamsInterval = "hour"
	GetObservationsHistogramParamsIntervalMonth       GetObservationsHistogramParamsInterval = "month"
	GetObservationsHistogramParamsIntervalMonthOfYear GetObservationsHistogramParamsInterval = "month_of_year"
	GetObservationsHistogramParamsIntervalWeek        GetObservationsHistogramParamsInterval = "week"
	GetObservationsHistogramParamsIntervalWeekOfYear  GetObservationsHistogramParamsInterval = "week_of_year"
	GetObservationsHistogramParamsIntervalYear        GetObservationsHistogramParamsInterval = "year"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsLicense.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsLicenseCc0      GetObservationsIconicTaxaSpeciesCountsParamsLicense = "cc0"
	GetObservationsIconicTaxaSpeciesCountsParamsLicenseCcBy     GetObservationsIconicTaxaSpeciesCountsParamsLicense = "cc-by"
	GetObservationsIconicTaxaSpeciesCountsParamsLicenseCcByNc   GetObservationsIconicTaxaSpeciesCountsParamsLicense = "cc-by-nc"
	GetObservationsIconicTaxaSpeciesCountsParamsLicenseCcByNcNd GetObservationsIconicTaxaSpeciesCountsParamsLicense = "cc-by-nc-nd"
	GetObservationsIconicTaxaSpeciesCountsParamsLicenseCcByNcSa GetObservationsIconicTaxaSpeciesCountsParamsLicense = "cc-by-nc-sa"
	GetObservationsIconicTaxaSpeciesCountsParamsLicenseCcByNd   GetObservationsIconicTaxaSpeciesCountsParamsLicense = "cc-by-nd"
	GetObservationsIconicTaxaSpeciesCountsParamsLicenseCcBySa   GetObservationsIconicTaxaSpeciesCountsParamsLicense = "cc-by-sa"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicense.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicenseCc0      GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicense = "cc0"
	GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicenseCcBy     GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicense = "cc-by"
	GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicenseCcByNc   GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicense = "cc-by-nc"
	GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicenseCcByNcNd GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicense = "cc-by-nc-nd"
	GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicenseCcByNcSa GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicense = "cc-by-nc-sa"
	GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicenseCcByNd   GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicense = "cc-by-nd"
	GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicenseCcBySa   GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsRank.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsRankClass         GetObservationsIconicTaxaSpeciesCountsParamsRank = "class"
	GetObservationsIconicTaxaSpeciesCountsParamsRankComplex       GetObservationsIconicTaxaSpeciesCountsParamsRank = "complex"
	GetObservationsIconicTaxaSpeciesCountsParamsRankEpifamily     GetObservationsIconicTaxaSpeciesCountsParamsRank = "epifamily"
	GetObservationsIconicTaxaSpeciesCountsParamsRankFamily        GetObservationsIconicTaxaSpeciesCountsParamsRank = "family"
	GetObservationsIconicTaxaSpeciesCountsParamsRankForm          GetObservationsIconicTaxaSpeciesCountsParamsRank = "form"
	GetObservationsIconicTaxaSpeciesCountsParamsRankGenus         GetObservationsIconicTaxaSpeciesCountsParamsRank = "genus"
	GetObservationsIconicTaxaSpeciesCountsParamsRankGenushybrid   GetObservationsIconicTaxaSpeciesCountsParamsRank = "genushybrid"
	GetObservationsIconicTaxaSpeciesCountsParamsRankHybrid        GetObservationsIconicTaxaSpeciesCountsParamsRank = "hybrid"
	GetObservationsIconicTaxaSpeciesCountsParamsRankInfraclass    GetObservationsIconicTaxaSpeciesCountsParamsRank = "infraclass"
	GetObservationsIconicTaxaSpeciesCountsParamsRankInfrahybrid   GetObservationsIconicTaxaSpeciesCountsParamsRank = "infrahybrid"
	GetObservationsIconicTaxaSpeciesCountsParamsRankInfraorder    GetObservationsIconicTaxaSpeciesCountsParamsRank = "infraorder"
	GetObservationsIconicTaxaSpeciesCountsParamsRankKingdom       GetObservationsIconicTaxaSpeciesCountsParamsRank = "kingdom"
	GetObservationsIconicTaxaSpeciesCountsParamsRankOrder         GetObservationsIconicTaxaSpeciesCountsParamsRank = "order"
	GetObservationsIconicTaxaSpeciesCountsParamsRankParvorder     GetObservationsIconicTaxaSpeciesCountsParamsRank = "parvorder"
	GetObservationsIconicTaxaSpeciesCountsParamsRankPhylum        GetObservationsIconicTaxaSpeciesCountsParamsRank = "phylum"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSection       GetObservationsIconicTaxaSpeciesCountsParamsRank = "section"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSpecies       GetObservationsIconicTaxaSpeciesCountsParamsRank = "species"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSubclass      GetObservationsIconicTaxaSpeciesCountsParamsRank = "subclass"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSubfamily     GetObservationsIconicTaxaSpeciesCountsParamsRank = "subfamily"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSubgenus      GetObservationsIconicTaxaSpeciesCountsParamsRank = "subgenus"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSuborder      GetObservationsIconicTaxaSpeciesCountsParamsRank = "suborder"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSubphylum     GetObservationsIconicTaxaSpeciesCountsParamsRank = "subphylum"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSubsection    GetObservationsIconicTaxaSpeciesCountsParamsRank = "subsection"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSubspecies    GetObservationsIconicTaxaSpeciesCountsParamsRank = "subspecies"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSubterclass   GetObservationsIconicTaxaSpeciesCountsParamsRank = "subterclass"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSubtribe      GetObservationsIconicTaxaSpeciesCountsParamsRank = "subtribe"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSuperclass    GetObservationsIconicTaxaSpeciesCountsParamsRank = "superclass"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSuperfamily   GetObservationsIconicTaxaSpeciesCountsParamsRank = "superfamily"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSuperorder    GetObservationsIconicTaxaSpeciesCountsParamsRank = "superorder"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSupertribe    GetObservationsIconicTaxaSpeciesCountsParamsRank = "supertribe"
	GetObservationsIconicTaxaSpeciesCountsParamsRankTribe         GetObservationsIconicTaxaSpeciesCountsParamsRank = "tribe"
	GetObservationsIconicTaxaSpeciesCountsParamsRankVariety       GetObservationsIconicTaxaSpeciesCountsParamsRank = "variety"
	GetObservationsIconicTaxaSpeciesCountsParamsRankZoosection    GetObservationsIconicTaxaSpeciesCountsParamsRank = "zoosection"
	GetObservationsIconicTaxaSpeciesCountsParamsRankZoosubsection GetObservationsIconicTaxaSpeciesCountsParamsRank = "zoosubsection"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsSoundLicense.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsSoundLicenseCc0      GetObservationsIconicTaxaSpeciesCountsParamsSoundLicense = "cc0"
	GetObservationsIconicTaxaSpeciesCountsParamsSoundLicenseCcBy     GetObservationsIconicTaxaSpeciesCountsParamsSoundLicense = "cc-by"
	GetObservationsIconicTaxaSpeciesCountsParamsSoundLicenseCcByNc   GetObservationsIconicTaxaSpeciesCountsParamsSoundLicense = "cc-by-nc"
	GetObservationsIconicTaxaSpeciesCountsParamsSoundLicenseCcByNcNd GetObservationsIconicTaxaSpeciesCountsParamsSoundLicense = "cc-by-nc-nd"
	GetObservationsIconicTaxaSpeciesCountsParamsSoundLicenseCcByNcSa GetObservationsIconicTaxaSpeciesCountsParamsSoundLicense = "cc-by-nc-sa"
	GetObservationsIconicTaxaSpeciesCountsParamsSoundLicenseCcByNd   GetObservationsIconicTaxaSpeciesCountsParamsSoundLicense = "cc-by-nd"
	GetObservationsIconicTaxaSpeciesCountsParamsSoundLicenseCcBySa   GetObservationsIconicTaxaSpeciesCountsParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsCsi.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsCsiCR GetObservationsIconicTaxaSpeciesCountsParamsCsi = "CR"
	GetObservationsIconicTaxaSpeciesCountsParamsCsiEN GetObservationsIconicTaxaSpeciesCountsParamsCsi = "EN"
	GetObservationsIconicTaxaSpeciesCountsParamsCsiEW GetObservationsIconicTaxaSpeciesCountsParamsCsi = "EW"
	GetObservationsIconicTaxaSpeciesCountsParamsCsiEX GetObservationsIconicTaxaSpeciesCountsParamsCsi = "EX"
	GetObservationsIconicTaxaSpeciesCountsParamsCsiLC GetObservationsIconicTaxaSpeciesCountsParamsCsi = "LC"
	GetObservationsIconicTaxaSpeciesCountsParamsCsiNT GetObservationsIconicTaxaSpeciesCountsParamsCsi = "NT"
	GetObservationsIconicTaxaSpeciesCountsParamsCsiVU GetObservationsIconicTaxaSpeciesCountsParamsCsi = "VU"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacy.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacyObscured        GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacy = "obscured"
	GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacyObscuredPrivate GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacy = "obscured_private"
	GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacyOpen            GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacy = "open"
	GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacyPrivate         GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacy = "private"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacy.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacyObscured        GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacy = "obscured"
	GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacyObscuredPrivate GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacy = "obscured_private"
	GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacyOpen            GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacy = "open"
	GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacyPrivate         GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacy = "private"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsObscuration.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsObscurationNone     GetObservationsIconicTaxaSpeciesCountsParamsObscuration = "none"
	GetObservationsIconicTaxaSpeciesCountsParamsObscurationObscured GetObservationsIconicTaxaSpeciesCountsParamsObscuration = "obscured"
	GetObservationsIconicTaxaSpeciesCountsParamsObscurationPrivate  GetObservationsIconicTaxaSpeciesCountsParamsObscuration = "private"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsHrank.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsHrankClass         GetObservationsIconicTaxaSpeciesCountsParamsHrank = "class"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankComplex       GetObservationsIconicTaxaSpeciesCountsParamsHrank = "complex"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankEpifamily     GetObservationsIconicTaxaSpeciesCountsParamsHrank = "epifamily"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankFamily        GetObservationsIconicTaxaSpeciesCountsParamsHrank = "family"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankForm          GetObservationsIconicTaxaSpeciesCountsParamsHrank = "form"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankGenus         GetObservationsIconicTaxaSpeciesCountsParamsHrank = "genus"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankGenushybrid   GetObservationsIconicTaxaSpeciesCountsParamsHrank = "genushybrid"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankHybrid        GetObservationsIconicTaxaSpeciesCountsParamsHrank = "hybrid"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankInfraclass    GetObservationsIconicTaxaSpeciesCountsParamsHrank = "infraclass"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankInfrahybrid   GetObservationsIconicTaxaSpeciesCountsParamsHrank = "infrahybrid"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankInfraorder    GetObservationsIconicTaxaSpeciesCountsParamsHrank = "infraorder"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankKingdom       GetObservationsIconicTaxaSpeciesCountsParamsHrank = "kingdom"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankOrder         GetObservationsIconicTaxaSpeciesCountsParamsHrank = "order"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankParvorder     GetObservationsIconicTaxaSpeciesCountsParamsHrank = "parvorder"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankPhylum        GetObservationsIconicTaxaSpeciesCountsParamsHrank = "phylum"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSection       GetObservationsIconicTaxaSpeciesCountsParamsHrank = "section"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSpecies       GetObservationsIconicTaxaSpeciesCountsParamsHrank = "species"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSubclass      GetObservationsIconicTaxaSpeciesCountsParamsHrank = "subclass"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSubfamily     GetObservationsIconicTaxaSpeciesCountsParamsHrank = "subfamily"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSubgenus      GetObservationsIconicTaxaSpeciesCountsParamsHrank = "subgenus"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSuborder      GetObservationsIconicTaxaSpeciesCountsParamsHrank = "suborder"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSubphylum     GetObservationsIconicTaxaSpeciesCountsParamsHrank = "subphylum"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSubsection    GetObservationsIconicTaxaSpeciesCountsParamsHrank = "subsection"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSubspecies    GetObservationsIconicTaxaSpeciesCountsParamsHrank = "subspecies"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSubterclass   GetObservationsIconicTaxaSpeciesCountsParamsHrank = "subterclass"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSubtribe      GetObservationsIconicTaxaSpeciesCountsParamsHrank = "subtribe"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSuperclass    GetObservationsIconicTaxaSpeciesCountsParamsHrank = "superclass"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSuperfamily   GetObservationsIconicTaxaSpeciesCountsParamsHrank = "superfamily"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSuperorder    GetObservationsIconicTaxaSpeciesCountsParamsHrank = "superorder"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSupertribe    GetObservationsIconicTaxaSpeciesCountsParamsHrank = "supertribe"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankTribe         GetObservationsIconicTaxaSpeciesCountsParamsHrank = "tribe"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankVariety       GetObservationsIconicTaxaSpeciesCountsParamsHrank = "variety"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankZoosection    GetObservationsIconicTaxaSpeciesCountsParamsHrank = "zoosection"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankZoosubsection GetObservationsIconicTaxaSpeciesCountsParamsHrank = "zoosubsection"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsLrank.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsLrankClass         GetObservationsIconicTaxaSpeciesCountsParamsLrank = "class"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankComplex       GetObservationsIconicTaxaSpeciesCountsParamsLrank = "complex"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankEpifamily     GetObservationsIconicTaxaSpeciesCountsParamsLrank = "epifamily"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankFamily        GetObservationsIconicTaxaSpeciesCountsParamsLrank = "family"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankForm          GetObservationsIconicTaxaSpeciesCountsParamsLrank = "form"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankGenus         GetObservationsIconicTaxaSpeciesCountsParamsLrank = "genus"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankGenushybrid   GetObservationsIconicTaxaSpeciesCountsParamsLrank = "genushybrid"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankHybrid        GetObservationsIconicTaxaSpeciesCountsParamsLrank = "hybrid"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankInfraclass    GetObservationsIconicTaxaSpeciesCountsParamsLrank = "infraclass"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankInfrahybrid   GetObservationsIconicTaxaSpeciesCountsParamsLrank = "infrahybrid"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankInfraorder    GetObservationsIconicTaxaSpeciesCountsParamsLrank = "infraorder"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankKingdom       GetObservationsIconicTaxaSpeciesCountsParamsLrank = "kingdom"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankOrder         GetObservationsIconicTaxaSpeciesCountsParamsLrank = "order"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankParvorder     GetObservationsIconicTaxaSpeciesCountsParamsLrank = "parvorder"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankPhylum        GetObservationsIconicTaxaSpeciesCountsParamsLrank = "phylum"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSection       GetObservationsIconicTaxaSpeciesCountsParamsLrank = "section"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSpecies       GetObservationsIconicTaxaSpeciesCountsParamsLrank = "species"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSubclass      GetObservationsIconicTaxaSpeciesCountsParamsLrank = "subclass"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSubfamily     GetObservationsIconicTaxaSpeciesCountsParamsLrank = "subfamily"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSubgenus      GetObservationsIconicTaxaSpeciesCountsParamsLrank = "subgenus"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSuborder      GetObservationsIconicTaxaSpeciesCountsParamsLrank = "suborder"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSubphylum     GetObservationsIconicTaxaSpeciesCountsParamsLrank = "subphylum"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSubsection    GetObservationsIconicTaxaSpeciesCountsParamsLrank = "subsection"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSubspecies    GetObservationsIconicTaxaSpeciesCountsParamsLrank = "subspecies"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSubterclass   GetObservationsIconicTaxaSpeciesCountsParamsLrank = "subterclass"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSubtribe      GetObservationsIconicTaxaSpeciesCountsParamsLrank = "subtribe"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSuperclass    GetObservationsIconicTaxaSpeciesCountsParamsLrank = "superclass"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSuperfamily   GetObservationsIconicTaxaSpeciesCountsParamsLrank = "superfamily"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSuperorder    GetObservationsIconicTaxaSpeciesCountsParamsLrank = "superorder"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSupertribe    GetObservationsIconicTaxaSpeciesCountsParamsLrank = "supertribe"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankTribe         GetObservationsIconicTaxaSpeciesCountsParamsLrank = "tribe"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankVariety       GetObservationsIconicTaxaSpeciesCountsParamsLrank = "variety"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankZoosection    GetObservationsIconicTaxaSpeciesCountsParamsLrank = "zoosection"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankZoosubsection GetObservationsIconicTaxaSpeciesCountsParamsLrank = "zoosubsection"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaActinopterygii GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Actinopterygii"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaAmphibia       GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Amphibia"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaAnimalia       GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Animalia"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaArachnida      GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Arachnida"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaAves           GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Aves"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaChromista      GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Chromista"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaFungi          GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Fungi"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaInsecta        GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Insecta"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaMammalia       GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Mammalia"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaMollusca       GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Mollusca"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaPlantae        GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Plantae"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaProtozoa       GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Protozoa"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaReptilia       GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Reptilia"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaUnknown        GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "unknown"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsIdentifications.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsIdentificationsMostAgree    GetObservationsIconicTaxaSpeciesCountsParamsIdentifications = "most_agree"
	GetObservationsIconicTaxaSpeciesCountsParamsIdentificationsMostDisagree GetObservationsIconicTaxaSpeciesCountsParamsIdentifications = "most_disagree"
	GetObservationsIconicTaxaSpeciesCountsParamsIdentificationsSomeAgree    GetObservationsIconicTaxaSpeciesCountsParamsIdentifications = "some_agree"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsSearchOn.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsSearchOnDescription        GetObservationsIconicTaxaSpeciesCountsParamsSearchOn = "description"
	GetObservationsIconicTaxaSpeciesCountsParamsSearchOnNames              GetObservationsIconicTaxaSpeciesCountsParamsSearchOn = "names"
	GetObservationsIconicTaxaSpeciesCountsParamsSearchOnPlace              GetObservationsIconicTaxaSpeciesCountsParamsSearchOn = "place"
	GetObservationsIconicTaxaSpeciesCountsParamsSearchOnTags               GetObservationsIconicTaxaSpeciesCountsParamsSearchOn = "tags"
	GetObservationsIconicTaxaSpeciesCountsParamsSearchOnTaxonPageObsPhotos GetObservationsIconicTaxaSpeciesCountsParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsQualityGrade.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsQualityGradeCasual   GetObservationsIconicTaxaSpeciesCountsParamsQualityGrade = "casual"
	GetObservationsIconicTaxaSpeciesCountsParamsQualityGradeNeedsID  GetObservationsIconicTaxaSpeciesCountsParamsQualityGrade = "needs_id"
	GetObservationsIconicTaxaSpeciesCountsParamsQualityGradeResearch GetObservationsIconicTaxaSpeciesCountsParamsQualityGrade = "research"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsOrder.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsOrderAsc  GetObservationsIconicTaxaSpeciesCountsParamsOrder = "asc"
	GetObservationsIconicTaxaSpeciesCountsParamsOrderDesc GetObservationsIconicTaxaSpeciesCountsParamsOrder = "desc"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsOrderBy.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsOrderByCreatedAt    GetObservationsIconicTaxaSpeciesCountsParamsOrderBy = "created_at"
	GetObservationsIconicTaxaSpeciesCountsParamsOrderByGeoScore     GetObservationsIconicTaxaSpeciesCountsParamsOrderBy = "geo_score"
	GetObservationsIconicTaxaSpeciesCountsParamsOrderByID           GetObservationsIconicTaxaSpeciesCountsParamsOrderBy = "id"
	GetObservationsIconicTaxaSpeciesCountsParamsOrderByObservedOn   GetObservationsIconicTaxaSpeciesCountsParamsOrderBy = "observed_on"
	GetObservationsIconicTaxaSpeciesCountsParamsOrderByRandom       GetObservationsIconicTaxaSpeciesCountsParamsOrderBy = "random"
	GetObservationsIconicTaxaSpeciesCountsParamsOrderBySpeciesGuess GetObservationsIconicTaxaSpeciesCountsParamsOrderBy = "species_guess"
	GetObservationsIconicTaxaSpeciesCountsParamsOrderByUpdatedAt    GetObservationsIconicTaxaSpeciesCountsParamsOrderBy = "updated_at"
	GetObservationsIconicTaxaSpeciesCountsParamsOrderByVotes        GetObservationsIconicTaxaSpeciesCountsParamsOrderBy = "votes"
)

// Defines values for GetObservationsIdentifiersParamsLicense.
const (
	GetObservationsIdentifiersParamsLicenseCc0      GetObservationsIdentifiersParamsLicense = "cc0"
	GetObservationsIdentifiersParamsLicenseCcBy     GetObservationsIdentifiersParamsLicense = "cc-by"
	GetObservationsIdentifiersParamsLicenseCcByNc   GetObservationsIdentifiersParamsLicense = "cc-by-nc"
	GetObservationsIdentifiersParamsLicenseCcByNcNd GetObservationsIdentifiersParamsLicense = "cc-by-nc-nd"
	GetObservationsIdentifiersParamsLicenseCcByNcSa GetObservationsIdentifiersParamsLicense = "cc-by-nc-sa"
	GetObservationsIdentifiersParamsLicenseCcByNd   GetObservationsIdentifiersParamsLicense = "cc-by-nd"
	GetObservationsIdentifiersParamsLicenseCcBySa   GetObservationsIdentifiersParamsLicense = "cc-by-sa"
)

// Defines values for GetObservationsIdentifiersParamsPhotoLicense.
const (
	GetObservationsIdentifiersParamsPhotoLicenseCc0      GetObservationsIdentifiersParamsPhotoLicense = "cc0"
	GetObservationsIdentifiersParamsPhotoLicenseCcBy     GetObservationsIdentifiersParamsPhotoLicense = "cc-by"
	GetObservationsIdentifiersParamsPhotoLicenseCcByNc   GetObservationsIdentifiersParamsPhotoLicense = "cc-by-nc"
	GetObservationsIdentifiersParamsPhotoLicenseCcByNcNd GetObservationsIdentifiersParamsPhotoLicense = "cc-by-nc-nd"
	GetObservationsIdentifiersParamsPhotoLicenseCcByNcSa GetObservationsIdentifiersParamsPhotoLicense = "cc-by-nc-sa"
	GetObservationsIdentifiersParamsPhotoLicenseCcByNd   GetObservationsIdentifiersParamsPhotoLicense = "cc-by-nd"
	GetObservationsIdentifiersParamsPhotoLicenseCcBySa   GetObservationsIdentifiersParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetObservationsIdentifiersParamsRank.
const (
	GetObservationsIdentifiersParamsRankClass         GetObservationsIdentifiersParamsRank = "class"
	GetObservationsIdentifiersParamsRankComplex       GetObservationsIdentifiersParamsRank = "complex"
	GetObservationsIdentifiersParamsRankEpifamily     GetObservationsIdentifiersParamsRank = "epifamily"
	GetObservationsIdentifiersParamsRankFamily        GetObservationsIdentifiersParamsRank = "family"
	GetObservationsIdentifiersParamsRankForm          GetObservationsIdentifiersParamsRank = "form"
	GetObservationsIdentifiersParamsRankGenus         GetObservationsIdentifiersParamsRank = "genus"
	GetObservationsIdentifiersParamsRankGenushybrid   GetObservationsIdentifiersParamsRank = "genushybrid"
	GetObservationsIdentifiersParamsRankHybrid        GetObservationsIdentifiersParamsRank = "hybrid"
	GetObservationsIdentifiersParamsRankInfraclass    GetObservationsIdentifiersParamsRank = "infraclass"
	GetObservationsIdentifiersParamsRankInfrahybrid   GetObservationsIdentifiersParamsRank = "infrahybrid"
	GetObservationsIdentifiersParamsRankInfraorder    GetObservationsIdentifiersParamsRank = "infraorder"
	GetObservationsIdentifiersParamsRankKingdom       GetObservationsIdentifiersParamsRank = "kingdom"
	GetObservationsIdentifiersParamsRankOrder         GetObservationsIdentifiersParamsRank = "order"
	GetObservationsIdentifiersParamsRankParvorder     GetObservationsIdentifiersParamsRank = "parvorder"
	GetObservationsIdentifiersParamsRankPhylum        GetObservationsIdentifiersParamsRank = "phylum"
	GetObservationsIdentifiersParamsRankSection       GetObservationsIdentifiersParamsRank = "section"
	GetObservationsIdentifiersParamsRankSpecies       GetObservationsIdentifiersParamsRank = "species"
	GetObservationsIdentifiersParamsRankSubclass      GetObservationsIdentifiersParamsRank = "subclass"
	GetObservationsIdentifiersParamsRankSubfamily     GetObservationsIdentifiersParamsRank = "subfamily"
	GetObservationsIdentifiersParamsRankSubgenus      GetObservationsIdentifiersParamsRank = "subgenus"
	GetObservationsIdentifiersParamsRankSuborder      GetObservationsIdentifiersParamsRank = "suborder"
	GetObservationsIdentifiersParamsRankSubphylum     GetObservationsIdentifiersParamsRank = "subphylum"
	GetObservationsIdentifiersParamsRankSubsection    GetObservationsIdentifiersParamsRank = "subsection"
	GetObservationsIdentifiersParamsRankSubspecies    GetObservationsIdentifiersParamsRank = "subspecies"
	GetObservationsIdentifiersParamsRankSubterclass   GetObservationsIdentifiersParamsRank = "subterclass"
	GetObservationsIdentifiersParamsRankSubtribe      GetObservationsIdentifiersParamsRank = "subtribe"
	GetObservationsIdentifiersParamsRankSuperclass    GetObservationsIdentifiersParamsRank = "superclass"
	GetObservationsIdentifiersParamsRankSuperfamily   GetObservationsIdentifiersParamsRank = "superfamily"
	GetObservationsIdentifiersParamsRankSuperorder    GetObservationsIdentifiersParamsRank = "superorder"
	GetObservationsIdentifiersParamsRankSupertribe    GetObservationsIdentifiersParamsRank = "supertribe"
	GetObservationsIdentifiersParamsRankTribe         GetObservationsIdentifiersParamsRank = "tribe"
	GetObservationsIdentifiersParamsRankVariety       GetObservationsIdentifiersParamsRank = "variety"
	GetObservationsIdentifiersParamsRankZoosection    GetObservationsIdentifiersParamsRank = "zoosection"
	GetObservationsIdentifiersParamsRankZoosubsection GetObservationsIdentifiersParamsRank = "zoosubsection"
)

// Defines values for GetObservationsIdentifiersParamsSoundLicense.
const (
	GetObservationsIdentifiersParamsSoundLicenseCc0      GetObservationsIdentifiersParamsSoundLicense = "cc0"
	GetObservationsIdentifiersParamsSoundLicenseCcBy     GetObservationsIdentifiersParamsSoundLicense = "cc-by"
	GetObservationsIdentifiersParamsSoundLicenseCcByNc   GetObservationsIdentifiersParamsSoundLicense = "cc-by-nc"
	GetObservationsIdentifiersParamsSoundLicenseCcByNcNd GetObservationsIdentifiersParamsSoundLicense = "cc-by-nc-nd"
	GetObservationsIdentifiersParamsSoundLicenseCcByNcSa GetObservationsIdentifiersParamsSoundLicense = "cc-by-nc-sa"
	GetObservationsIdentifiersParamsSoundLicenseCcByNd   GetObservationsIdentifiersParamsSoundLicense = "cc-by-nd"
	GetObservationsIdentifiersParamsSoundLicenseCcBySa   GetObservationsIdentifiersParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetObservationsIdentifiersParamsCsi.
const (
	GetObservationsIdentifiersParamsCsiCR GetObservationsIdentifiersParamsCsi = "CR"
	GetObservationsIdentifiersParamsCsiEN GetObservationsIdentifiersParamsCsi = "EN"
	GetObservationsIdentifiersParamsCsiEW GetObservationsIdentifiersParamsCsi = "EW"
	GetObservationsIdentifiersParamsCsiEX GetObservationsIdentifiersParamsCsi = "EX"
	GetObservationsIdentifiersParamsCsiLC GetObservationsIdentifiersParamsCsi = "LC"
	GetObservationsIdentifiersParamsCsiNT GetObservationsIdentifiersParamsCsi = "NT"
	GetObservationsIdentifiersParamsCsiVU GetObservationsIdentifiersParamsCsi = "VU"
)

// Defines values for GetObservationsIdentifiersParamsGeoprivacy.
const (
	GetObservationsIdentifiersParamsGeoprivacyObscured        GetObservationsIdentifiersParamsGeoprivacy = "obscured"
	GetObservationsIdentifiersParamsGeoprivacyObscuredPrivate GetObservationsIdentifiersParamsGeoprivacy = "obscured_private"
	GetObservationsIdentifiersParamsGeoprivacyOpen            GetObservationsIdentifiersParamsGeoprivacy = "open"
	GetObservationsIdentifiersParamsGeoprivacyPrivate         GetObservationsIdentifiersParamsGeoprivacy = "private"
)

// Defines values for GetObservationsIdentifiersParamsTaxonGeoprivacy.
const (
	GetObservationsIdentifiersParamsTaxonGeoprivacyObscured        GetObservationsIdentifiersParamsTaxonGeoprivacy = "obscured"
	GetObservationsIdentifiersParamsTaxonGeoprivacyObscuredPrivate GetObservationsIdentifiersParamsTaxonGeoprivacy = "obscured_private"
	GetObservationsIdentifiersParamsTaxonGeoprivacyOpen            GetObservationsIdentifiersParamsTaxonGeoprivacy = "open"
	GetObservationsIdentifiersParamsTaxonGeoprivacyPrivate         GetObservationsIdentifiersParamsTaxonGeoprivacy = "private"
)

// Defines values for GetObservationsIdentifiersParamsObscuration.
const (
	GetObservationsIdentifiersParamsObscurationNone     GetObservationsIdentifiersParamsObscuration = "none"
	GetObservationsIdentifiersParamsObscurationObscured GetObservationsIdentifiersParamsObscuration = "obscured"
	GetObservationsIdentifiersParamsObscurationPrivate  GetObservationsIdentifiersParamsObscuration = "private"
)

// Defines values for GetObservationsIdentifiersParamsHrank.
const (
	GetObservationsIdentifiersParamsHrankClass         GetObservationsIdentifiersParamsHrank = "class"
	GetObservationsIdentifiersParamsHrankComplex       GetObservationsIdentifiersParamsHrank = "complex"
	GetObservationsIdentifiersParamsHrankEpifamily     GetObservationsIdentifiersParamsHrank = "epifamily"
	GetObservationsIdentifiersParamsHrankFamily        GetObservationsIdentifiersParamsHrank = "family"
	GetObservationsIdentifiersParamsHrankForm          GetObservationsIdentifiersParamsHrank = "form"
	GetObservationsIdentifiersParamsHrankGenus         GetObservationsIdentifiersParamsHrank = "genus"
	GetObservationsIdentifiersParamsHrankGenushybrid   GetObservationsIdentifiersParamsHrank = "genushybrid"
	GetObservationsIdentifiersParamsHrankHybrid        GetObservationsIdentifiersParamsHrank = "hybrid"
	GetObservationsIdentifiersParamsHrankInfraclass    GetObservationsIdentifiersParamsHrank = "infraclass"
	GetObservationsIdentifiersParamsHrankInfrahybrid   GetObservationsIdentifiersParamsHrank = "infrahybrid"
	GetObservationsIdentifiersParamsHrankInfraorder    GetObservationsIdentifiersParamsHrank = "infraorder"
	GetObservationsIdentifiersParamsHrankKingdom       GetObservationsIdentifiersParamsHrank = "kingdom"
	GetObservationsIdentifiersParamsHrankOrder         GetObservationsIdentifiersParamsHrank = "order"
	GetObservationsIdentifiersParamsHrankParvorder     GetObservationsIdentifiersParamsHrank = "parvorder"
	GetObservationsIdentifiersParamsHrankPhylum        GetObservationsIdentifiersParamsHrank = "phylum"
	GetObservationsIdentifiersParamsHrankSection       GetObservationsIdentifiersParamsHrank = "section"
	GetObservationsIdentifiersParamsHrankSpecies       GetObservationsIdentifiersParamsHrank = "species"
	GetObservationsIdentifiersParamsHrankSubclass      GetObservationsIdentifiersParamsHrank = "subclass"
	GetObservationsIdentifiersParamsHrankSubfamily     GetObservationsIdentifiersParamsHrank = "subfamily"
	GetObservationsIdentifiersParamsHrankSubgenus      GetObservationsIdentifiersParamsHrank = "subgenus"
	GetObservationsIdentifiersParamsHrankSuborder      GetObservationsIdentifiersParamsHrank = "suborder"
	GetObservationsIdentifiersParamsHrankSubphylum     GetObservationsIdentifiersParamsHrank = "subphylum"
	GetObservationsIdentifiersParamsHrankSubsection    GetObservationsIdentifiersParamsHrank = "subsection"
	GetObservationsIdentifiersParamsHrankSubspecies    GetObservationsIdentifiersParamsHrank = "subspecies"
	GetObservationsIdentifiersParamsHrankSubterclass   GetObservationsIdentifiersParamsHrank = "subterclass"
	GetObservationsIdentifiersParamsHrankSubtribe      GetObservationsIdentifiersParamsHrank = "subtribe"
	GetObservationsIdentifiersParamsHrankSuperclass    GetObservationsIdentifiersParamsHrank = "superclass"
	GetObservationsIdentifiersParamsHrankSuperfamily   GetObservationsIdentifiersParamsHrank = "superfamily"
	GetObservationsIdentifiersParamsHrankSuperorder    GetObservationsIdentifiersParamsHrank = "superorder"
	GetObservationsIdentifiersParamsHrankSupertribe    GetObservationsIdentifiersParamsHrank = "supertribe"
	GetObservationsIdentifiersParamsHrankTribe         GetObservationsIdentifiersParamsHrank = "tribe"
	GetObservationsIdentifiersParamsHrankVariety       GetObservationsIdentifiersParamsHrank = "variety"
	GetObservationsIdentifiersParamsHrankZoosection    GetObservationsIdentifiersParamsHrank = "zoosection"
	GetObservationsIdentifiersParamsHrankZoosubsection GetObservationsIdentifiersParamsHrank = "zoosubsection"
)

// Defines values for GetObservationsIdentifiersParamsLrank.
const (
	GetObservationsIdentifiersParamsLrankClass         GetObservationsIdentifiersParamsLrank = "class"
	GetObservationsIdentifiersParamsLrankComplex       GetObservationsIdentifiersParamsLrank = "complex"
	GetObservationsIdentifiersParamsLrankEpifamily     GetObservationsIdentifiersParamsLrank = "epifamily"
	GetObservationsIdentifiersParamsLrankFamily        GetObservationsIdentifiersParamsLrank = "family"
	GetObservationsIdentifiersParamsLrankForm          GetObservationsIdentifiersParamsLrank = "form"
	GetObservationsIdentifiersParamsLrankGenus         GetObservationsIdentifiersParamsLrank = "genus"
	GetObservationsIdentifiersParamsLrankGenushybrid   GetObservationsIdentifiersParamsLrank = "genushybrid"
	GetObservationsIdentifiersParamsLrankHybrid        GetObservationsIdentifiersParamsLrank = "hybrid"
	GetObservationsIdentifiersParamsLrankInfraclass    GetObservationsIdentifiersParamsLrank = "infraclass"
	GetObservationsIdentifiersParamsLrankInfrahybrid   GetObservationsIdentifiersParamsLrank = "infrahybrid"
	GetObservationsIdentifiersParamsLrankInfraorder    GetObservationsIdentifiersParamsLrank = "infraorder"
	GetObservationsIdentifiersParamsLrankKingdom       GetObservationsIdentifiersParamsLrank = "kingdom"
	GetObservationsIdentifiersParamsLrankOrder         GetObservationsIdentifiersParamsLrank = "order"
	GetObservationsIdentifiersParamsLrankParvorder     GetObservationsIdentifiersParamsLrank = "parvorder"
	GetObservationsIdentifiersParamsLrankPhylum        GetObservationsIdentifiersParamsLrank = "phylum"
	GetObservationsIdentifiersParamsLrankSection       GetObservationsIdentifiersParamsLrank = "section"
	GetObservationsIdentifiersParamsLrankSpecies       GetObservationsIdentifiersParamsLrank = "species"
	GetObservationsIdentifiersParamsLrankSubclass      GetObservationsIdentifiersParamsLrank = "subclass"
	GetObservationsIdentifiersParamsLrankSubfamily     GetObservationsIdentifiersParamsLrank = "subfamily"
	GetObservationsIdentifiersParamsLrankSubgenus      GetObservationsIdentifiersParamsLrank = "subgenus"
	GetObservationsIdentifiersParamsLrankSuborder      GetObservationsIdentifiersParamsLrank = "suborder"
	GetObservationsIdentifiersParamsLrankSubphylum     GetObservationsIdentifiersParamsLrank = "subphylum"
	GetObservationsIdentifiersParamsLrankSubsection    GetObservationsIdentifiersParamsLrank = "subsection"
	GetObservationsIdentifiersParamsLrankSubspecies    GetObservationsIdentifiersParamsLrank = "subspecies"
	GetObservationsIdentifiersParamsLrankSubterclass   GetObservationsIdentifiersParamsLrank = "subterclass"
	GetObservationsIdentifiersParamsLrankSubtribe      GetObservationsIdentifiersParamsLrank = "subtribe"
	GetObservationsIdentifiersParamsLrankSuperclass    GetObservationsIdentifiersParamsLrank = "superclass"
	GetObservationsIdentifiersParamsLrankSuperfamily   GetObservationsIdentifiersParamsLrank = "superfamily"
	GetObservationsIdentifiersParamsLrankSuperorder    GetObservationsIdentifiersParamsLrank = "superorder"
	GetObservationsIdentifiersParamsLrankSupertribe    GetObservationsIdentifiersParamsLrank = "supertribe"
	GetObservationsIdentifiersParamsLrankTribe         GetObservationsIdentifiersParamsLrank = "tribe"
	GetObservationsIdentifiersParamsLrankVariety       GetObservationsIdentifiersParamsLrank = "variety"
	GetObservationsIdentifiersParamsLrankZoosection    GetObservationsIdentifiersParamsLrank = "zoosection"
	GetObservationsIdentifiersParamsLrankZoosubsection GetObservationsIdentifiersParamsLrank = "zoosubsection"
)

// Defines values for GetObservationsIdentifiersParamsIconicTaxa.
const (
	GetObservationsIdentifiersParamsIconicTaxaActinopterygii GetObservationsIdentifiersParamsIconicTaxa = "Actinopterygii"
	GetObservationsIdentifiersParamsIconicTaxaAmphibia       GetObservationsIdentifiersParamsIconicTaxa = "Amphibia"
	GetObservationsIdentifiersParamsIconicTaxaAnimalia       GetObservationsIdentifiersParamsIconicTaxa = "Animalia"
	GetObservationsIdentifiersParamsIconicTaxaArachnida      GetObservationsIdentifiersParamsIconicTaxa = "Arachnida"
	GetObservationsIdentifiersParamsIconicTaxaAves           GetObservationsIdentifiersParamsIconicTaxa = "Aves"
	GetObservationsIdentifiersParamsIconicTaxaChromista      GetObservationsIdentifiersParamsIconicTaxa = "Chromista"
	GetObservationsIdentifiersParamsIconicTaxaFungi          GetObservationsIdentifiersParamsIconicTaxa = "Fungi"
	GetObservationsIdentifiersParamsIconicTaxaInsecta        GetObservationsIdentifiersParamsIconicTaxa = "Insecta"
	GetObservationsIdentifiersParamsIconicTaxaMammalia       GetObservationsIdentifiersParamsIconicTaxa = "Mammalia"
	GetObservationsIdentifiersParamsIconicTaxaMollusca       GetObservationsIdentifiersParamsIconicTaxa = "Mollusca"
	GetObservationsIdentifiersParamsIconicTaxaPlantae        GetObservationsIdentifiersParamsIconicTaxa = "Plantae"
	GetObservationsIdentifiersParamsIconicTaxaProtozoa       GetObservationsIdentifiersParamsIconicTaxa = "Protozoa"
	GetObservationsIdentifiersParamsIconicTaxaReptilia       GetObservationsIdentifiersParamsIconicTaxa = "Reptilia"
	GetObservationsIdentifiersParamsIconicTaxaUnknown        GetObservationsIdentifiersParamsIconicTaxa = "unknown"
)

// Defines values for GetObservationsIdentifiersParamsIdentifications.
const (
	GetObservationsIdentifiersParamsIdentificationsMostAgree    GetObservationsIdentifiersParamsIdentifications = "most_agree"
	GetObservationsIdentifiersParamsIdentificationsMostDisagree GetObservationsIdentifiersParamsIdentifications = "most_disagree"
	GetObservationsIdentifiersParamsIdentificationsSomeAgree    GetObservationsIdentifiersParamsIdentifications = "some_agree"
)

// Defines values for GetObservationsIdentifiersParamsSearchOn.
const (
	GetObservationsIdentifiersParamsSearchOnDescription        GetObservationsIdentifiersParamsSearchOn = "description"
	GetObservationsIdentifiersParamsSearchOnNames              GetObservationsIdentifiersParamsSearchOn = "names"
	GetObservationsIdentifiersParamsSearchOnPlace              GetObservationsIdentifiersParamsSearchOn = "place"
	GetObservationsIdentifiersParamsSearchOnTags               GetObservationsIdentifiersParamsSearchOn = "tags"
	GetObservationsIdentifiersParamsSearchOnTaxonPageObsPhotos GetObservationsIdentifiersParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetObservationsIdentifiersParamsQualityGrade.
const (
	GetObservationsIdentifiersParamsQualityGradeCasual   GetObservationsIdentifiersParamsQualityGrade = "casual"
	GetObservationsIdentifiersParamsQualityGradeNeedsID  GetObservationsIdentifiersParamsQualityGrade = "needs_id"
	GetObservationsIdentifiersParamsQualityGradeResearch GetObservationsIdentifiersParamsQualityGrade = "research"
)

// Defines values for GetObservationsIdentifiersParamsOrder.
const (
	GetObservationsIdentifiersParamsOrderAsc  GetObservationsIdentifiersParamsOrder = "asc"
	GetObservationsIdentifiersParamsOrderDesc GetObservationsIdentifiersParamsOrder = "desc"
)

// Defines values for GetObservationsIdentifiersParamsOrderBy.
const (
	GetObservationsIdentifiersParamsOrderByCreatedAt    GetObservationsIdentifiersParamsOrderBy = "created_at"
	GetObservationsIdentifiersParamsOrderByGeoScore     GetObservationsIdentifiersParamsOrderBy = "geo_score"
	GetObservationsIdentifiersParamsOrderByID           GetObservationsIdentifiersParamsOrderBy = "id"
	GetObservationsIdentifiersParamsOrderByObservedOn   GetObservationsIdentifiersParamsOrderBy = "observed_on"
	GetObservationsIdentifiersParamsOrderByRandom       GetObservationsIdentifiersParamsOrderBy = "random"
	GetObservationsIdentifiersParamsOrderBySpeciesGuess GetObservationsIdentifiersParamsOrderBy = "species_guess"
	GetObservationsIdentifiersParamsOrderByUpdatedAt    GetObservationsIdentifiersParamsOrderBy = "updated_at"
	GetObservationsIdentifiersParamsOrderByVotes        GetObservationsIdentifiersParamsOrderBy = "votes"
)

// Defines values for GetObservationsObserversParamsLicense.
const (
	GetObservationsObserversParamsLicenseCc0      GetObservationsObserversParamsLicense = "cc0"
	GetObservationsObserversParamsLicenseCcBy     GetObservationsObserversParamsLicense = "cc-by"
	GetObservationsObserversParamsLicenseCcByNc   GetObservationsObserversParamsLicense = "cc-by-nc"
	GetObservationsObserversParamsLicenseCcByNcNd GetObservationsObserversParamsLicense = "cc-by-nc-nd"
	GetObservationsObserversParamsLicenseCcByNcSa GetObservationsObserversParamsLicense = "cc-by-nc-sa"
	GetObservationsObserversParamsLicenseCcByNd   GetObservationsObserversParamsLicense = "cc-by-nd"
	GetObservationsObserversParamsLicenseCcBySa   GetObservationsObserversParamsLicense = "cc-by-sa"
)

// Defines values for GetObservationsObserversParamsPhotoLicense.
const (
	GetObservationsObserversParamsPhotoLicenseCc0      GetObservationsObserversParamsPhotoLicense = "cc0"
	GetObservationsObserversParamsPhotoLicenseCcBy     GetObservationsObserversParamsPhotoLicense = "cc-by"
	GetObservationsObserversParamsPhotoLicenseCcByNc   GetObservationsObserversParamsPhotoLicense = "cc-by-nc"
	GetObservationsObserversParamsPhotoLicenseCcByNcNd GetObservationsObserversParamsPhotoLicense = "cc-by-nc-nd"
	GetObservationsObserversParamsPhotoLicenseCcByNcSa GetObservationsObserversParamsPhotoLicense = "cc-by-nc-sa"
	GetObservationsObserversParamsPhotoLicenseCcByNd   GetObservationsObserversParamsPhotoLicense = "cc-by-nd"
	GetObservationsObserversParamsPhotoLicenseCcBySa   GetObservationsObserversParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetObservationsObserversParamsRank.
const (
	GetObservationsObserversParamsRankClass         GetObservationsObserversParamsRank = "class"
	GetObservationsObserversParamsRankComplex       GetObservationsObserversParamsRank = "complex"
	GetObservationsObserversParamsRankEpifamily     GetObservationsObserversParamsRank = "epifamily"
	GetObservationsObserversParamsRankFamily        GetObservationsObserversParamsRank = "family"
	GetObservationsObserversParamsRankForm          GetObservationsObserversParamsRank = "form"
	GetObservationsObserversParamsRankGenus         GetObservationsObserversParamsRank = "genus"
	GetObservationsObserversParamsRankGenushybrid   GetObservationsObserversParamsRank = "genushybrid"
	GetObservationsObserversParamsRankHybrid        GetObservationsObserversParamsRank = "hybrid"
	GetObservationsObserversParamsRankInfraclass    GetObservationsObserversParamsRank = "infraclass"
	GetObservationsObserversParamsRankInfrahybrid   GetObservationsObserversParamsRank = "infrahybrid"
	GetObservationsObserversParamsRankInfraorder    GetObservationsObserversParamsRank = "infraorder"
	GetObservationsObserversParamsRankKingdom       GetObservationsObserversParamsRank = "kingdom"
	GetObservationsObserversParamsRankOrder         GetObservationsObserversParamsRank = "order"
	GetObservationsObserversParamsRankParvorder     GetObservationsObserversParamsRank = "parvorder"
	GetObservationsObserversParamsRankPhylum        GetObservationsObserversParamsRank = "phylum"
	GetObservationsObserversParamsRankSection       GetObservationsObserversParamsRank = "section"
	GetObservationsObserversParamsRankSpecies       GetObservationsObserversParamsRank = "species"
	GetObservationsObserversParamsRankSubclass      GetObservationsObserversParamsRank = "subclass"
	GetObservationsObserversParamsRankSubfamily     GetObservationsObserversParamsRank = "subfamily"
	GetObservationsObserversParamsRankSubgenus      GetObservationsObserversParamsRank = "subgenus"
	GetObservationsObserversParamsRankSuborder      GetObservationsObserversParamsRank = "suborder"
	GetObservationsObserversParamsRankSubphylum     GetObservationsObserversParamsRank = "subphylum"
	GetObservationsObserversParamsRankSubsection    GetObservationsObserversParamsRank = "subsection"
	GetObservationsObserversParamsRankSubspecies    GetObservationsObserversParamsRank = "subspecies"
	GetObservationsObserversParamsRankSubterclass   GetObservationsObserversParamsRank = "subterclass"
	GetObservationsObserversParamsRankSubtribe      GetObservationsObserversParamsRank = "subtribe"
	GetObservationsObserversParamsRankSuperclass    GetObservationsObserversParamsRank = "superclass"
	GetObservationsObserversParamsRankSuperfamily   GetObservationsObserversParamsRank = "superfamily"
	GetObservationsObserversParamsRankSuperorder    GetObservationsObserversParamsRank = "superorder"
	GetObservationsObserversParamsRankSupertribe    GetObservationsObserversParamsRank = "supertribe"
	GetObservationsObserversParamsRankTribe         GetObservationsObserversParamsRank = "tribe"
	GetObservationsObserversParamsRankVariety       GetObservationsObserversParamsRank = "variety"
	GetObservationsObserversParamsRankZoosection    GetObservationsObserversParamsRank = "zoosection"
	GetObservationsObserversParamsRankZoosubsection GetObservationsObserversParamsRank = "zoosubsection"
)

// Defines values for GetObservationsObserversParamsSoundLicense.
const (
	GetObservationsObserversParamsSoundLicenseCc0      GetObservationsObserversParamsSoundLicense = "cc0"
	GetObservationsObserversParamsSoundLicenseCcBy     GetObservationsObserversParamsSoundLicense = "cc-by"
	GetObservationsObserversParamsSoundLicenseCcByNc   GetObservationsObserversParamsSoundLicense = "cc-by-nc"
	GetObservationsObserversParamsSoundLicenseCcByNcNd GetObservationsObserversParamsSoundLicense = "cc-by-nc-nd"
	GetObservationsObserversParamsSoundLicenseCcByNcSa GetObservationsObserversParamsSoundLicense = "cc-by-nc-sa"
	GetObservationsObserversParamsSoundLicenseCcByNd   GetObservationsObserversParamsSoundLicense = "cc-by-nd"
	GetObservationsObserversParamsSoundLicenseCcBySa   GetObservationsObserversParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetObservationsObserversParamsCsi.
const (
	GetObservationsObserversParamsCsiCR GetObservationsObserversParamsCsi = "CR"
	GetObservationsObserversParamsCsiEN GetObservationsObserversParamsCsi = "EN"
	GetObservationsObserversParamsCsiEW GetObservationsObserversParamsCsi = "EW"
	GetObservationsObserversParamsCsiEX GetObservationsObserversParamsCsi = "EX"
	GetObservationsObserversParamsCsiLC GetObservationsObserversParamsCsi = "LC"
	GetObservationsObserversParamsCsiNT GetObservationsObserversParamsCsi = "NT"
	GetObservationsObserversParamsCsiVU GetObservationsObserversParamsCsi = "VU"
)

// Defines values for GetObservationsObserversParamsGeoprivacy.
const (
	GetObservationsObserversParamsGeoprivacyObscured        GetObservationsObserversParamsGeoprivacy = "obscured"
	GetObservationsObserversParamsGeoprivacyObscuredPrivate GetObservationsObserversParamsGeoprivacy = "obscured_private"
	GetObservationsObserversParamsGeoprivacyOpen            GetObservationsObserversParamsGeoprivacy = "open"
	GetObservationsObserversParamsGeoprivacyPrivate         GetObservationsObserversParamsGeoprivacy = "private"
)

// Defines values for GetObservationsObserversParamsTaxonGeoprivacy.
const (
	GetObservationsObserversParamsTaxonGeoprivacyObscured        GetObservationsObserversParamsTaxonGeoprivacy = "obscured"
	GetObservationsObserversParamsTaxonGeoprivacyObscuredPrivate GetObservationsObserversParamsTaxonGeoprivacy = "obscured_private"
	GetObservationsObserversParamsTaxonGeoprivacyOpen            GetObservationsObserversParamsTaxonGeoprivacy = "open"
	GetObservationsObserversParamsTaxonGeoprivacyPrivate         GetObservationsObserversParamsTaxonGeoprivacy = "private"
)

// Defines values for GetObservationsObserversParamsObscuration.
const (
	GetObservationsObserversParamsObscurationNone     GetObservationsObserversParamsObscuration = "none"
	GetObservationsObserversParamsObscurationObscured GetObservationsObserversParamsObscuration = "obscured"
	GetObservationsObserversParamsObscurationPrivate  GetObservationsObserversParamsObscuration = "private"
)

// Defines values for GetObservationsObserversParamsHrank.
const (
	GetObservationsObserversParamsHrankClass         GetObservationsObserversParamsHrank = "class"
	GetObservationsObserversParamsHrankComplex       GetObservationsObserversParamsHrank = "complex"
	GetObservationsObserversParamsHrankEpifamily     GetObservationsObserversParamsHrank = "epifamily"
	GetObservationsObserversParamsHrankFamily        GetObservationsObserversParamsHrank = "family"
	GetObservationsObserversParamsHrankForm          GetObservationsObserversParamsHrank = "form"
	GetObservationsObserversParamsHrankGenus         GetObservationsObserversParamsHrank = "genus"
	GetObservationsObserversParamsHrankGenushybrid   GetObservationsObserversParamsHrank = "genushybrid"
	GetObservationsObserversParamsHrankHybrid        GetObservationsObserversParamsHrank = "hybrid"
	GetObservationsObserversParamsHrankInfraclass    GetObservationsObserversParamsHrank = "infraclass"
	GetObservationsObserversParamsHrankInfrahybrid   GetObservationsObserversParamsHrank = "infrahybrid"
	GetObservationsObserversParamsHrankInfraorder    GetObservationsObserversParamsHrank = "infraorder"
	GetObservationsObserversParamsHrankKingdom       GetObservationsObserversParamsHrank = "kingdom"
	GetObservationsObserversParamsHrankOrder         GetObservationsObserversParamsHrank = "order"
	GetObservationsObserversParamsHrankParvorder     GetObservationsObserversParamsHrank = "parvorder"
	GetObservationsObserversParamsHrankPhylum        GetObservationsObserversParamsHrank = "phylum"
	GetObservationsObserversParamsHrankSection       GetObservationsObserversParamsHrank = "section"
	GetObservationsObserversParamsHrankSpecies       GetObservationsObserversParamsHrank = "species"
	GetObservationsObserversParamsHrankSubclass      GetObservationsObserversParamsHrank = "subclass"
	GetObservationsObserversParamsHrankSubfamily     GetObservationsObserversParamsHrank = "subfamily"
	GetObservationsObserversParamsHrankSubgenus      GetObservationsObserversParamsHrank = "subgenus"
	GetObservationsObserversParamsHrankSuborder      GetObservationsObserversParamsHrank = "suborder"
	GetObservationsObserversParamsHrankSubphylum     GetObservationsObserversParamsHrank = "subphylum"
	GetObservationsObserversParamsHrankSubsection    GetObservationsObserversParamsHrank = "subsection"
	GetObservationsObserversParamsHrankSubspecies    GetObservationsObserversParamsHrank = "subspecies"
	GetObservationsObserversParamsHrankSubterclass   GetObservationsObserversParamsHrank = "subterclass"
	GetObservationsObserversParamsHrankSubtribe      GetObservationsObserversParamsHrank = "subtribe"
	GetObservationsObserversParamsHrankSuperclass    GetObservationsObserversParamsHrank = "superclass"
	GetObservationsObserversParamsHrankSuperfamily   GetObservationsObserversParamsHrank = "superfamily"
	GetObservationsObserversParamsHrankSuperorder    GetObservationsObserversParamsHrank = "superorder"
	GetObservationsObserversParamsHrankSupertribe    GetObservationsObserversParamsHrank = "supertribe"
	GetObservationsObserversParamsHrankTribe         GetObservationsObserversParamsHrank = "tribe"
	GetObservationsObserversParamsHrankVariety       GetObservationsObserversParamsHrank = "variety"
	GetObservationsObserversParamsHrankZoosection    GetObservationsObserversParamsHrank = "zoosection"
	GetObservationsObserversParamsHrankZoosubsection GetObservationsObserversParamsHrank = "zoosubsection"
)

// Defines values for GetObservationsObserversParamsLrank.
const (
	GetObservationsObserversParamsLrankClass         GetObservationsObserversParamsLrank = "class"
	GetObservationsObserversParamsLrankComplex       GetObservationsObserversParamsLrank = "complex"
	GetObservationsObserversParamsLrankEpifamily     GetObservationsObserversParamsLrank = "epifamily"
	GetObservationsObserversParamsLrankFamily        GetObservationsObserversParamsLrank = "family"
	GetObservationsObserversParamsLrankForm          GetObservationsObserversParamsLrank = "form"
	GetObservationsObserversParamsLrankGenus         GetObservationsObserversParamsLrank = "genus"
	GetObservationsObserversParamsLrankGenushybrid   GetObservationsObserversParamsLrank = "genushybrid"
	GetObservationsObserversParamsLrankHybrid        GetObservationsObserversParamsLrank = "hybrid"
	GetObservationsObserversParamsLrankInfraclass    GetObservationsObserversParamsLrank = "infraclass"
	GetObservationsObserversParamsLrankInfrahybrid   GetObservationsObserversParamsLrank = "infrahybrid"
	GetObservationsObserversParamsLrankInfraorder    GetObservationsObserversParamsLrank = "infraorder"
	GetObservationsObserversParamsLrankKingdom       GetObservationsObserversParamsLrank = "kingdom"
	GetObservationsObserversParamsLrankOrder         GetObservationsObserversParamsLrank = "order"
	GetObservationsObserversParamsLrankParvorder     GetObservationsObserversParamsLrank = "parvorder"
	GetObservationsObserversParamsLrankPhylum        GetObservationsObserversParamsLrank = "phylum"
	GetObservationsObserversParamsLrankSection       GetObservationsObserversParamsLrank = "section"
	GetObservationsObserversParamsLrankSpecies       GetObservationsObserversParamsLrank = "species"
	GetObservationsObserversParamsLrankSubclass      GetObservationsObserversParamsLrank = "subclass"
	GetObservationsObserversParamsLrankSubfamily     GetObservationsObserversParamsLrank = "subfamily"
	GetObservationsObserversParamsLrankSubgenus      GetObservationsObserversParamsLrank = "subgenus"
	GetObservationsObserversParamsLrankSuborder      GetObservationsObserversParamsLrank = "suborder"
	GetObservationsObserversParamsLrankSubphylum     GetObservationsObserversParamsLrank = "subphylum"
	GetObservationsObserversParamsLrankSubsection    GetObservationsObserversParamsLrank = "subsection"
	GetObservationsObserversParamsLrankSubspecies    GetObservationsObserversParamsLrank = "subspecies"
	GetObservationsObserversParamsLrankSubterclass   GetObservationsObserversParamsLrank = "subterclass"
	GetObservationsObserversParamsLrankSubtribe      GetObservationsObserversParamsLrank = "subtribe"
	GetObservationsObserversParamsLrankSuperclass    GetObservationsObserversParamsLrank = "superclass"
	GetObservationsObserversParamsLrankSuperfamily   GetObservationsObserversParamsLrank = "superfamily"
	GetObservationsObserversParamsLrankSuperorder    GetObservationsObserversParamsLrank = "superorder"
	GetObservationsObserversParamsLrankSupertribe    GetObservationsObserversParamsLrank = "supertribe"
	GetObservationsObserversParamsLrankTribe         GetObservationsObserversParamsLrank = "tribe"
	GetObservationsObserversParamsLrankVariety       GetObservationsObserversParamsLrank = "variety"
	GetObservationsObserversParamsLrankZoosection    GetObservationsObserversParamsLrank = "zoosection"
	GetObservationsObserversParamsLrankZoosubsection GetObservationsObserversParamsLrank = "zoosubsection"
)

// Defines values for GetObservationsObserversParamsIconicTaxa.
const (
	GetObservationsObserversParamsIconicTaxaActinopterygii GetObservationsObserversParamsIconicTaxa = "Actinopterygii"
	GetObservationsObserversParamsIconicTaxaAmphibia       GetObservationsObserversParamsIconicTaxa = "Amphibia"
	GetObservationsObserversParamsIconicTaxaAnimalia       GetObservationsObserversParamsIconicTaxa = "Animalia"
	GetObservationsObserversParamsIconicTaxaArachnida      GetObservationsObserversParamsIconicTaxa = "Arachnida"
	GetObservationsObserversParamsIconicTaxaAves           GetObservationsObserversParamsIconicTaxa = "Aves"
	GetObservationsObserversParamsIconicTaxaChromista      GetObservationsObserversParamsIconicTaxa = "Chromista"
	GetObservationsObserversParamsIconicTaxaFungi          GetObservationsObserversParamsIconicTaxa = "Fungi"
	GetObservationsObserversParamsIconicTaxaInsecta        GetObservationsObserversParamsIconicTaxa = "Insecta"
	GetObservationsObserversParamsIconicTaxaMammalia       GetObservationsObserversParamsIconicTaxa = "Mammalia"
	GetObservationsObserversParamsIconicTaxaMollusca       GetObservationsObserversParamsIconicTaxa = "Mollusca"
	GetObservationsObserversParamsIconicTaxaPlantae        GetObservationsObserversParamsIconicTaxa = "Plantae"
	GetObservationsObserversParamsIconicTaxaProtozoa       GetObservationsObserversParamsIconicTaxa = "Protozoa"
	GetObservationsObserversParamsIconicTaxaReptilia       GetObservationsObserversParamsIconicTaxa = "Reptilia"
	GetObservationsObserversParamsIconicTaxaUnknown        GetObservationsObserversParamsIconicTaxa = "unknown"
)

// Defines values for GetObservationsObserversParamsIdentifications.
const (
	GetObservationsObserversParamsIdentificationsMostAgree    GetObservationsObserversParamsIdentifications = "most_agree"
	GetObservationsObserversParamsIdentificationsMostDisagree GetObservationsObserversParamsIdentifications = "most_disagree"
	GetObservationsObserversParamsIdentificationsSomeAgree    GetObservationsObserversParamsIdentifications = "some_agree"
)

// Defines values for GetObservationsObserversParamsSearchOn.
const (
	GetObservationsObserversParamsSearchOnDescription        GetObservationsObserversParamsSearchOn = "description"
	GetObservationsObserversParamsSearchOnNames              GetObservationsObserversParamsSearchOn = "names"
	GetObservationsObserversParamsSearchOnPlace              GetObservationsObserversParamsSearchOn = "place"
	GetObservationsObserversParamsSearchOnTags               GetObservationsObserversParamsSearchOn = "tags"
	GetObservationsObserversParamsSearchOnTaxonPageObsPhotos GetObservationsObserversParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetObservationsObserversParamsQualityGrade.
const (
	GetObservationsObserversParamsQualityGradeCasual   GetObservationsObserversParamsQualityGrade = "casual"
	GetObservationsObserversParamsQualityGradeNeedsID  GetObservationsObserversParamsQualityGrade = "needs_id"
	GetObservationsObserversParamsQualityGradeResearch GetObservationsObserversParamsQualityGrade = "research"
)

// Defines values for GetObservationsObserversParamsOrder.
const (
	GetObservationsObserversParamsOrderAsc  GetObservationsObserversParamsOrder = "asc"
	GetObservationsObserversParamsOrderDesc GetObservationsObserversParamsOrder = "desc"
)

// Defines values for GetObservationsObserversParamsOrderBy.
const (
	ObservationCount GetObservationsObserversParamsOrderBy = "observation_count"
	SpeciesCount     GetObservationsObserversParamsOrderBy = "species_count"
)

// Defines values for GetObservationsPopularFieldValuesParamsLicense.
const (
	GetObservationsPopularFieldValuesParamsLicenseCc0      GetObservationsPopularFieldValuesParamsLicense = "cc0"
	GetObservationsPopularFieldValuesParamsLicenseCcBy     GetObservationsPopularFieldValuesParamsLicense = "cc-by"
	GetObservationsPopularFieldValuesParamsLicenseCcByNc   GetObservationsPopularFieldValuesParamsLicense = "cc-by-nc"
	GetObservationsPopularFieldValuesParamsLicenseCcByNcNd GetObservationsPopularFieldValuesParamsLicense = "cc-by-nc-nd"
	GetObservationsPopularFieldValuesParamsLicenseCcByNcSa GetObservationsPopularFieldValuesParamsLicense = "cc-by-nc-sa"
	GetObservationsPopularFieldValuesParamsLicenseCcByNd   GetObservationsPopularFieldValuesParamsLicense = "cc-by-nd"
	GetObservationsPopularFieldValuesParamsLicenseCcBySa   GetObservationsPopularFieldValuesParamsLicense = "cc-by-sa"
)

// Defines values for GetObservationsPopularFieldValuesParamsPhotoLicense.
const (
	GetObservationsPopularFieldValuesParamsPhotoLicenseCc0      GetObservationsPopularFieldValuesParamsPhotoLicense = "cc0"
	GetObservationsPopularFieldValuesParamsPhotoLicenseCcBy     GetObservationsPopularFieldValuesParamsPhotoLicense = "cc-by"
	GetObservationsPopularFieldValuesParamsPhotoLicenseCcByNc   GetObservationsPopularFieldValuesParamsPhotoLicense = "cc-by-nc"
	GetObservationsPopularFieldValuesParamsPhotoLicenseCcByNcNd GetObservationsPopularFieldValuesParamsPhotoLicense = "cc-by-nc-nd"
	GetObservationsPopularFieldValuesParamsPhotoLicenseCcByNcSa GetObservationsPopularFieldValuesParamsPhotoLicense = "cc-by-nc-sa"
	GetObservationsPopularFieldValuesParamsPhotoLicenseCcByNd   GetObservationsPopularFieldValuesParamsPhotoLicense = "cc-by-nd"
	GetObservationsPopularFieldValuesParamsPhotoLicenseCcBySa   GetObservationsPopularFieldValuesParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetObservationsPopularFieldValuesParamsRank.
const (
	GetObservationsPopularFieldValuesParamsRankClass         GetObservationsPopularFieldValuesParamsRank = "class"
	GetObservationsPopularFieldValuesParamsRankComplex       GetObservationsPopularFieldValuesParamsRank = "complex"
	GetObservationsPopularFieldValuesParamsRankEpifamily     GetObservationsPopularFieldValuesParamsRank = "epifamily"
	GetObservationsPopularFieldValuesParamsRankFamily        GetObservationsPopularFieldValuesParamsRank = "family"
	GetObservationsPopularFieldValuesParamsRankForm          GetObservationsPopularFieldValuesParamsRank = "form"
	GetObservationsPopularFieldValuesParamsRankGenus         GetObservationsPopularFieldValuesParamsRank = "genus"
	GetObservationsPopularFieldValuesParamsRankGenushybrid   GetObservationsPopularFieldValuesParamsRank = "genushybrid"
	GetObservationsPopularFieldValuesParamsRankHybrid        GetObservationsPopularFieldValuesParamsRank = "hybrid"
	GetObservationsPopularFieldValuesParamsRankInfraclass    GetObservationsPopularFieldValuesParamsRank = "infraclass"
	GetObservationsPopularFieldValuesParamsRankInfrahybrid   GetObservationsPopularFieldValuesParamsRank = "infrahybrid"
	GetObservationsPopularFieldValuesParamsRankInfraorder    GetObservationsPopularFieldValuesParamsRank = "infraorder"
	GetObservationsPopularFieldValuesParamsRankKingdom       GetObservationsPopularFieldValuesParamsRank = "kingdom"
	GetObservationsPopularFieldValuesParamsRankOrder         GetObservationsPopularFieldValuesParamsRank = "order"
	GetObservationsPopularFieldValuesParamsRankParvorder     GetObservationsPopularFieldValuesParamsRank = "parvorder"
	GetObservationsPopularFieldValuesParamsRankPhylum        GetObservationsPopularFieldValuesParamsRank = "phylum"
	GetObservationsPopularFieldValuesParamsRankSection       GetObservationsPopularFieldValuesParamsRank = "section"
	GetObservationsPopularFieldValuesParamsRankSpecies       GetObservationsPopularFieldValuesParamsRank = "species"
	GetObservationsPopularFieldValuesParamsRankSubclass      GetObservationsPopularFieldValuesParamsRank = "subclass"
	GetObservationsPopularFieldValuesParamsRankSubfamily     GetObservationsPopularFieldValuesParamsRank = "subfamily"
	GetObservationsPopularFieldValuesParamsRankSubgenus      GetObservationsPopularFieldValuesParamsRank = "subgenus"
	GetObservationsPopularFieldValuesParamsRankSuborder      GetObservationsPopularFieldValuesParamsRank = "suborder"
	GetObservationsPopularFieldValuesParamsRankSubphylum     GetObservationsPopularFieldValuesParamsRank = "subphylum"
	GetObservationsPopularFieldValuesParamsRankSubsection    GetObservationsPopularFieldValuesParamsRank = "subsection"
	GetObservationsPopularFieldValuesParamsRankSubspecies    GetObservationsPopularFieldValuesParamsRank = "subspecies"
	GetObservationsPopularFieldValuesParamsRankSubterclass   GetObservationsPopularFieldValuesParamsRank = "subterclass"
	GetObservationsPopularFieldValuesParamsRankSubtribe      GetObservationsPopularFieldValuesParamsRank = "subtribe"
	GetObservationsPopularFieldValuesParamsRankSuperclass    GetObservationsPopularFieldValuesParamsRank = "superclass"
	GetObservationsPopularFieldValuesParamsRankSuperfamily   GetObservationsPopularFieldValuesParamsRank = "superfamily"
	GetObservationsPopularFieldValuesParamsRankSuperorder    GetObservationsPopularFieldValuesParamsRank = "superorder"
	GetObservationsPopularFieldValuesParamsRankSupertribe    GetObservationsPopularFieldValuesParamsRank = "supertribe"
	GetObservationsPopularFieldValuesParamsRankTribe         GetObservationsPopularFieldValuesParamsRank = "tribe"
	GetObservationsPopularFieldValuesParamsRankVariety       GetObservationsPopularFieldValuesParamsRank = "variety"
	GetObservationsPopularFieldValuesParamsRankZoosection    GetObservationsPopularFieldValuesParamsRank = "zoosection"
	GetObservationsPopularFieldValuesParamsRankZoosubsection GetObservationsPopularFieldValuesParamsRank = "zoosubsection"
)

// Defines values for GetObservationsPopularFieldValuesParamsSoundLicense.
const (
	GetObservationsPopularFieldValuesParamsSoundLicenseCc0      GetObservationsPopularFieldValuesParamsSoundLicense = "cc0"
	GetObservationsPopularFieldValuesParamsSoundLicenseCcBy     GetObservationsPopularFieldValuesParamsSoundLicense = "cc-by"
	GetObservationsPopularFieldValuesParamsSoundLicenseCcByNc   GetObservationsPopularFieldValuesParamsSoundLicense = "cc-by-nc"
	GetObservationsPopularFieldValuesParamsSoundLicenseCcByNcNd GetObservationsPopularFieldValuesParamsSoundLicense = "cc-by-nc-nd"
	GetObservationsPopularFieldValuesParamsSoundLicenseCcByNcSa GetObservationsPopularFieldValuesParamsSoundLicense = "cc-by-nc-sa"
	GetObservationsPopularFieldValuesParamsSoundLicenseCcByNd   GetObservationsPopularFieldValuesParamsSoundLicense = "cc-by-nd"
	GetObservationsPopularFieldValuesParamsSoundLicenseCcBySa   GetObservationsPopularFieldValuesParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetObservationsPopularFieldValuesParamsCsi.
const (
	GetObservationsPopularFieldValuesParamsCsiCR GetObservationsPopularFieldValuesParamsCsi = "CR"
	GetObservationsPopularFieldValuesParamsCsiEN GetObservationsPopularFieldValuesParamsCsi = "EN"
	GetObservationsPopularFieldValuesParamsCsiEW GetObservationsPopularFieldValuesParamsCsi = "EW"
	GetObservationsPopularFieldValuesParamsCsiEX GetObservationsPopularFieldValuesParamsCsi = "EX"
	GetObservationsPopularFieldValuesParamsCsiLC GetObservationsPopularFieldValuesParamsCsi = "LC"
	GetObservationsPopularFieldValuesParamsCsiNT GetObservationsPopularFieldValuesParamsCsi = "NT"
	GetObservationsPopularFieldValuesParamsCsiVU GetObservationsPopularFieldValuesParamsCsi = "VU"
)

// Defines values for GetObservationsPopularFieldValuesParamsGeoprivacy.
const (
	GetObservationsPopularFieldValuesParamsGeoprivacyObscured        GetObservationsPopularFieldValuesParamsGeoprivacy = "obscured"
	GetObservationsPopularFieldValuesParamsGeoprivacyObscuredPrivate GetObservationsPopularFieldValuesParamsGeoprivacy = "obscured_private"
	GetObservationsPopularFieldValuesParamsGeoprivacyOpen            GetObservationsPopularFieldValuesParamsGeoprivacy = "open"
	GetObservationsPopularFieldValuesParamsGeoprivacyPrivate         GetObservationsPopularFieldValuesParamsGeoprivacy = "private"
)

// Defines values for GetObservationsPopularFieldValuesParamsTaxonGeoprivacy.
const (
	GetObservationsPopularFieldValuesParamsTaxonGeoprivacyObscured        GetObservationsPopularFieldValuesParamsTaxonGeoprivacy = "obscured"
	GetObservationsPopularFieldValuesParamsTaxonGeoprivacyObscuredPrivate GetObservationsPopularFieldValuesParamsTaxonGeoprivacy = "obscured_private"
	GetObservationsPopularFieldValuesParamsTaxonGeoprivacyOpen            GetObservationsPopularFieldValuesParamsTaxonGeoprivacy = "open"
	GetObservationsPopularFieldValuesParamsTaxonGeoprivacyPrivate         GetObservationsPopularFieldValuesParamsTaxonGeoprivacy = "private"
)

// Defines values for GetObservationsPopularFieldValuesParamsObscuration.
const (
	GetObservationsPopularFieldValuesParamsObscurationNone     GetObservationsPopularFieldValuesParamsObscuration = "none"
	GetObservationsPopularFieldValuesParamsObscurationObscured GetObservationsPopularFieldValuesParamsObscuration = "obscured"
	GetObservationsPopularFieldValuesParamsObscurationPrivate  GetObservationsPopularFieldValuesParamsObscuration = "private"
)

// Defines values for GetObservationsPopularFieldValuesParamsHrank.
const (
	GetObservationsPopularFieldValuesParamsHrankClass         GetObservationsPopularFieldValuesParamsHrank = "class"
	GetObservationsPopularFieldValuesParamsHrankComplex       GetObservationsPopularFieldValuesParamsHrank = "complex"
	GetObservationsPopularFieldValuesParamsHrankEpifamily     GetObservationsPopularFieldValuesParamsHrank = "epifamily"
	GetObservationsPopularFieldValuesParamsHrankFamily        GetObservationsPopularFieldValuesParamsHrank = "family"
	GetObservationsPopularFieldValuesParamsHrankForm          GetObservationsPopularFieldValuesParamsHrank = "form"
	GetObservationsPopularFieldValuesParamsHrankGenus         GetObservationsPopularFieldValuesParamsHrank = "genus"
	GetObservationsPopularFieldValuesParamsHrankGenushybrid   GetObservationsPopularFieldValuesParamsHrank = "genushybrid"
	GetObservationsPopularFieldValuesParamsHrankHybrid        GetObservationsPopularFieldValuesParamsHrank = "hybrid"
	GetObservationsPopularFieldValuesParamsHrankInfraclass    GetObservationsPopularFieldValuesParamsHrank = "infraclass"
	GetObservationsPopularFieldValuesParamsHrankInfrahybrid   GetObservationsPopularFieldValuesParamsHrank = "infrahybrid"
	GetObservationsPopularFieldValuesParamsHrankInfraorder    GetObservationsPopularFieldValuesParamsHrank = "infraorder"
	GetObservationsPopularFieldValuesParamsHrankKingdom       GetObservationsPopularFieldValuesParamsHrank = "kingdom"
	GetObservationsPopularFieldValuesParamsHrankOrder         GetObservationsPopularFieldValuesParamsHrank = "order"
	GetObservationsPopularFieldValuesParamsHrankParvorder     GetObservationsPopularFieldValuesParamsHrank = "parvorder"
	GetObservationsPopularFieldValuesParamsHrankPhylum        GetObservationsPopularFieldValuesParamsHrank = "phylum"
	GetObservationsPopularFieldValuesParamsHrankSection       GetObservationsPopularFieldValuesParamsHrank = "section"
	GetObservationsPopularFieldValuesParamsHrankSpecies       GetObservationsPopularFieldValuesParamsHrank = "species"
	GetObservationsPopularFieldValuesParamsHrankSubclass      GetObservationsPopularFieldValuesParamsHrank = "subclass"
	GetObservationsPopularFieldValuesParamsHrankSubfamily     GetObservationsPopularFieldValuesParamsHrank = "subfamily"
	GetObservationsPopularFieldValuesParamsHrankSubgenus      GetObservationsPopularFieldValuesParamsHrank = "subgenus"
	GetObservationsPopularFieldValuesParamsHrankSuborder      GetObservationsPopularFieldValuesParamsHrank = "suborder"
	GetObservationsPopularFieldValuesParamsHrankSubphylum     GetObservationsPopularFieldValuesParamsHrank = "subphylum"
	GetObservationsPopularFieldValuesParamsHrankSubsection    GetObservationsPopularFieldValuesParamsHrank = "subsection"
	GetObservationsPopularFieldValuesParamsHrankSubspecies    GetObservationsPopularFieldValuesParamsHrank = "subspecies"
	GetObservationsPopularFieldValuesParamsHrankSubterclass   GetObservationsPopularFieldValuesParamsHrank = "subterclass"
	GetObservationsPopularFieldValuesParamsHrankSubtribe      GetObservationsPopularFieldValuesParamsHrank = "subtribe"
	GetObservationsPopularFieldValuesParamsHrankSuperclass    GetObservationsPopularFieldValuesParamsHrank = "superclass"
	GetObservationsPopularFieldValuesParamsHrankSuperfamily   GetObservationsPopularFieldValuesParamsHrank = "superfamily"
	GetObservationsPopularFieldValuesParamsHrankSuperorder    GetObservationsPopularFieldValuesParamsHrank = "superorder"
	GetObservationsPopularFieldValuesParamsHrankSupertribe    GetObservationsPopularFieldValuesParamsHrank = "supertribe"
	GetObservationsPopularFieldValuesParamsHrankTribe         GetObservationsPopularFieldValuesParamsHrank = "tribe"
	GetObservationsPopularFieldValuesParamsHrankVariety       GetObservationsPopularFieldValuesParamsHrank = "variety"
	GetObservationsPopularFieldValuesParamsHrankZoosection    GetObservationsPopularFieldValuesParamsHrank = "zoosection"
	GetObservationsPopularFieldValuesParamsHrankZoosubsection GetObservationsPopularFieldValuesParamsHrank = "zoosubsection"
)

// Defines values for GetObservationsPopularFieldValuesParamsLrank.
const (
	GetObservationsPopularFieldValuesParamsLrankClass         GetObservationsPopularFieldValuesParamsLrank = "class"
	GetObservationsPopularFieldValuesParamsLrankComplex       GetObservationsPopularFieldValuesParamsLrank = "complex"
	GetObservationsPopularFieldValuesParamsLrankEpifamily     GetObservationsPopularFieldValuesParamsLrank = "epifamily"
	GetObservationsPopularFieldValuesParamsLrankFamily        GetObservationsPopularFieldValuesParamsLrank = "family"
	GetObservationsPopularFieldValuesParamsLrankForm          GetObservationsPopularFieldValuesParamsLrank = "form"
	GetObservationsPopularFieldValuesParamsLrankGenus         GetObservationsPopularFieldValuesParamsLrank = "genus"
	GetObservationsPopularFieldValuesParamsLrankGenushybrid   GetObservationsPopularFieldValuesParamsLrank = "genushybrid"
	GetObservationsPopularFieldValuesParamsLrankHybrid        GetObservationsPopularFieldValuesParamsLrank = "hybrid"
	GetObservationsPopularFieldValuesParamsLrankInfraclass    GetObservationsPopularFieldValuesParamsLrank = "infraclass"
	GetObservationsPopularFieldValuesParamsLrankInfrahybrid   GetObservationsPopularFieldValuesParamsLrank = "infrahybrid"
	GetObservationsPopularFieldValuesParamsLrankInfraorder    GetObservationsPopularFieldValuesParamsLrank = "infraorder"
	GetObservationsPopularFieldValuesParamsLrankKingdom       GetObservationsPopularFieldValuesParamsLrank = "kingdom"
	GetObservationsPopularFieldValuesParamsLrankOrder         GetObservationsPopularFieldValuesParamsLrank = "order"
	GetObservationsPopularFieldValuesParamsLrankParvorder     GetObservationsPopularFieldValuesParamsLrank = "parvorder"
	GetObservationsPopularFieldValuesParamsLrankPhylum        GetObservationsPopularFieldValuesParamsLrank = "phylum"
	GetObservationsPopularFieldValuesParamsLrankSection       GetObservationsPopularFieldValuesParamsLrank = "section"
	GetObservationsPopularFieldValuesParamsLrankSpecies       GetObservationsPopularFieldValuesParamsLrank = "species"
	GetObservationsPopularFieldValuesParamsLrankSubclass      GetObservationsPopularFieldValuesParamsLrank = "subclass"
	GetObservationsPopularFieldValuesParamsLrankSubfamily     GetObservationsPopularFieldValuesParamsLrank = "subfamily"
	GetObservationsPopularFieldValuesParamsLrankSubgenus      GetObservationsPopularFieldValuesParamsLrank = "subgenus"
	GetObservationsPopularFieldValuesParamsLrankSuborder      GetObservationsPopularFieldValuesParamsLrank = "suborder"
	GetObservationsPopularFieldValuesParamsLrankSubphylum     GetObservationsPopularFieldValuesParamsLrank = "subphylum"
	GetObservationsPopularFieldValuesParamsLrankSubsection    GetObservationsPopularFieldValuesParamsLrank = "subsection"
	GetObservationsPopularFieldValuesParamsLrankSubspecies    GetObservationsPopularFieldValuesParamsLrank = "subspecies"
	GetObservationsPopularFieldValuesParamsLrankSubterclass   GetObservationsPopularFieldValuesParamsLrank = "subterclass"
	GetObservationsPopularFieldValuesParamsLrankSubtribe      GetObservationsPopularFieldValuesParamsLrank = "subtribe"
	GetObservationsPopularFieldValuesParamsLrankSuperclass    GetObservationsPopularFieldValuesParamsLrank = "superclass"
	GetObservationsPopularFieldValuesParamsLrankSuperfamily   GetObservationsPopularFieldValuesParamsLrank = "superfamily"
	GetObservationsPopularFieldValuesParamsLrankSuperorder    GetObservationsPopularFieldValuesParamsLrank = "superorder"
	GetObservationsPopularFieldValuesParamsLrankSupertribe    GetObservationsPopularFieldValuesParamsLrank = "supertribe"
	GetObservationsPopularFieldValuesParamsLrankTribe         GetObservationsPopularFieldValuesParamsLrank = "tribe"
	GetObservationsPopularFieldValuesParamsLrankVariety       GetObservationsPopularFieldValuesParamsLrank = "variety"
	GetObservationsPopularFieldValuesParamsLrankZoosection    GetObservationsPopularFieldValuesParamsLrank = "zoosection"
	GetObservationsPopularFieldValuesParamsLrankZoosubsection GetObservationsPopularFieldValuesParamsLrank = "zoosubsection"
)

// Defines values for GetObservationsPopularFieldValuesParamsIconicTaxa.
const (
	GetObservationsPopularFieldValuesParamsIconicTaxaActinopterygii GetObservationsPopularFieldValuesParamsIconicTaxa = "Actinopterygii"
	GetObservationsPopularFieldValuesParamsIconicTaxaAmphibia       GetObservationsPopularFieldValuesParamsIconicTaxa = "Amphibia"
	GetObservationsPopularFieldValuesParamsIconicTaxaAnimalia       GetObservationsPopularFieldValuesParamsIconicTaxa = "Animalia"
	GetObservationsPopularFieldValuesParamsIconicTaxaArachnida      GetObservationsPopularFieldValuesParamsIconicTaxa = "Arachnida"
	GetObservationsPopularFieldValuesParamsIconicTaxaAves           GetObservationsPopularFieldValuesParamsIconicTaxa = "Aves"
	GetObservationsPopularFieldValuesParamsIconicTaxaChromista      GetObservationsPopularFieldValuesParamsIconicTaxa = "Chromista"
	GetObservationsPopularFieldValuesParamsIconicTaxaFungi          GetObservationsPopularFieldValuesParamsIconicTaxa = "Fungi"
	GetObservationsPopularFieldValuesParamsIconicTaxaInsecta        GetObservationsPopularFieldValuesParamsIconicTaxa = "Insecta"
	GetObservationsPopularFieldValuesParamsIconicTaxaMammalia       GetObservationsPopularFieldValuesParamsIconicTaxa = "Mammalia"
	GetObservationsPopularFieldValuesParamsIconicTaxaMollusca       GetObservationsPopularFieldValuesParamsIconicTaxa = "Mollusca"
	GetObservationsPopularFieldValuesParamsIconicTaxaPlantae        GetObservationsPopularFieldValuesParamsIconicTaxa = "Plantae"
	GetObservationsPopularFieldValuesParamsIconicTaxaProtozoa       GetObservationsPopularFieldValuesParamsIconicTaxa = "Protozoa"
	GetObservationsPopularFieldValuesParamsIconicTaxaReptilia       GetObservationsPopularFieldValuesParamsIconicTaxa = "Reptilia"
	GetObservationsPopularFieldValuesParamsIconicTaxaUnknown        GetObservationsPopularFieldValuesParamsIconicTaxa = "unknown"
)

// Defines values for GetObservationsPopularFieldValuesParamsIdentifications.
const (
	GetObservationsPopularFieldValuesParamsIdentificationsMostAgree    GetObservationsPopularFieldValuesParamsIdentifications = "most_agree"
	GetObservationsPopularFieldValuesParamsIdentificationsMostDisagree GetObservationsPopularFieldValuesParamsIdentifications = "most_disagree"
	GetObservationsPopularFieldValuesParamsIdentificationsSomeAgree    GetObservationsPopularFieldValuesParamsIdentifications = "some_agree"
)

// Defines values for GetObservationsPopularFieldValuesParamsSearchOn.
const (
	GetObservationsPopularFieldValuesParamsSearchOnDescription        GetObservationsPopularFieldValuesParamsSearchOn = "description"
	GetObservationsPopularFieldValuesParamsSearchOnNames              GetObservationsPopularFieldValuesParamsSearchOn = "names"
	GetObservationsPopularFieldValuesParamsSearchOnPlace              GetObservationsPopularFieldValuesParamsSearchOn = "place"
	GetObservationsPopularFieldValuesParamsSearchOnTags               GetObservationsPopularFieldValuesParamsSearchOn = "tags"
	GetObservationsPopularFieldValuesParamsSearchOnTaxonPageObsPhotos GetObservationsPopularFieldValuesParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetObservationsPopularFieldValuesParamsQualityGrade.
const (
	GetObservationsPopularFieldValuesParamsQualityGradeCasual   GetObservationsPopularFieldValuesParamsQualityGrade = "casual"
	GetObservationsPopularFieldValuesParamsQualityGradeNeedsID  GetObservationsPopularFieldValuesParamsQualityGrade = "needs_id"
	GetObservationsPopularFieldValuesParamsQualityGradeResearch GetObservationsPopularFieldValuesParamsQualityGrade = "research"
)

// Defines values for GetObservationsPopularFieldValuesParamsOrder.
const (
	GetObservationsPopularFieldValuesParamsOrderAsc  GetObservationsPopularFieldValuesParamsOrder = "asc"
	GetObservationsPopularFieldValuesParamsOrderDesc GetObservationsPopularFieldValuesParamsOrder = "desc"
)

// Defines values for GetObservationsPopularFieldValuesParamsOrderBy.
const (
	GetObservationsPopularFieldValuesParamsOrderByCreatedAt    GetObservationsPopularFieldValuesParamsOrderBy = "created_at"
	GetObservationsPopularFieldValuesParamsOrderByGeoScore     GetObservationsPopularFieldValuesParamsOrderBy = "geo_score"
	GetObservationsPopularFieldValuesParamsOrderByID           GetObservationsPopularFieldValuesParamsOrderBy = "id"
	GetObservationsPopularFieldValuesParamsOrderByObservedOn   GetObservationsPopularFieldValuesParamsOrderBy = "observed_on"
	GetObservationsPopularFieldValuesParamsOrderByRandom       GetObservationsPopularFieldValuesParamsOrderBy = "random"
	GetObservationsPopularFieldValuesParamsOrderBySpeciesGuess GetObservationsPopularFieldValuesParamsOrderBy = "species_guess"
	GetObservationsPopularFieldValuesParamsOrderByUpdatedAt    GetObservationsPopularFieldValuesParamsOrderBy = "updated_at"
	GetObservationsPopularFieldValuesParamsOrderByVotes        GetObservationsPopularFieldValuesParamsOrderBy = "votes"
)

// Defines values for GetObservationsPopularFieldValuesParamsDateField.
const (
	GetObservationsPopularFieldValuesParamsDateFieldCreated  GetObservationsPopularFieldValuesParamsDateField = "created"
	GetObservationsPopularFieldValuesParamsDateFieldObserved GetObservationsPopularFieldValuesParamsDateField = "observed"
)

// Defines values for GetObservationsPopularFieldValuesParamsInterval.
const (
	GetObservationsPopularFieldValuesParamsIntervalMonthOfYear GetObservationsPopularFieldValuesParamsInterval = "month_of_year"
	GetObservationsPopularFieldValuesParamsIntervalWeekOfYear  GetObservationsPopularFieldValuesParamsInterval = "week_of_year"
)

// Defines values for GetObservationsSpeciesCountsParamsLicense.
const (
	GetObservationsSpeciesCountsParamsLicenseCc0      GetObservationsSpeciesCountsParamsLicense = "cc0"
	GetObservationsSpeciesCountsParamsLicenseCcBy     GetObservationsSpeciesCountsParamsLicense = "cc-by"
	GetObservationsSpeciesCountsParamsLicenseCcByNc   GetObservationsSpeciesCountsParamsLicense = "cc-by-nc"
	GetObservationsSpeciesCountsParamsLicenseCcByNcNd GetObservationsSpeciesCountsParamsLicense = "cc-by-nc-nd"
	GetObservationsSpeciesCountsParamsLicenseCcByNcSa GetObservationsSpeciesCountsParamsLicense = "cc-by-nc-sa"
	GetObservationsSpeciesCountsParamsLicenseCcByNd   GetObservationsSpeciesCountsParamsLicense = "cc-by-nd"
	GetObservationsSpeciesCountsParamsLicenseCcBySa   GetObservationsSpeciesCountsParamsLicense = "cc-by-sa"
)

// Defines values for GetObservationsSpeciesCountsParamsPhotoLicense.
const (
	GetObservationsSpeciesCountsParamsPhotoLicenseCc0      GetObservationsSpeciesCountsParamsPhotoLicense = "cc0"
	GetObservationsSpeciesCountsParamsPhotoLicenseCcBy     GetObservationsSpeciesCountsParamsPhotoLicense = "cc-by"
	GetObservationsSpeciesCountsParamsPhotoLicenseCcByNc   GetObservationsSpeciesCountsParamsPhotoLicense = "cc-by-nc"
	GetObservationsSpeciesCountsParamsPhotoLicenseCcByNcNd GetObservationsSpeciesCountsParamsPhotoLicense = "cc-by-nc-nd"
	GetObservationsSpeciesCountsParamsPhotoLicenseCcByNcSa GetObservationsSpeciesCountsParamsPhotoLicense = "cc-by-nc-sa"
	GetObservationsSpeciesCountsParamsPhotoLicenseCcByNd   GetObservationsSpeciesCountsParamsPhotoLicense = "cc-by-nd"
	GetObservationsSpeciesCountsParamsPhotoLicenseCcBySa   GetObservationsSpeciesCountsParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetObservationsSpeciesCountsParamsRank.
const (
	GetObservationsSpeciesCountsParamsRankClass         GetObservationsSpeciesCountsParamsRank = "class"
	GetObservationsSpeciesCountsParamsRankComplex       GetObservationsSpeciesCountsParamsRank = "complex"
	GetObservationsSpeciesCountsParamsRankEpifamily     GetObservationsSpeciesCountsParamsRank = "epifamily"
	GetObservationsSpeciesCountsParamsRankFamily        GetObservationsSpeciesCountsParamsRank = "family"
	GetObservationsSpeciesCountsParamsRankForm          GetObservationsSpeciesCountsParamsRank = "form"
	GetObservationsSpeciesCountsParamsRankGenus         GetObservationsSpeciesCountsParamsRank = "genus"
	GetObservationsSpeciesCountsParamsRankGenushybrid   GetObservationsSpeciesCountsParamsRank = "genushybrid"
	GetObservationsSpeciesCountsParamsRankHybrid        GetObservationsSpeciesCountsParamsRank = "hybrid"
	GetObservationsSpeciesCountsParamsRankInfraclass    GetObservationsSpeciesCountsParamsRank = "infraclass"
	GetObservationsSpeciesCountsParamsRankInfrahybrid   GetObservationsSpeciesCountsParamsRank = "infrahybrid"
	GetObservationsSpeciesCountsParamsRankInfraorder    GetObservationsSpeciesCountsParamsRank = "infraorder"
	GetObservationsSpeciesCountsParamsRankKingdom       GetObservationsSpeciesCountsParamsRank = "kingdom"
	GetObservationsSpeciesCountsParamsRankOrder         GetObservationsSpeciesCountsParamsRank = "order"
	GetObservationsSpeciesCountsParamsRankParvorder     GetObservationsSpeciesCountsParamsRank = "parvorder"
	GetObservationsSpeciesCountsParamsRankPhylum        GetObservationsSpeciesCountsParamsRank = "phylum"
	GetObservationsSpeciesCountsParamsRankSection       GetObservationsSpeciesCountsParamsRank = "section"
	GetObservationsSpeciesCountsParamsRankSpecies       GetObservationsSpeciesCountsParamsRank = "species"
	GetObservationsSpeciesCountsParamsRankSubclass      GetObservationsSpeciesCountsParamsRank = "subclass"
	GetObservationsSpeciesCountsParamsRankSubfamily     GetObservationsSpeciesCountsParamsRank = "subfamily"
	GetObservationsSpeciesCountsParamsRankSubgenus      GetObservationsSpeciesCountsParamsRank = "subgenus"
	GetObservationsSpeciesCountsParamsRankSuborder      GetObservationsSpeciesCountsParamsRank = "suborder"
	GetObservationsSpeciesCountsParamsRankSubphylum     GetObservationsSpeciesCountsParamsRank = "subphylum"
	GetObservationsSpeciesCountsParamsRankSubsection    GetObservationsSpeciesCountsParamsRank = "subsection"
	GetObservationsSpeciesCountsParamsRankSubspecies    GetObservationsSpeciesCountsParamsRank = "subspecies"
	GetObservationsSpeciesCountsParamsRankSubterclass   GetObservationsSpeciesCountsParamsRank = "subterclass"
	GetObservationsSpeciesCountsParamsRankSubtribe      GetObservationsSpeciesCountsParamsRank = "subtribe"
	GetObservationsSpeciesCountsParamsRankSuperclass    GetObservationsSpeciesCountsParamsRank = "superclass"
	GetObservationsSpeciesCountsParamsRankSuperfamily   GetObservationsSpeciesCountsParamsRank = "superfamily"
	GetObservationsSpeciesCountsParamsRankSuperorder    GetObservationsSpeciesCountsParamsRank = "superorder"
	GetObservationsSpeciesCountsParamsRankSupertribe    GetObservationsSpeciesCountsParamsRank = "supertribe"
	GetObservationsSpeciesCountsParamsRankTribe         GetObservationsSpeciesCountsParamsRank = "tribe"
	GetObservationsSpeciesCountsParamsRankVariety       GetObservationsSpeciesCountsParamsRank = "variety"
	GetObservationsSpeciesCountsParamsRankZoosection    GetObservationsSpeciesCountsParamsRank = "zoosection"
	GetObservationsSpeciesCountsParamsRankZoosubsection GetObservationsSpeciesCountsParamsRank = "zoosubsection"
)

// Defines values for GetObservationsSpeciesCountsParamsSoundLicense.
const (
	GetObservationsSpeciesCountsParamsSoundLicenseCc0      GetObservationsSpeciesCountsParamsSoundLicense = "cc0"
	GetObservationsSpeciesCountsParamsSoundLicenseCcBy     GetObservationsSpeciesCountsParamsSoundLicense = "cc-by"
	GetObservationsSpeciesCountsParamsSoundLicenseCcByNc   GetObservationsSpeciesCountsParamsSoundLicense = "cc-by-nc"
	GetObservationsSpeciesCountsParamsSoundLicenseCcByNcNd GetObservationsSpeciesCountsParamsSoundLicense = "cc-by-nc-nd"
	GetObservationsSpeciesCountsParamsSoundLicenseCcByNcSa GetObservationsSpeciesCountsParamsSoundLicense = "cc-by-nc-sa"
	GetObservationsSpeciesCountsParamsSoundLicenseCcByNd   GetObservationsSpeciesCountsParamsSoundLicense = "cc-by-nd"
	GetObservationsSpeciesCountsParamsSoundLicenseCcBySa   GetObservationsSpeciesCountsParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetObservationsSpeciesCountsParamsCsi.
const (
	GetObservationsSpeciesCountsParamsCsiCR GetObservationsSpeciesCountsParamsCsi = "CR"
	GetObservationsSpeciesCountsParamsCsiEN GetObservationsSpeciesCountsParamsCsi = "EN"
	GetObservationsSpeciesCountsParamsCsiEW GetObservationsSpeciesCountsParamsCsi = "EW"
	GetObservationsSpeciesCountsParamsCsiEX GetObservationsSpeciesCountsParamsCsi = "EX"
	GetObservationsSpeciesCountsParamsCsiLC GetObservationsSpeciesCountsParamsCsi = "LC"
	GetObservationsSpeciesCountsParamsCsiNT GetObservationsSpeciesCountsParamsCsi = "NT"
	GetObservationsSpeciesCountsParamsCsiVU GetObservationsSpeciesCountsParamsCsi = "VU"
)

// Defines values for GetObservationsSpeciesCountsParamsGeoprivacy.
const (
	GetObservationsSpeciesCountsParamsGeoprivacyObscured        GetObservationsSpeciesCountsParamsGeoprivacy = "obscured"
	GetObservationsSpeciesCountsParamsGeoprivacyObscuredPrivate GetObservationsSpeciesCountsParamsGeoprivacy = "obscured_private"
	GetObservationsSpeciesCountsParamsGeoprivacyOpen            GetObservationsSpeciesCountsParamsGeoprivacy = "open"
	GetObservationsSpeciesCountsParamsGeoprivacyPrivate         GetObservationsSpeciesCountsParamsGeoprivacy = "private"
)

// Defines values for GetObservationsSpeciesCountsParamsTaxonGeoprivacy.
const (
	GetObservationsSpeciesCountsParamsTaxonGeoprivacyObscured        GetObservationsSpeciesCountsParamsTaxonGeoprivacy = "obscured"
	GetObservationsSpeciesCountsParamsTaxonGeoprivacyObscuredPrivate GetObservationsSpeciesCountsParamsTaxonGeoprivacy = "obscured_private"
	GetObservationsSpeciesCountsParamsTaxonGeoprivacyOpen            GetObservationsSpeciesCountsParamsTaxonGeoprivacy = "open"
	GetObservationsSpeciesCountsParamsTaxonGeoprivacyPrivate         GetObservationsSpeciesCountsParamsTaxonGeoprivacy = "private"
)

// Defines values for GetObservationsSpeciesCountsParamsObscuration.
const (
	GetObservationsSpeciesCountsParamsObscurationNone     GetObservationsSpeciesCountsParamsObscuration = "none"
	GetObservationsSpeciesCountsParamsObscurationObscured GetObservationsSpeciesCountsParamsObscuration = "obscured"
	GetObservationsSpeciesCountsParamsObscurationPrivate  GetObservationsSpeciesCountsParamsObscuration = "private"
)

// Defines values for GetObservationsSpeciesCountsParamsHrank.
const (
	GetObservationsSpeciesCountsParamsHrankClass         GetObservationsSpeciesCountsParamsHrank = "class"
	GetObservationsSpeciesCountsParamsHrankComplex       GetObservationsSpeciesCountsParamsHrank = "complex"
	GetObservationsSpeciesCountsParamsHrankEpifamily     GetObservationsSpeciesCountsParamsHrank = "epifamily"
	GetObservationsSpeciesCountsParamsHrankFamily        GetObservationsSpeciesCountsParamsHrank = "family"
	GetObservationsSpeciesCountsParamsHrankForm          GetObservationsSpeciesCountsParamsHrank = "form"
	GetObservationsSpeciesCountsParamsHrankGenus         GetObservationsSpeciesCountsParamsHrank = "genus"
	GetObservationsSpeciesCountsParamsHrankGenushybrid   GetObservationsSpeciesCountsParamsHrank = "genushybrid"
	GetObservationsSpeciesCountsParamsHrankHybrid        GetObservationsSpeciesCountsParamsHrank = "hybrid"
	GetObservationsSpeciesCountsParamsHrankInfraclass    GetObservationsSpeciesCountsParamsHrank = "infraclass"
	GetObservationsSpeciesCountsParamsHrankInfrahybrid   GetObservationsSpeciesCountsParamsHrank = "infrahybrid"
	GetObservationsSpeciesCountsParamsHrankInfraorder    GetObservationsSpeciesCountsParamsHrank = "infraorder"
	GetObservationsSpeciesCountsParamsHrankKingdom       GetObservationsSpeciesCountsParamsHrank = "kingdom"
	GetObservationsSpeciesCountsParamsHrankOrder         GetObservationsSpeciesCountsParamsHrank = "order"
	GetObservationsSpeciesCountsParamsHrankParvorder     GetObservationsSpeciesCountsParamsHrank = "parvorder"
	GetObservationsSpeciesCountsParamsHrankPhylum        GetObservationsSpeciesCountsParamsHrank = "phylum"
	GetObservationsSpeciesCountsParamsHrankSection       GetObservationsSpeciesCountsParamsHrank = "section"
	GetObservationsSpeciesCountsParamsHrankSpecies       GetObservationsSpeciesCountsParamsHrank = "species"
	GetObservationsSpeciesCountsParamsHrankSubclass      GetObservationsSpeciesCountsParamsHrank = "subclass"
	GetObservationsSpeciesCountsParamsHrankSubfamily     GetObservationsSpeciesCountsParamsHrank = "subfamily"
	GetObservationsSpeciesCountsParamsHrankSubgenus      GetObservationsSpeciesCountsParamsHrank = "subgenus"
	GetObservationsSpeciesCountsParamsHrankSuborder      GetObservationsSpeciesCountsParamsHrank = "suborder"
	GetObservationsSpeciesCountsParamsHrankSubphylum     GetObservationsSpeciesCountsParamsHrank = "subphylum"
	GetObservationsSpeciesCountsParamsHrankSubsection    GetObservationsSpeciesCountsParamsHrank = "subsection"
	GetObservationsSpeciesCountsParamsHrankSubspecies    GetObservationsSpeciesCountsParamsHrank = "subspecies"
	GetObservationsSpeciesCountsParamsHrankSubterclass   GetObservationsSpeciesCountsParamsHrank = "subterclass"
	GetObservationsSpeciesCountsParamsHrankSubtribe      GetObservationsSpeciesCountsParamsHrank = "subtribe"
	GetObservationsSpeciesCountsParamsHrankSuperclass    GetObservationsSpeciesCountsParamsHrank = "superclass"
	GetObservationsSpeciesCountsParamsHrankSuperfamily   GetObservationsSpeciesCountsParamsHrank = "superfamily"
	GetObservationsSpeciesCountsParamsHrankSuperorder    GetObservationsSpeciesCountsParamsHrank = "superorder"
	GetObservationsSpeciesCountsParamsHrankSupertribe    GetObservationsSpeciesCountsParamsHrank = "supertribe"
	GetObservationsSpeciesCountsParamsHrankTribe         GetObservationsSpeciesCountsParamsHrank = "tribe"
	GetObservationsSpeciesCountsParamsHrankVariety       GetObservationsSpeciesCountsParamsHrank = "variety"
	GetObservationsSpeciesCountsParamsHrankZoosection    GetObservationsSpeciesCountsParamsHrank = "zoosection"
	GetObservationsSpeciesCountsParamsHrankZoosubsection GetObservationsSpeciesCountsParamsHrank = "zoosubsection"
)

// Defines values for GetObservationsSpeciesCountsParamsLrank.
const (
	GetObservationsSpeciesCountsParamsLrankClass         GetObservationsSpeciesCountsParamsLrank = "class"
	GetObservationsSpeciesCountsParamsLrankComplex       GetObservationsSpeciesCountsParamsLrank = "complex"
	GetObservationsSpeciesCountsParamsLrankEpifamily     GetObservationsSpeciesCountsParamsLrank = "epifamily"
	GetObservationsSpeciesCountsParamsLrankFamily        GetObservationsSpeciesCountsParamsLrank = "family"
	GetObservationsSpeciesCountsParamsLrankForm          GetObservationsSpeciesCountsParamsLrank = "form"
	GetObservationsSpeciesCountsParamsLrankGenus         GetObservationsSpeciesCountsParamsLrank = "genus"
	GetObservationsSpeciesCountsParamsLrankGenushybrid   GetObservationsSpeciesCountsParamsLrank = "genushybrid"
	GetObservationsSpeciesCountsParamsLrankHybrid        GetObservationsSpeciesCountsParamsLrank = "hybrid"
	GetObservationsSpeciesCountsParamsLrankInfraclass    GetObservationsSpeciesCountsParamsLrank = "infraclass"
	GetObservationsSpeciesCountsParamsLrankInfrahybrid   GetObservationsSpeciesCountsParamsLrank = "infrahybrid"
	GetObservationsSpeciesCountsParamsLrankInfraorder    GetObservationsSpeciesCountsParamsLrank = "infraorder"
	GetObservationsSpeciesCountsParamsLrankKingdom       GetObservationsSpeciesCountsParamsLrank = "kingdom"
	GetObservationsSpeciesCountsParamsLrankOrder         GetObservationsSpeciesCountsParamsLrank = "order"
	GetObservationsSpeciesCountsParamsLrankParvorder     GetObservationsSpeciesCountsParamsLrank = "parvorder"
	GetObservationsSpeciesCountsParamsLrankPhylum        GetObservationsSpeciesCountsParamsLrank = "phylum"
	GetObservationsSpeciesCountsParamsLrankSection       GetObservationsSpeciesCountsParamsLrank = "section"
	GetObservationsSpeciesCountsParamsLrankSpecies       GetObservationsSpeciesCountsParamsLrank = "species"
	GetObservationsSpeciesCountsParamsLrankSubclass      GetObservationsSpeciesCountsParamsLrank = "subclass"
	GetObservationsSpeciesCountsParamsLrankSubfamily     GetObservationsSpeciesCountsParamsLrank = "subfamily"
	GetObservationsSpeciesCountsParamsLrankSubgenus      GetObservationsSpeciesCountsParamsLrank = "subgenus"
	GetObservationsSpeciesCountsParamsLrankSuborder      GetObservationsSpeciesCountsParamsLrank = "suborder"
	GetObservationsSpeciesCountsParamsLrankSubphylum     GetObservationsSpeciesCountsParamsLrank = "subphylum"
	GetObservationsSpeciesCountsParamsLrankSubsection    GetObservationsSpeciesCountsParamsLrank = "subsection"
	GetObservationsSpeciesCountsParamsLrankSubspecies    GetObservationsSpeciesCountsParamsLrank = "subspecies"
	GetObservationsSpeciesCountsParamsLrankSubterclass   GetObservationsSpeciesCountsParamsLrank = "subterclass"
	GetObservationsSpeciesCountsParamsLrankSubtribe      GetObservationsSpeciesCountsParamsLrank = "subtribe"
	GetObservationsSpeciesCountsParamsLrankSuperclass    GetObservationsSpeciesCountsParamsLrank = "superclass"
	GetObservationsSpeciesCountsParamsLrankSuperfamily   GetObservationsSpeciesCountsParamsLrank = "superfamily"
	GetObservationsSpeciesCountsParamsLrankSuperorder    GetObservationsSpeciesCountsParamsLrank = "superorder"
	GetObservationsSpeciesCountsParamsLrankSupertribe    GetObservationsSpeciesCountsParamsLrank = "supertribe"
	GetObservationsSpeciesCountsParamsLrankTribe         GetObservationsSpeciesCountsParamsLrank = "tribe"
	GetObservationsSpeciesCountsParamsLrankVariety       GetObservationsSpeciesCountsParamsLrank = "variety"
	GetObservationsSpeciesCountsParamsLrankZoosection    GetObservationsSpeciesCountsParamsLrank = "zoosection"
	GetObservationsSpeciesCountsParamsLrankZoosubsection GetObservationsSpeciesCountsParamsLrank = "zoosubsection"
)

// Defines values for GetObservationsSpeciesCountsParamsIconicTaxa.
const (
	GetObservationsSpeciesCountsParamsIconicTaxaActinopterygii GetObservationsSpeciesCountsParamsIconicTaxa = "Actinopterygii"
	GetObservationsSpeciesCountsParamsIconicTaxaAmphibia       GetObservationsSpeciesCountsParamsIconicTaxa = "Amphibia"
	GetObservationsSpeciesCountsParamsIconicTaxaAnimalia       GetObservationsSpeciesCountsParamsIconicTaxa = "Animalia"
	GetObservationsSpeciesCountsParamsIconicTaxaArachnida      GetObservationsSpeciesCountsParamsIconicTaxa = "Arachnida"
	GetObservationsSpeciesCountsParamsIconicTaxaAves           GetObservationsSpeciesCountsParamsIconicTaxa = "Aves"
	GetObservationsSpeciesCountsParamsIconicTaxaChromista      GetObservationsSpeciesCountsParamsIconicTaxa = "Chromista"
	GetObservationsSpeciesCountsParamsIconicTaxaFungi          GetObservationsSpeciesCountsParamsIconicTaxa = "Fungi"
	GetObservationsSpeciesCountsParamsIconicTaxaInsecta        GetObservationsSpeciesCountsParamsIconicTaxa = "Insecta"
	GetObservationsSpeciesCountsParamsIconicTaxaMammalia       GetObservationsSpeciesCountsParamsIconicTaxa = "Mammalia"
	GetObservationsSpeciesCountsParamsIconicTaxaMollusca       GetObservationsSpeciesCountsParamsIconicTaxa = "Mollusca"
	GetObservationsSpeciesCountsParamsIconicTaxaPlantae        GetObservationsSpeciesCountsParamsIconicTaxa = "Plantae"
	GetObservationsSpeciesCountsParamsIconicTaxaProtozoa       GetObservationsSpeciesCountsParamsIconicTaxa = "Protozoa"
	GetObservationsSpeciesCountsParamsIconicTaxaReptilia       GetObservationsSpeciesCountsParamsIconicTaxa = "Reptilia"
	GetObservationsSpeciesCountsParamsIconicTaxaUnknown        GetObservationsSpeciesCountsParamsIconicTaxa = "unknown"
)

// Defines values for GetObservationsSpeciesCountsParamsIdentifications.
const (
	GetObservationsSpeciesCountsParamsIdentificationsMostAgree    GetObservationsSpeciesCountsParamsIdentifications = "most_agree"
	GetObservationsSpeciesCountsParamsIdentificationsMostDisagree GetObservationsSpeciesCountsParamsIdentifications = "most_disagree"
	GetObservationsSpeciesCountsParamsIdentificationsSomeAgree    GetObservationsSpeciesCountsParamsIdentifications = "some_agree"
)

// Defines values for GetObservationsSpeciesCountsParamsSearchOn.
const (
	GetObservationsSpeciesCountsParamsSearchOnDescription        GetObservationsSpeciesCountsParamsSearchOn = "description"
	GetObservationsSpeciesCountsParamsSearchOnNames              GetObservationsSpeciesCountsParamsSearchOn = "names"
	GetObservationsSpeciesCountsParamsSearchOnPlace              GetObservationsSpeciesCountsParamsSearchOn = "place"
	GetObservationsSpeciesCountsParamsSearchOnTags               GetObservationsSpeciesCountsParamsSearchOn = "tags"
	GetObservationsSpeciesCountsParamsSearchOnTaxonPageObsPhotos GetObservationsSpeciesCountsParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetObservationsSpeciesCountsParamsQualityGrade.
const (
	GetObservationsSpeciesCountsParamsQualityGradeCasual   GetObservationsSpeciesCountsParamsQualityGrade = "casual"
	GetObservationsSpeciesCountsParamsQualityGradeNeedsID  GetObservationsSpeciesCountsParamsQualityGrade = "needs_id"
	GetObservationsSpeciesCountsParamsQualityGradeResearch GetObservationsSpeciesCountsParamsQualityGrade = "research"
)

// Defines values for GetObservationsSpeciesCountsParamsOrder.
const (
	GetObservationsSpeciesCountsParamsOrderAsc  GetObservationsSpeciesCountsParamsOrder = "asc"
	GetObservationsSpeciesCountsParamsOrderDesc GetObservationsSpeciesCountsParamsOrder = "desc"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsLicense.
const (
	GetObservationsUmbrellaProjectStatsParamsLicenseCc0      GetObservationsUmbrellaProjectStatsParamsLicense = "cc0"
	GetObservationsUmbrellaProjectStatsParamsLicenseCcBy     GetObservationsUmbrellaProjectStatsParamsLicense = "cc-by"
	GetObservationsUmbrellaProjectStatsParamsLicenseCcByNc   GetObservationsUmbrellaProjectStatsParamsLicense = "cc-by-nc"
	GetObservationsUmbrellaProjectStatsParamsLicenseCcByNcNd GetObservationsUmbrellaProjectStatsParamsLicense = "cc-by-nc-nd"
	GetObservationsUmbrellaProjectStatsParamsLicenseCcByNcSa GetObservationsUmbrellaProjectStatsParamsLicense = "cc-by-nc-sa"
	GetObservationsUmbrellaProjectStatsParamsLicenseCcByNd   GetObservationsUmbrellaProjectStatsParamsLicense = "cc-by-nd"
	GetObservationsUmbrellaProjectStatsParamsLicenseCcBySa   GetObservationsUmbrellaProjectStatsParamsLicense = "cc-by-sa"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsPhotoLicense.
const (
	GetObservationsUmbrellaProjectStatsParamsPhotoLicenseCc0      GetObservationsUmbrellaProjectStatsParamsPhotoLicense = "cc0"
	GetObservationsUmbrellaProjectStatsParamsPhotoLicenseCcBy     GetObservationsUmbrellaProjectStatsParamsPhotoLicense = "cc-by"
	GetObservationsUmbrellaProjectStatsParamsPhotoLicenseCcByNc   GetObservationsUmbrellaProjectStatsParamsPhotoLicense = "cc-by-nc"
	GetObservationsUmbrellaProjectStatsParamsPhotoLicenseCcByNcNd GetObservationsUmbrellaProjectStatsParamsPhotoLicense = "cc-by-nc-nd"
	GetObservationsUmbrellaProjectStatsParamsPhotoLicenseCcByNcSa GetObservationsUmbrellaProjectStatsParamsPhotoLicense = "cc-by-nc-sa"
	GetObservationsUmbrellaProjectStatsParamsPhotoLicenseCcByNd   GetObservationsUmbrellaProjectStatsParamsPhotoLicense = "cc-by-nd"
	GetObservationsUmbrellaProjectStatsParamsPhotoLicenseCcBySa   GetObservationsUmbrellaProjectStatsParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsRank.
const (
	GetObservationsUmbrellaProjectStatsParamsRankClass         GetObservationsUmbrellaProjectStatsParamsRank = "class"
	GetObservationsUmbrellaProjectStatsParamsRankComplex       GetObservationsUmbrellaProjectStatsParamsRank = "complex"
	GetObservationsUmbrellaProjectStatsParamsRankEpifamily     GetObservationsUmbrellaProjectStatsParamsRank = "epifamily"
	GetObservationsUmbrellaProjectStatsParamsRankFamily        GetObservationsUmbrellaProjectStatsParamsRank = "family"
	GetObservationsUmbrellaProjectStatsParamsRankForm          GetObservationsUmbrellaProjectStatsParamsRank = "form"
	GetObservationsUmbrellaProjectStatsParamsRankGenus         GetObservationsUmbrellaProjectStatsParamsRank = "genus"
	GetObservationsUmbrellaProjectStatsParamsRankGenushybrid   GetObservationsUmbrellaProjectStatsParamsRank = "genushybrid"
	GetObservationsUmbrellaProjectStatsParamsRankHybrid        GetObservationsUmbrellaProjectStatsParamsRank = "hybrid"
	GetObservationsUmbrellaProjectStatsParamsRankInfraclass    GetObservationsUmbrellaProjectStatsParamsRank = "infraclass"
	GetObservationsUmbrellaProjectStatsParamsRankInfrahybrid   GetObservationsUmbrellaProjectStatsParamsRank = "infrahybrid"
	GetObservationsUmbrellaProjectStatsParamsRankInfraorder    GetObservationsUmbrellaProjectStatsParamsRank = "infraorder"
	GetObservationsUmbrellaProjectStatsParamsRankKingdom       GetObservationsUmbrellaProjectStatsParamsRank = "kingdom"
	GetObservationsUmbrellaProjectStatsParamsRankOrder         GetObservationsUmbrellaProjectStatsParamsRank = "order"
	GetObservationsUmbrellaProjectStatsParamsRankParvorder     GetObservationsUmbrellaProjectStatsParamsRank = "parvorder"
	GetObservationsUmbrellaProjectStatsParamsRankPhylum        GetObservationsUmbrellaProjectStatsParamsRank = "phylum"
	GetObservationsUmbrellaProjectStatsParamsRankSection       GetObservationsUmbrellaProjectStatsParamsRank = "section"
	GetObservationsUmbrellaProjectStatsParamsRankSpecies       GetObservationsUmbrellaProjectStatsParamsRank = "species"
	GetObservationsUmbrellaProjectStatsParamsRankSubclass      GetObservationsUmbrellaProjectStatsParamsRank = "subclass"
	GetObservationsUmbrellaProjectStatsParamsRankSubfamily     GetObservationsUmbrellaProjectStatsParamsRank = "subfamily"
	GetObservationsUmbrellaProjectStatsParamsRankSubgenus      GetObservationsUmbrellaProjectStatsParamsRank = "subgenus"
	GetObservationsUmbrellaProjectStatsParamsRankSuborder      GetObservationsUmbrellaProjectStatsParamsRank = "suborder"
	GetObservationsUmbrellaProjectStatsParamsRankSubphylum     GetObservationsUmbrellaProjectStatsParamsRank = "subphylum"
	GetObservationsUmbrellaProjectStatsParamsRankSubsection    GetObservationsUmbrellaProjectStatsParamsRank = "subsection"
	GetObservationsUmbrellaProjectStatsParamsRankSubspecies    GetObservationsUmbrellaProjectStatsParamsRank = "subspecies"
	GetObservationsUmbrellaProjectStatsParamsRankSubterclass   GetObservationsUmbrellaProjectStatsParamsRank = "subterclass"
	GetObservationsUmbrellaProjectStatsParamsRankSubtribe      GetObservationsUmbrellaProjectStatsParamsRank = "subtribe"
	GetObservationsUmbrellaProjectStatsParamsRankSuperclass    GetObservationsUmbrellaProjectStatsParamsRank = "superclass"
	GetObservationsUmbrellaProjectStatsParamsRankSuperfamily   GetObservationsUmbrellaProjectStatsParamsRank = "superfamily"
	GetObservationsUmbrellaProjectStatsParamsRankSuperorder    GetObservationsUmbrellaProjectStatsParamsRank = "superorder"
	GetObservationsUmbrellaProjectStatsParamsRankSupertribe    GetObservationsUmbrellaProjectStatsParamsRank = "supertribe"
	GetObservationsUmbrellaProjectStatsParamsRankTribe         GetObservationsUmbrellaProjectStatsParamsRank = "tribe"
	GetObservationsUmbrellaProjectStatsParamsRankVariety       GetObservationsUmbrellaProjectStatsParamsRank = "variety"
	GetObservationsUmbrellaProjectStatsParamsRankZoosection    GetObservationsUmbrellaProjectStatsParamsRank = "zoosection"
	GetObservationsUmbrellaProjectStatsParamsRankZoosubsection GetObservationsUmbrellaProjectStatsParamsRank = "zoosubsection"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsSoundLicense.
const (
	GetObservationsUmbrellaProjectStatsParamsSoundLicenseCc0      GetObservationsUmbrellaProjectStatsParamsSoundLicense = "cc0"
	GetObservationsUmbrellaProjectStatsParamsSoundLicenseCcBy     GetObservationsUmbrellaProjectStatsParamsSoundLicense = "cc-by"
	GetObservationsUmbrellaProjectStatsParamsSoundLicenseCcByNc   GetObservationsUmbrellaProjectStatsParamsSoundLicense = "cc-by-nc"
	GetObservationsUmbrellaProjectStatsParamsSoundLicenseCcByNcNd GetObservationsUmbrellaProjectStatsParamsSoundLicense = "cc-by-nc-nd"
	GetObservationsUmbrellaProjectStatsParamsSoundLicenseCcByNcSa GetObservationsUmbrellaProjectStatsParamsSoundLicense = "cc-by-nc-sa"
	GetObservationsUmbrellaProjectStatsParamsSoundLicenseCcByNd   GetObservationsUmbrellaProjectStatsParamsSoundLicense = "cc-by-nd"
	GetObservationsUmbrellaProjectStatsParamsSoundLicenseCcBySa   GetObservationsUmbrellaProjectStatsParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsCsi.
const (
	GetObservationsUmbrellaProjectStatsParamsCsiCR GetObservationsUmbrellaProjectStatsParamsCsi = "CR"
	GetObservationsUmbrellaProjectStatsParamsCsiEN GetObservationsUmbrellaProjectStatsParamsCsi = "EN"
	GetObservationsUmbrellaProjectStatsParamsCsiEW GetObservationsUmbrellaProjectStatsParamsCsi = "EW"
	GetObservationsUmbrellaProjectStatsParamsCsiEX GetObservationsUmbrellaProjectStatsParamsCsi = "EX"
	GetObservationsUmbrellaProjectStatsParamsCsiLC GetObservationsUmbrellaProjectStatsParamsCsi = "LC"
	GetObservationsUmbrellaProjectStatsParamsCsiNT GetObservationsUmbrellaProjectStatsParamsCsi = "NT"
	GetObservationsUmbrellaProjectStatsParamsCsiVU GetObservationsUmbrellaProjectStatsParamsCsi = "VU"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsGeoprivacy.
const (
	GetObservationsUmbrellaProjectStatsParamsGeoprivacyObscured        GetObservationsUmbrellaProjectStatsParamsGeoprivacy = "obscured"
	GetObservationsUmbrellaProjectStatsParamsGeoprivacyObscuredPrivate GetObservationsUmbrellaProjectStatsParamsGeoprivacy = "obscured_private"
	GetObservationsUmbrellaProjectStatsParamsGeoprivacyOpen            GetObservationsUmbrellaProjectStatsParamsGeoprivacy = "open"
	GetObservationsUmbrellaProjectStatsParamsGeoprivacyPrivate         GetObservationsUmbrellaProjectStatsParamsGeoprivacy = "private"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacy.
const (
	GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacyObscured        GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacy = "obscured"
	GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacyObscuredPrivate GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacy = "obscured_private"
	GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacyOpen            GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacy = "open"
	GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacyPrivate         GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacy = "private"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsObscuration.
const (
	GetObservationsUmbrellaProjectStatsParamsObscurationNone     GetObservationsUmbrellaProjectStatsParamsObscuration = "none"
	GetObservationsUmbrellaProjectStatsParamsObscurationObscured GetObservationsUmbrellaProjectStatsParamsObscuration = "obscured"
	GetObservationsUmbrellaProjectStatsParamsObscurationPrivate  GetObservationsUmbrellaProjectStatsParamsObscuration = "private"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsHrank.
const (
	GetObservationsUmbrellaProjectStatsParamsHrankClass         GetObservationsUmbrellaProjectStatsParamsHrank = "class"
	GetObservationsUmbrellaProjectStatsParamsHrankComplex       GetObservationsUmbrellaProjectStatsParamsHrank = "complex"
	GetObservationsUmbrellaProjectStatsParamsHrankEpifamily     GetObservationsUmbrellaProjectStatsParamsHrank = "epifamily"
	GetObservationsUmbrellaProjectStatsParamsHrankFamily        GetObservationsUmbrellaProjectStatsParamsHrank = "family"
	GetObservationsUmbrellaProjectStatsParamsHrankForm          GetObservationsUmbrellaProjectStatsParamsHrank = "form"
	GetObservationsUmbrellaProjectStatsParamsHrankGenus         GetObservationsUmbrellaProjectStatsParamsHrank = "genus"
	GetObservationsUmbrellaProjectStatsParamsHrankGenushybrid   GetObservationsUmbrellaProjectStatsParamsHrank = "genushybrid"
	GetObservationsUmbrellaProjectStatsParamsHrankHybrid        GetObservationsUmbrellaProjectStatsParamsHrank = "hybrid"
	GetObservationsUmbrellaProjectStatsParamsHrankInfraclass    GetObservationsUmbrellaProjectStatsParamsHrank = "infraclass"
	GetObservationsUmbrellaProjectStatsParamsHrankInfrahybrid   GetObservationsUmbrellaProjectStatsParamsHrank = "infrahybrid"
	GetObservationsUmbrellaProjectStatsParamsHrankInfraorder    GetObservationsUmbrellaProjectStatsParamsHrank = "infraorder"
	GetObservationsUmbrellaProjectStatsParamsHrankKingdom       GetObservationsUmbrellaProjectStatsParamsHrank = "kingdom"
	GetObservationsUmbrellaProjectStatsParamsHrankOrder         GetObservationsUmbrellaProjectStatsParamsHrank = "order"
	GetObservationsUmbrellaProjectStatsParamsHrankParvorder     GetObservationsUmbrellaProjectStatsParamsHrank = "parvorder"
	GetObservationsUmbrellaProjectStatsParamsHrankPhylum        GetObservationsUmbrellaProjectStatsParamsHrank = "phylum"
	GetObservationsUmbrellaProjectStatsParamsHrankSection       GetObservationsUmbrellaProjectStatsParamsHrank = "section"
	GetObservationsUmbrellaProjectStatsParamsHrankSpecies       GetObservationsUmbrellaProjectStatsParamsHrank = "species"
	GetObservationsUmbrellaProjectStatsParamsHrankSubclass      GetObservationsUmbrellaProjectStatsParamsHrank = "subclass"
	GetObservationsUmbrellaProjectStatsParamsHrankSubfamily     GetObservationsUmbrellaProjectStatsParamsHrank = "subfamily"
	GetObservationsUmbrellaProjectStatsParamsHrankSubgenus      GetObservationsUmbrellaProjectStatsParamsHrank = "subgenus"
	GetObservationsUmbrellaProjectStatsParamsHrankSuborder      GetObservationsUmbrellaProjectStatsParamsHrank = "suborder"
	GetObservationsUmbrellaProjectStatsParamsHrankSubphylum     GetObservationsUmbrellaProjectStatsParamsHrank = "subphylum"
	GetObservationsUmbrellaProjectStatsParamsHrankSubsection    GetObservationsUmbrellaProjectStatsParamsHrank = "subsection"
	GetObservationsUmbrellaProjectStatsParamsHrankSubspecies    GetObservationsUmbrellaProjectStatsParamsHrank = "subspecies"
	GetObservationsUmbrellaProjectStatsParamsHrankSubterclass   GetObservationsUmbrellaProjectStatsParamsHrank = "subterclass"
	GetObservationsUmbrellaProjectStatsParamsHrankSubtribe      GetObservationsUmbrellaProjectStatsParamsHrank = "subtribe"
	GetObservationsUmbrellaProjectStatsParamsHrankSuperclass    GetObservationsUmbrellaProjectStatsParamsHrank = "superclass"
	GetObservationsUmbrellaProjectStatsParamsHrankSuperfamily   GetObservationsUmbrellaProjectStatsParamsHrank = "superfamily"
	GetObservationsUmbrellaProjectStatsParamsHrankSuperorder    GetObservationsUmbrellaProjectStatsParamsHrank = "superorder"
	GetObservationsUmbrellaProjectStatsParamsHrankSupertribe    GetObservationsUmbrellaProjectStatsParamsHrank = "supertribe"
	GetObservationsUmbrellaProjectStatsParamsHrankTribe         GetObservationsUmbrellaProjectStatsParamsHrank = "tribe"
	GetObservationsUmbrellaProjectStatsParamsHrankVariety       GetObservationsUmbrellaProjectStatsParamsHrank = "variety"
	GetObservationsUmbrellaProjectStatsParamsHrankZoosection    GetObservationsUmbrellaProjectStatsParamsHrank = "zoosection"
	GetObservationsUmbrellaProjectStatsParamsHrankZoosubsection GetObservationsUmbrellaProjectStatsParamsHrank = "zoosubsection"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsLrank.
const (
	GetObservationsUmbrellaProjectStatsParamsLrankClass         GetObservationsUmbrellaProjectStatsParamsLrank = "class"
	GetObservationsUmbrellaProjectStatsParamsLrankComplex       GetObservationsUmbrellaProjectStatsParamsLrank = "complex"
	GetObservationsUmbrellaProjectStatsParamsLrankEpifamily     GetObservationsUmbrellaProjectStatsParamsLrank = "epifamily"
	GetObservationsUmbrellaProjectStatsParamsLrankFamily        GetObservationsUmbrellaProjectStatsParamsLrank = "family"
	GetObservationsUmbrellaProjectStatsParamsLrankForm          GetObservationsUmbrellaProjectStatsParamsLrank = "form"
	GetObservationsUmbrellaProjectStatsParamsLrankGenus         GetObservationsUmbrellaProjectStatsParamsLrank = "genus"
	GetObservationsUmbrellaProjectStatsParamsLrankGenushybrid   GetObservationsUmbrellaProjectStatsParamsLrank = "genushybrid"
	GetObservationsUmbrellaProjectStatsParamsLrankHybrid        GetObservationsUmbrellaProjectStatsParamsLrank = "hybrid"
	GetObservationsUmbrellaProjectStatsParamsLrankInfraclass    GetObservationsUmbrellaProjectStatsParamsLrank = "infraclass"
	GetObservationsUmbrellaProjectStatsParamsLrankInfrahybrid   GetObservationsUmbrellaProjectStatsParamsLrank = "infrahybrid"
	GetObservationsUmbrellaProjectStatsParamsLrankInfraorder    GetObservationsUmbrellaProjectStatsParamsLrank = "infraorder"
	GetObservationsUmbrellaProjectStatsParamsLrankKingdom       GetObservationsUmbrellaProjectStatsParamsLrank = "kingdom"
	GetObservationsUmbrellaProjectStatsParamsLrankOrder         GetObservationsUmbrellaProjectStatsParamsLrank = "order"
	GetObservationsUmbrellaProjectStatsParamsLrankParvorder     GetObservationsUmbrellaProjectStatsParamsLrank = "parvorder"
	GetObservationsUmbrellaProjectStatsParamsLrankPhylum        GetObservationsUmbrellaProjectStatsParamsLrank = "phylum"
	GetObservationsUmbrellaProjectStatsParamsLrankSection       GetObservationsUmbrellaProjectStatsParamsLrank = "section"
	GetObservationsUmbrellaProjectStatsParamsLrankSpecies       GetObservationsUmbrellaProjectStatsParamsLrank = "species"
	GetObservationsUmbrellaProjectStatsParamsLrankSubclass      GetObservationsUmbrellaProjectStatsParamsLrank = "subclass"
	GetObservationsUmbrellaProjectStatsParamsLrankSubfamily     GetObservationsUmbrellaProjectStatsParamsLrank = "subfamily"
	GetObservationsUmbrellaProjectStatsParamsLrankSubgenus      GetObservationsUmbrellaProjectStatsParamsLrank = "subgenus"
	GetObservationsUmbrellaProjectStatsParamsLrankSuborder      GetObservationsUmbrellaProjectStatsParamsLrank = "suborder"
	GetObservationsUmbrellaProjectStatsParamsLrankSubphylum     GetObservationsUmbrellaProjectStatsParamsLrank = "subphylum"
	GetObservationsUmbrellaProjectStatsParamsLrankSubsection    GetObservationsUmbrellaProjectStatsParamsLrank = "subsection"
	GetObservationsUmbrellaProjectStatsParamsLrankSubspecies    GetObservationsUmbrellaProjectStatsParamsLrank = "subspecies"
	GetObservationsUmbrellaProjectStatsParamsLrankSubterclass   GetObservationsUmbrellaProjectStatsParamsLrank = "subterclass"
	GetObservationsUmbrellaProjectStatsParamsLrankSubtribe      GetObservationsUmbrellaProjectStatsParamsLrank = "subtribe"
	GetObservationsUmbrellaProjectStatsParamsLrankSuperclass    GetObservationsUmbrellaProjectStatsParamsLrank = "superclass"
	GetObservationsUmbrellaProjectStatsParamsLrankSuperfamily   GetObservationsUmbrellaProjectStatsParamsLrank = "superfamily"
	GetObservationsUmbrellaProjectStatsParamsLrankSuperorder    GetObservationsUmbrellaProjectStatsParamsLrank = "superorder"
	GetObservationsUmbrellaProjectStatsParamsLrankSupertribe    GetObservationsUmbrellaProjectStatsParamsLrank = "supertribe"
	GetObservationsUmbrellaProjectStatsParamsLrankTribe         GetObservationsUmbrellaProjectStatsParamsLrank = "tribe"
	GetObservationsUmbrellaProjectStatsParamsLrankVariety       GetObservationsUmbrellaProjectStatsParamsLrank = "variety"
	GetObservationsUmbrellaProjectStatsParamsLrankZoosection    GetObservationsUmbrellaProjectStatsParamsLrank = "zoosection"
	GetObservationsUmbrellaProjectStatsParamsLrankZoosubsection GetObservationsUmbrellaProjectStatsParamsLrank = "zoosubsection"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsIconicTaxa.
const (
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaActinopterygii GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Actinopterygii"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaAmphibia       GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Amphibia"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaAnimalia       GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Animalia"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaArachnida      GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Arachnida"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaAves           GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Aves"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaChromista      GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Chromista"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaFungi          GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Fungi"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaInsecta        GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Insecta"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaMammalia       GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Mammalia"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaMollusca       GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Mollusca"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaPlantae        GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Plantae"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaProtozoa       GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Protozoa"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaReptilia       GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Reptilia"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaUnknown        GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "unknown"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsIdentifications.
const (
	GetObservationsUmbrellaProjectStatsParamsIdentificationsMostAgree    GetObservationsUmbrellaProjectStatsParamsIdentifications = "most_agree"
	GetObservationsUmbrellaProjectStatsParamsIdentificationsMostDisagree GetObservationsUmbrellaProjectStatsParamsIdentifications = "most_disagree"
	GetObservationsUmbrellaProjectStatsParamsIdentificationsSomeAgree    GetObservationsUmbrellaProjectStatsParamsIdentifications = "some_agree"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsSearchOn.
const (
	GetObservationsUmbrellaProjectStatsParamsSearchOnDescription        GetObservationsUmbrellaProjectStatsParamsSearchOn = "description"
	GetObservationsUmbrellaProjectStatsParamsSearchOnNames              GetObservationsUmbrellaProjectStatsParamsSearchOn = "names"
	GetObservationsUmbrellaProjectStatsParamsSearchOnPlace              GetObservationsUmbrellaProjectStatsParamsSearchOn = "place"
	GetObservationsUmbrellaProjectStatsParamsSearchOnTags               GetObservationsUmbrellaProjectStatsParamsSearchOn = "tags"
	GetObservationsUmbrellaProjectStatsParamsSearchOnTaxonPageObsPhotos GetObservationsUmbrellaProjectStatsParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsQualityGrade.
const (
	GetObservationsUmbrellaProjectStatsParamsQualityGradeCasual   GetObservationsUmbrellaProjectStatsParamsQualityGrade = "casual"
	GetObservationsUmbrellaProjectStatsParamsQualityGradeNeedsID  GetObservationsUmbrellaProjectStatsParamsQualityGrade = "needs_id"
	GetObservationsUmbrellaProjectStatsParamsQualityGradeResearch GetObservationsUmbrellaProjectStatsParamsQualityGrade = "research"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsOrder.
const (
	GetObservationsUmbrellaProjectStatsParamsOrderAsc  GetObservationsUmbrellaProjectStatsParamsOrder = "asc"
	GetObservationsUmbrellaProjectStatsParamsOrderDesc GetObservationsUmbrellaProjectStatsParamsOrder = "desc"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsOrderBy.
const (
	GetObservationsUmbrellaProjectStatsParamsOrderByCreatedAt    GetObservationsUmbrellaProjectStatsParamsOrderBy = "created_at"
	GetObservationsUmbrellaProjectStatsParamsOrderByGeoScore     GetObservationsUmbrellaProjectStatsParamsOrderBy = "geo_score"
	GetObservationsUmbrellaProjectStatsParamsOrderByID           GetObservationsUmbrellaProjectStatsParamsOrderBy = "id"
	GetObservationsUmbrellaProjectStatsParamsOrderByObservedOn   GetObservationsUmbrellaProjectStatsParamsOrderBy = "observed_on"
	GetObservationsUmbrellaProjectStatsParamsOrderByRandom       GetObservationsUmbrellaProjectStatsParamsOrderBy = "random"
	GetObservationsUmbrellaProjectStatsParamsOrderBySpeciesGuess GetObservationsUmbrellaProjectStatsParamsOrderBy = "species_guess"
	GetObservationsUmbrellaProjectStatsParamsOrderByUpdatedAt    GetObservationsUmbrellaProjectStatsParamsOrderBy = "updated_at"
	GetObservationsUmbrellaProjectStatsParamsOrderByVotes        GetObservationsUmbrellaProjectStatsParamsOrderBy = "votes"
)

// Defines values for GetObservationsUpdatesParamsObservationsBy.
const (
	Following GetObservationsUpdatesParamsObservationsBy = "following"
	Owner     GetObservationsUpdatesParamsObservationsBy = "owner"
)

// Defines values for DeleteObservationsUUIDQualityMetricParamsMetric.
const (
	DeleteObservationsUUIDQualityMetricParamsMetricDate     DeleteObservationsUUIDQualityMetricParamsMetric = "date"
	DeleteObservationsUUIDQualityMetricParamsMetricEvidence DeleteObservationsUUIDQualityMetricParamsMetric = "evidence"
	DeleteObservationsUUIDQualityMetricParamsMetricLocation DeleteObservationsUUIDQualityMetricParamsMetric = "location"
	DeleteObservationsUUIDQualityMetricParamsMetricNeedsID  DeleteObservationsUUIDQualityMetricParamsMetric = "needs_id"
	DeleteObservationsUUIDQualityMetricParamsMetricRecent   DeleteObservationsUUIDQualityMetricParamsMetric = "recent"
	DeleteObservationsUUIDQualityMetricParamsMetricSubject  DeleteObservationsUUIDQualityMetricParamsMetric = "subject"
	DeleteObservationsUUIDQualityMetricParamsMetricWild     DeleteObservationsUUIDQualityMetricParamsMetric = "wild"
)

// Defines values for PostObservationsUUIDQualityMetricParamsMetric.
const (
	PostObservationsUUIDQualityMetricParamsMetricDate     PostObservationsUUIDQualityMetricParamsMetric = "date"
	PostObservationsUUIDQualityMetricParamsMetricEvidence PostObservationsUUIDQualityMetricParamsMetric = "evidence"
	PostObservationsUUIDQualityMetricParamsMetricLocation PostObservationsUUIDQualityMetricParamsMetric = "location"
	PostObservationsUUIDQualityMetricParamsMetricNeedsID  PostObservationsUUIDQualityMetricParamsMetric = "needs_id"
	PostObservationsUUIDQualityMetricParamsMetricRecent   PostObservationsUUIDQualityMetricParamsMetric = "recent"
	PostObservationsUUIDQualityMetricParamsMetricSubject  PostObservationsUUIDQualityMetricParamsMetric = "subject"
	PostObservationsUUIDQualityMetricParamsMetricWild     PostObservationsUUIDQualityMetricParamsMetric = "wild"
)

// Defines values for GetPlacesParamsOrderBy.
const (
	Area GetPlacesParamsOrderBy = "area"
)

// Defines values for GetPlacesNearbyParamsLicense.
const (
	GetPlacesNearbyParamsLicenseCc0      GetPlacesNearbyParamsLicense = "cc0"
	GetPlacesNearbyParamsLicenseCcBy     GetPlacesNearbyParamsLicense = "cc-by"
	GetPlacesNearbyParamsLicenseCcByNc   GetPlacesNearbyParamsLicense = "cc-by-nc"
	GetPlacesNearbyParamsLicenseCcByNcNd GetPlacesNearbyParamsLicense = "cc-by-nc-nd"
	GetPlacesNearbyParamsLicenseCcByNcSa GetPlacesNearbyParamsLicense = "cc-by-nc-sa"
	GetPlacesNearbyParamsLicenseCcByNd   GetPlacesNearbyParamsLicense = "cc-by-nd"
	GetPlacesNearbyParamsLicenseCcBySa   GetPlacesNearbyParamsLicense = "cc-by-sa"
)

// Defines values for GetPlacesNearbyParamsPhotoLicense.
const (
	GetPlacesNearbyParamsPhotoLicenseCc0      GetPlacesNearbyParamsPhotoLicense = "cc0"
	GetPlacesNearbyParamsPhotoLicenseCcBy     GetPlacesNearbyParamsPhotoLicense = "cc-by"
	GetPlacesNearbyParamsPhotoLicenseCcByNc   GetPlacesNearbyParamsPhotoLicense = "cc-by-nc"
	GetPlacesNearbyParamsPhotoLicenseCcByNcNd GetPlacesNearbyParamsPhotoLicense = "cc-by-nc-nd"
	GetPlacesNearbyParamsPhotoLicenseCcByNcSa GetPlacesNearbyParamsPhotoLicense = "cc-by-nc-sa"
	GetPlacesNearbyParamsPhotoLicenseCcByNd   GetPlacesNearbyParamsPhotoLicense = "cc-by-nd"
	GetPlacesNearbyParamsPhotoLicenseCcBySa   GetPlacesNearbyParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetPlacesNearbyParamsRank.
const (
	GetPlacesNearbyParamsRankClass         GetPlacesNearbyParamsRank = "class"
	GetPlacesNearbyParamsRankComplex       GetPlacesNearbyParamsRank = "complex"
	GetPlacesNearbyParamsRankEpifamily     GetPlacesNearbyParamsRank = "epifamily"
	GetPlacesNearbyParamsRankFamily        GetPlacesNearbyParamsRank = "family"
	GetPlacesNearbyParamsRankForm          GetPlacesNearbyParamsRank = "form"
	GetPlacesNearbyParamsRankGenus         GetPlacesNearbyParamsRank = "genus"
	GetPlacesNearbyParamsRankGenushybrid   GetPlacesNearbyParamsRank = "genushybrid"
	GetPlacesNearbyParamsRankHybrid        GetPlacesNearbyParamsRank = "hybrid"
	GetPlacesNearbyParamsRankInfraclass    GetPlacesNearbyParamsRank = "infraclass"
	GetPlacesNearbyParamsRankInfrahybrid   GetPlacesNearbyParamsRank = "infrahybrid"
	GetPlacesNearbyParamsRankInfraorder    GetPlacesNearbyParamsRank = "infraorder"
	GetPlacesNearbyParamsRankKingdom       GetPlacesNearbyParamsRank = "kingdom"
	GetPlacesNearbyParamsRankOrder         GetPlacesNearbyParamsRank = "order"
	GetPlacesNearbyParamsRankParvorder     GetPlacesNearbyParamsRank = "parvorder"
	GetPlacesNearbyParamsRankPhylum        GetPlacesNearbyParamsRank = "phylum"
	GetPlacesNearbyParamsRankSection       GetPlacesNearbyParamsRank = "section"
	GetPlacesNearbyParamsRankSpecies       GetPlacesNearbyParamsRank = "species"
	GetPlacesNearbyParamsRankSubclass      GetPlacesNearbyParamsRank = "subclass"
	GetPlacesNearbyParamsRankSubfamily     GetPlacesNearbyParamsRank = "subfamily"
	GetPlacesNearbyParamsRankSubgenus      GetPlacesNearbyParamsRank = "subgenus"
	GetPlacesNearbyParamsRankSuborder      GetPlacesNearbyParamsRank = "suborder"
	GetPlacesNearbyParamsRankSubphylum     GetPlacesNearbyParamsRank = "subphylum"
	GetPlacesNearbyParamsRankSubsection    GetPlacesNearbyParamsRank = "subsection"
	GetPlacesNearbyParamsRankSubspecies    GetPlacesNearbyParamsRank = "subspecies"
	GetPlacesNearbyParamsRankSubterclass   GetPlacesNearbyParamsRank = "subterclass"
	GetPlacesNearbyParamsRankSubtribe      GetPlacesNearbyParamsRank = "subtribe"
	GetPlacesNearbyParamsRankSuperclass    GetPlacesNearbyParamsRank = "superclass"
	GetPlacesNearbyParamsRankSuperfamily   GetPlacesNearbyParamsRank = "superfamily"
	GetPlacesNearbyParamsRankSuperorder    GetPlacesNearbyParamsRank = "superorder"
	GetPlacesNearbyParamsRankSupertribe    GetPlacesNearbyParamsRank = "supertribe"
	GetPlacesNearbyParamsRankTribe         GetPlacesNearbyParamsRank = "tribe"
	GetPlacesNearbyParamsRankVariety       GetPlacesNearbyParamsRank = "variety"
	GetPlacesNearbyParamsRankZoosection    GetPlacesNearbyParamsRank = "zoosection"
	GetPlacesNearbyParamsRankZoosubsection GetPlacesNearbyParamsRank = "zoosubsection"
)

// Defines values for GetPlacesNearbyParamsSoundLicense.
const (
	GetPlacesNearbyParamsSoundLicenseCc0      GetPlacesNearbyParamsSoundLicense = "cc0"
	GetPlacesNearbyParamsSoundLicenseCcBy     GetPlacesNearbyParamsSoundLicense = "cc-by"
	GetPlacesNearbyParamsSoundLicenseCcByNc   GetPlacesNearbyParamsSoundLicense = "cc-by-nc"
	GetPlacesNearbyParamsSoundLicenseCcByNcNd GetPlacesNearbyParamsSoundLicense = "cc-by-nc-nd"
	GetPlacesNearbyParamsSoundLicenseCcByNcSa GetPlacesNearbyParamsSoundLicense = "cc-by-nc-sa"
	GetPlacesNearbyParamsSoundLicenseCcByNd   GetPlacesNearbyParamsSoundLicense = "cc-by-nd"
	GetPlacesNearbyParamsSoundLicenseCcBySa   GetPlacesNearbyParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetPlacesNearbyParamsCsi.
const (
	GetPlacesNearbyParamsCsiCR GetPlacesNearbyParamsCsi = "CR"
	GetPlacesNearbyParamsCsiEN GetPlacesNearbyParamsCsi = "EN"
	GetPlacesNearbyParamsCsiEW GetPlacesNearbyParamsCsi = "EW"
	GetPlacesNearbyParamsCsiEX GetPlacesNearbyParamsCsi = "EX"
	GetPlacesNearbyParamsCsiLC GetPlacesNearbyParamsCsi = "LC"
	GetPlacesNearbyParamsCsiNT GetPlacesNearbyParamsCsi = "NT"
	GetPlacesNearbyParamsCsiVU GetPlacesNearbyParamsCsi = "VU"
)

// Defines values for GetPlacesNearbyParamsGeoprivacy.
const (
	GetPlacesNearbyParamsGeoprivacyObscured        GetPlacesNearbyParamsGeoprivacy = "obscured"
	GetPlacesNearbyParamsGeoprivacyObscuredPrivate GetPlacesNearbyParamsGeoprivacy = "obscured_private"
	GetPlacesNearbyParamsGeoprivacyOpen            GetPlacesNearbyParamsGeoprivacy = "open"
	GetPlacesNearbyParamsGeoprivacyPrivate         GetPlacesNearbyParamsGeoprivacy = "private"
)

// Defines values for GetPlacesNearbyParamsTaxonGeoprivacy.
const (
	GetPlacesNearbyParamsTaxonGeoprivacyObscured        GetPlacesNearbyParamsTaxonGeoprivacy = "obscured"
	GetPlacesNearbyParamsTaxonGeoprivacyObscuredPrivate GetPlacesNearbyParamsTaxonGeoprivacy = "obscured_private"
	GetPlacesNearbyParamsTaxonGeoprivacyOpen            GetPlacesNearbyParamsTaxonGeoprivacy = "open"
	GetPlacesNearbyParamsTaxonGeoprivacyPrivate         GetPlacesNearbyParamsTaxonGeoprivacy = "private"
)

// Defines values for GetPlacesNearbyParamsObscuration.
const (
	GetPlacesNearbyParamsObscurationNone     GetPlacesNearbyParamsObscuration = "none"
	GetPlacesNearbyParamsObscurationObscured GetPlacesNearbyParamsObscuration = "obscured"
	GetPlacesNearbyParamsObscurationPrivate  GetPlacesNearbyParamsObscuration = "private"
)

// Defines values for GetPlacesNearbyParamsHrank.
const (
	GetPlacesNearbyParamsHrankClass         GetPlacesNearbyParamsHrank = "class"
	GetPlacesNearbyParamsHrankComplex       GetPlacesNearbyParamsHrank = "complex"
	GetPlacesNearbyParamsHrankEpifamily     GetPlacesNearbyParamsHrank = "epifamily"
	GetPlacesNearbyParamsHrankFamily        GetPlacesNearbyParamsHrank = "family"
	GetPlacesNearbyParamsHrankForm          GetPlacesNearbyParamsHrank = "form"
	GetPlacesNearbyParamsHrankGenus         GetPlacesNearbyParamsHrank = "genus"
	GetPlacesNearbyParamsHrankGenushybrid   GetPlacesNearbyParamsHrank = "genushybrid"
	GetPlacesNearbyParamsHrankHybrid        GetPlacesNearbyParamsHrank = "hybrid"
	GetPlacesNearbyParamsHrankInfraclass    GetPlacesNearbyParamsHrank = "infraclass"
	GetPlacesNearbyParamsHrankInfrahybrid   GetPlacesNearbyParamsHrank = "infrahybrid"
	GetPlacesNearbyParamsHrankInfraorder    GetPlacesNearbyParamsHrank = "infraorder"
	GetPlacesNearbyParamsHrankKingdom       GetPlacesNearbyParamsHrank = "kingdom"
	GetPlacesNearbyParamsHrankOrder         GetPlacesNearbyParamsHrank = "order"
	GetPlacesNearbyParamsHrankParvorder     GetPlacesNearbyParamsHrank = "parvorder"
	GetPlacesNearbyParamsHrankPhylum        GetPlacesNearbyParamsHrank = "phylum"
	GetPlacesNearbyParamsHrankSection       GetPlacesNearbyParamsHrank = "section"
	GetPlacesNearbyParamsHrankSpecies       GetPlacesNearbyParamsHrank = "species"
	GetPlacesNearbyParamsHrankSubclass      GetPlacesNearbyParamsHrank = "subclass"
	GetPlacesNearbyParamsHrankSubfamily     GetPlacesNearbyParamsHrank = "subfamily"
	GetPlacesNearbyParamsHrankSubgenus      GetPlacesNearbyParamsHrank = "subgenus"
	GetPlacesNearbyParamsHrankSuborder      GetPlacesNearbyParamsHrank = "suborder"
	GetPlacesNearbyParamsHrankSubphylum     GetPlacesNearbyParamsHrank = "subphylum"
	GetPlacesNearbyParamsHrankSubsection    GetPlacesNearbyParamsHrank = "subsection"
	GetPlacesNearbyParamsHrankSubspecies    GetPlacesNearbyParamsHrank = "subspecies"
	GetPlacesNearbyParamsHrankSubterclass   GetPlacesNearbyParamsHrank = "subterclass"
	GetPlacesNearbyParamsHrankSubtribe      GetPlacesNearbyParamsHrank = "subtribe"
	GetPlacesNearbyParamsHrankSuperclass    GetPlacesNearbyParamsHrank = "superclass"
	GetPlacesNearbyParamsHrankSuperfamily   GetPlacesNearbyParamsHrank = "superfamily"
	GetPlacesNearbyParamsHrankSuperorder    GetPlacesNearbyParamsHrank = "superorder"
	GetPlacesNearbyParamsHrankSupertribe    GetPlacesNearbyParamsHrank = "supertribe"
	GetPlacesNearbyParamsHrankTribe         GetPlacesNearbyParamsHrank = "tribe"
	GetPlacesNearbyParamsHrankVariety       GetPlacesNearbyParamsHrank = "variety"
	GetPlacesNearbyParamsHrankZoosection    GetPlacesNearbyParamsHrank = "zoosection"
	GetPlacesNearbyParamsHrankZoosubsection GetPlacesNearbyParamsHrank = "zoosubsection"
)

// Defines values for GetPlacesNearbyParamsLrank.
const (
	GetPlacesNearbyParamsLrankClass         GetPlacesNearbyParamsLrank = "class"
	GetPlacesNearbyParamsLrankComplex       GetPlacesNearbyParamsLrank = "complex"
	GetPlacesNearbyParamsLrankEpifamily     GetPlacesNearbyParamsLrank = "epifamily"
	GetPlacesNearbyParamsLrankFamily        GetPlacesNearbyParamsLrank = "family"
	GetPlacesNearbyParamsLrankForm          GetPlacesNearbyParamsLrank = "form"
	GetPlacesNearbyParamsLrankGenus         GetPlacesNearbyParamsLrank = "genus"
	GetPlacesNearbyParamsLrankGenushybrid   GetPlacesNearbyParamsLrank = "genushybrid"
	GetPlacesNearbyParamsLrankHybrid        GetPlacesNearbyParamsLrank = "hybrid"
	GetPlacesNearbyParamsLrankInfraclass    GetPlacesNearbyParamsLrank = "infraclass"
	GetPlacesNearbyParamsLrankInfrahybrid   GetPlacesNearbyParamsLrank = "infrahybrid"
	GetPlacesNearbyParamsLrankInfraorder    GetPlacesNearbyParamsLrank = "infraorder"
	GetPlacesNearbyParamsLrankKingdom       GetPlacesNearbyParamsLrank = "kingdom"
	GetPlacesNearbyParamsLrankOrder         GetPlacesNearbyParamsLrank = "order"
	GetPlacesNearbyParamsLrankParvorder     GetPlacesNearbyParamsLrank = "parvorder"
	GetPlacesNearbyParamsLrankPhylum        GetPlacesNearbyParamsLrank = "phylum"
	GetPlacesNearbyParamsLrankSection       GetPlacesNearbyParamsLrank = "section"
	GetPlacesNearbyParamsLrankSpecies       GetPlacesNearbyParamsLrank = "species"
	GetPlacesNearbyParamsLrankSubclass      GetPlacesNearbyParamsLrank = "subclass"
	GetPlacesNearbyParamsLrankSubfamily     GetPlacesNearbyParamsLrank = "subfamily"
	GetPlacesNearbyParamsLrankSubgenus      GetPlacesNearbyParamsLrank = "subgenus"
	GetPlacesNearbyParamsLrankSuborder      GetPlacesNearbyParamsLrank = "suborder"
	GetPlacesNearbyParamsLrankSubphylum     GetPlacesNearbyParamsLrank = "subphylum"
	GetPlacesNearbyParamsLrankSubsection    GetPlacesNearbyParamsLrank = "subsection"
	GetPlacesNearbyParamsLrankSubspecies    GetPlacesNearbyParamsLrank = "subspecies"
	GetPlacesNearbyParamsLrankSubterclass   GetPlacesNearbyParamsLrank = "subterclass"
	GetPlacesNearbyParamsLrankSubtribe      GetPlacesNearbyParamsLrank = "subtribe"
	GetPlacesNearbyParamsLrankSuperclass    GetPlacesNearbyParamsLrank = "superclass"
	GetPlacesNearbyParamsLrankSuperfamily   GetPlacesNearbyParamsLrank = "superfamily"
	GetPlacesNearbyParamsLrankSuperorder    GetPlacesNearbyParamsLrank = "superorder"
	GetPlacesNearbyParamsLrankSupertribe    GetPlacesNearbyParamsLrank = "supertribe"
	GetPlacesNearbyParamsLrankTribe         GetPlacesNearbyParamsLrank = "tribe"
	GetPlacesNearbyParamsLrankVariety       GetPlacesNearbyParamsLrank = "variety"
	GetPlacesNearbyParamsLrankZoosection    GetPlacesNearbyParamsLrank = "zoosection"
	GetPlacesNearbyParamsLrankZoosubsection GetPlacesNearbyParamsLrank = "zoosubsection"
)

// Defines values for GetPlacesNearbyParamsIconicTaxa.
const (
	GetPlacesNearbyParamsIconicTaxaActinopterygii GetPlacesNearbyParamsIconicTaxa = "Actinopterygii"
	GetPlacesNearbyParamsIconicTaxaAmphibia       GetPlacesNearbyParamsIconicTaxa = "Amphibia"
	GetPlacesNearbyParamsIconicTaxaAnimalia       GetPlacesNearbyParamsIconicTaxa = "Animalia"
	GetPlacesNearbyParamsIconicTaxaArachnida      GetPlacesNearbyParamsIconicTaxa = "Arachnida"
	GetPlacesNearbyParamsIconicTaxaAves           GetPlacesNearbyParamsIconicTaxa = "Aves"
	GetPlacesNearbyParamsIconicTaxaChromista      GetPlacesNearbyParamsIconicTaxa = "Chromista"
	GetPlacesNearbyParamsIconicTaxaFungi          GetPlacesNearbyParamsIconicTaxa = "Fungi"
	GetPlacesNearbyParamsIconicTaxaInsecta        GetPlacesNearbyParamsIconicTaxa = "Insecta"
	GetPlacesNearbyParamsIconicTaxaMammalia       GetPlacesNearbyParamsIconicTaxa = "Mammalia"
	GetPlacesNearbyParamsIconicTaxaMollusca       GetPlacesNearbyParamsIconicTaxa = "Mollusca"
	GetPlacesNearbyParamsIconicTaxaPlantae        GetPlacesNearbyParamsIconicTaxa = "Plantae"
	GetPlacesNearbyParamsIconicTaxaProtozoa       GetPlacesNearbyParamsIconicTaxa = "Protozoa"
	GetPlacesNearbyParamsIconicTaxaReptilia       GetPlacesNearbyParamsIconicTaxa = "Reptilia"
	GetPlacesNearbyParamsIconicTaxaUnknown        GetPlacesNearbyParamsIconicTaxa = "unknown"
)

// Defines values for GetPlacesNearbyParamsIdentifications.
const (
	GetPlacesNearbyParamsIdentificationsMostAgree    GetPlacesNearbyParamsIdentifications = "most_agree"
	GetPlacesNearbyParamsIdentificationsMostDisagree GetPlacesNearbyParamsIdentifications = "most_disagree"
	GetPlacesNearbyParamsIdentificationsSomeAgree    GetPlacesNearbyParamsIdentifications = "some_agree"
)

// Defines values for GetPlacesNearbyParamsSearchOn.
const (
	GetPlacesNearbyParamsSearchOnDescription        GetPlacesNearbyParamsSearchOn = "description"
	GetPlacesNearbyParamsSearchOnNames              GetPlacesNearbyParamsSearchOn = "names"
	GetPlacesNearbyParamsSearchOnPlace              GetPlacesNearbyParamsSearchOn = "place"
	GetPlacesNearbyParamsSearchOnTags               GetPlacesNearbyParamsSearchOn = "tags"
	GetPlacesNearbyParamsSearchOnTaxonPageObsPhotos GetPlacesNearbyParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetPlacesNearbyParamsQualityGrade.
const (
	GetPlacesNearbyParamsQualityGradeCasual   GetPlacesNearbyParamsQualityGrade = "casual"
	GetPlacesNearbyParamsQualityGradeNeedsID  GetPlacesNearbyParamsQualityGrade = "needs_id"
	GetPlacesNearbyParamsQualityGradeResearch GetPlacesNearbyParamsQualityGrade = "research"
)

// Defines values for GetPlacesNearbyParamsOrder.
const (
	GetPlacesNearbyParamsOrderAsc  GetPlacesNearbyParamsOrder = "asc"
	GetPlacesNearbyParamsOrderDesc GetPlacesNearbyParamsOrder = "desc"
)

// Defines values for GetPlacesNearbyParamsOrderBy.
const (
	GetPlacesNearbyParamsOrderByCreatedAt    GetPlacesNearbyParamsOrderBy = "created_at"
	GetPlacesNearbyParamsOrderByGeoScore     GetPlacesNearbyParamsOrderBy = "geo_score"
	GetPlacesNearbyParamsOrderByID           GetPlacesNearbyParamsOrderBy = "id"
	GetPlacesNearbyParamsOrderByObservedOn   GetPlacesNearbyParamsOrderBy = "observed_on"
	GetPlacesNearbyParamsOrderByRandom       GetPlacesNearbyParamsOrderBy = "random"
	GetPlacesNearbyParamsOrderBySpeciesGuess GetPlacesNearbyParamsOrderBy = "species_guess"
	GetPlacesNearbyParamsOrderByUpdatedAt    GetPlacesNearbyParamsOrderBy = "updated_at"
	GetPlacesNearbyParamsOrderByVotes        GetPlacesNearbyParamsOrderBy = "votes"
)

// Defines values for GetPlacesNearbyParamsDateField.
const (
	GetPlacesNearbyParamsDateFieldCreated  GetPlacesNearbyParamsDateField = "created"
	GetPlacesNearbyParamsDateFieldObserved GetPlacesNearbyParamsDateField = "observed"
)

// Defines values for GetPlacesNearbyParamsInterval.
const (
	Day         GetPlacesNearbyParamsInterval = "day"
	Hour        GetPlacesNearbyParamsInterval = "hour"
	Month       GetPlacesNearbyParamsInterval = "month"
	MonthOfYear GetPlacesNearbyParamsInterval = "month_of_year"
	Week        GetPlacesNearbyParamsInterval = "week"
	WeekOfYear  GetPlacesNearbyParamsInterval = "week_of_year"
	Year        GetPlacesNearbyParamsInterval = "year"
)

// Defines values for GetPlacesIDZoomXYPngParamsTileSize.
const (
	GetPlacesIDZoomXYPngParamsTileSizeN256 GetPlacesIDZoomXYPngParamsTileSize = 256
	GetPlacesIDZoomXYPngParamsTileSizeN512 GetPlacesIDZoomXYPngParamsTileSize = 512
)

// Defines values for GetPlacesIDZoomXYPngParamsLicense.
const (
	GetPlacesIDZoomXYPngParamsLicenseCc0      GetPlacesIDZoomXYPngParamsLicense = "cc0"
	GetPlacesIDZoomXYPngParamsLicenseCcBy     GetPlacesIDZoomXYPngParamsLicense = "cc-by"
	GetPlacesIDZoomXYPngParamsLicenseCcByNc   GetPlacesIDZoomXYPngParamsLicense = "cc-by-nc"
	GetPlacesIDZoomXYPngParamsLicenseCcByNcNd GetPlacesIDZoomXYPngParamsLicense = "cc-by-nc-nd"
	GetPlacesIDZoomXYPngParamsLicenseCcByNcSa GetPlacesIDZoomXYPngParamsLicense = "cc-by-nc-sa"
	GetPlacesIDZoomXYPngParamsLicenseCcByNd   GetPlacesIDZoomXYPngParamsLicense = "cc-by-nd"
	GetPlacesIDZoomXYPngParamsLicenseCcBySa   GetPlacesIDZoomXYPngParamsLicense = "cc-by-sa"
)

// Defines values for GetPlacesIDZoomXYPngParamsPhotoLicense.
const (
	GetPlacesIDZoomXYPngParamsPhotoLicenseCc0      GetPlacesIDZoomXYPngParamsPhotoLicense = "cc0"
	GetPlacesIDZoomXYPngParamsPhotoLicenseCcBy     GetPlacesIDZoomXYPngParamsPhotoLicense = "cc-by"
	GetPlacesIDZoomXYPngParamsPhotoLicenseCcByNc   GetPlacesIDZoomXYPngParamsPhotoLicense = "cc-by-nc"
	GetPlacesIDZoomXYPngParamsPhotoLicenseCcByNcNd GetPlacesIDZoomXYPngParamsPhotoLicense = "cc-by-nc-nd"
	GetPlacesIDZoomXYPngParamsPhotoLicenseCcByNcSa GetPlacesIDZoomXYPngParamsPhotoLicense = "cc-by-nc-sa"
	GetPlacesIDZoomXYPngParamsPhotoLicenseCcByNd   GetPlacesIDZoomXYPngParamsPhotoLicense = "cc-by-nd"
	GetPlacesIDZoomXYPngParamsPhotoLicenseCcBySa   GetPlacesIDZoomXYPngParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetPlacesIDZoomXYPngParamsRank.
const (
	GetPlacesIDZoomXYPngParamsRankClass         GetPlacesIDZoomXYPngParamsRank = "class"
	GetPlacesIDZoomXYPngParamsRankComplex       GetPlacesIDZoomXYPngParamsRank = "complex"
	GetPlacesIDZoomXYPngParamsRankEpifamily     GetPlacesIDZoomXYPngParamsRank = "epifamily"
	GetPlacesIDZoomXYPngParamsRankFamily        GetPlacesIDZoomXYPngParamsRank = "family"
	GetPlacesIDZoomXYPngParamsRankForm          GetPlacesIDZoomXYPngParamsRank = "form"
	GetPlacesIDZoomXYPngParamsRankGenus         GetPlacesIDZoomXYPngParamsRank = "genus"
	GetPlacesIDZoomXYPngParamsRankGenushybrid   GetPlacesIDZoomXYPngParamsRank = "genushybrid"
	GetPlacesIDZoomXYPngParamsRankHybrid        GetPlacesIDZoomXYPngParamsRank = "hybrid"
	GetPlacesIDZoomXYPngParamsRankInfraclass    GetPlacesIDZoomXYPngParamsRank = "infraclass"
	GetPlacesIDZoomXYPngParamsRankInfrahybrid   GetPlacesIDZoomXYPngParamsRank = "infrahybrid"
	GetPlacesIDZoomXYPngParamsRankInfraorder    GetPlacesIDZoomXYPngParamsRank = "infraorder"
	GetPlacesIDZoomXYPngParamsRankKingdom       GetPlacesIDZoomXYPngParamsRank = "kingdom"
	GetPlacesIDZoomXYPngParamsRankOrder         GetPlacesIDZoomXYPngParamsRank = "order"
	GetPlacesIDZoomXYPngParamsRankParvorder     GetPlacesIDZoomXYPngParamsRank = "parvorder"
	GetPlacesIDZoomXYPngParamsRankPhylum        GetPlacesIDZoomXYPngParamsRank = "phylum"
	GetPlacesIDZoomXYPngParamsRankSection       GetPlacesIDZoomXYPngParamsRank = "section"
	GetPlacesIDZoomXYPngParamsRankSpecies       GetPlacesIDZoomXYPngParamsRank = "species"
	GetPlacesIDZoomXYPngParamsRankSubclass      GetPlacesIDZoomXYPngParamsRank = "subclass"
	GetPlacesIDZoomXYPngParamsRankSubfamily     GetPlacesIDZoomXYPngParamsRank = "subfamily"
	GetPlacesIDZoomXYPngParamsRankSubgenus      GetPlacesIDZoomXYPngParamsRank = "subgenus"
	GetPlacesIDZoomXYPngParamsRankSuborder      GetPlacesIDZoomXYPngParamsRank = "suborder"
	GetPlacesIDZoomXYPngParamsRankSubphylum     GetPlacesIDZoomXYPngParamsRank = "subphylum"
	GetPlacesIDZoomXYPngParamsRankSubsection    GetPlacesIDZoomXYPngParamsRank = "subsection"
	GetPlacesIDZoomXYPngParamsRankSubspecies    GetPlacesIDZoomXYPngParamsRank = "subspecies"
	GetPlacesIDZoomXYPngParamsRankSubterclass   GetPlacesIDZoomXYPngParamsRank = "subterclass"
	GetPlacesIDZoomXYPngParamsRankSubtribe      GetPlacesIDZoomXYPngParamsRank = "subtribe"
	GetPlacesIDZoomXYPngParamsRankSuperclass    GetPlacesIDZoomXYPngParamsRank = "superclass"
	GetPlacesIDZoomXYPngParamsRankSuperfamily   GetPlacesIDZoomXYPngParamsRank = "superfamily"
	GetPlacesIDZoomXYPngParamsRankSuperorder    GetPlacesIDZoomXYPngParamsRank = "superorder"
	GetPlacesIDZoomXYPngParamsRankSupertribe    GetPlacesIDZoomXYPngParamsRank = "supertribe"
	GetPlacesIDZoomXYPngParamsRankTribe         GetPlacesIDZoomXYPngParamsRank = "tribe"
	GetPlacesIDZoomXYPngParamsRankVariety       GetPlacesIDZoomXYPngParamsRank = "variety"
	GetPlacesIDZoomXYPngParamsRankZoosection    GetPlacesIDZoomXYPngParamsRank = "zoosection"
	GetPlacesIDZoomXYPngParamsRankZoosubsection GetPlacesIDZoomXYPngParamsRank = "zoosubsection"
)

// Defines values for GetPlacesIDZoomXYPngParamsSoundLicense.
const (
	GetPlacesIDZoomXYPngParamsSoundLicenseCc0      GetPlacesIDZoomXYPngParamsSoundLicense = "cc0"
	GetPlacesIDZoomXYPngParamsSoundLicenseCcBy     GetPlacesIDZoomXYPngParamsSoundLicense = "cc-by"
	GetPlacesIDZoomXYPngParamsSoundLicenseCcByNc   GetPlacesIDZoomXYPngParamsSoundLicense = "cc-by-nc"
	GetPlacesIDZoomXYPngParamsSoundLicenseCcByNcNd GetPlacesIDZoomXYPngParamsSoundLicense = "cc-by-nc-nd"
	GetPlacesIDZoomXYPngParamsSoundLicenseCcByNcSa GetPlacesIDZoomXYPngParamsSoundLicense = "cc-by-nc-sa"
	GetPlacesIDZoomXYPngParamsSoundLicenseCcByNd   GetPlacesIDZoomXYPngParamsSoundLicense = "cc-by-nd"
	GetPlacesIDZoomXYPngParamsSoundLicenseCcBySa   GetPlacesIDZoomXYPngParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetPlacesIDZoomXYPngParamsCsi.
const (
	GetPlacesIDZoomXYPngParamsCsiCR GetPlacesIDZoomXYPngParamsCsi = "CR"
	GetPlacesIDZoomXYPngParamsCsiEN GetPlacesIDZoomXYPngParamsCsi = "EN"
	GetPlacesIDZoomXYPngParamsCsiEW GetPlacesIDZoomXYPngParamsCsi = "EW"
	GetPlacesIDZoomXYPngParamsCsiEX GetPlacesIDZoomXYPngParamsCsi = "EX"
	GetPlacesIDZoomXYPngParamsCsiLC GetPlacesIDZoomXYPngParamsCsi = "LC"
	GetPlacesIDZoomXYPngParamsCsiNT GetPlacesIDZoomXYPngParamsCsi = "NT"
	GetPlacesIDZoomXYPngParamsCsiVU GetPlacesIDZoomXYPngParamsCsi = "VU"
)

// Defines values for GetPlacesIDZoomXYPngParamsGeoprivacy.
const (
	GetPlacesIDZoomXYPngParamsGeoprivacyObscured        GetPlacesIDZoomXYPngParamsGeoprivacy = "obscured"
	GetPlacesIDZoomXYPngParamsGeoprivacyObscuredPrivate GetPlacesIDZoomXYPngParamsGeoprivacy = "obscured_private"
	GetPlacesIDZoomXYPngParamsGeoprivacyOpen            GetPlacesIDZoomXYPngParamsGeoprivacy = "open"
	GetPlacesIDZoomXYPngParamsGeoprivacyPrivate         GetPlacesIDZoomXYPngParamsGeoprivacy = "private"
)

// Defines values for GetPlacesIDZoomXYPngParamsTaxonGeoprivacy.
const (
	GetPlacesIDZoomXYPngParamsTaxonGeoprivacyObscured        GetPlacesIDZoomXYPngParamsTaxonGeoprivacy = "obscured"
	GetPlacesIDZoomXYPngParamsTaxonGeoprivacyObscuredPrivate GetPlacesIDZoomXYPngParamsTaxonGeoprivacy = "obscured_private"
	GetPlacesIDZoomXYPngParamsTaxonGeoprivacyOpen            GetPlacesIDZoomXYPngParamsTaxonGeoprivacy = "open"
	GetPlacesIDZoomXYPngParamsTaxonGeoprivacyPrivate         GetPlacesIDZoomXYPngParamsTaxonGeoprivacy = "private"
)

// Defines values for GetPlacesIDZoomXYPngParamsObscuration.
const (
	GetPlacesIDZoomXYPngParamsObscurationNone     GetPlacesIDZoomXYPngParamsObscuration = "none"
	GetPlacesIDZoomXYPngParamsObscurationObscured GetPlacesIDZoomXYPngParamsObscuration = "obscured"
	GetPlacesIDZoomXYPngParamsObscurationPrivate  GetPlacesIDZoomXYPngParamsObscuration = "private"
)

// Defines values for GetPlacesIDZoomXYPngParamsHrank.
const (
	GetPlacesIDZoomXYPngParamsHrankClass         GetPlacesIDZoomXYPngParamsHrank = "class"
	GetPlacesIDZoomXYPngParamsHrankComplex       GetPlacesIDZoomXYPngParamsHrank = "complex"
	GetPlacesIDZoomXYPngParamsHrankEpifamily     GetPlacesIDZoomXYPngParamsHrank = "epifamily"
	GetPlacesIDZoomXYPngParamsHrankFamily        GetPlacesIDZoomXYPngParamsHrank = "family"
	GetPlacesIDZoomXYPngParamsHrankForm          GetPlacesIDZoomXYPngParamsHrank = "form"
	GetPlacesIDZoomXYPngParamsHrankGenus         GetPlacesIDZoomXYPngParamsHrank = "genus"
	GetPlacesIDZoomXYPngParamsHrankGenushybrid   GetPlacesIDZoomXYPngParamsHrank = "genushybrid"
	GetPlacesIDZoomXYPngParamsHrankHybrid        GetPlacesIDZoomXYPngParamsHrank = "hybrid"
	GetPlacesIDZoomXYPngParamsHrankInfraclass    GetPlacesIDZoomXYPngParamsHrank = "infraclass"
	GetPlacesIDZoomXYPngParamsHrankInfrahybrid   GetPlacesIDZoomXYPngParamsHrank = "infrahybrid"
	GetPlacesIDZoomXYPngParamsHrankInfraorder    GetPlacesIDZoomXYPngParamsHrank = "infraorder"
	GetPlacesIDZoomXYPngParamsHrankKingdom       GetPlacesIDZoomXYPngParamsHrank = "kingdom"
	GetPlacesIDZoomXYPngParamsHrankOrder         GetPlacesIDZoomXYPngParamsHrank = "order"
	GetPlacesIDZoomXYPngParamsHrankParvorder     GetPlacesIDZoomXYPngParamsHrank = "parvorder"
	GetPlacesIDZoomXYPngParamsHrankPhylum        GetPlacesIDZoomXYPngParamsHrank = "phylum"
	GetPlacesIDZoomXYPngParamsHrankSection       GetPlacesIDZoomXYPngParamsHrank = "section"
	GetPlacesIDZoomXYPngParamsHrankSpecies       GetPlacesIDZoomXYPngParamsHrank = "species"
	GetPlacesIDZoomXYPngParamsHrankSubclass      GetPlacesIDZoomXYPngParamsHrank = "subclass"
	GetPlacesIDZoomXYPngParamsHrankSubfamily     GetPlacesIDZoomXYPngParamsHrank = "subfamily"
	GetPlacesIDZoomXYPngParamsHrankSubgenus      GetPlacesIDZoomXYPngParamsHrank = "subgenus"
	GetPlacesIDZoomXYPngParamsHrankSuborder      GetPlacesIDZoomXYPngParamsHrank = "suborder"
	GetPlacesIDZoomXYPngParamsHrankSubphylum     GetPlacesIDZoomXYPngParamsHrank = "subphylum"
	GetPlacesIDZoomXYPngParamsHrankSubsection    GetPlacesIDZoomXYPngParamsHrank = "subsection"
	GetPlacesIDZoomXYPngParamsHrankSubspecies    GetPlacesIDZoomXYPngParamsHrank = "subspecies"
	GetPlacesIDZoomXYPngParamsHrankSubterclass   GetPlacesIDZoomXYPngParamsHrank = "subterclass"
	GetPlacesIDZoomXYPngParamsHrankSubtribe      GetPlacesIDZoomXYPngParamsHrank = "subtribe"
	GetPlacesIDZoomXYPngParamsHrankSuperclass    GetPlacesIDZoomXYPngParamsHrank = "superclass"
	GetPlacesIDZoomXYPngParamsHrankSuperfamily   GetPlacesIDZoomXYPngParamsHrank = "superfamily"
	GetPlacesIDZoomXYPngParamsHrankSuperorder    GetPlacesIDZoomXYPngParamsHrank = "superorder"
	GetPlacesIDZoomXYPngParamsHrankSupertribe    GetPlacesIDZoomXYPngParamsHrank = "supertribe"
	GetPlacesIDZoomXYPngParamsHrankTribe         GetPlacesIDZoomXYPngParamsHrank = "tribe"
	GetPlacesIDZoomXYPngParamsHrankVariety       GetPlacesIDZoomXYPngParamsHrank = "variety"
	GetPlacesIDZoomXYPngParamsHrankZoosection    GetPlacesIDZoomXYPngParamsHrank = "zoosection"
	GetPlacesIDZoomXYPngParamsHrankZoosubsection GetPlacesIDZoomXYPngParamsHrank = "zoosubsection"
)

// Defines values for GetPlacesIDZoomXYPngParamsLrank.
const (
	GetPlacesIDZoomXYPngParamsLrankClass         GetPlacesIDZoomXYPngParamsLrank = "class"
	GetPlacesIDZoomXYPngParamsLrankComplex       GetPlacesIDZoomXYPngParamsLrank = "complex"
	GetPlacesIDZoomXYPngParamsLrankEpifamily     GetPlacesIDZoomXYPngParamsLrank = "epifamily"
	GetPlacesIDZoomXYPngParamsLrankFamily        GetPlacesIDZoomXYPngParamsLrank = "family"
	GetPlacesIDZoomXYPngParamsLrankForm          GetPlacesIDZoomXYPngParamsLrank = "form"
	GetPlacesIDZoomXYPngParamsLrankGenus         GetPlacesIDZoomXYPngParamsLrank = "genus"
	GetPlacesIDZoomXYPngParamsLrankGenushybrid   GetPlacesIDZoomXYPngParamsLrank = "genushybrid"
	GetPlacesIDZoomXYPngParamsLrankHybrid        GetPlacesIDZoomXYPngParamsLrank = "hybrid"
	GetPlacesIDZoomXYPngParamsLrankInfraclass    GetPlacesIDZoomXYPngParamsLrank = "infraclass"
	GetPlacesIDZoomXYPngParamsLrankInfrahybrid   GetPlacesIDZoomXYPngParamsLrank = "infrahybrid"
	GetPlacesIDZoomXYPngParamsLrankInfraorder    GetPlacesIDZoomXYPngParamsLrank = "infraorder"
	GetPlacesIDZoomXYPngParamsLrankKingdom       GetPlacesIDZoomXYPngParamsLrank = "kingdom"
	GetPlacesIDZoomXYPngParamsLrankOrder         GetPlacesIDZoomXYPngParamsLrank = "order"
	GetPlacesIDZoomXYPngParamsLrankParvorder     GetPlacesIDZoomXYPngParamsLrank = "parvorder"
	GetPlacesIDZoomXYPngParamsLrankPhylum        GetPlacesIDZoomXYPngParamsLrank = "phylum"
	GetPlacesIDZoomXYPngParamsLrankSection       GetPlacesIDZoomXYPngParamsLrank = "section"
	GetPlacesIDZoomXYPngParamsLrankSpecies       GetPlacesIDZoomXYPngParamsLrank = "species"
	GetPlacesIDZoomXYPngParamsLrankSubclass      GetPlacesIDZoomXYPngParamsLrank = "subclass"
	GetPlacesIDZoomXYPngParamsLrankSubfamily     GetPlacesIDZoomXYPngParamsLrank = "subfamily"
	GetPlacesIDZoomXYPngParamsLrankSubgenus      GetPlacesIDZoomXYPngParamsLrank = "subgenus"
	GetPlacesIDZoomXYPngParamsLrankSuborder      GetPlacesIDZoomXYPngParamsLrank = "suborder"
	GetPlacesIDZoomXYPngParamsLrankSubphylum     GetPlacesIDZoomXYPngParamsLrank = "subphylum"
	GetPlacesIDZoomXYPngParamsLrankSubsection    GetPlacesIDZoomXYPngParamsLrank = "subsection"
	GetPlacesIDZoomXYPngParamsLrankSubspecies    GetPlacesIDZoomXYPngParamsLrank = "subspecies"
	GetPlacesIDZoomXYPngParamsLrankSubterclass   GetPlacesIDZoomXYPngParamsLrank = "subterclass"
	GetPlacesIDZoomXYPngParamsLrankSubtribe      GetPlacesIDZoomXYPngParamsLrank = "subtribe"
	GetPlacesIDZoomXYPngParamsLrankSuperclass    GetPlacesIDZoomXYPngParamsLrank = "superclass"
	GetPlacesIDZoomXYPngParamsLrankSuperfamily   GetPlacesIDZoomXYPngParamsLrank = "superfamily"
	GetPlacesIDZoomXYPngParamsLrankSuperorder    GetPlacesIDZoomXYPngParamsLrank = "superorder"
	GetPlacesIDZoomXYPngParamsLrankSupertribe    GetPlacesIDZoomXYPngParamsLrank = "supertribe"
	GetPlacesIDZoomXYPngParamsLrankTribe         GetPlacesIDZoomXYPngParamsLrank = "tribe"
	GetPlacesIDZoomXYPngParamsLrankVariety       GetPlacesIDZoomXYPngParamsLrank = "variety"
	GetPlacesIDZoomXYPngParamsLrankZoosection    GetPlacesIDZoomXYPngParamsLrank = "zoosection"
	GetPlacesIDZoomXYPngParamsLrankZoosubsection GetPlacesIDZoomXYPngParamsLrank = "zoosubsection"
)

// Defines values for GetPlacesIDZoomXYPngParamsIconicTaxa.
const (
	GetPlacesIDZoomXYPngParamsIconicTaxaActinopterygii GetPlacesIDZoomXYPngParamsIconicTaxa = "Actinopterygii"
	GetPlacesIDZoomXYPngParamsIconicTaxaAmphibia       GetPlacesIDZoomXYPngParamsIconicTaxa = "Amphibia"
	GetPlacesIDZoomXYPngParamsIconicTaxaAnimalia       GetPlacesIDZoomXYPngParamsIconicTaxa = "Animalia"
	GetPlacesIDZoomXYPngParamsIconicTaxaArachnida      GetPlacesIDZoomXYPngParamsIconicTaxa = "Arachnida"
	GetPlacesIDZoomXYPngParamsIconicTaxaAves           GetPlacesIDZoomXYPngParamsIconicTaxa = "Aves"
	GetPlacesIDZoomXYPngParamsIconicTaxaChromista      GetPlacesIDZoomXYPngParamsIconicTaxa = "Chromista"
	GetPlacesIDZoomXYPngParamsIconicTaxaFungi          GetPlacesIDZoomXYPngParamsIconicTaxa = "Fungi"
	GetPlacesIDZoomXYPngParamsIconicTaxaInsecta        GetPlacesIDZoomXYPngParamsIconicTaxa = "Insecta"
	GetPlacesIDZoomXYPngParamsIconicTaxaMammalia       GetPlacesIDZoomXYPngParamsIconicTaxa = "Mammalia"
	GetPlacesIDZoomXYPngParamsIconicTaxaMollusca       GetPlacesIDZoomXYPngParamsIconicTaxa = "Mollusca"
	GetPlacesIDZoomXYPngParamsIconicTaxaPlantae        GetPlacesIDZoomXYPngParamsIconicTaxa = "Plantae"
	GetPlacesIDZoomXYPngParamsIconicTaxaProtozoa       GetPlacesIDZoomXYPngParamsIconicTaxa = "Protozoa"
	GetPlacesIDZoomXYPngParamsIconicTaxaReptilia       GetPlacesIDZoomXYPngParamsIconicTaxa = "Reptilia"
	GetPlacesIDZoomXYPngParamsIconicTaxaUnknown        GetPlacesIDZoomXYPngParamsIconicTaxa = "unknown"
)

// Defines values for GetPlacesIDZoomXYPngParamsIdentifications.
const (
	GetPlacesIDZoomXYPngParamsIdentificationsMostAgree    GetPlacesIDZoomXYPngParamsIdentifications = "most_agree"
	GetPlacesIDZoomXYPngParamsIdentificationsMostDisagree GetPlacesIDZoomXYPngParamsIdentifications = "most_disagree"
	GetPlacesIDZoomXYPngParamsIdentificationsSomeAgree    GetPlacesIDZoomXYPngParamsIdentifications = "some_agree"
)

// Defines values for GetPlacesIDZoomXYPngParamsSearchOn.
const (
	GetPlacesIDZoomXYPngParamsSearchOnDescription        GetPlacesIDZoomXYPngParamsSearchOn = "description"
	GetPlacesIDZoomXYPngParamsSearchOnNames              GetPlacesIDZoomXYPngParamsSearchOn = "names"
	GetPlacesIDZoomXYPngParamsSearchOnPlace              GetPlacesIDZoomXYPngParamsSearchOn = "place"
	GetPlacesIDZoomXYPngParamsSearchOnTags               GetPlacesIDZoomXYPngParamsSearchOn = "tags"
	GetPlacesIDZoomXYPngParamsSearchOnTaxonPageObsPhotos GetPlacesIDZoomXYPngParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetPlacesIDZoomXYPngParamsQualityGrade.
const (
	GetPlacesIDZoomXYPngParamsQualityGradeCasual   GetPlacesIDZoomXYPngParamsQualityGrade = "casual"
	GetPlacesIDZoomXYPngParamsQualityGradeNeedsID  GetPlacesIDZoomXYPngParamsQualityGrade = "needs_id"
	GetPlacesIDZoomXYPngParamsQualityGradeResearch GetPlacesIDZoomXYPngParamsQualityGrade = "research"
)

// Defines values for GetPlacesIDZoomXYPngParamsOrder.
const (
	GetPlacesIDZoomXYPngParamsOrderAsc  GetPlacesIDZoomXYPngParamsOrder = "asc"
	GetPlacesIDZoomXYPngParamsOrderDesc GetPlacesIDZoomXYPngParamsOrder = "desc"
)

// Defines values for GetPlacesIDZoomXYPngParamsOrderBy.
const (
	GetPlacesIDZoomXYPngParamsOrderByCreatedAt    GetPlacesIDZoomXYPngParamsOrderBy = "created_at"
	GetPlacesIDZoomXYPngParamsOrderByGeoScore     GetPlacesIDZoomXYPngParamsOrderBy = "geo_score"
	GetPlacesIDZoomXYPngParamsOrderByID           GetPlacesIDZoomXYPngParamsOrderBy = "id"
	GetPlacesIDZoomXYPngParamsOrderByObservedOn   GetPlacesIDZoomXYPngParamsOrderBy = "observed_on"
	GetPlacesIDZoomXYPngParamsOrderByRandom       GetPlacesIDZoomXYPngParamsOrderBy = "random"
	GetPlacesIDZoomXYPngParamsOrderBySpeciesGuess GetPlacesIDZoomXYPngParamsOrderBy = "species_guess"
	GetPlacesIDZoomXYPngParamsOrderByUpdatedAt    GetPlacesIDZoomXYPngParamsOrderBy = "updated_at"
	GetPlacesIDZoomXYPngParamsOrderByVotes        GetPlacesIDZoomXYPngParamsOrderBy = "votes"
)

// Defines values for GetPlacesUUIDParamsOrderBy.
const (
	AdminAndDistance GetPlacesUUIDParamsOrderBy = "admin_and_distance"
)

// Defines values for GetPointsZoomXYGridJSONParamsTileSize.
const (
	GetPointsZoomXYGridJSONParamsTileSizeN256 GetPointsZoomXYGridJSONParamsTileSize = 256
	GetPointsZoomXYGridJSONParamsTileSizeN512 GetPointsZoomXYGridJSONParamsTileSize = 512
)

// Defines values for GetPointsZoomXYGridJSONParamsLicense.
const (
	GetPointsZoomXYGridJSONParamsLicenseCc0      GetPointsZoomXYGridJSONParamsLicense = "cc0"
	GetPointsZoomXYGridJSONParamsLicenseCcBy     GetPointsZoomXYGridJSONParamsLicense = "cc-by"
	GetPointsZoomXYGridJSONParamsLicenseCcByNc   GetPointsZoomXYGridJSONParamsLicense = "cc-by-nc"
	GetPointsZoomXYGridJSONParamsLicenseCcByNcNd GetPointsZoomXYGridJSONParamsLicense = "cc-by-nc-nd"
	GetPointsZoomXYGridJSONParamsLicenseCcByNcSa GetPointsZoomXYGridJSONParamsLicense = "cc-by-nc-sa"
	GetPointsZoomXYGridJSONParamsLicenseCcByNd   GetPointsZoomXYGridJSONParamsLicense = "cc-by-nd"
	GetPointsZoomXYGridJSONParamsLicenseCcBySa   GetPointsZoomXYGridJSONParamsLicense = "cc-by-sa"
)

// Defines values for GetPointsZoomXYGridJSONParamsPhotoLicense.
const (
	GetPointsZoomXYGridJSONParamsPhotoLicenseCc0      GetPointsZoomXYGridJSONParamsPhotoLicense = "cc0"
	GetPointsZoomXYGridJSONParamsPhotoLicenseCcBy     GetPointsZoomXYGridJSONParamsPhotoLicense = "cc-by"
	GetPointsZoomXYGridJSONParamsPhotoLicenseCcByNc   GetPointsZoomXYGridJSONParamsPhotoLicense = "cc-by-nc"
	GetPointsZoomXYGridJSONParamsPhotoLicenseCcByNcNd GetPointsZoomXYGridJSONParamsPhotoLicense = "cc-by-nc-nd"
	GetPointsZoomXYGridJSONParamsPhotoLicenseCcByNcSa GetPointsZoomXYGridJSONParamsPhotoLicense = "cc-by-nc-sa"
	GetPointsZoomXYGridJSONParamsPhotoLicenseCcByNd   GetPointsZoomXYGridJSONParamsPhotoLicense = "cc-by-nd"
	GetPointsZoomXYGridJSONParamsPhotoLicenseCcBySa   GetPointsZoomXYGridJSONParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetPointsZoomXYGridJSONParamsRank.
const (
	GetPointsZoomXYGridJSONParamsRankClass         GetPointsZoomXYGridJSONParamsRank = "class"
	GetPointsZoomXYGridJSONParamsRankComplex       GetPointsZoomXYGridJSONParamsRank = "complex"
	GetPointsZoomXYGridJSONParamsRankEpifamily     GetPointsZoomXYGridJSONParamsRank = "epifamily"
	GetPointsZoomXYGridJSONParamsRankFamily        GetPointsZoomXYGridJSONParamsRank = "family"
	GetPointsZoomXYGridJSONParamsRankForm          GetPointsZoomXYGridJSONParamsRank = "form"
	GetPointsZoomXYGridJSONParamsRankGenus         GetPointsZoomXYGridJSONParamsRank = "genus"
	GetPointsZoomXYGridJSONParamsRankGenushybrid   GetPointsZoomXYGridJSONParamsRank = "genushybrid"
	GetPointsZoomXYGridJSONParamsRankHybrid        GetPointsZoomXYGridJSONParamsRank = "hybrid"
	GetPointsZoomXYGridJSONParamsRankInfraclass    GetPointsZoomXYGridJSONParamsRank = "infraclass"
	GetPointsZoomXYGridJSONParamsRankInfrahybrid   GetPointsZoomXYGridJSONParamsRank = "infrahybrid"
	GetPointsZoomXYGridJSONParamsRankInfraorder    GetPointsZoomXYGridJSONParamsRank = "infraorder"
	GetPointsZoomXYGridJSONParamsRankKingdom       GetPointsZoomXYGridJSONParamsRank = "kingdom"
	GetPointsZoomXYGridJSONParamsRankOrder         GetPointsZoomXYGridJSONParamsRank = "order"
	GetPointsZoomXYGridJSONParamsRankParvorder     GetPointsZoomXYGridJSONParamsRank = "parvorder"
	GetPointsZoomXYGridJSONParamsRankPhylum        GetPointsZoomXYGridJSONParamsRank = "phylum"
	GetPointsZoomXYGridJSONParamsRankSection       GetPointsZoomXYGridJSONParamsRank = "section"
	GetPointsZoomXYGridJSONParamsRankSpecies       GetPointsZoomXYGridJSONParamsRank = "species"
	GetPointsZoomXYGridJSONParamsRankSubclass      GetPointsZoomXYGridJSONParamsRank = "subclass"
	GetPointsZoomXYGridJSONParamsRankSubfamily     GetPointsZoomXYGridJSONParamsRank = "subfamily"
	GetPointsZoomXYGridJSONParamsRankSubgenus      GetPointsZoomXYGridJSONParamsRank = "subgenus"
	GetPointsZoomXYGridJSONParamsRankSuborder      GetPointsZoomXYGridJSONParamsRank = "suborder"
	GetPointsZoomXYGridJSONParamsRankSubphylum     GetPointsZoomXYGridJSONParamsRank = "subphylum"
	GetPointsZoomXYGridJSONParamsRankSubsection    GetPointsZoomXYGridJSONParamsRank = "subsection"
	GetPointsZoomXYGridJSONParamsRankSubspecies    GetPointsZoomXYGridJSONParamsRank = "subspecies"
	GetPointsZoomXYGridJSONParamsRankSubterclass   GetPointsZoomXYGridJSONParamsRank = "subterclass"
	GetPointsZoomXYGridJSONParamsRankSubtribe      GetPointsZoomXYGridJSONParamsRank = "subtribe"
	GetPointsZoomXYGridJSONParamsRankSuperclass    GetPointsZoomXYGridJSONParamsRank = "superclass"
	GetPointsZoomXYGridJSONParamsRankSuperfamily   GetPointsZoomXYGridJSONParamsRank = "superfamily"
	GetPointsZoomXYGridJSONParamsRankSuperorder    GetPointsZoomXYGridJSONParamsRank = "superorder"
	GetPointsZoomXYGridJSONParamsRankSupertribe    GetPointsZoomXYGridJSONParamsRank = "supertribe"
	GetPointsZoomXYGridJSONParamsRankTribe         GetPointsZoomXYGridJSONParamsRank = "tribe"
	GetPointsZoomXYGridJSONParamsRankVariety       GetPointsZoomXYGridJSONParamsRank = "variety"
	GetPointsZoomXYGridJSONParamsRankZoosection    GetPointsZoomXYGridJSONParamsRank = "zoosection"
	GetPointsZoomXYGridJSONParamsRankZoosubsection GetPointsZoomXYGridJSONParamsRank = "zoosubsection"
)

// Defines values for GetPointsZoomXYGridJSONParamsSoundLicense.
const (
	GetPointsZoomXYGridJSONParamsSoundLicenseCc0      GetPointsZoomXYGridJSONParamsSoundLicense = "cc0"
	GetPointsZoomXYGridJSONParamsSoundLicenseCcBy     GetPointsZoomXYGridJSONParamsSoundLicense = "cc-by"
	GetPointsZoomXYGridJSONParamsSoundLicenseCcByNc   GetPointsZoomXYGridJSONParamsSoundLicense = "cc-by-nc"
	GetPointsZoomXYGridJSONParamsSoundLicenseCcByNcNd GetPointsZoomXYGridJSONParamsSoundLicense = "cc-by-nc-nd"
	GetPointsZoomXYGridJSONParamsSoundLicenseCcByNcSa GetPointsZoomXYGridJSONParamsSoundLicense = "cc-by-nc-sa"
	GetPointsZoomXYGridJSONParamsSoundLicenseCcByNd   GetPointsZoomXYGridJSONParamsSoundLicense = "cc-by-nd"
	GetPointsZoomXYGridJSONParamsSoundLicenseCcBySa   GetPointsZoomXYGridJSONParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetPointsZoomXYGridJSONParamsCsi.
const (
	GetPointsZoomXYGridJSONParamsCsiCR GetPointsZoomXYGridJSONParamsCsi = "CR"
	GetPointsZoomXYGridJSONParamsCsiEN GetPointsZoomXYGridJSONParamsCsi = "EN"
	GetPointsZoomXYGridJSONParamsCsiEW GetPointsZoomXYGridJSONParamsCsi = "EW"
	GetPointsZoomXYGridJSONParamsCsiEX GetPointsZoomXYGridJSONParamsCsi = "EX"
	GetPointsZoomXYGridJSONParamsCsiLC GetPointsZoomXYGridJSONParamsCsi = "LC"
	GetPointsZoomXYGridJSONParamsCsiNT GetPointsZoomXYGridJSONParamsCsi = "NT"
	GetPointsZoomXYGridJSONParamsCsiVU GetPointsZoomXYGridJSONParamsCsi = "VU"
)

// Defines values for GetPointsZoomXYGridJSONParamsGeoprivacy.
const (
	GetPointsZoomXYGridJSONParamsGeoprivacyObscured        GetPointsZoomXYGridJSONParamsGeoprivacy = "obscured"
	GetPointsZoomXYGridJSONParamsGeoprivacyObscuredPrivate GetPointsZoomXYGridJSONParamsGeoprivacy = "obscured_private"
	GetPointsZoomXYGridJSONParamsGeoprivacyOpen            GetPointsZoomXYGridJSONParamsGeoprivacy = "open"
	GetPointsZoomXYGridJSONParamsGeoprivacyPrivate         GetPointsZoomXYGridJSONParamsGeoprivacy = "private"
)

// Defines values for GetPointsZoomXYGridJSONParamsTaxonGeoprivacy.
const (
	GetPointsZoomXYGridJSONParamsTaxonGeoprivacyObscured        GetPointsZoomXYGridJSONParamsTaxonGeoprivacy = "obscured"
	GetPointsZoomXYGridJSONParamsTaxonGeoprivacyObscuredPrivate GetPointsZoomXYGridJSONParamsTaxonGeoprivacy = "obscured_private"
	GetPointsZoomXYGridJSONParamsTaxonGeoprivacyOpen            GetPointsZoomXYGridJSONParamsTaxonGeoprivacy = "open"
	GetPointsZoomXYGridJSONParamsTaxonGeoprivacyPrivate         GetPointsZoomXYGridJSONParamsTaxonGeoprivacy = "private"
)

// Defines values for GetPointsZoomXYGridJSONParamsObscuration.
const (
	GetPointsZoomXYGridJSONParamsObscurationNone     GetPointsZoomXYGridJSONParamsObscuration = "none"
	GetPointsZoomXYGridJSONParamsObscurationObscured GetPointsZoomXYGridJSONParamsObscuration = "obscured"
	GetPointsZoomXYGridJSONParamsObscurationPrivate  GetPointsZoomXYGridJSONParamsObscuration = "private"
)

// Defines values for GetPointsZoomXYGridJSONParamsHrank.
const (
	GetPointsZoomXYGridJSONParamsHrankClass         GetPointsZoomXYGridJSONParamsHrank = "class"
	GetPointsZoomXYGridJSONParamsHrankComplex       GetPointsZoomXYGridJSONParamsHrank = "complex"
	GetPointsZoomXYGridJSONParamsHrankEpifamily     GetPointsZoomXYGridJSONParamsHrank = "epifamily"
	GetPointsZoomXYGridJSONParamsHrankFamily        GetPointsZoomXYGridJSONParamsHrank = "family"
	GetPointsZoomXYGridJSONParamsHrankForm          GetPointsZoomXYGridJSONParamsHrank = "form"
	GetPointsZoomXYGridJSONParamsHrankGenus         GetPointsZoomXYGridJSONParamsHrank = "genus"
	GetPointsZoomXYGridJSONParamsHrankGenushybrid   GetPointsZoomXYGridJSONParamsHrank = "genushybrid"
	GetPointsZoomXYGridJSONParamsHrankHybrid        GetPointsZoomXYGridJSONParamsHrank = "hybrid"
	GetPointsZoomXYGridJSONParamsHrankInfraclass    GetPointsZoomXYGridJSONParamsHrank = "infraclass"
	GetPointsZoomXYGridJSONParamsHrankInfrahybrid   GetPointsZoomXYGridJSONParamsHrank = "infrahybrid"
	GetPointsZoomXYGridJSONParamsHrankInfraorder    GetPointsZoomXYGridJSONParamsHrank = "infraorder"
	GetPointsZoomXYGridJSONParamsHrankKingdom       GetPointsZoomXYGridJSONParamsHrank = "kingdom"
	GetPointsZoomXYGridJSONParamsHrankOrder         GetPointsZoomXYGridJSONParamsHrank = "order"
	GetPointsZoomXYGridJSONParamsHrankParvorder     GetPointsZoomXYGridJSONParamsHrank = "parvorder"
	GetPointsZoomXYGridJSONParamsHrankPhylum        GetPointsZoomXYGridJSONParamsHrank = "phylum"
	GetPointsZoomXYGridJSONParamsHrankSection       GetPointsZoomXYGridJSONParamsHrank = "section"
	GetPointsZoomXYGridJSONParamsHrankSpecies       GetPointsZoomXYGridJSONParamsHrank = "species"
	GetPointsZoomXYGridJSONParamsHrankSubclass      GetPointsZoomXYGridJSONParamsHrank = "subclass"
	GetPointsZoomXYGridJSONParamsHrankSubfamily     GetPointsZoomXYGridJSONParamsHrank = "subfamily"
	GetPointsZoomXYGridJSONParamsHrankSubgenus      GetPointsZoomXYGridJSONParamsHrank = "subgenus"
	GetPointsZoomXYGridJSONParamsHrankSuborder      GetPointsZoomXYGridJSONParamsHrank = "suborder"
	GetPointsZoomXYGridJSONParamsHrankSubphylum     GetPointsZoomXYGridJSONParamsHrank = "subphylum"
	GetPointsZoomXYGridJSONParamsHrankSubsection    GetPointsZoomXYGridJSONParamsHrank = "subsection"
	GetPointsZoomXYGridJSONParamsHrankSubspecies    GetPointsZoomXYGridJSONParamsHrank = "subspecies"
	GetPointsZoomXYGridJSONParamsHrankSubterclass   GetPointsZoomXYGridJSONParamsHrank = "subterclass"
	GetPointsZoomXYGridJSONParamsHrankSubtribe      GetPointsZoomXYGridJSONParamsHrank = "subtribe"
	GetPointsZoomXYGridJSONParamsHrankSuperclass    GetPointsZoomXYGridJSONParamsHrank = "superclass"
	GetPointsZoomXYGridJSONParamsHrankSuperfamily   GetPointsZoomXYGridJSONParamsHrank = "superfamily"
	GetPointsZoomXYGridJSONParamsHrankSuperorder    GetPointsZoomXYGridJSONParamsHrank = "superorder"
	GetPointsZoomXYGridJSONParamsHrankSupertribe    GetPointsZoomXYGridJSONParamsHrank = "supertribe"
	GetPointsZoomXYGridJSONParamsHrankTribe         GetPointsZoomXYGridJSONParamsHrank = "tribe"
	GetPointsZoomXYGridJSONParamsHrankVariety       GetPointsZoomXYGridJSONParamsHrank = "variety"
	GetPointsZoomXYGridJSONParamsHrankZoosection    GetPointsZoomXYGridJSONParamsHrank = "zoosection"
	GetPointsZoomXYGridJSONParamsHrankZoosubsection GetPointsZoomXYGridJSONParamsHrank = "zoosubsection"
)

// Defines values for GetPointsZoomXYGridJSONParamsLrank.
const (
	GetPointsZoomXYGridJSONParamsLrankClass         GetPointsZoomXYGridJSONParamsLrank = "class"
	GetPointsZoomXYGridJSONParamsLrankComplex       GetPointsZoomXYGridJSONParamsLrank = "complex"
	GetPointsZoomXYGridJSONParamsLrankEpifamily     GetPointsZoomXYGridJSONParamsLrank = "epifamily"
	GetPointsZoomXYGridJSONParamsLrankFamily        GetPointsZoomXYGridJSONParamsLrank = "family"
	GetPointsZoomXYGridJSONParamsLrankForm          GetPointsZoomXYGridJSONParamsLrank = "form"
	GetPointsZoomXYGridJSONParamsLrankGenus         GetPointsZoomXYGridJSONParamsLrank = "genus"
	GetPointsZoomXYGridJSONParamsLrankGenushybrid   GetPointsZoomXYGridJSONParamsLrank = "genushybrid"
	GetPointsZoomXYGridJSONParamsLrankHybrid        GetPointsZoomXYGridJSONParamsLrank = "hybrid"
	GetPointsZoomXYGridJSONParamsLrankInfraclass    GetPointsZoomXYGridJSONParamsLrank = "infraclass"
	GetPointsZoomXYGridJSONParamsLrankInfrahybrid   GetPointsZoomXYGridJSONParamsLrank = "infrahybrid"
	GetPointsZoomXYGridJSONParamsLrankInfraorder    GetPointsZoomXYGridJSONParamsLrank = "infraorder"
	GetPointsZoomXYGridJSONParamsLrankKingdom       GetPointsZoomXYGridJSONParamsLrank = "kingdom"
	GetPointsZoomXYGridJSONParamsLrankOrder         GetPointsZoomXYGridJSONParamsLrank = "order"
	GetPointsZoomXYGridJSONParamsLrankParvorder     GetPointsZoomXYGridJSONParamsLrank = "parvorder"
	GetPointsZoomXYGridJSONParamsLrankPhylum        GetPointsZoomXYGridJSONParamsLrank = "phylum"
	GetPointsZoomXYGridJSONParamsLrankSection       GetPointsZoomXYGridJSONParamsLrank = "section"
	GetPointsZoomXYGridJSONParamsLrankSpecies       GetPointsZoomXYGridJSONParamsLrank = "species"
	GetPointsZoomXYGridJSONParamsLrankSubclass      GetPointsZoomXYGridJSONParamsLrank = "subclass"
	GetPointsZoomXYGridJSONParamsLrankSubfamily     GetPointsZoomXYGridJSONParamsLrank = "subfamily"
	GetPointsZoomXYGridJSONParamsLrankSubgenus      GetPointsZoomXYGridJSONParamsLrank = "subgenus"
	GetPointsZoomXYGridJSONParamsLrankSuborder      GetPointsZoomXYGridJSONParamsLrank = "suborder"
	GetPointsZoomXYGridJSONParamsLrankSubphylum     GetPointsZoomXYGridJSONParamsLrank = "subphylum"
	GetPointsZoomXYGridJSONParamsLrankSubsection    GetPointsZoomXYGridJSONParamsLrank = "subsection"
	GetPointsZoomXYGridJSONParamsLrankSubspecies    GetPointsZoomXYGridJSONParamsLrank = "subspecies"
	GetPointsZoomXYGridJSONParamsLrankSubterclass   GetPointsZoomXYGridJSONParamsLrank = "subterclass"
	GetPointsZoomXYGridJSONParamsLrankSubtribe      GetPointsZoomXYGridJSONParamsLrank = "subtribe"
	GetPointsZoomXYGridJSONParamsLrankSuperclass    GetPointsZoomXYGridJSONParamsLrank = "superclass"
	GetPointsZoomXYGridJSONParamsLrankSuperfamily   GetPointsZoomXYGridJSONParamsLrank = "superfamily"
	GetPointsZoomXYGridJSONParamsLrankSuperorder    GetPointsZoomXYGridJSONParamsLrank = "superorder"
	GetPointsZoomXYGridJSONParamsLrankSupertribe    GetPointsZoomXYGridJSONParamsLrank = "supertribe"
	GetPointsZoomXYGridJSONParamsLrankTribe         GetPointsZoomXYGridJSONParamsLrank = "tribe"
	GetPointsZoomXYGridJSONParamsLrankVariety       GetPointsZoomXYGridJSONParamsLrank = "variety"
	GetPointsZoomXYGridJSONParamsLrankZoosection    GetPointsZoomXYGridJSONParamsLrank = "zoosection"
	GetPointsZoomXYGridJSONParamsLrankZoosubsection GetPointsZoomXYGridJSONParamsLrank = "zoosubsection"
)

// Defines values for GetPointsZoomXYGridJSONParamsIconicTaxa.
const (
	GetPointsZoomXYGridJSONParamsIconicTaxaActinopterygii GetPointsZoomXYGridJSONParamsIconicTaxa = "Actinopterygii"
	GetPointsZoomXYGridJSONParamsIconicTaxaAmphibia       GetPointsZoomXYGridJSONParamsIconicTaxa = "Amphibia"
	GetPointsZoomXYGridJSONParamsIconicTaxaAnimalia       GetPointsZoomXYGridJSONParamsIconicTaxa = "Animalia"
	GetPointsZoomXYGridJSONParamsIconicTaxaArachnida      GetPointsZoomXYGridJSONParamsIconicTaxa = "Arachnida"
	GetPointsZoomXYGridJSONParamsIconicTaxaAves           GetPointsZoomXYGridJSONParamsIconicTaxa = "Aves"
	GetPointsZoomXYGridJSONParamsIconicTaxaChromista      GetPointsZoomXYGridJSONParamsIconicTaxa = "Chromista"
	GetPointsZoomXYGridJSONParamsIconicTaxaFungi          GetPointsZoomXYGridJSONParamsIconicTaxa = "Fungi"
	GetPointsZoomXYGridJSONParamsIconicTaxaInsecta        GetPointsZoomXYGridJSONParamsIconicTaxa = "Insecta"
	GetPointsZoomXYGridJSONParamsIconicTaxaMammalia       GetPointsZoomXYGridJSONParamsIconicTaxa = "Mammalia"
	GetPointsZoomXYGridJSONParamsIconicTaxaMollusca       GetPointsZoomXYGridJSONParamsIconicTaxa = "Mollusca"
	GetPointsZoomXYGridJSONParamsIconicTaxaPlantae        GetPointsZoomXYGridJSONParamsIconicTaxa = "Plantae"
	GetPointsZoomXYGridJSONParamsIconicTaxaProtozoa       GetPointsZoomXYGridJSONParamsIconicTaxa = "Protozoa"
	GetPointsZoomXYGridJSONParamsIconicTaxaReptilia       GetPointsZoomXYGridJSONParamsIconicTaxa = "Reptilia"
	GetPointsZoomXYGridJSONParamsIconicTaxaUnknown        GetPointsZoomXYGridJSONParamsIconicTaxa = "unknown"
)

// Defines values for GetPointsZoomXYGridJSONParamsIdentifications.
const (
	GetPointsZoomXYGridJSONParamsIdentificationsMostAgree    GetPointsZoomXYGridJSONParamsIdentifications = "most_agree"
	GetPointsZoomXYGridJSONParamsIdentificationsMostDisagree GetPointsZoomXYGridJSONParamsIdentifications = "most_disagree"
	GetPointsZoomXYGridJSONParamsIdentificationsSomeAgree    GetPointsZoomXYGridJSONParamsIdentifications = "some_agree"
)

// Defines values for GetPointsZoomXYGridJSONParamsSearchOn.
const (
	GetPointsZoomXYGridJSONParamsSearchOnDescription        GetPointsZoomXYGridJSONParamsSearchOn = "description"
	GetPointsZoomXYGridJSONParamsSearchOnNames              GetPointsZoomXYGridJSONParamsSearchOn = "names"
	GetPointsZoomXYGridJSONParamsSearchOnPlace              GetPointsZoomXYGridJSONParamsSearchOn = "place"
	GetPointsZoomXYGridJSONParamsSearchOnTags               GetPointsZoomXYGridJSONParamsSearchOn = "tags"
	GetPointsZoomXYGridJSONParamsSearchOnTaxonPageObsPhotos GetPointsZoomXYGridJSONParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetPointsZoomXYGridJSONParamsQualityGrade.
const (
	GetPointsZoomXYGridJSONParamsQualityGradeCasual   GetPointsZoomXYGridJSONParamsQualityGrade = "casual"
	GetPointsZoomXYGridJSONParamsQualityGradeNeedsID  GetPointsZoomXYGridJSONParamsQualityGrade = "needs_id"
	GetPointsZoomXYGridJSONParamsQualityGradeResearch GetPointsZoomXYGridJSONParamsQualityGrade = "research"
)

// Defines values for GetPointsZoomXYGridJSONParamsOrder.
const (
	GetPointsZoomXYGridJSONParamsOrderAsc  GetPointsZoomXYGridJSONParamsOrder = "asc"
	GetPointsZoomXYGridJSONParamsOrderDesc GetPointsZoomXYGridJSONParamsOrder = "desc"
)

// Defines values for GetPointsZoomXYGridJSONParamsOrderBy.
const (
	GetPointsZoomXYGridJSONParamsOrderByCreatedAt    GetPointsZoomXYGridJSONParamsOrderBy = "created_at"
	GetPointsZoomXYGridJSONParamsOrderByGeoScore     GetPointsZoomXYGridJSONParamsOrderBy = "geo_score"
	GetPointsZoomXYGridJSONParamsOrderByID           GetPointsZoomXYGridJSONParamsOrderBy = "id"
	GetPointsZoomXYGridJSONParamsOrderByObservedOn   GetPointsZoomXYGridJSONParamsOrderBy = "observed_on"
	GetPointsZoomXYGridJSONParamsOrderByRandom       GetPointsZoomXYGridJSONParamsOrderBy = "random"
	GetPointsZoomXYGridJSONParamsOrderBySpeciesGuess GetPointsZoomXYGridJSONParamsOrderBy = "species_guess"
	GetPointsZoomXYGridJSONParamsOrderByUpdatedAt    GetPointsZoomXYGridJSONParamsOrderBy = "updated_at"
	GetPointsZoomXYGridJSONParamsOrderByVotes        GetPointsZoomXYGridJSONParamsOrderBy = "votes"
)

// Defines values for GetPointsZoomXYPngParamsTileSize.
const (
	GetPointsZoomXYPngParamsTileSizeN256 GetPointsZoomXYPngParamsTileSize = 256
	GetPointsZoomXYPngParamsTileSizeN512 GetPointsZoomXYPngParamsTileSize = 512
)

// Defines values for GetPointsZoomXYPngParamsLicense.
const (
	GetPointsZoomXYPngParamsLicenseCc0      GetPointsZoomXYPngParamsLicense = "cc0"
	GetPointsZoomXYPngParamsLicenseCcBy     GetPointsZoomXYPngParamsLicense = "cc-by"
	GetPointsZoomXYPngParamsLicenseCcByNc   GetPointsZoomXYPngParamsLicense = "cc-by-nc"
	GetPointsZoomXYPngParamsLicenseCcByNcNd GetPointsZoomXYPngParamsLicense = "cc-by-nc-nd"
	GetPointsZoomXYPngParamsLicenseCcByNcSa GetPointsZoomXYPngParamsLicense = "cc-by-nc-sa"
	GetPointsZoomXYPngParamsLicenseCcByNd   GetPointsZoomXYPngParamsLicense = "cc-by-nd"
	GetPointsZoomXYPngParamsLicenseCcBySa   GetPointsZoomXYPngParamsLicense = "cc-by-sa"
)

// Defines values for GetPointsZoomXYPngParamsPhotoLicense.
const (
	GetPointsZoomXYPngParamsPhotoLicenseCc0      GetPointsZoomXYPngParamsPhotoLicense = "cc0"
	GetPointsZoomXYPngParamsPhotoLicenseCcBy     GetPointsZoomXYPngParamsPhotoLicense = "cc-by"
	GetPointsZoomXYPngParamsPhotoLicenseCcByNc   GetPointsZoomXYPngParamsPhotoLicense = "cc-by-nc"
	GetPointsZoomXYPngParamsPhotoLicenseCcByNcNd GetPointsZoomXYPngParamsPhotoLicense = "cc-by-nc-nd"
	GetPointsZoomXYPngParamsPhotoLicenseCcByNcSa GetPointsZoomXYPngParamsPhotoLicense = "cc-by-nc-sa"
	GetPointsZoomXYPngParamsPhotoLicenseCcByNd   GetPointsZoomXYPngParamsPhotoLicense = "cc-by-nd"
	GetPointsZoomXYPngParamsPhotoLicenseCcBySa   GetPointsZoomXYPngParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetPointsZoomXYPngParamsRank.
const (
	GetPointsZoomXYPngParamsRankClass         GetPointsZoomXYPngParamsRank = "class"
	GetPointsZoomXYPngParamsRankComplex       GetPointsZoomXYPngParamsRank = "complex"
	GetPointsZoomXYPngParamsRankEpifamily     GetPointsZoomXYPngParamsRank = "epifamily"
	GetPointsZoomXYPngParamsRankFamily        GetPointsZoomXYPngParamsRank = "family"
	GetPointsZoomXYPngParamsRankForm          GetPointsZoomXYPngParamsRank = "form"
	GetPointsZoomXYPngParamsRankGenus         GetPointsZoomXYPngParamsRank = "genus"
	GetPointsZoomXYPngParamsRankGenushybrid   GetPointsZoomXYPngParamsRank = "genushybrid"
	GetPointsZoomXYPngParamsRankHybrid        GetPointsZoomXYPngParamsRank = "hybrid"
	GetPointsZoomXYPngParamsRankInfraclass    GetPointsZoomXYPngParamsRank = "infraclass"
	GetPointsZoomXYPngParamsRankInfrahybrid   GetPointsZoomXYPngParamsRank = "infrahybrid"
	GetPointsZoomXYPngParamsRankInfraorder    GetPointsZoomXYPngParamsRank = "infraorder"
	GetPointsZoomXYPngParamsRankKingdom       GetPointsZoomXYPngParamsRank = "kingdom"
	GetPointsZoomXYPngParamsRankOrder         GetPointsZoomXYPngParamsRank = "order"
	GetPointsZoomXYPngParamsRankParvorder     GetPointsZoomXYPngParamsRank = "parvorder"
	GetPointsZoomXYPngParamsRankPhylum        GetPointsZoomXYPngParamsRank = "phylum"
	GetPointsZoomXYPngParamsRankSection       GetPointsZoomXYPngParamsRank = "section"
	GetPointsZoomXYPngParamsRankSpecies       GetPointsZoomXYPngParamsRank = "species"
	GetPointsZoomXYPngParamsRankSubclass      GetPointsZoomXYPngParamsRank = "subclass"
	GetPointsZoomXYPngParamsRankSubfamily     GetPointsZoomXYPngParamsRank = "subfamily"
	GetPointsZoomXYPngParamsRankSubgenus      GetPointsZoomXYPngParamsRank = "subgenus"
	GetPointsZoomXYPngParamsRankSuborder      GetPointsZoomXYPngParamsRank = "suborder"
	GetPointsZoomXYPngParamsRankSubphylum     GetPointsZoomXYPngParamsRank = "subphylum"
	GetPointsZoomXYPngParamsRankSubsection    GetPointsZoomXYPngParamsRank = "subsection"
	GetPointsZoomXYPngParamsRankSubspecies    GetPointsZoomXYPngParamsRank = "subspecies"
	GetPointsZoomXYPngParamsRankSubterclass   GetPointsZoomXYPngParamsRank = "subterclass"
	GetPointsZoomXYPngParamsRankSubtribe      GetPointsZoomXYPngParamsRank = "subtribe"
	GetPointsZoomXYPngParamsRankSuperclass    GetPointsZoomXYPngParamsRank = "superclass"
	GetPointsZoomXYPngParamsRankSuperfamily   GetPointsZoomXYPngParamsRank = "superfamily"
	GetPointsZoomXYPngParamsRankSuperorder    GetPointsZoomXYPngParamsRank = "superorder"
	GetPointsZoomXYPngParamsRankSupertribe    GetPointsZoomXYPngParamsRank = "supertribe"
	GetPointsZoomXYPngParamsRankTribe         GetPointsZoomXYPngParamsRank = "tribe"
	GetPointsZoomXYPngParamsRankVariety       GetPointsZoomXYPngParamsRank = "variety"
	GetPointsZoomXYPngParamsRankZoosection    GetPointsZoomXYPngParamsRank = "zoosection"
	GetPointsZoomXYPngParamsRankZoosubsection GetPointsZoomXYPngParamsRank = "zoosubsection"
)

// Defines values for GetPointsZoomXYPngParamsSoundLicense.
const (
	GetPointsZoomXYPngParamsSoundLicenseCc0      GetPointsZoomXYPngParamsSoundLicense = "cc0"
	GetPointsZoomXYPngParamsSoundLicenseCcBy     GetPointsZoomXYPngParamsSoundLicense = "cc-by"
	GetPointsZoomXYPngParamsSoundLicenseCcByNc   GetPointsZoomXYPngParamsSoundLicense = "cc-by-nc"
	GetPointsZoomXYPngParamsSoundLicenseCcByNcNd GetPointsZoomXYPngParamsSoundLicense = "cc-by-nc-nd"
	GetPointsZoomXYPngParamsSoundLicenseCcByNcSa GetPointsZoomXYPngParamsSoundLicense = "cc-by-nc-sa"
	GetPointsZoomXYPngParamsSoundLicenseCcByNd   GetPointsZoomXYPngParamsSoundLicense = "cc-by-nd"
	GetPointsZoomXYPngParamsSoundLicenseCcBySa   GetPointsZoomXYPngParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetPointsZoomXYPngParamsCsi.
const (
	GetPointsZoomXYPngParamsCsiCR GetPointsZoomXYPngParamsCsi = "CR"
	GetPointsZoomXYPngParamsCsiEN GetPointsZoomXYPngParamsCsi = "EN"
	GetPointsZoomXYPngParamsCsiEW GetPointsZoomXYPngParamsCsi = "EW"
	GetPointsZoomXYPngParamsCsiEX GetPointsZoomXYPngParamsCsi = "EX"
	GetPointsZoomXYPngParamsCsiLC GetPointsZoomXYPngParamsCsi = "LC"
	GetPointsZoomXYPngParamsCsiNT GetPointsZoomXYPngParamsCsi = "NT"
	GetPointsZoomXYPngParamsCsiVU GetPointsZoomXYPngParamsCsi = "VU"
)

// Defines values for GetPointsZoomXYPngParamsGeoprivacy.
const (
	GetPointsZoomXYPngParamsGeoprivacyObscured        GetPointsZoomXYPngParamsGeoprivacy = "obscured"
	GetPointsZoomXYPngParamsGeoprivacyObscuredPrivate GetPointsZoomXYPngParamsGeoprivacy = "obscured_private"
	GetPointsZoomXYPngParamsGeoprivacyOpen            GetPointsZoomXYPngParamsGeoprivacy = "open"
	GetPointsZoomXYPngParamsGeoprivacyPrivate         GetPointsZoomXYPngParamsGeoprivacy = "private"
)

// Defines values for GetPointsZoomXYPngParamsTaxonGeoprivacy.
const (
	GetPointsZoomXYPngParamsTaxonGeoprivacyObscured        GetPointsZoomXYPngParamsTaxonGeoprivacy = "obscured"
	GetPointsZoomXYPngParamsTaxonGeoprivacyObscuredPrivate GetPointsZoomXYPngParamsTaxonGeoprivacy = "obscured_private"
	GetPointsZoomXYPngParamsTaxonGeoprivacyOpen            GetPointsZoomXYPngParamsTaxonGeoprivacy = "open"
	GetPointsZoomXYPngParamsTaxonGeoprivacyPrivate         GetPointsZoomXYPngParamsTaxonGeoprivacy = "private"
)

// Defines values for GetPointsZoomXYPngParamsObscuration.
const (
	GetPointsZoomXYPngParamsObscurationNone     GetPointsZoomXYPngParamsObscuration = "none"
	GetPointsZoomXYPngParamsObscurationObscured GetPointsZoomXYPngParamsObscuration = "obscured"
	GetPointsZoomXYPngParamsObscurationPrivate  GetPointsZoomXYPngParamsObscuration = "private"
)

// Defines values for GetPointsZoomXYPngParamsHrank.
const (
	GetPointsZoomXYPngParamsHrankClass         GetPointsZoomXYPngParamsHrank = "class"
	GetPointsZoomXYPngParamsHrankComplex       GetPointsZoomXYPngParamsHrank = "complex"
	GetPointsZoomXYPngParamsHrankEpifamily     GetPointsZoomXYPngParamsHrank = "epifamily"
	GetPointsZoomXYPngParamsHrankFamily        GetPointsZoomXYPngParamsHrank = "family"
	GetPointsZoomXYPngParamsHrankForm          GetPointsZoomXYPngParamsHrank = "form"
	GetPointsZoomXYPngParamsHrankGenus         GetPointsZoomXYPngParamsHrank = "genus"
	GetPointsZoomXYPngParamsHrankGenushybrid   GetPointsZoomXYPngParamsHrank = "genushybrid"
	GetPointsZoomXYPngParamsHrankHybrid        GetPointsZoomXYPngParamsHrank = "hybrid"
	GetPointsZoomXYPngParamsHrankInfraclass    GetPointsZoomXYPngParamsHrank = "infraclass"
	GetPointsZoomXYPngParamsHrankInfrahybrid   GetPointsZoomXYPngParamsHrank = "infrahybrid"
	GetPointsZoomXYPngParamsHrankInfraorder    GetPointsZoomXYPngParamsHrank = "infraorder"
	GetPointsZoomXYPngParamsHrankKingdom       GetPointsZoomXYPngParamsHrank = "kingdom"
	GetPointsZoomXYPngParamsHrankOrder         GetPointsZoomXYPngParamsHrank = "order"
	GetPointsZoomXYPngParamsHrankParvorder     GetPointsZoomXYPngParamsHrank = "parvorder"
	GetPointsZoomXYPngParamsHrankPhylum        GetPointsZoomXYPngParamsHrank = "phylum"
	GetPointsZoomXYPngParamsHrankSection       GetPointsZoomXYPngParamsHrank = "section"
	GetPointsZoomXYPngParamsHrankSpecies       GetPointsZoomXYPngParamsHrank = "species"
	GetPointsZoomXYPngParamsHrankSubclass      GetPointsZoomXYPngParamsHrank = "subclass"
	GetPointsZoomXYPngParamsHrankSubfamily     GetPointsZoomXYPngParamsHrank = "subfamily"
	GetPointsZoomXYPngParamsHrankSubgenus      GetPointsZoomXYPngParamsHrank = "subgenus"
	GetPointsZoomXYPngParamsHrankSuborder      GetPointsZoomXYPngParamsHrank = "suborder"
	GetPointsZoomXYPngParamsHrankSubphylum     GetPointsZoomXYPngParamsHrank = "subphylum"
	GetPointsZoomXYPngParamsHrankSubsection    GetPointsZoomXYPngParamsHrank = "subsection"
	GetPointsZoomXYPngParamsHrankSubspecies    GetPointsZoomXYPngParamsHrank = "subspecies"
	GetPointsZoomXYPngParamsHrankSubterclass   GetPointsZoomXYPngParamsHrank = "subterclass"
	GetPointsZoomXYPngParamsHrankSubtribe      GetPointsZoomXYPngParamsHrank = "subtribe"
	GetPointsZoomXYPngParamsHrankSuperclass    GetPointsZoomXYPngParamsHrank = "superclass"
	GetPointsZoomXYPngParamsHrankSuperfamily   GetPointsZoomXYPngParamsHrank = "superfamily"
	GetPointsZoomXYPngParamsHrankSuperorder    GetPointsZoomXYPngParamsHrank = "superorder"
	GetPointsZoomXYPngParamsHrankSupertribe    GetPointsZoomXYPngParamsHrank = "supertribe"
	GetPointsZoomXYPngParamsHrankTribe         GetPointsZoomXYPngParamsHrank = "tribe"
	GetPointsZoomXYPngParamsHrankVariety       GetPointsZoomXYPngParamsHrank = "variety"
	GetPointsZoomXYPngParamsHrankZoosection    GetPointsZoomXYPngParamsHrank = "zoosection"
	GetPointsZoomXYPngParamsHrankZoosubsection GetPointsZoomXYPngParamsHrank = "zoosubsection"
)

// Defines values for GetPointsZoomXYPngParamsLrank.
const (
	GetPointsZoomXYPngParamsLrankClass         GetPointsZoomXYPngParamsLrank = "class"
	GetPointsZoomXYPngParamsLrankComplex       GetPointsZoomXYPngParamsLrank = "complex"
	GetPointsZoomXYPngParamsLrankEpifamily     GetPointsZoomXYPngParamsLrank = "epifamily"
	GetPointsZoomXYPngParamsLrankFamily        GetPointsZoomXYPngParamsLrank = "family"
	GetPointsZoomXYPngParamsLrankForm          GetPointsZoomXYPngParamsLrank = "form"
	GetPointsZoomXYPngParamsLrankGenus         GetPointsZoomXYPngParamsLrank = "genus"
	GetPointsZoomXYPngParamsLrankGenushybrid   GetPointsZoomXYPngParamsLrank = "genushybrid"
	GetPointsZoomXYPngParamsLrankHybrid        GetPointsZoomXYPngParamsLrank = "hybrid"
	GetPointsZoomXYPngParamsLrankInfraclass    GetPointsZoomXYPngParamsLrank = "infraclass"
	GetPointsZoomXYPngParamsLrankInfrahybrid   GetPointsZoomXYPngParamsLrank = "infrahybrid"
	GetPointsZoomXYPngParamsLrankInfraorder    GetPointsZoomXYPngParamsLrank = "infraorder"
	GetPointsZoomXYPngParamsLrankKingdom       GetPointsZoomXYPngParamsLrank = "kingdom"
	GetPointsZoomXYPngParamsLrankOrder         GetPointsZoomXYPngParamsLrank = "order"
	GetPointsZoomXYPngParamsLrankParvorder     GetPointsZoomXYPngParamsLrank = "parvorder"
	GetPointsZoomXYPngParamsLrankPhylum        GetPointsZoomXYPngParamsLrank = "phylum"
	GetPointsZoomXYPngParamsLrankSection       GetPointsZoomXYPngParamsLrank = "section"
	GetPointsZoomXYPngParamsLrankSpecies       GetPointsZoomXYPngParamsLrank = "species"
	GetPointsZoomXYPngParamsLrankSubclass      GetPointsZoomXYPngParamsLrank = "subclass"
	GetPointsZoomXYPngParamsLrankSubfamily     GetPointsZoomXYPngParamsLrank = "subfamily"
	GetPointsZoomXYPngParamsLrankSubgenus      GetPointsZoomXYPngParamsLrank = "subgenus"
	GetPointsZoomXYPngParamsLrankSuborder      GetPointsZoomXYPngParamsLrank = "suborder"
	GetPointsZoomXYPngParamsLrankSubphylum     GetPointsZoomXYPngParamsLrank = "subphylum"
	GetPointsZoomXYPngParamsLrankSubsection    GetPointsZoomXYPngParamsLrank = "subsection"
	GetPointsZoomXYPngParamsLrankSubspecies    GetPointsZoomXYPngParamsLrank = "subspecies"
	GetPointsZoomXYPngParamsLrankSubterclass   GetPointsZoomXYPngParamsLrank = "subterclass"
	GetPointsZoomXYPngParamsLrankSubtribe      GetPointsZoomXYPngParamsLrank = "subtribe"
	GetPointsZoomXYPngParamsLrankSuperclass    GetPointsZoomXYPngParamsLrank = "superclass"
	GetPointsZoomXYPngParamsLrankSuperfamily   GetPointsZoomXYPngParamsLrank = "superfamily"
	GetPointsZoomXYPngParamsLrankSuperorder    GetPointsZoomXYPngParamsLrank = "superorder"
	GetPointsZoomXYPngParamsLrankSupertribe    GetPointsZoomXYPngParamsLrank = "supertribe"
	GetPointsZoomXYPngParamsLrankTribe         GetPointsZoomXYPngParamsLrank = "tribe"
	GetPointsZoomXYPngParamsLrankVariety       GetPointsZoomXYPngParamsLrank = "variety"
	GetPointsZoomXYPngParamsLrankZoosection    GetPointsZoomXYPngParamsLrank = "zoosection"
	GetPointsZoomXYPngParamsLrankZoosubsection GetPointsZoomXYPngParamsLrank = "zoosubsection"
)

// Defines values for GetPointsZoomXYPngParamsIconicTaxa.
const (
	GetPointsZoomXYPngParamsIconicTaxaActinopterygii GetPointsZoomXYPngParamsIconicTaxa = "Actinopterygii"
	GetPointsZoomXYPngParamsIconicTaxaAmphibia       GetPointsZoomXYPngParamsIconicTaxa = "Amphibia"
	GetPointsZoomXYPngParamsIconicTaxaAnimalia       GetPointsZoomXYPngParamsIconicTaxa = "Animalia"
	GetPointsZoomXYPngParamsIconicTaxaArachnida      GetPointsZoomXYPngParamsIconicTaxa = "Arachnida"
	GetPointsZoomXYPngParamsIconicTaxaAves           GetPointsZoomXYPngParamsIconicTaxa = "Aves"
	GetPointsZoomXYPngParamsIconicTaxaChromista      GetPointsZoomXYPngParamsIconicTaxa = "Chromista"
	GetPointsZoomXYPngParamsIconicTaxaFungi          GetPointsZoomXYPngParamsIconicTaxa = "Fungi"
	GetPointsZoomXYPngParamsIconicTaxaInsecta        GetPointsZoomXYPngParamsIconicTaxa = "Insecta"
	GetPointsZoomXYPngParamsIconicTaxaMammalia       GetPointsZoomXYPngParamsIconicTaxa = "Mammalia"
	GetPointsZoomXYPngParamsIconicTaxaMollusca       GetPointsZoomXYPngParamsIconicTaxa = "Mollusca"
	GetPointsZoomXYPngParamsIconicTaxaPlantae        GetPointsZoomXYPngParamsIconicTaxa = "Plantae"
	GetPointsZoomXYPngParamsIconicTaxaProtozoa       GetPointsZoomXYPngParamsIconicTaxa = "Protozoa"
	GetPointsZoomXYPngParamsIconicTaxaReptilia       GetPointsZoomXYPngParamsIconicTaxa = "Reptilia"
	GetPointsZoomXYPngParamsIconicTaxaUnknown        GetPointsZoomXYPngParamsIconicTaxa = "unknown"
)

// Defines values for GetPointsZoomXYPngParamsIdentifications.
const (
	GetPointsZoomXYPngParamsIdentificationsMostAgree    GetPointsZoomXYPngParamsIdentifications = "most_agree"
	GetPointsZoomXYPngParamsIdentificationsMostDisagree GetPointsZoomXYPngParamsIdentifications = "most_disagree"
	GetPointsZoomXYPngParamsIdentificationsSomeAgree    GetPointsZoomXYPngParamsIdentifications = "some_agree"
)

// Defines values for GetPointsZoomXYPngParamsSearchOn.
const (
	GetPointsZoomXYPngParamsSearchOnDescription        GetPointsZoomXYPngParamsSearchOn = "description"
	GetPointsZoomXYPngParamsSearchOnNames              GetPointsZoomXYPngParamsSearchOn = "names"
	GetPointsZoomXYPngParamsSearchOnPlace              GetPointsZoomXYPngParamsSearchOn = "place"
	GetPointsZoomXYPngParamsSearchOnTags               GetPointsZoomXYPngParamsSearchOn = "tags"
	GetPointsZoomXYPngParamsSearchOnTaxonPageObsPhotos GetPointsZoomXYPngParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetPointsZoomXYPngParamsQualityGrade.
const (
	GetPointsZoomXYPngParamsQualityGradeCasual   GetPointsZoomXYPngParamsQualityGrade = "casual"
	GetPointsZoomXYPngParamsQualityGradeNeedsID  GetPointsZoomXYPngParamsQualityGrade = "needs_id"
	GetPointsZoomXYPngParamsQualityGradeResearch GetPointsZoomXYPngParamsQualityGrade = "research"
)

// Defines values for GetPointsZoomXYPngParamsOrder.
const (
	GetPointsZoomXYPngParamsOrderAsc  GetPointsZoomXYPngParamsOrder = "asc"
	GetPointsZoomXYPngParamsOrderDesc GetPointsZoomXYPngParamsOrder = "desc"
)

// Defines values for GetPointsZoomXYPngParamsOrderBy.
const (
	GetPointsZoomXYPngParamsOrderByCreatedAt    GetPointsZoomXYPngParamsOrderBy = "created_at"
	GetPointsZoomXYPngParamsOrderByGeoScore     GetPointsZoomXYPngParamsOrderBy = "geo_score"
	GetPointsZoomXYPngParamsOrderByID           GetPointsZoomXYPngParamsOrderBy = "id"
	GetPointsZoomXYPngParamsOrderByObservedOn   GetPointsZoomXYPngParamsOrderBy = "observed_on"
	GetPointsZoomXYPngParamsOrderByRandom       GetPointsZoomXYPngParamsOrderBy = "random"
	GetPointsZoomXYPngParamsOrderBySpeciesGuess GetPointsZoomXYPngParamsOrderBy = "species_guess"
	GetPointsZoomXYPngParamsOrderByUpdatedAt    GetPointsZoomXYPngParamsOrderBy = "updated_at"
	GetPointsZoomXYPngParamsOrderByVotes        GetPointsZoomXYPngParamsOrderBy = "votes"
)

// Defines values for GetProjectsParamsType.
const (
	Collection GetProjectsParamsType = "collection"
	Umbrella   GetProjectsParamsType = "umbrella"
)

// Defines values for GetProjectsParamsOrderBy.
const (
	GetProjectsParamsOrderByCreated     GetProjectsParamsOrderBy = "created"
	GetProjectsParamsOrderByDistance    GetProjectsParamsOrderBy = "distance"
	GetProjectsParamsOrderByFeatured    GetProjectsParamsOrderBy = "featured"
	GetProjectsParamsOrderByRecentPosts GetProjectsParamsOrderBy = "recent_posts"
	GetProjectsParamsOrderByUpdated     GetProjectsParamsOrderBy = "updated"
)

// Defines values for GetProjectsIDMembersParamsOrderBy.
const (
	GetProjectsIDMembersParamsOrderByLogin             GetProjectsIDMembersParamsOrderBy = "login"
	GetProjectsIDMembersParamsOrderByObservationsCount GetProjectsIDMembersParamsOrderBy = "observations_count"
)

// Defines values for GetRelationshipsParamsTrusted.
const (
	GetRelationshipsParamsTrustedAny GetRelationshipsParamsTrusted = "any"
	GetRelationshipsParamsTrustedNo  GetRelationshipsParamsTrusted = "no"
	GetRelationshipsParamsTrustedYes GetRelationshipsParamsTrusted = "yes"
)

// Defines values for GetRelationshipsParamsFollowing.
const (
	GetRelationshipsParamsFollowingAny GetRelationshipsParamsFollowing = "any"
	GetRelationshipsParamsFollowingNo  GetRelationshipsParamsFollowing = "no"
	GetRelationshipsParamsFollowingYes GetRelationshipsParamsFollowing = "yes"
)

// Defines values for GetRelationshipsParamsOrder.
const (
	GetRelationshipsParamsOrderAsc  GetRelationshipsParamsOrder = "asc"
	GetRelationshipsParamsOrderDesc GetRelationshipsParamsOrder = "desc"
)

// Defines values for GetRelationshipsParamsOrderBy.
const (
	FriendshipsID GetRelationshipsParamsOrderBy = "friendships.id"
	UsersLogin    GetRelationshipsParamsOrderBy = "users.login"
)

// Defines values for GetSearchParamsSources.
const (
	Places   GetSearchParamsSources = "places"
	Projects GetSearchParamsSources = "projects"
	Taxa     GetSearchParamsSources = "taxa"
	Users    GetSearchParamsSources = "users"
)

// Defines values for GetTaxaParamsRank.
const (
	GetTaxaParamsRankClass       GetTaxaParamsRank = "class"
	GetTaxaParamsRankEpifamily   GetTaxaParamsRank = "epifamily"
	GetTaxaParamsRankFamily      GetTaxaParamsRank = "family"
	GetTaxaParamsRankForm        GetTaxaParamsRank = "form"
	GetTaxaParamsRankGenus       GetTaxaParamsRank = "genus"
	GetTaxaParamsRankGenushybrid GetTaxaParamsRank = "genushybrid"
	GetTaxaParamsRankHybrid      GetTaxaParamsRank = "hybrid"
	GetTaxaParamsRankInfraorder  GetTaxaParamsRank = "infraorder"
	GetTaxaParamsRankKingdom     GetTaxaParamsRank = "kingdom"
	GetTaxaParamsRankOrder       GetTaxaParamsRank = "order"
	GetTaxaParamsRankPhylum      GetTaxaParamsRank = "phylum"
	GetTaxaParamsRankSpecies     GetTaxaParamsRank = "species"
	GetTaxaParamsRankSubclass    GetTaxaParamsRank = "subclass"
	GetTaxaParamsRankSubfamily   GetTaxaParamsRank = "subfamily"
	GetTaxaParamsRankSuborder    GetTaxaParamsRank = "suborder"
	GetTaxaParamsRankSubphylum   GetTaxaParamsRank = "subphylum"
	GetTaxaParamsRankSubspecies  GetTaxaParamsRank = "subspecies"
	GetTaxaParamsRankSubtribe    GetTaxaParamsRank = "subtribe"
	GetTaxaParamsRankSuperclass  GetTaxaParamsRank = "superclass"
	GetTaxaParamsRankSuperfamily GetTaxaParamsRank = "superfamily"
	GetTaxaParamsRankSuperorder  GetTaxaParamsRank = "superorder"
	GetTaxaParamsRankSupertribe  GetTaxaParamsRank = "supertribe"
	GetTaxaParamsRankTribe       GetTaxaParamsRank = "tribe"
	GetTaxaParamsRankVariety     GetTaxaParamsRank = "variety"
)

// Defines values for GetTaxaSuggestParamsOrderBy.
const (
	GetTaxaSuggestParamsOrderByDefault  GetTaxaSuggestParamsOrderBy = "default"
	GetTaxaSuggestParamsOrderBySciname  GetTaxaSuggestParamsOrderBy = "sciname"
	GetTaxaSuggestParamsOrderByTaxonomy GetTaxaSuggestParamsOrderBy = "taxonomy"
)

// Defines values for GetTaxaSuggestParamsSource.
const (
	GetTaxaSuggestParamsSourceCaptiveObservations GetTaxaSuggestParamsSource = "captive_observations"
	GetTaxaSuggestParamsSourceChecklist           GetTaxaSuggestParamsSource = "checklist"
	GetTaxaSuggestParamsSourceMisidentifications  GetTaxaSuggestParamsSource = "misidentifications"
	GetTaxaSuggestParamsSourceObservations        GetTaxaSuggestParamsSource = "observations"
	GetTaxaSuggestParamsSourceRgObservations      GetTaxaSuggestParamsSource = "rg_observations"
	GetTaxaSuggestParamsSourceVisual              GetTaxaSuggestParamsSource = "visual"
)

// Defines values for PostTaxaSuggestMultipartBodyOrderBy.
const (
	Default  PostTaxaSuggestMultipartBodyOrderBy = "default"
	Sciname  PostTaxaSuggestMultipartBodyOrderBy = "sciname"
	Taxonomy PostTaxaSuggestMultipartBodyOrderBy = "taxonomy"
)

// Defines values for PostTaxaSuggestMultipartBodySource.
const (
	CaptiveObservations PostTaxaSuggestMultipartBodySource = "captive_observations"
	Checklist           PostTaxaSuggestMultipartBodySource = "checklist"
	Misidentifications  PostTaxaSuggestMultipartBodySource = "misidentifications"
	Observations        PostTaxaSuggestMultipartBodySource = "observations"
	RgObservations      PostTaxaSuggestMultipartBodySource = "rg_observations"
	Visual              PostTaxaSuggestMultipartBodySource = "visual"
)

// Defines values for GetTaxonPlacesIDZoomXYPngParamsTileSize.
const (
	GetTaxonPlacesIDZoomXYPngParamsTileSizeN256 GetTaxonPlacesIDZoomXYPngParamsTileSize = 256
	GetTaxonPlacesIDZoomXYPngParamsTileSizeN512 GetTaxonPlacesIDZoomXYPngParamsTileSize = 512
)

// Defines values for GetTaxonPlacesIDZoomXYPngParamsLicense.
const (
	GetTaxonPlacesIDZoomXYPngParamsLicenseCc0      GetTaxonPlacesIDZoomXYPngParamsLicense = "cc0"
	GetTaxonPlacesIDZoomXYPngParamsLicenseCcBy     GetTaxonPlacesIDZoomXYPngParamsLicense = "cc-by"
	GetTaxonPlacesIDZoomXYPngParamsLicenseCcByNc   GetTaxonPlacesIDZoomXYPngParamsLicense = "cc-by-nc"
	GetTaxonPlacesIDZoomXYPngParamsLicenseCcByNcNd GetTaxonPlacesIDZoomXYPngParamsLicense = "cc-by-nc-nd"
	GetTaxonPlacesIDZoomXYPngParamsLicenseCcByNcSa GetTaxonPlacesIDZoomXYPngParamsLicense = "cc-by-nc-sa"
	GetTaxonPlacesIDZoomXYPngParamsLicenseCcByNd   GetTaxonPlacesIDZoomXYPngParamsLicense = "cc-by-nd"
	GetTaxonPlacesIDZoomXYPngParamsLicenseCcBySa   GetTaxonPlacesIDZoomXYPngParamsLicense = "cc-by-sa"
)

// Defines values for GetTaxonPlacesIDZoomXYPngParamsPhotoLicense.
const (
	GetTaxonPlacesIDZoomXYPngParamsPhotoLicenseCc0      GetTaxonPlacesIDZoomXYPngParamsPhotoLicense = "cc0"
	GetTaxonPlacesIDZoomXYPngParamsPhotoLicenseCcBy     GetTaxonPlacesIDZoomXYPngParamsPhotoLicense = "cc-by"
	GetTaxonPlacesIDZoomXYPngParamsPhotoLicenseCcByNc   GetTaxonPlacesIDZoomXYPngParamsPhotoLicense = "cc-by-nc"
	GetTaxonPlacesIDZoomXYPngParamsPhotoLicenseCcByNcNd GetTaxonPlacesIDZoomXYPngParamsPhotoLicense = "cc-by-nc-nd"
	GetTaxonPlacesIDZoomXYPngParamsPhotoLicenseCcByNcSa GetTaxonPlacesIDZoomXYPngParamsPhotoLicense = "cc-by-nc-sa"
	GetTaxonPlacesIDZoomXYPngParamsPhotoLicenseCcByNd   GetTaxonPlacesIDZoomXYPngParamsPhotoLicense = "cc-by-nd"
	GetTaxonPlacesIDZoomXYPngParamsPhotoLicenseCcBySa   GetTaxonPlacesIDZoomXYPngParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetTaxonPlacesIDZoomXYPngParamsRank.
const (
	GetTaxonPlacesIDZoomXYPngParamsRankClass         GetTaxonPlacesIDZoomXYPngParamsRank = "class"
	GetTaxonPlacesIDZoomXYPngParamsRankComplex       GetTaxonPlacesIDZoomXYPngParamsRank = "complex"
	GetTaxonPlacesIDZoomXYPngParamsRankEpifamily     GetTaxonPlacesIDZoomXYPngParamsRank = "epifamily"
	GetTaxonPlacesIDZoomXYPngParamsRankFamily        GetTaxonPlacesIDZoomXYPngParamsRank = "family"
	GetTaxonPlacesIDZoomXYPngParamsRankForm          GetTaxonPlacesIDZoomXYPngParamsRank = "form"
	GetTaxonPlacesIDZoomXYPngParamsRankGenus         GetTaxonPlacesIDZoomXYPngParamsRank = "genus"
	GetTaxonPlacesIDZoomXYPngParamsRankGenushybrid   GetTaxonPlacesIDZoomXYPngParamsRank = "genushybrid"
	GetTaxonPlacesIDZoomXYPngParamsRankHybrid        GetTaxonPlacesIDZoomXYPngParamsRank = "hybrid"
	GetTaxonPlacesIDZoomXYPngParamsRankInfraclass    GetTaxonPlacesIDZoomXYPngParamsRank = "infraclass"
	GetTaxonPlacesIDZoomXYPngParamsRankInfrahybrid   GetTaxonPlacesIDZoomXYPngParamsRank = "infrahybrid"
	GetTaxonPlacesIDZoomXYPngParamsRankInfraorder    GetTaxonPlacesIDZoomXYPngParamsRank = "infraorder"
	GetTaxonPlacesIDZoomXYPngParamsRankKingdom       GetTaxonPlacesIDZoomXYPngParamsRank = "kingdom"
	GetTaxonPlacesIDZoomXYPngParamsRankOrder         GetTaxonPlacesIDZoomXYPngParamsRank = "order"
	GetTaxonPlacesIDZoomXYPngParamsRankParvorder     GetTaxonPlacesIDZoomXYPngParamsRank = "parvorder"
	GetTaxonPlacesIDZoomXYPngParamsRankPhylum        GetTaxonPlacesIDZoomXYPngParamsRank = "phylum"
	GetTaxonPlacesIDZoomXYPngParamsRankSection       GetTaxonPlacesIDZoomXYPngParamsRank = "section"
	GetTaxonPlacesIDZoomXYPngParamsRankSpecies       GetTaxonPlacesIDZoomXYPngParamsRank = "species"
	GetTaxonPlacesIDZoomXYPngParamsRankSubclass      GetTaxonPlacesIDZoomXYPngParamsRank = "subclass"
	GetTaxonPlacesIDZoomXYPngParamsRankSubfamily     GetTaxonPlacesIDZoomXYPngParamsRank = "subfamily"
	GetTaxonPlacesIDZoomXYPngParamsRankSubgenus      GetTaxonPlacesIDZoomXYPngParamsRank = "subgenus"
	GetTaxonPlacesIDZoomXYPngParamsRankSuborder      GetTaxonPlacesIDZoomXYPngParamsRank = "suborder"
	GetTaxonPlacesIDZoomXYPngParamsRankSubphylum     GetTaxonPlacesIDZoomXYPngParamsRank = "subphylum"
	GetTaxonPlacesIDZoomXYPngParamsRankSubsection    GetTaxonPlacesIDZoomXYPngParamsRank = "subsection"
	GetTaxonPlacesIDZoomXYPngParamsRankSubspecies    GetTaxonPlacesIDZoomXYPngParamsRank = "subspecies"
	GetTaxonPlacesIDZoomXYPngParamsRankSubterclass   GetTaxonPlacesIDZoomXYPngParamsRank = "subterclass"
	GetTaxonPlacesIDZoomXYPngParamsRankSubtribe      GetTaxonPlacesIDZoomXYPngParamsRank = "subtribe"
	GetTaxonPlacesIDZoomXYPngParamsRankSuperclass    GetTaxonPlacesIDZoomXYPngParamsRank = "superclass"
	GetTaxonPlacesIDZoomXYPngParamsRankSuperfamily   GetTaxonPlacesIDZoomXYPngParamsRank = "superfamily"
	GetTaxonPlacesIDZoomXYPngParamsRankSuperorder    GetTaxonPlacesIDZoomXYPngParamsRank = "superorder"
	GetTaxonPlacesIDZoomXYPngParamsRankSupertribe    GetTaxonPlacesIDZoomXYPngParamsRank = "supertribe"
	GetTaxonPlacesIDZoomXYPngParamsRankTribe         GetTaxonPlacesIDZoomXYPngParamsRank = "tribe"
	GetTaxonPlacesIDZoomXYPngParamsRankVariety       GetTaxonPlacesIDZoomXYPngParamsRank = "variety"
	GetTaxonPlacesIDZoomXYPngParamsRankZoosection    GetTaxonPlacesIDZoomXYPngParamsRank = "zoosection"
	GetTaxonPlacesIDZoomXYPngParamsRankZoosubsection GetTaxonPlacesIDZoomXYPngParamsRank = "zoosubsection"
)

// Defines values for GetTaxonPlacesIDZoomXYPngParamsSoundLicense.
const (
	GetTaxonPlacesIDZoomXYPngParamsSoundLicenseCc0      GetTaxonPlacesIDZoomXYPngParamsSoundLicense = "cc0"
	GetTaxonPlacesIDZoomXYPngParamsSoundLicenseCcBy     GetTaxonPlacesIDZoomXYPngParamsSoundLicense = "cc-by"
	GetTaxonPlacesIDZoomXYPngParamsSoundLicenseCcByNc   GetTaxonPlacesIDZoomXYPngParamsSoundLicense = "cc-by-nc"
	GetTaxonPlacesIDZoomXYPngParamsSoundLicenseCcByNcNd GetTaxonPlacesIDZoomXYPngParamsSoundLicense = "cc-by-nc-nd"
	GetTaxonPlacesIDZoomXYPngParamsSoundLicenseCcByNcSa GetTaxonPlacesIDZoomXYPngParamsSoundLicense = "cc-by-nc-sa"
	GetTaxonPlacesIDZoomXYPngParamsSoundLicenseCcByNd   GetTaxonPlacesIDZoomXYPngParamsSoundLicense = "cc-by-nd"
	GetTaxonPlacesIDZoomXYPngParamsSoundLicenseCcBySa   GetTaxonPlacesIDZoomXYPngParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetTaxonPlacesIDZoomXYPngParamsCsi.
const (
	GetTaxonPlacesIDZoomXYPngParamsCsiCR GetTaxonPlacesIDZoomXYPngParamsCsi = "CR"
	GetTaxonPlacesIDZoomXYPngParamsCsiEN GetTaxonPlacesIDZoomXYPngParamsCsi = "EN"
	GetTaxonPlacesIDZoomXYPngParamsCsiEW GetTaxonPlacesIDZoomXYPngParamsCsi = "EW"
	GetTaxonPlacesIDZoomXYPngParamsCsiEX GetTaxonPlacesIDZoomXYPngParamsCsi = "EX"
	GetTaxonPlacesIDZoomXYPngParamsCsiLC GetTaxonPlacesIDZoomXYPngParamsCsi = "LC"
	GetTaxonPlacesIDZoomXYPngParamsCsiNT GetTaxonPlacesIDZoomXYPngParamsCsi = "NT"
	GetTaxonPlacesIDZoomXYPngParamsCsiVU GetTaxonPlacesIDZoomXYPngParamsCsi = "VU"
)

// Defines values for GetTaxonPlacesIDZoomXYPngParamsGeoprivacy.
const (
	GetTaxonPlacesIDZoomXYPngParamsGeoprivacyObscured        GetTaxonPlacesIDZoomXYPngParamsGeoprivacy = "obscured"
	GetTaxonPlacesIDZoomXYPngParamsGeoprivacyObscuredPrivate GetTaxonPlacesIDZoomXYPngParamsGeoprivacy = "obscured_private"
	GetTaxonPlacesIDZoomXYPngParamsGeoprivacyOpen            GetTaxonPlacesIDZoomXYPngParamsGeoprivacy = "open"
	GetTaxonPlacesIDZoomXYPngParamsGeoprivacyPrivate         GetTaxonPlacesIDZoomXYPngParamsGeoprivacy = "private"
)

// Defines values for GetTaxonPlacesIDZoomXYPngParamsTaxonGeoprivacy.
const (
	GetTaxonPlacesIDZoomXYPngParamsTaxonGeoprivacyObscured        GetTaxonPlacesIDZoomXYPngParamsTaxonGeoprivacy = "obscured"
	GetTaxonPlacesIDZoomXYPngParamsTaxonGeoprivacyObscuredPrivate GetTaxonPlacesIDZoomXYPngParamsTaxonGeoprivacy = "obscured_private"
	GetTaxonPlacesIDZoomXYPngParamsTaxonGeoprivacyOpen            GetTaxonPlacesIDZoomXYPngParamsTaxonGeoprivacy = "open"
	GetTaxonPlacesIDZoomXYPngParamsTaxonGeoprivacyPrivate         GetTaxonPlacesIDZoomXYPngParamsTaxonGeoprivacy = "private"
)

// Defines values for GetTaxonPlacesIDZoomXYPngParamsObscuration.
const (
	GetTaxonPlacesIDZoomXYPngParamsObscurationNone     GetTaxonPlacesIDZoomXYPngParamsObscuration = "none"
	GetTaxonPlacesIDZoomXYPngParamsObscurationObscured GetTaxonPlacesIDZoomXYPngParamsObscuration = "obscured"
	GetTaxonPlacesIDZoomXYPngParamsObscurationPrivate  GetTaxonPlacesIDZoomXYPngParamsObscuration = "private"
)

// Defines values for GetTaxonPlacesIDZoomXYPngParamsHrank.
const (
	GetTaxonPlacesIDZoomXYPngParamsHrankClass         GetTaxonPlacesIDZoomXYPngParamsHrank = "class"
	GetTaxonPlacesIDZoomXYPngParamsHrankComplex       GetTaxonPlacesIDZoomXYPngParamsHrank = "complex"
	GetTaxonPlacesIDZoomXYPngParamsHrankEpifamily     GetTaxonPlacesIDZoomXYPngParamsHrank = "epifamily"
	GetTaxonPlacesIDZoomXYPngParamsHrankFamily        GetTaxonPlacesIDZoomXYPngParamsHrank = "family"
	GetTaxonPlacesIDZoomXYPngParamsHrankForm          GetTaxonPlacesIDZoomXYPngParamsHrank = "form"
	GetTaxonPlacesIDZoomXYPngParamsHrankGenus         GetTaxonPlacesIDZoomXYPngParamsHrank = "genus"
	GetTaxonPlacesIDZoomXYPngParamsHrankGenushybrid   GetTaxonPlacesIDZoomXYPngParamsHrank = "genushybrid"
	GetTaxonPlacesIDZoomXYPngParamsHrankHybrid        GetTaxonPlacesIDZoomXYPngParamsHrank = "hybrid"
	GetTaxonPlacesIDZoomXYPngParamsHrankInfraclass    GetTaxonPlacesIDZoomXYPngParamsHrank = "infraclass"
	GetTaxonPlacesIDZoomXYPngParamsHrankInfrahybrid   GetTaxonPlacesIDZoomXYPngParamsHrank = "infrahybrid"
	GetTaxonPlacesIDZoomXYPngParamsHrankInfraorder    GetTaxonPlacesIDZoomXYPngParamsHrank = "infraorder"
	GetTaxonPlacesIDZoomXYPngParamsHrankKingdom       GetTaxonPlacesIDZoomXYPngParamsHrank = "kingdom"
	GetTaxonPlacesIDZoomXYPngParamsHrankOrder         GetTaxonPlacesIDZoomXYPngParamsHrank = "order"
	GetTaxonPlacesIDZoomXYPngParamsHrankParvorder     GetTaxonPlacesIDZoomXYPngParamsHrank = "parvorder"
	GetTaxonPlacesIDZoomXYPngParamsHrankPhylum        GetTaxonPlacesIDZoomXYPngParamsHrank = "phylum"
	GetTaxonPlacesIDZoomXYPngParamsHrankSection       GetTaxonPlacesIDZoomXYPngParamsHrank = "section"
	GetTaxonPlacesIDZoomXYPngParamsHrankSpecies       GetTaxonPlacesIDZoomXYPngParamsHrank = "species"
	GetTaxonPlacesIDZoomXYPngParamsHrankSubclass      GetTaxonPlacesIDZoomXYPngParamsHrank = "subclass"
	GetTaxonPlacesIDZoomXYPngParamsHrankSubfamily     GetTaxonPlacesIDZoomXYPngParamsHrank = "subfamily"
	GetTaxonPlacesIDZoomXYPngParamsHrankSubgenus      GetTaxonPlacesIDZoomXYPngParamsHrank = "subgenus"
	GetTaxonPlacesIDZoomXYPngParamsHrankSuborder      GetTaxonPlacesIDZoomXYPngParamsHrank = "suborder"
	GetTaxonPlacesIDZoomXYPngParamsHrankSubphylum     GetTaxonPlacesIDZoomXYPngParamsHrank = "subphylum"
	GetTaxonPlacesIDZoomXYPngParamsHrankSubsection    GetTaxonPlacesIDZoomXYPngParamsHrank = "subsection"
	GetTaxonPlacesIDZoomXYPngParamsHrankSubspecies    GetTaxonPlacesIDZoomXYPngParamsHrank = "subspecies"
	GetTaxonPlacesIDZoomXYPngParamsHrankSubterclass   GetTaxonPlacesIDZoomXYPngParamsHrank = "subterclass"
	GetTaxonPlacesIDZoomXYPngParamsHrankSubtribe      GetTaxonPlacesIDZoomXYPngParamsHrank = "subtribe"
	GetTaxonPlacesIDZoomXYPngParamsHrankSuperclass    GetTaxonPlacesIDZoomXYPngParamsHrank = "superclass"
	GetTaxonPlacesIDZoomXYPngParamsHrankSuperfamily   GetTaxonPlacesIDZoomXYPngParamsHrank = "superfamily"
	GetTaxonPlacesIDZoomXYPngParamsHrankSuperorder    GetTaxonPlacesIDZoomXYPngParamsHrank = "superorder"
	GetTaxonPlacesIDZoomXYPngParamsHrankSupertribe    GetTaxonPlacesIDZoomXYPngParamsHrank = "supertribe"
	GetTaxonPlacesIDZoomXYPngParamsHrankTribe         GetTaxonPlacesIDZoomXYPngParamsHrank = "tribe"
	GetTaxonPlacesIDZoomXYPngParamsHrankVariety       GetTaxonPlacesIDZoomXYPngParamsHrank = "variety"
	GetTaxonPlacesIDZoomXYPngParamsHrankZoosection    GetTaxonPlacesIDZoomXYPngParamsHrank = "zoosection"
	GetTaxonPlacesIDZoomXYPngParamsHrankZoosubsection GetTaxonPlacesIDZoomXYPngParamsHrank = "zoosubsection"
)

// Defines values for GetTaxonPlacesIDZoomXYPngParamsLrank.
const (
	GetTaxonPlacesIDZoomXYPngParamsLrankClass         GetTaxonPlacesIDZoomXYPngParamsLrank = "class"
	GetTaxonPlacesIDZoomXYPngParamsLrankComplex       GetTaxonPlacesIDZoomXYPngParamsLrank = "complex"
	GetTaxonPlacesIDZoomXYPngParamsLrankEpifamily     GetTaxonPlacesIDZoomXYPngParamsLrank = "epifamily"
	GetTaxonPlacesIDZoomXYPngParamsLrankFamily        GetTaxonPlacesIDZoomXYPngParamsLrank = "family"
	GetTaxonPlacesIDZoomXYPngParamsLrankForm          GetTaxonPlacesIDZoomXYPngParamsLrank = "form"
	GetTaxonPlacesIDZoomXYPngParamsLrankGenus         GetTaxonPlacesIDZoomXYPngParamsLrank = "genus"
	GetTaxonPlacesIDZoomXYPngParamsLrankGenushybrid   GetTaxonPlacesIDZoomXYPngParamsLrank = "genushybrid"
	GetTaxonPlacesIDZoomXYPngParamsLrankHybrid        GetTaxonPlacesIDZoomXYPngParamsLrank = "hybrid"
	GetTaxonPlacesIDZoomXYPngParamsLrankInfraclass    GetTaxonPlacesIDZoomXYPngParamsLrank = "infraclass"
	GetTaxonPlacesIDZoomXYPngParamsLrankInfrahybrid   GetTaxonPlacesIDZoomXYPngParamsLrank = "infrahybrid"
	GetTaxonPlacesIDZoomXYPngParamsLrankInfraorder    GetTaxonPlacesIDZoomXYPngParamsLrank = "infraorder"
	GetTaxonPlacesIDZoomXYPngParamsLrankKingdom       GetTaxonPlacesIDZoomXYPngParamsLrank = "kingdom"
	GetTaxonPlacesIDZoomXYPngParamsLrankOrder         GetTaxonPlacesIDZoomXYPngParamsLrank = "order"
	GetTaxonPlacesIDZoomXYPngParamsLrankParvorder     GetTaxonPlacesIDZoomXYPngParamsLrank = "parvorder"
	GetTaxonPlacesIDZoomXYPngParamsLrankPhylum        GetTaxonPlacesIDZoomXYPngParamsLrank = "phylum"
	GetTaxonPlacesIDZoomXYPngParamsLrankSection       GetTaxonPlacesIDZoomXYPngParamsLrank = "section"
	GetTaxonPlacesIDZoomXYPngParamsLrankSpecies       GetTaxonPlacesIDZoomXYPngParamsLrank = "species"
	GetTaxonPlacesIDZoomXYPngParamsLrankSubclass      GetTaxonPlacesIDZoomXYPngParamsLrank = "subclass"
	GetTaxonPlacesIDZoomXYPngParamsLrankSubfamily     GetTaxonPlacesIDZoomXYPngParamsLrank = "subfamily"
	GetTaxonPlacesIDZoomXYPngParamsLrankSubgenus      GetTaxonPlacesIDZoomXYPngParamsLrank = "subgenus"
	GetTaxonPlacesIDZoomXYPngParamsLrankSuborder      GetTaxonPlacesIDZoomXYPngParamsLrank = "suborder"
	GetTaxonPlacesIDZoomXYPngParamsLrankSubphylum     GetTaxonPlacesIDZoomXYPngParamsLrank = "subphylum"
	GetTaxonPlacesIDZoomXYPngParamsLrankSubsection    GetTaxonPlacesIDZoomXYPngParamsLrank = "subsection"
	GetTaxonPlacesIDZoomXYPngParamsLrankSubspecies    GetTaxonPlacesIDZoomXYPngParamsLrank = "subspecies"
	GetTaxonPlacesIDZoomXYPngParamsLrankSubterclass   GetTaxonPlacesIDZoomXYPngParamsLrank = "subterclass"
	GetTaxonPlacesIDZoomXYPngParamsLrankSubtribe      GetTaxonPlacesIDZoomXYPngParamsLrank = "subtribe"
	GetTaxonPlacesIDZoomXYPngParamsLrankSuperclass    GetTaxonPlacesIDZoomXYPngParamsLrank = "superclass"
	GetTaxonPlacesIDZoomXYPngParamsLrankSuperfamily   GetTaxonPlacesIDZoomXYPngParamsLrank = "superfamily"
	GetTaxonPlacesIDZoomXYPngParamsLrankSuperorder    GetTaxonPlacesIDZoomXYPngParamsLrank = "superorder"
	GetTaxonPlacesIDZoomXYPngParamsLrankSupertribe    GetTaxonPlacesIDZoomXYPngParamsLrank = "supertribe"
	GetTaxonPlacesIDZoomXYPngParamsLrankTribe         GetTaxonPlacesIDZoomXYPngParamsLrank = "tribe"
	GetTaxonPlacesIDZoomXYPngParamsLrankVariety       GetTaxonPlacesIDZoomXYPngParamsLrank = "variety"
	GetTaxonPlacesIDZoomXYPngParamsLrankZoosection    GetTaxonPlacesIDZoomXYPngParamsLrank = "zoosection"
	GetTaxonPlacesIDZoomXYPngParamsLrankZoosubsection GetTaxonPlacesIDZoomXYPngParamsLrank = "zoosubsection"
)

// Defines values for GetTaxonPlacesIDZoomXYPngParamsIconicTaxa.
const (
	GetTaxonPlacesIDZoomXYPngParamsIconicTaxaActinopterygii GetTaxonPlacesIDZoomXYPngParamsIconicTaxa = "Actinopterygii"
	GetTaxonPlacesIDZoomXYPngParamsIconicTaxaAmphibia       GetTaxonPlacesIDZoomXYPngParamsIconicTaxa = "Amphibia"
	GetTaxonPlacesIDZoomXYPngParamsIconicTaxaAnimalia       GetTaxonPlacesIDZoomXYPngParamsIconicTaxa = "Animalia"
	GetTaxonPlacesIDZoomXYPngParamsIconicTaxaArachnida      GetTaxonPlacesIDZoomXYPngParamsIconicTaxa = "Arachnida"
	GetTaxonPlacesIDZoomXYPngParamsIconicTaxaAves           GetTaxonPlacesIDZoomXYPngParamsIconicTaxa = "Aves"
	GetTaxonPlacesIDZoomXYPngParamsIconicTaxaChromista      GetTaxonPlacesIDZoomXYPngParamsIconicTaxa = "Chromista"
	GetTaxonPlacesIDZoomXYPngParamsIconicTaxaFungi          GetTaxonPlacesIDZoomXYPngParamsIconicTaxa = "Fungi"
	GetTaxonPlacesIDZoomXYPngParamsIconicTaxaInsecta        GetTaxonPlacesIDZoomXYPngParamsIconicTaxa = "Insecta"
	GetTaxonPlacesIDZoomXYPngParamsIconicTaxaMammalia       GetTaxonPlacesIDZoomXYPngParamsIconicTaxa = "Mammalia"
	GetTaxonPlacesIDZoomXYPngParamsIconicTaxaMollusca       GetTaxonPlacesIDZoomXYPngParamsIconicTaxa = "Mollusca"
	GetTaxonPlacesIDZoomXYPngParamsIconicTaxaPlantae        GetTaxonPlacesIDZoomXYPngParamsIconicTaxa = "Plantae"
	GetTaxonPlacesIDZoomXYPngParamsIconicTaxaProtozoa       GetTaxonPlacesIDZoomXYPngParamsIconicTaxa = "Protozoa"
	GetTaxonPlacesIDZoomXYPngParamsIconicTaxaReptilia       GetTaxonPlacesIDZoomXYPngParamsIconicTaxa = "Reptilia"
	GetTaxonPlacesIDZoomXYPngParamsIconicTaxaUnknown        GetTaxonPlacesIDZoomXYPngParamsIconicTaxa = "unknown"
)

// Defines values for GetTaxonPlacesIDZoomXYPngParamsIdentifications.
const (
	GetTaxonPlacesIDZoomXYPngParamsIdentificationsMostAgree    GetTaxonPlacesIDZoomXYPngParamsIdentifications = "most_agree"
	GetTaxonPlacesIDZoomXYPngParamsIdentificationsMostDisagree GetTaxonPlacesIDZoomXYPngParamsIdentifications = "most_disagree"
	GetTaxonPlacesIDZoomXYPngParamsIdentificationsSomeAgree    GetTaxonPlacesIDZoomXYPngParamsIdentifications = "some_agree"
)

// Defines values for GetTaxonPlacesIDZoomXYPngParamsSearchOn.
const (
	GetTaxonPlacesIDZoomXYPngParamsSearchOnDescription        GetTaxonPlacesIDZoomXYPngParamsSearchOn = "description"
	GetTaxonPlacesIDZoomXYPngParamsSearchOnNames              GetTaxonPlacesIDZoomXYPngParamsSearchOn = "names"
	GetTaxonPlacesIDZoomXYPngParamsSearchOnPlace              GetTaxonPlacesIDZoomXYPngParamsSearchOn = "place"
	GetTaxonPlacesIDZoomXYPngParamsSearchOnTags               GetTaxonPlacesIDZoomXYPngParamsSearchOn = "tags"
	GetTaxonPlacesIDZoomXYPngParamsSearchOnTaxonPageObsPhotos GetTaxonPlacesIDZoomXYPngParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetTaxonPlacesIDZoomXYPngParamsQualityGrade.
const (
	GetTaxonPlacesIDZoomXYPngParamsQualityGradeCasual   GetTaxonPlacesIDZoomXYPngParamsQualityGrade = "casual"
	GetTaxonPlacesIDZoomXYPngParamsQualityGradeNeedsID  GetTaxonPlacesIDZoomXYPngParamsQualityGrade = "needs_id"
	GetTaxonPlacesIDZoomXYPngParamsQualityGradeResearch GetTaxonPlacesIDZoomXYPngParamsQualityGrade = "research"
)

// Defines values for GetTaxonPlacesIDZoomXYPngParamsOrder.
const (
	GetTaxonPlacesIDZoomXYPngParamsOrderAsc  GetTaxonPlacesIDZoomXYPngParamsOrder = "asc"
	GetTaxonPlacesIDZoomXYPngParamsOrderDesc GetTaxonPlacesIDZoomXYPngParamsOrder = "desc"
)

// Defines values for GetTaxonPlacesIDZoomXYPngParamsOrderBy.
const (
	GetTaxonPlacesIDZoomXYPngParamsOrderByCreatedAt    GetTaxonPlacesIDZoomXYPngParamsOrderBy = "created_at"
	GetTaxonPlacesIDZoomXYPngParamsOrderByGeoScore     GetTaxonPlacesIDZoomXYPngParamsOrderBy = "geo_score"
	GetTaxonPlacesIDZoomXYPngParamsOrderByID           GetTaxonPlacesIDZoomXYPngParamsOrderBy = "id"
	GetTaxonPlacesIDZoomXYPngParamsOrderByObservedOn   GetTaxonPlacesIDZoomXYPngParamsOrderBy = "observed_on"
	GetTaxonPlacesIDZoomXYPngParamsOrderByRandom       GetTaxonPlacesIDZoomXYPngParamsOrderBy = "random"
	GetTaxonPlacesIDZoomXYPngParamsOrderBySpeciesGuess GetTaxonPlacesIDZoomXYPngParamsOrderBy = "species_guess"
	GetTaxonPlacesIDZoomXYPngParamsOrderByUpdatedAt    GetTaxonPlacesIDZoomXYPngParamsOrderBy = "updated_at"
	GetTaxonPlacesIDZoomXYPngParamsOrderByVotes        GetTaxonPlacesIDZoomXYPngParamsOrderBy = "votes"
)

// Defines values for GetTaxonRangesIDZoomXYPngParamsTileSize.
const (
	N256 GetTaxonRangesIDZoomXYPngParamsTileSize = 256
	N512 GetTaxonRangesIDZoomXYPngParamsTileSize = 512
)

// Defines values for GetTaxonRangesIDZoomXYPngParamsLicense.
const (
	GetTaxonRangesIDZoomXYPngParamsLicenseCc0      GetTaxonRangesIDZoomXYPngParamsLicense = "cc0"
	GetTaxonRangesIDZoomXYPngParamsLicenseCcBy     GetTaxonRangesIDZoomXYPngParamsLicense = "cc-by"
	GetTaxonRangesIDZoomXYPngParamsLicenseCcByNc   GetTaxonRangesIDZoomXYPngParamsLicense = "cc-by-nc"
	GetTaxonRangesIDZoomXYPngParamsLicenseCcByNcNd GetTaxonRangesIDZoomXYPngParamsLicense = "cc-by-nc-nd"
	GetTaxonRangesIDZoomXYPngParamsLicenseCcByNcSa GetTaxonRangesIDZoomXYPngParamsLicense = "cc-by-nc-sa"
	GetTaxonRangesIDZoomXYPngParamsLicenseCcByNd   GetTaxonRangesIDZoomXYPngParamsLicense = "cc-by-nd"
	GetTaxonRangesIDZoomXYPngParamsLicenseCcBySa   GetTaxonRangesIDZoomXYPngParamsLicense = "cc-by-sa"
)

// Defines values for GetTaxonRangesIDZoomXYPngParamsPhotoLicense.
const (
	GetTaxonRangesIDZoomXYPngParamsPhotoLicenseCc0      GetTaxonRangesIDZoomXYPngParamsPhotoLicense = "cc0"
	GetTaxonRangesIDZoomXYPngParamsPhotoLicenseCcBy     GetTaxonRangesIDZoomXYPngParamsPhotoLicense = "cc-by"
	GetTaxonRangesIDZoomXYPngParamsPhotoLicenseCcByNc   GetTaxonRangesIDZoomXYPngParamsPhotoLicense = "cc-by-nc"
	GetTaxonRangesIDZoomXYPngParamsPhotoLicenseCcByNcNd GetTaxonRangesIDZoomXYPngParamsPhotoLicense = "cc-by-nc-nd"
	GetTaxonRangesIDZoomXYPngParamsPhotoLicenseCcByNcSa GetTaxonRangesIDZoomXYPngParamsPhotoLicense = "cc-by-nc-sa"
	GetTaxonRangesIDZoomXYPngParamsPhotoLicenseCcByNd   GetTaxonRangesIDZoomXYPngParamsPhotoLicense = "cc-by-nd"
	GetTaxonRangesIDZoomXYPngParamsPhotoLicenseCcBySa   GetTaxonRangesIDZoomXYPngParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetTaxonRangesIDZoomXYPngParamsRank.
const (
	GetTaxonRangesIDZoomXYPngParamsRankClass         GetTaxonRangesIDZoomXYPngParamsRank = "class"
	GetTaxonRangesIDZoomXYPngParamsRankComplex       GetTaxonRangesIDZoomXYPngParamsRank = "complex"
	GetTaxonRangesIDZoomXYPngParamsRankEpifamily     GetTaxonRangesIDZoomXYPngParamsRank = "epifamily"
	GetTaxonRangesIDZoomXYPngParamsRankFamily        GetTaxonRangesIDZoomXYPngParamsRank = "family"
	GetTaxonRangesIDZoomXYPngParamsRankForm          GetTaxonRangesIDZoomXYPngParamsRank = "form"
	GetTaxonRangesIDZoomXYPngParamsRankGenus         GetTaxonRangesIDZoomXYPngParamsRank = "genus"
	GetTaxonRangesIDZoomXYPngParamsRankGenushybrid   GetTaxonRangesIDZoomXYPngParamsRank = "genushybrid"
	GetTaxonRangesIDZoomXYPngParamsRankHybrid        GetTaxonRangesIDZoomXYPngParamsRank = "hybrid"
	GetTaxonRangesIDZoomXYPngParamsRankInfraclass    GetTaxonRangesIDZoomXYPngParamsRank = "infraclass"
	GetTaxonRangesIDZoomXYPngParamsRankInfrahybrid   GetTaxonRangesIDZoomXYPngParamsRank = "infrahybrid"
	GetTaxonRangesIDZoomXYPngParamsRankInfraorder    GetTaxonRangesIDZoomXYPngParamsRank = "infraorder"
	GetTaxonRangesIDZoomXYPngParamsRankKingdom       GetTaxonRangesIDZoomXYPngParamsRank = "kingdom"
	GetTaxonRangesIDZoomXYPngParamsRankOrder         GetTaxonRangesIDZoomXYPngParamsRank = "order"
	GetTaxonRangesIDZoomXYPngParamsRankParvorder     GetTaxonRangesIDZoomXYPngParamsRank = "parvorder"
	GetTaxonRangesIDZoomXYPngParamsRankPhylum        GetTaxonRangesIDZoomXYPngParamsRank = "phylum"
	GetTaxonRangesIDZoomXYPngParamsRankSection       GetTaxonRangesIDZoomXYPngParamsRank = "section"
	GetTaxonRangesIDZoomXYPngParamsRankSpecies       GetTaxonRangesIDZoomXYPngParamsRank = "species"
	GetTaxonRangesIDZoomXYPngParamsRankSubclass      GetTaxonRangesIDZoomXYPngParamsRank = "subclass"
	GetTaxonRangesIDZoomXYPngParamsRankSubfamily     GetTaxonRangesIDZoomXYPngParamsRank = "subfamily"
	GetTaxonRangesIDZoomXYPngParamsRankSubgenus      GetTaxonRangesIDZoomXYPngParamsRank = "subgenus"
	GetTaxonRangesIDZoomXYPngParamsRankSuborder      GetTaxonRangesIDZoomXYPngParamsRank = "suborder"
	GetTaxonRangesIDZoomXYPngParamsRankSubphylum     GetTaxonRangesIDZoomXYPngParamsRank = "subphylum"
	GetTaxonRangesIDZoomXYPngParamsRankSubsection    GetTaxonRangesIDZoomXYPngParamsRank = "subsection"
	GetTaxonRangesIDZoomXYPngParamsRankSubspecies    GetTaxonRangesIDZoomXYPngParamsRank = "subspecies"
	GetTaxonRangesIDZoomXYPngParamsRankSubterclass   GetTaxonRangesIDZoomXYPngParamsRank = "subterclass"
	GetTaxonRangesIDZoomXYPngParamsRankSubtribe      GetTaxonRangesIDZoomXYPngParamsRank = "subtribe"
	GetTaxonRangesIDZoomXYPngParamsRankSuperclass    GetTaxonRangesIDZoomXYPngParamsRank = "superclass"
	GetTaxonRangesIDZoomXYPngParamsRankSuperfamily   GetTaxonRangesIDZoomXYPngParamsRank = "superfamily"
	GetTaxonRangesIDZoomXYPngParamsRankSuperorder    GetTaxonRangesIDZoomXYPngParamsRank = "superorder"
	GetTaxonRangesIDZoomXYPngParamsRankSupertribe    GetTaxonRangesIDZoomXYPngParamsRank = "supertribe"
	GetTaxonRangesIDZoomXYPngParamsRankTribe         GetTaxonRangesIDZoomXYPngParamsRank = "tribe"
	GetTaxonRangesIDZoomXYPngParamsRankVariety       GetTaxonRangesIDZoomXYPngParamsRank = "variety"
	GetTaxonRangesIDZoomXYPngParamsRankZoosection    GetTaxonRangesIDZoomXYPngParamsRank = "zoosection"
	GetTaxonRangesIDZoomXYPngParamsRankZoosubsection GetTaxonRangesIDZoomXYPngParamsRank = "zoosubsection"
)

// Defines values for GetTaxonRangesIDZoomXYPngParamsSoundLicense.
const (
	Cc0      GetTaxonRangesIDZoomXYPngParamsSoundLicense = "cc0"
	CcBy     GetTaxonRangesIDZoomXYPngParamsSoundLicense = "cc-by"
	CcByNc   GetTaxonRangesIDZoomXYPngParamsSoundLicense = "cc-by-nc"
	CcByNcNd GetTaxonRangesIDZoomXYPngParamsSoundLicense = "cc-by-nc-nd"
	CcByNcSa GetTaxonRangesIDZoomXYPngParamsSoundLicense = "cc-by-nc-sa"
	CcByNd   GetTaxonRangesIDZoomXYPngParamsSoundLicense = "cc-by-nd"
	CcBySa   GetTaxonRangesIDZoomXYPngParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetTaxonRangesIDZoomXYPngParamsCsi.
const (
	CR GetTaxonRangesIDZoomXYPngParamsCsi = "CR"
	EN GetTaxonRangesIDZoomXYPngParamsCsi = "EN"
	EW GetTaxonRangesIDZoomXYPngParamsCsi = "EW"
	EX GetTaxonRangesIDZoomXYPngParamsCsi = "EX"
	LC GetTaxonRangesIDZoomXYPngParamsCsi = "LC"
	NT GetTaxonRangesIDZoomXYPngParamsCsi = "NT"
	VU GetTaxonRangesIDZoomXYPngParamsCsi = "VU"
)

// Defines values for GetTaxonRangesIDZoomXYPngParamsGeoprivacy.
const (
	GetTaxonRangesIDZoomXYPngParamsGeoprivacyObscured        GetTaxonRangesIDZoomXYPngParamsGeoprivacy = "obscured"
	GetTaxonRangesIDZoomXYPngParamsGeoprivacyObscuredPrivate GetTaxonRangesIDZoomXYPngParamsGeoprivacy = "obscured_private"
	GetTaxonRangesIDZoomXYPngParamsGeoprivacyOpen            GetTaxonRangesIDZoomXYPngParamsGeoprivacy = "open"
	GetTaxonRangesIDZoomXYPngParamsGeoprivacyPrivate         GetTaxonRangesIDZoomXYPngParamsGeoprivacy = "private"
)

// Defines values for GetTaxonRangesIDZoomXYPngParamsTaxonGeoprivacy.
const (
	GetTaxonRangesIDZoomXYPngParamsTaxonGeoprivacyObscured        GetTaxonRangesIDZoomXYPngParamsTaxonGeoprivacy = "obscured"
	GetTaxonRangesIDZoomXYPngParamsTaxonGeoprivacyObscuredPrivate GetTaxonRangesIDZoomXYPngParamsTaxonGeoprivacy = "obscured_private"
	GetTaxonRangesIDZoomXYPngParamsTaxonGeoprivacyOpen            GetTaxonRangesIDZoomXYPngParamsTaxonGeoprivacy = "open"
	GetTaxonRangesIDZoomXYPngParamsTaxonGeoprivacyPrivate         GetTaxonRangesIDZoomXYPngParamsTaxonGeoprivacy = "private"
)

// Defines values for GetTaxonRangesIDZoomXYPngParamsObscuration.
const (
	GetTaxonRangesIDZoomXYPngParamsObscurationNone     GetTaxonRangesIDZoomXYPngParamsObscuration = "none"
	GetTaxonRangesIDZoomXYPngParamsObscurationObscured GetTaxonRangesIDZoomXYPngParamsObscuration = "obscured"
	GetTaxonRangesIDZoomXYPngParamsObscurationPrivate  GetTaxonRangesIDZoomXYPngParamsObscuration = "private"
)

// Defines values for GetTaxonRangesIDZoomXYPngParamsHrank.
const (
	GetTaxonRangesIDZoomXYPngParamsHrankClass         GetTaxonRangesIDZoomXYPngParamsHrank = "class"
	GetTaxonRangesIDZoomXYPngParamsHrankComplex       GetTaxonRangesIDZoomXYPngParamsHrank = "complex"
	GetTaxonRangesIDZoomXYPngParamsHrankEpifamily     GetTaxonRangesIDZoomXYPngParamsHrank = "epifamily"
	GetTaxonRangesIDZoomXYPngParamsHrankFamily        GetTaxonRangesIDZoomXYPngParamsHrank = "family"
	GetTaxonRangesIDZoomXYPngParamsHrankForm          GetTaxonRangesIDZoomXYPngParamsHrank = "form"
	GetTaxonRangesIDZoomXYPngParamsHrankGenus         GetTaxonRangesIDZoomXYPngParamsHrank = "genus"
	GetTaxonRangesIDZoomXYPngParamsHrankGenushybrid   GetTaxonRangesIDZoomXYPngParamsHrank = "genushybrid"
	GetTaxonRangesIDZoomXYPngParamsHrankHybrid        GetTaxonRangesIDZoomXYPngParamsHrank = "hybrid"
	GetTaxonRangesIDZoomXYPngParamsHrankInfraclass    GetTaxonRangesIDZoomXYPngParamsHrank = "infraclass"
	GetTaxonRangesIDZoomXYPngParamsHrankInfrahybrid   GetTaxonRangesIDZoomXYPngParamsHrank = "infrahybrid"
	GetTaxonRangesIDZoomXYPngParamsHrankInfraorder    GetTaxonRangesIDZoomXYPngParamsHrank = "infraorder"
	GetTaxonRangesIDZoomXYPngParamsHrankKingdom       GetTaxonRangesIDZoomXYPngParamsHrank = "kingdom"
	GetTaxonRangesIDZoomXYPngParamsHrankOrder         GetTaxonRangesIDZoomXYPngParamsHrank = "order"
	GetTaxonRangesIDZoomXYPngParamsHrankParvorder     GetTaxonRangesIDZoomXYPngParamsHrank = "parvorder"
	GetTaxonRangesIDZoomXYPngParamsHrankPhylum        GetTaxonRangesIDZoomXYPngParamsHrank = "phylum"
	GetTaxonRangesIDZoomXYPngParamsHrankSection       GetTaxonRangesIDZoomXYPngParamsHrank = "section"
	GetTaxonRangesIDZoomXYPngParamsHrankSpecies       GetTaxonRangesIDZoomXYPngParamsHrank = "species"
	GetTaxonRangesIDZoomXYPngParamsHrankSubclass      GetTaxonRangesIDZoomXYPngParamsHrank = "subclass"
	GetTaxonRangesIDZoomXYPngParamsHrankSubfamily     GetTaxonRangesIDZoomXYPngParamsHrank = "subfamily"
	GetTaxonRangesIDZoomXYPngParamsHrankSubgenus      GetTaxonRangesIDZoomXYPngParamsHrank = "subgenus"
	GetTaxonRangesIDZoomXYPngParamsHrankSuborder      GetTaxonRangesIDZoomXYPngParamsHrank = "suborder"
	GetTaxonRangesIDZoomXYPngParamsHrankSubphylum     GetTaxonRangesIDZoomXYPngParamsHrank = "subphylum"
	GetTaxonRangesIDZoomXYPngParamsHrankSubsection    GetTaxonRangesIDZoomXYPngParamsHrank = "subsection"
	GetTaxonRangesIDZoomXYPngParamsHrankSubspecies    GetTaxonRangesIDZoomXYPngParamsHrank = "subspecies"
	GetTaxonRangesIDZoomXYPngParamsHrankSubterclass   GetTaxonRangesIDZoomXYPngParamsHrank = "subterclass"
	GetTaxonRangesIDZoomXYPngParamsHrankSubtribe      GetTaxonRangesIDZoomXYPngParamsHrank = "subtribe"
	GetTaxonRangesIDZoomXYPngParamsHrankSuperclass    GetTaxonRangesIDZoomXYPngParamsHrank = "superclass"
	GetTaxonRangesIDZoomXYPngParamsHrankSuperfamily   GetTaxonRangesIDZoomXYPngParamsHrank = "superfamily"
	GetTaxonRangesIDZoomXYPngParamsHrankSuperorder    GetTaxonRangesIDZoomXYPngParamsHrank = "superorder"
	GetTaxonRangesIDZoomXYPngParamsHrankSupertribe    GetTaxonRangesIDZoomXYPngParamsHrank = "supertribe"
	GetTaxonRangesIDZoomXYPngParamsHrankTribe         GetTaxonRangesIDZoomXYPngParamsHrank = "tribe"
	GetTaxonRangesIDZoomXYPngParamsHrankVariety       GetTaxonRangesIDZoomXYPngParamsHrank = "variety"
	GetTaxonRangesIDZoomXYPngParamsHrankZoosection    GetTaxonRangesIDZoomXYPngParamsHrank = "zoosection"
	GetTaxonRangesIDZoomXYPngParamsHrankZoosubsection GetTaxonRangesIDZoomXYPngParamsHrank = "zoosubsection"
)

// Defines values for GetTaxonRangesIDZoomXYPngParamsLrank.
const (
	GetTaxonRangesIDZoomXYPngParamsLrankClass         GetTaxonRangesIDZoomXYPngParamsLrank = "class"
	GetTaxonRangesIDZoomXYPngParamsLrankComplex       GetTaxonRangesIDZoomXYPngParamsLrank = "complex"
	GetTaxonRangesIDZoomXYPngParamsLrankEpifamily     GetTaxonRangesIDZoomXYPngParamsLrank = "epifamily"
	GetTaxonRangesIDZoomXYPngParamsLrankFamily        GetTaxonRangesIDZoomXYPngParamsLrank = "family"
	GetTaxonRangesIDZoomXYPngParamsLrankForm          GetTaxonRangesIDZoomXYPngParamsLrank = "form"
	GetTaxonRangesIDZoomXYPngParamsLrankGenus         GetTaxonRangesIDZoomXYPngParamsLrank = "genus"
	GetTaxonRangesIDZoomXYPngParamsLrankGenushybrid   GetTaxonRangesIDZoomXYPngParamsLrank = "genushybrid"
	GetTaxonRangesIDZoomXYPngParamsLrankHybrid        GetTaxonRangesIDZoomXYPngParamsLrank = "hybrid"
	GetTaxonRangesIDZoomXYPngParamsLrankInfraclass    GetTaxonRangesIDZoomXYPngParamsLrank = "infraclass"
	GetTaxonRangesIDZoomXYPngParamsLrankInfrahybrid   GetTaxonRangesIDZoomXYPngParamsLrank = "infrahybrid"
	GetTaxonRangesIDZoomXYPngParamsLrankInfraorder    GetTaxonRangesIDZoomXYPngParamsLrank = "infraorder"
	GetTaxonRangesIDZoomXYPngParamsLrankKingdom       GetTaxonRangesIDZoomXYPngParamsLrank = "kingdom"
	GetTaxonRangesIDZoomXYPngParamsLrankOrder         GetTaxonRangesIDZoomXYPngParamsLrank = "order"
	GetTaxonRangesIDZoomXYPngParamsLrankParvorder     GetTaxonRangesIDZoomXYPngParamsLrank = "parvorder"
	GetTaxonRangesIDZoomXYPngParamsLrankPhylum        GetTaxonRangesIDZoomXYPngParamsLrank = "phylum"
	GetTaxonRangesIDZoomXYPngParamsLrankSection       GetTaxonRangesIDZoomXYPngParamsLrank = "section"
	GetTaxonRangesIDZoomXYPngParamsLrankSpecies       GetTaxonRangesIDZoomXYPngParamsLrank = "species"
	GetTaxonRangesIDZoomXYPngParamsLrankSubclass      GetTaxonRangesIDZoomXYPngParamsLrank = "subclass"
	GetTaxonRangesIDZoomXYPngParamsLrankSubfamily     GetTaxonRangesIDZoomXYPngParamsLrank = "subfamily"
	GetTaxonRangesIDZoomXYPngParamsLrankSubgenus      GetTaxonRangesIDZoomXYPngParamsLrank = "subgenus"
	GetTaxonRangesIDZoomXYPngParamsLrankSuborder      GetTaxonRangesIDZoomXYPngParamsLrank = "suborder"
	GetTaxonRangesIDZoomXYPngParamsLrankSubphylum     GetTaxonRangesIDZoomXYPngParamsLrank = "subphylum"
	GetTaxonRangesIDZoomXYPngParamsLrankSubsection    GetTaxonRangesIDZoomXYPngParamsLrank = "subsection"
	GetTaxonRangesIDZoomXYPngParamsLrankSubspecies    GetTaxonRangesIDZoomXYPngParamsLrank = "subspecies"
	GetTaxonRangesIDZoomXYPngParamsLrankSubterclass   GetTaxonRangesIDZoomXYPngParamsLrank = "subterclass"
	GetTaxonRangesIDZoomXYPngParamsLrankSubtribe      GetTaxonRangesIDZoomXYPngParamsLrank = "subtribe"
	GetTaxonRangesIDZoomXYPngParamsLrankSuperclass    GetTaxonRangesIDZoomXYPngParamsLrank = "superclass"
	GetTaxonRangesIDZoomXYPngParamsLrankSuperfamily   GetTaxonRangesIDZoomXYPngParamsLrank = "superfamily"
	GetTaxonRangesIDZoomXYPngParamsLrankSuperorder    GetTaxonRangesIDZoomXYPngParamsLrank = "superorder"
	GetTaxonRangesIDZoomXYPngParamsLrankSupertribe    GetTaxonRangesIDZoomXYPngParamsLrank = "supertribe"
	GetTaxonRangesIDZoomXYPngParamsLrankTribe         GetTaxonRangesIDZoomXYPngParamsLrank = "tribe"
	GetTaxonRangesIDZoomXYPngParamsLrankVariety       GetTaxonRangesIDZoomXYPngParamsLrank = "variety"
	GetTaxonRangesIDZoomXYPngParamsLrankZoosection    GetTaxonRangesIDZoomXYPngParamsLrank = "zoosection"
	GetTaxonRangesIDZoomXYPngParamsLrankZoosubsection GetTaxonRangesIDZoomXYPngParamsLrank = "zoosubsection"
)

// Defines values for GetTaxonRangesIDZoomXYPngParamsIconicTaxa.
const (
	Actinopterygii GetTaxonRangesIDZoomXYPngParamsIconicTaxa = "Actinopterygii"
	Amphibia       GetTaxonRangesIDZoomXYPngParamsIconicTaxa = "Amphibia"
	Animalia       GetTaxonRangesIDZoomXYPngParamsIconicTaxa = "Animalia"
	Arachnida      GetTaxonRangesIDZoomXYPngParamsIconicTaxa = "Arachnida"
	Aves           GetTaxonRangesIDZoomXYPngParamsIconicTaxa = "Aves"
	Chromista      GetTaxonRangesIDZoomXYPngParamsIconicTaxa = "Chromista"
	Fungi          GetTaxonRangesIDZoomXYPngParamsIconicTaxa = "Fungi"
	Insecta        GetTaxonRangesIDZoomXYPngParamsIconicTaxa = "Insecta"
	Mammalia       GetTaxonRangesIDZoomXYPngParamsIconicTaxa = "Mammalia"
	Mollusca       GetTaxonRangesIDZoomXYPngParamsIconicTaxa = "Mollusca"
	Plantae        GetTaxonRangesIDZoomXYPngParamsIconicTaxa = "Plantae"
	Protozoa       GetTaxonRangesIDZoomXYPngParamsIconicTaxa = "Protozoa"
	Reptilia       GetTaxonRangesIDZoomXYPngParamsIconicTaxa = "Reptilia"
	Unknown        GetTaxonRangesIDZoomXYPngParamsIconicTaxa = "unknown"
)

// Defines values for GetTaxonRangesIDZoomXYPngParamsIdentifications.
const (
	MostAgree    GetTaxonRangesIDZoomXYPngParamsIdentifications = "most_agree"
	MostDisagree GetTaxonRangesIDZoomXYPngParamsIdentifications = "most_disagree"
	SomeAgree    GetTaxonRangesIDZoomXYPngParamsIdentifications = "some_agree"
)

// Defines values for GetTaxonRangesIDZoomXYPngParamsSearchOn.
const (
	GetTaxonRangesIDZoomXYPngParamsSearchOnDescription        GetTaxonRangesIDZoomXYPngParamsSearchOn = "description"
	GetTaxonRangesIDZoomXYPngParamsSearchOnNames              GetTaxonRangesIDZoomXYPngParamsSearchOn = "names"
	GetTaxonRangesIDZoomXYPngParamsSearchOnPlace              GetTaxonRangesIDZoomXYPngParamsSearchOn = "place"
	GetTaxonRangesIDZoomXYPngParamsSearchOnTags               GetTaxonRangesIDZoomXYPngParamsSearchOn = "tags"
	GetTaxonRangesIDZoomXYPngParamsSearchOnTaxonPageObsPhotos GetTaxonRangesIDZoomXYPngParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetTaxonRangesIDZoomXYPngParamsQualityGrade.
const (
	GetTaxonRangesIDZoomXYPngParamsQualityGradeCasual   GetTaxonRangesIDZoomXYPngParamsQualityGrade = "casual"
	GetTaxonRangesIDZoomXYPngParamsQualityGradeNeedsID  GetTaxonRangesIDZoomXYPngParamsQualityGrade = "needs_id"
	GetTaxonRangesIDZoomXYPngParamsQualityGradeResearch GetTaxonRangesIDZoomXYPngParamsQualityGrade = "research"
)

// Defines values for GetTaxonRangesIDZoomXYPngParamsOrder.
const (
	GetTaxonRangesIDZoomXYPngParamsOrderAsc  GetTaxonRangesIDZoomXYPngParamsOrder = "asc"
	GetTaxonRangesIDZoomXYPngParamsOrderDesc GetTaxonRangesIDZoomXYPngParamsOrder = "desc"
)

// Defines values for GetTaxonRangesIDZoomXYPngParamsOrderBy.
const (
	CreatedAt    GetTaxonRangesIDZoomXYPngParamsOrderBy = "created_at"
	GeoScore     GetTaxonRangesIDZoomXYPngParamsOrderBy = "geo_score"
	ID           GetTaxonRangesIDZoomXYPngParamsOrderBy = "id"
	ObservedOn   GetTaxonRangesIDZoomXYPngParamsOrderBy = "observed_on"
	Random       GetTaxonRangesIDZoomXYPngParamsOrderBy = "random"
	SpeciesGuess GetTaxonRangesIDZoomXYPngParamsOrderBy = "species_guess"
	UpdatedAt    GetTaxonRangesIDZoomXYPngParamsOrderBy = "updated_at"
	Votes        GetTaxonRangesIDZoomXYPngParamsOrderBy = "votes"
)

// Annotation defines model for Annotation.
type Annotation struct {
	ConcatenatedAttrVal   string             `json:"concatenated_attr_val,omitempty"`
	ControlledAttribute   ControlledTerm     `json:"controlled_attribute"`
	ControlledAttributeID int                `json:"controlled_attribute_id,omitempty"`
	ControlledValue       ControlledTerm     `json:"controlled_value"`
	ControlledValueID     int                `json:"controlled_value_id,omitempty"`
	User                  User               `json:"user"`
	UserID                int                `json:"user_id,omitempty"`
	UUID                  openapi_types.UUID `json:"uuid"`
	VoteScore             int                `json:"vote_score,omitempty"`
	Votes                 []Vote             `json:"votes,omitempty"`
}

// AnnotationsCreate defines model for AnnotationsCreate.
type AnnotationsCreate struct {
	ControlledAttributeID int                `json:"controlled_attribute_id"`
	ControlledValueID     int                `json:"controlled_value_id"`
	ResourceID            openapi_types.UUID `json:"resource_id"`
	ResourceType          string             `json:"resource_type"`
}

// Announcement defines model for Announcement.
type Announcement struct {
	Body        string    `json:"body,omitempty"`
	Clients     []string  `json:"clients,omitempty"`
	Dismissible bool      `json:"dismissible,omitempty"`
	End         time.Time `json:"end,omitempty"`
	ID          int       `json:"id"`
	Locales     []string  `json:"locales,omitempty"`
	Placement   string    `json:"placement,omitempty"`
	Start       time.Time `json:"start,omitempty"`
}

// AuthorizedApplication defines model for AuthorizedApplication.
type AuthorizedApplication struct {
	Application struct {
		ID   int    `json:"id"`
		Name string `json:"name,omitempty"`

		// Official Whether this application is controlled by iNaturalist itself
		Official bool `json:"official,omitempty"`
	} `json:"application"`
	CreatedAt time.Time `json:"created_at,omitempty"`

	// Scopes List of scopes granted to this application. `login` provides access to information required for logging into a third-party service like user ID, email address, profile pic, etc. `write` allows the application to post content to iNat as the user; `account_delete` allows the application to delete the user's iNat account.
	Scopes []AuthorizedApplicationScopes `json:"scopes,omitempty"`
}

// AuthorizedApplicationScopes defines model for AuthorizedApplication.Scopes.
type AuthorizedApplicationScopes string

// Comment defines model for Comment.
type Comment struct {
	Body             string      `json:"body,omitempty"`
	CreatedAt        time.Time   `json:"created_at,omitempty"`
	CreatedAtDetails DateDetails `json:"created_at_details"`
	CreatedAtUtc     time.Time   `json:"created_at_utc,omitempty"`
	Flags            []Flag      `json:"flags,omitempty"`
	Hidden           bool        `json:"hidden,omitempty"`
	HTML             string      `json:"html,omitempty"`

	// ID Unique auto-increment integer identifier.
	ID               int                `json:"id,omitempty"`
	ModeratorActions []ModeratorAction  `json:"moderator_actions,omitempty"`
	ParentID         int                `json:"parent_id"`
	ParentType       string             `json:"parent_type"`
	UpdatedAt        time.Time          `json:"updated_at,omitempty"`
	UpdatedAtDetails time.Time          `json:"updated_at_details,omitempty"`
	User             User               `json:"user"`
	UserID           int                `json:"user_id"`
	UUID             openapi_types.UUID `json:"uuid"`
}

// CommentsCreate defines model for CommentsCreate.
type CommentsCreate struct {
	Comment struct {
		Body string `json:"body"`

		// ParentID UUID of record being commented on
		ParentID openapi_types.UUID `json:"parent_id"`

		// ParentType Type of record being commented on
		ParentType CommentsCreateCommentParentType `json:"parent_type"`
	} `json:"comment"`
	Fields interface{} `json:"fields,omitempty"`
}

// CommentsCreateCommentParentType Type of record being commented on
type CommentsCreateCommentParentType string

// CommentsUpdate defines model for CommentsUpdate.
type CommentsUpdate struct {
	Comment struct {
		Body string `json:"body"`
	} `json:"comment"`
	Fields interface{} `json:"fields,omitempty"`
}

// CommonAncestor  Common ancestor taxon of some of the top results weighted by combined score.
//
//	If present, it generally has a much higher chance of being accurate (if not
//	precise), often by as much as 30-40 percentage points.
type CommonAncestor struct {
	// Score  Common ancestor scores are not directly comparable to the combined_score
	//     of results. Generally they are similar, factoring in both vision and spatial
	//     similarity, but are derived from a subset of the top results resulting in
	//     a value different than combined_score. Usually the common ancestor score
	//     will be above 70 as taxa need to have a high confidence in order to be
	//     considered a likely common ancestor.
	//
	Score float32 `json:"score,omitempty"`
	Taxon Taxon   `json:"taxon"`
}

// ConservationStatus defines model for ConservationStatus.
type ConservationStatus struct {
	Authority      string `json:"authority"`
	Description    string `json:"description"`
	Geoprivacy     string `json:"geoprivacy"`
	ID             int    `json:"id"`
	Iucn           int    `json:"iucn,omitempty"`
	IucnStatus     string `json:"iucn_status,omitempty"`
	IucnStatusCode string `json:"iucn_status_code,omitempty"`
	Place          Place  `json:"place"`
	PlaceID        int    `json:"place_id"`
	SourceID       int    `json:"source_id"`
	Status         string `json:"status,omitempty"`
	StatusName     string `json:"status_name,omitempty"`
	TaxonID        int    `json:"taxon_id,omitempty"`
	URL            string `json:"url"`
	UserID         int    `json:"user_id"`
}

// ControlledTerm defines model for ControlledTerm.
type ControlledTerm struct {
	Blocking         bool  `json:"blocking,omitempty"`
	ExceptedTaxonIds []int `json:"excepted_taxon_ids,omitempty"`

	// ID Unique auto-increment integer identifier.
	ID      int    `json:"id"`
	IsValue bool   `json:"is_value,omitempty"`
	Label   string `json:"label,omitempty"`
	Labels  []struct {
		Definition       string `json:"definition,omitempty"`
		ID               int    `json:"id,omitempty"`
		Label            string `json:"label,omitempty"`
		Locale           string `json:"locale,omitempty"`
		ValidWithinClade int    `json:"valid_within_clade"`
	} `json:"labels,omitempty"`
	Multivalued      bool               `json:"multivalued,omitempty"`
	OntologyURI      string             `json:"ontology_uri,omitempty"`
	TaxonIds         []int              `json:"taxon_ids,omitempty"`
	URI              string             `json:"uri,omitempty"`
	UUID             openapi_types.UUID `json:"uuid"`
	ValidWithinClade int                `json:"valid_within_clade"`
	Values           []ControlledTerm   `json:"values,omitempty"`
}

// DateDetails defines model for DateDetails.
type DateDetails struct {
	Date  string `json:"date"`
	Day   int    `json:"day"`
	Hour  int    `json:"hour"`
	Month int    `json:"month"`
	Week  int    `json:"week"`
	Year  int    `json:"year"`
}

// Error defines model for Error.
type Error struct {
	Errors []struct {
		ErrorCode string `json:"errorCode,omitempty"`
		From      string `json:"from"`
		Message   string `json:"message,omitempty"`
		Stack     string `json:"stack"`
	} `json:"errors,omitempty"`

	// Status Unique auto-increment integer identifier.
	Status string `json:"status,omitempty"`
}

// Flag defines model for Flag.
type Flag struct {
	Comment          string    `json:"comment"`
	CreatedAt        time.Time `json:"created_at,omitempty"`
	CreatedAtUtc     time.Time `json:"created_at_utc"`
	Flag             string    `json:"flag,omitempty"`
	FlaggableContent string    `json:"flaggable_content"`
	FlaggableID      int       `json:"flaggable_id"`
	FlaggableType    string    `json:"flaggable_type"`
	FlaggableUserID  int       `json:"flaggable_user_id"`

	// ID Unique auto-increment integer identifier.
	ID           int                `json:"id"`
	Resolved     bool               `json:"resolved,omitempty"`
	ResolvedAt   time.Time          `json:"resolved_at"`
	ResolverID   int                `json:"resolver_id"`
	UpdatedAt    time.Time          `json:"updated_at"`
	UpdatedAtUtc time.Time          `json:"updated_at_utc"`
	User         User               `json:"user"`
	UserID       int                `json:"user_id,omitempty"`
	UUID         openapi_types.UUID `json:"uuid"`
}

// FlagsCreate defines model for FlagsCreate.
type FlagsCreate struct {
	Fields interface{} `json:"fields,omitempty"`
	Flag   struct {
		Flag          string `json:"flag,omitempty"`
		FlaggableID   int    `json:"flaggable_id,omitempty"`
		FlaggableType string `json:"flaggable_type,omitempty"`
	} `json:"flag,omitempty"`
	FlagExplanation string `json:"flag_explanation"`
}

// FlagsUpdate defines model for FlagsUpdate.
type FlagsUpdate struct {
	Fields interface{} `json:"fields,omitempty"`
	Flag   struct {
		Resolved bool `json:"resolved,omitempty"`
	} `json:"flag,omitempty"`
}

// Identification defines model for Identification.
type Identification struct {
	Body             string      `json:"body"`
	Category         string      `json:"category"`
	CreatedAt        time.Time   `json:"created_at,omitempty"`
	CreatedAtDetails DateDetails `json:"created_at_details"`
	Current          bool        `json:"current,omitempty"`
	Disagreement     bool        `json:"disagreement"`
	Flags            []Flag      `json:"flags,omitempty"`
	Hidden           bool        `json:"hidden,omitempty"`

	// ID Unique auto-increment integer identifier.
	ID                         int               `json:"id"`
	ModeratorActions           []ModeratorAction `json:"moderator_actions,omitempty"`
	ObservationID              int               `json:"observation_id,omitempty"`
	OwnObservation             bool              `json:"own_observation,omitempty"`
	PreviousObservationTaxon   Taxon             `json:"previous_observation_taxon"`
	PreviousObservationTaxonID int               `json:"previous_observation_taxon_id"`
	Spam                       bool              `json:"spam,omitempty"`
	Taxon                      Taxon             `json:"taxon"`
	TaxonChange                struct {
		ID   int    `json:"id"`
		Type string `json:"type"`
	} `json:"taxon_change"`
	TaxonChangeID   int                `json:"taxon_change_id"`
	TaxonChangeType string             `json:"taxon_change_type"`
	TaxonID         int                `json:"taxon_id,omitempty"`
	UpdatedAt       time.Time          `json:"updated_at,omitempty"`
	User            User               `json:"user"`
	UserID          int                `json:"user_id,omitempty"`
	UUID            openapi_types.UUID `json:"uuid,omitempty"`
	Vision          bool               `json:"vision,omitempty"`
}

// IdentificationsCreate defines model for IdentificationsCreate.
type IdentificationsCreate struct {
	Fields         interface{} `json:"fields,omitempty"`
	Identification struct {
		Body          string             `json:"body,omitempty"`
		Disagreement  bool               `json:"disagreement,omitempty"`
		ObservationID openapi_types.UUID `json:"observation_id"`
		TaxonID       int                `json:"taxon_id"`
		Vision        bool               `json:"vision,omitempty"`
	} `json:"identification"`
}

// IdentificationsUpdate defines model for IdentificationsUpdate.
type IdentificationsUpdate struct {
	Fields         interface{} `json:"fields,omitempty"`
	Identification struct {
		Body string `json:"body,omitempty"`

		// Current Setting to false means the identification is withdrawn
		Current bool `json:"current,omitempty"`
	} `json:"identification"`
}

// List defines model for List.
type List struct {
	// ID Unique auto-increment integer identifier.
	ID    int    `json:"id"`
	Title string `json:"title"`
}

// ListedTaxon defines model for ListedTaxon.
type ListedTaxon struct {
	CommentsCount int    `json:"comments_count,omitempty"`
	CreatedAt     string `json:"created_at,omitempty"`
	Description   string `json:"description"`

	// EstablishmentMeans How this taxon became established in this place
	EstablishmentMeans ListedTaxonEstablishmentMeans `json:"establishment_means,omitempty"`

	// EstablishmentMeansDescription Localized description of the establishment means
	EstablishmentMeansDescription string `json:"establishment_means_description,omitempty"`

	// EstablishmentMeansLabel Localized version of the establishment means
	EstablishmentMeansLabel string `json:"establishment_means_label,omitempty"`

	// ID Unique auto-increment integer identifier.
	ID int `json:"id"`

	// ManuallyAdded Whether this taxon was added to this list by a person or not
	ManuallyAdded     bool `json:"manually_added"`
	ObservationsCount int  `json:"observations_count,omitempty"`

	// OccurrenceStatusLevel Assessment of occurrence frequency in this place. 60 = present, 50 = common, 40 = uncommon, 30 = irregular, 20 = doubtful, 10 = absent
	OccurrenceStatusLevel int   `json:"occurrence_status_level"`
	Place                 Place `json:"place"`

	// PrimaryListing Whether or not this is the primary listing for this taxon in this place (places can have multiple checklists that contain the same taxa)
	PrimaryListing bool   `json:"primary_listing,omitempty"`
	UpdatedAt      string `json:"updated_at,omitempty"`
}

// ListedTaxonEstablishmentMeans How this taxon became established in this place
type ListedTaxonEstablishmentMeans string

// Message defines model for Message.
type Message struct {
	Body          string    `json:"body,omitempty"`
	CommentsCount int       `json:"comments_count,omitempty"`
	CreatedAt     time.Time `json:"created_at,omitempty"`
	FromUser      User      `json:"from_user"`

	// ID Unique auto-increment integer identifier.
	ID        int       `json:"id"`
	ReadAt    time.Time `json:"read_at,omitempty"`
	Subject   string    `json:"subject,omitempty"`
	ThreadID  int       `json:"thread_id,omitempty"`
	ToUser    User      `json:"to_user"`
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	UserID    int       `json:"user_id,omitempty"`
}

// MessagesCreate defines model for MessagesCreate.
type MessagesCreate struct {
	Fields  interface{} `json:"fields,omitempty"`
	Message struct {
		Body     string `json:"body"`
		Subject  string `json:"subject,omitempty"`
		ThreadID int    `json:"thread_id,omitempty"`
		ToUserID int    `json:"to_user_id,omitempty"`
	} `json:"message,omitempty"`
}

// ModeratorAction defines model for ModeratorAction.
type ModeratorAction struct {
	Action           string      `json:"action,omitempty"`
	CreatedAt        string      `json:"created_at,omitempty"`
	CreatedAtDetails DateDetails `json:"created_at_details"`

	// ID Unique auto-increment integer identifier.
	ID      int    `json:"id"`
	Private bool   `json:"private,omitempty"`
	Reason  string `json:"reason,omitempty"`
	User    User   `json:"user"`
}

// Observation defines model for Observation.
type Observation struct {
	Annotations []Annotation `json:"annotations,omitempty"`
	Application struct {
		Icon string `json:"icon"`
		ID   int    `json:"id"`
		Name string `json:"name,omitempty"`
		URL  string `json:"url,omitempty"`
	} `json:"application,omitempty"`
	CachedVotesTotal       int          `json:"cached_votes_total,omitempty"`
	Captive                bool         `json:"captive,omitempty"`
	Comments               []Comment    `json:"comments,omitempty"`
	CommentsCount          int          `json:"comments_count,omitempty"`
	CommunityTaxon         Taxon        `json:"community_taxon"`
	CommunityTaxonID       int          `json:"community_taxon_id"`
	ContextGeoprivacy      string       `json:"context_geoprivacy"`
	ContextTaxonGeoprivacy string       `json:"context_taxon_geoprivacy"`
	ContextUserGeoprivacy  string       `json:"context_user_geoprivacy"`
	CreatedAt              string       `json:"created_at,omitempty"`
	CreatedAtDetails       DateDetails  `json:"created_at_details"`
	CreatedTimeZone        string       `json:"created_time_zone,omitempty"`
	Description            string       `json:"description"`
	Faves                  []Vote       `json:"faves,omitempty"`
	FavesCount             int          `json:"faves_count,omitempty"`
	Flags                  []Flag       `json:"flags,omitempty"`
	Geojson                PointGeoJSON `json:"geojson"`
	Geoprivacy             string       `json:"geoprivacy"`

	// ID Unique auto-increment integer identifier.
	ID                          int              `json:"id"`
	IDPlease                    bool             `json:"id_please,omitempty"`
	IdentTaxonIds               []int            `json:"ident_taxon_ids,omitempty"`
	Identifications             []Identification `json:"identifications,omitempty"`
	IdentificationsCount        int              `json:"identifications_count,omitempty"`
	IdentificationsMostAgree    bool             `json:"identifications_most_agree,omitempty"`
	IdentificationsMostDisagree bool             `json:"identifications_most_disagree,omitempty"`
	IdentificationsSomeAgree    bool             `json:"identifications_some_agree,omitempty"`
	LicenseCode                 string           `json:"license_code"`
	Location                    string           `json:"location"`
	MapScale                    int              `json:"map_scale"`
	Mappable                    bool             `json:"mappable,omitempty"`
	NonOwnerIds                 []Identification `json:"non_owner_ids,omitempty"`
	NonTraditionalProjects      []struct {
		CurrentUserIsMember bool    `json:"current_user_is_member,omitempty"`
		Project             Project `json:"project"`
		ProjectUser         struct {
			PrefersCuratorCoordinateAccessFor string `json:"prefers_curator_coordinate_access_for,omitempty"`
			Role                              string `json:"role,omitempty"`
		} `json:"projectUser,omitempty"`
	} `json:"non_traditional_projects,omitempty"`
	NumIdentificationAgreements    int                     `json:"num_identification_agreements,omitempty"`
	NumIdentificationDisagreements int                     `json:"num_identification_disagreements,omitempty"`
	OauthApplicationID             int                     `json:"oauth_application_id"`
	Obscured                       bool                    `json:"obscured,omitempty"`
	ObservationPhotos              []ObservationPhoto      `json:"observation_photos,omitempty"`
	ObservationSounds              []ObservationSound      `json:"observation_sounds,omitempty"`
	ObservedOn                     string                  `json:"observed_on"`
	ObservedOnDetails              DateDetails             `json:"observed_on_details"`
	ObservedOnString               string                  `json:"observed_on_string"`
	ObservedTimeZone               string                  `json:"observed_time_zone"`
	Ofvs                           []ObservationFieldValue `json:"ofvs,omitempty"`
	OutOfRange                     bool                    `json:"out_of_range"`
	Outlinks                       []struct {
		Source string `json:"source,omitempty"`
		URL    string `json:"url,omitempty"`
	} `json:"outlinks,omitempty"`
	OwnersIdentificationFromVision bool    `json:"owners_identification_from_vision"`
	Photos                         []Photo `json:"photos,omitempty"`
	PlaceGuess                     string  `json:"place_guess"`
	PlaceIds                       []int   `json:"place_ids,omitempty"`
	PositionalAccuracy             int     `json:"positional_accuracy"`
	Preferences                    struct {
		AutoObscuration       bool `json:"auto_obscuration,omitempty"`
		PrefersCommunityTaxon bool `json:"prefers_community_taxon"`
	} `json:"preferences,omitempty"`
	PrivateGeojson             PointGeoJSON         `json:"private_geojson"`
	PrivateLocation            string               `json:"private_location"`
	PrivatePlaceGuess          string               `json:"private_place_guess"`
	ProjectIds                 []int                `json:"project_ids,omitempty"`
	ProjectIdsWithCuratorID    []int                `json:"project_ids_with_curator_id,omitempty"`
	ProjectIdsWithoutCuratorID []int                `json:"project_ids_without_curator_id,omitempty"`
	ProjectObservations        []ProjectObservation `json:"project_observations,omitempty"`
	PublicPositionalAccuracy   int                  `json:"public_positional_accuracy"`
	QualityGrade               string               `json:"quality_grade,omitempty"`
	QualityMetrics             []QualityMetric      `json:"quality_metrics,omitempty"`
	ReviewedBy                 []int                `json:"reviewed_by,omitempty"`
	SiteID                     int                  `json:"site_id"`
	Sounds                     []Sound              `json:"sounds,omitempty"`
	Spam                       bool                 `json:"spam,omitempty"`
	SpeciesGuess               string               `json:"species_guess"`
	Tags                       []string             `json:"tags,omitempty"`
	Taxon                      Taxon                `json:"taxon"`
	TaxonGeoprivacy            string               `json:"taxon_geoprivacy"`
	TimeObservedAt             string               `json:"time_observed_at"`
	TimeZoneOffset             string               `json:"time_zone_offset,omitempty"`
	UpdatedAt                  string               `json:"updated_at,omitempty"`
	URI                        string               `json:"uri,omitempty"`
	User                       User                 `json:"user"`
	UUID                       openapi_types.UUID   `json:"uuid"`

	// ViewerTrustedByObserver Observer trusts the authenticated user with access to hidden coordinates
	ViewerTrustedByObserver bool   `json:"viewer_trusted_by_observer"`
	Votes                   []Vote `json:"votes,omitempty"`
}

// ObservationField defines model for ObservationField.
type ObservationField struct {
	AllowedValues           string `json:"allowed_values"`
	Datatype                string `json:"datatype,omitempty"`
	Description             string `json:"description"`
	DescriptionAutocomplete string `json:"description_autocomplete"`

	// ID Unique auto-increment integer identifier.
	ID               int                `json:"id"`
	Name             string             `json:"name,omitempty"`
	NameAutocomplete string             `json:"name_autocomplete,omitempty"`
	UsersCount       int                `json:"users_count"`
	UUID             openapi_types.UUID `json:"uuid,omitempty"`
	ValuesCount      int                `json:"values_count"`
}

// ObservationFieldValue defines model for ObservationFieldValue.
type ObservationFieldValue struct {
	Datatype string `json:"datatype,omitempty"`
	FieldID  int    `json:"field_id,omitempty"`

	// ID Unique auto-increment integer identifier.
	ID               int                `json:"id,omitempty"`
	Name             string             `json:"name,omitempty"`
	NameCi           string             `json:"name_ci,omitempty"`
	ObservationField ObservationField   `json:"observation_field,omitempty"`
	Taxon            Taxon              `json:"taxon"`
	TaxonID          string             `json:"taxon_id,omitempty"`
	User             User               `json:"user"`
	UserID           int                `json:"user_id,omitempty"`
	UUID             openapi_types.UUID `json:"uuid,omitempty"`
	Value            string             `json:"value,omitempty"`
	ValueCi          string             `json:"value_ci,omitempty"`
}

// ObservationFieldValuesCreate defines model for ObservationFieldValuesCreate.
type ObservationFieldValuesCreate struct {
	Fields                interface{} `json:"fields,omitempty"`
	ObservationFieldValue struct {
		ObservationFieldID int                                                      `json:"observation_field_id,omitempty"`
		ObservationID      openapi_types.UUID                                       `json:"observation_id"`
		Value              ObservationFieldValuesCreate_ObservationFieldValue_Value `json:"value,omitempty"`
	} `json:"observation_field_value,omitempty"`
}

// ObservationFieldValuesCreateObservationFieldValueValue0 defines model for .
type ObservationFieldValuesCreateObservationFieldValueValue0 = string

// ObservationFieldValuesCreateObservationFieldValueValue1 defines model for .
type ObservationFieldValuesCreateObservationFieldValueValue1 = float32

// ObservationFieldValuesCreate_ObservationFieldValue_Value defines model for ObservationFieldValuesCreate.ObservationFieldValue.Value.
type ObservationFieldValuesCreate_ObservationFieldValue_Value struct {
	union json.RawMessage
}

// ObservationPhoto defines model for ObservationPhoto.
type ObservationPhoto struct {
	// ID Unique auto-increment integer identifier.
	ID       int                `json:"id"`
	Photo    Photo              `json:"photo"`
	Position int                `json:"position"`
	UUID     openapi_types.UUID `json:"uuid,omitempty"`
}

// ObservationPhotosCreate description inside of schema file
type ObservationPhotosCreate struct {
	Fields           interface{} `json:"fields,omitempty"`
	ObservationPhoto struct {
		// ObservationID UUID for the existing observation
		ObservationID openapi_types.UUID `json:"observation_id"`

		// PhotoID Sequential ID for the existing photo
		PhotoID  int `json:"photo_id,omitempty"`
		Position int `json:"position,omitempty"`

		// UUID New UUID for the photo, helps prevent duplication in poor network conditions
		UUID openapi_types.UUID `json:"uuid,omitempty"`
	} `json:"observation_photo,omitempty"`
}

// ObservationPhotosCreateMultipart defines model for ObservationPhotosCreateMultipart.
type ObservationPhotosCreateMultipart struct {
	Fields interface{}        `json:"fields,omitempty"`
	File   openapi_types.File `json:"file"`

	// ObservationPhotoObservationID UUID for the existing observation
	ObservationPhotoObservationID openapi_types.UUID `json:"observation_photo[observation_id]"`
	ObservationPhotoPosition      int                `json:"observation_photo[position],omitempty"`

	// ObservationPhotoUUID New UUID for the photo, helps prevent duplication in poor network conditions
	ObservationPhotoUUID openapi_types.UUID `json:"observation_photo[uuid],omitempty"`
}

// ObservationPhotosUpdate defines model for ObservationPhotosUpdate.
type ObservationPhotosUpdate struct {
	Fields           interface{} `json:"fields,omitempty"`
	ObservationPhoto struct {
		ObservationID openapi_types.UUID `json:"observation_id"`
		Position      int                `json:"position,omitempty"`
	} `json:"observation_photo,omitempty"`
}

// ObservationSound defines model for ObservationSound.
type ObservationSound struct {
	// ID Unique auto-increment integer identifier.
	ID       int                `json:"id"`
	Position int                `json:"position,omitempty"`
	Sound    Sound              `json:"sound"`
	UUID     openapi_types.UUID `json:"uuid,omitempty"`
}

// ObservationSoundsCreate defines model for ObservationSoundsCreate.
type ObservationSoundsCreate struct {
	Fields           interface{} `json:"fields,omitempty"`
	ObservationSound struct {
		ObservationID openapi_types.UUID `json:"observation_id"`
		SoundID       int                `json:"sound_id,omitempty"`
	} `json:"observation_sound,omitempty"`
}

// ObservationSoundsCreateMultipart defines model for ObservationSoundsCreateMultipart.
type ObservationSoundsCreateMultipart struct {
	Fields                        interface{}        `json:"fields,omitempty"`
	File                          openapi_types.File `json:"file"`
	ObservationSoundObservationID openapi_types.UUID `json:"observation_sound[observation_id]"`
}

// ObservationSoundsUpdate defines model for ObservationSoundsUpdate.
type ObservationSoundsUpdate struct {
	Fields           interface{} `json:"fields,omitempty"`
	ObservationSound struct {
		ObservationID openapi_types.UUID `json:"observation_id"`
	} `json:"observation_sound,omitempty"`
}

// ObservationsCreate defines model for ObservationsCreate.
type ObservationsCreate struct {
	Fields      interface{} `json:"fields,omitempty"`
	Observation struct {
		CaptiveFlag                      bool    `json:"captive_flag,omitempty"`
		CoordinateSystem                 string  `json:"coordinate_system,omitempty"`
		Description                      string  `json:"description,omitempty"`
		GeoX                             float32 `json:"geo_x,omitempty"`
		GeoY                             float32 `json:"geo_y,omitempty"`
		Geoprivacy                       string  `json:"geoprivacy,omitempty"`
		Latitude                         float32 `json:"latitude,omitempty"`
		License                          string  `json:"license,omitempty"`
		LocationIsExact                  bool    `json:"location_is_exact,omitempty"`
		Longitude                        float32 `json:"longitude,omitempty"`
		MakeLicenseDefault               bool    `json:"make_license_default,omitempty"`
		MakeLicensesSame                 bool    `json:"make_licenses_same,omitempty"`
		MapScale                         int     `json:"map_scale,omitempty"`
		ObservationFieldValuesAttributes []struct {
			ObservationFieldID int         `json:"observation_field_id"`
			Value              interface{} `json:"value"`
		} `json:"observation_field_values_attributes,omitempty"`
		ObservedOnString               string  `json:"observed_on_string,omitempty"`
		OwnersIdentificationFromVision bool    `json:"owners_identification_from_vision,omitempty"`
		PlaceGuess                     string  `json:"place_guess,omitempty"`
		PositionalAccuracy             float32 `json:"positional_accuracy,omitempty"`
		PositioningDevice              string  `json:"positioning_device,omitempty"`
		PositioningMethod              string  `json:"positioning_method,omitempty"`
		PrefersCommunityTaxon          bool    `json:"prefers_community_taxon,omitempty"`
		ProjectID                      int     `json:"project_id,omitempty"`
		SiteID                         int     `json:"site_id,omitempty"`

		// SpeciesGuess The name of the organism observed. If the taxon ID is absent, iNat will try to choose a single taxon based on this string, but it may fail if there's some taxonomic amgiguity.
		SpeciesGuess string             `json:"species_guess,omitempty"`
		TagList      string             `json:"tag_list,omitempty"`
		TaxonID      float32            `json:"taxon_id,omitempty"`
		TaxonName    float32            `json:"taxon_name,omitempty"`
		TimeZone     string             `json:"time_zone,omitempty"`
		UUID         openapi_types.UUID `json:"uuid,omitempty"`
	} `json:"observation,omitempty"`
}

// ObservationsUpdate defines model for ObservationsUpdate.
type ObservationsUpdate struct {
	Fields       interface{} `json:"fields,omitempty"`
	IgnorePhotos bool        `json:"ignore_photos,omitempty"`
	Observation  struct {
		CaptiveFlag                      bool    `json:"captive_flag,omitempty"`
		CoordinateSystem                 string  `json:"coordinate_system,omitempty"`
		Description                      string  `json:"description"`
		GeoX                             float32 `json:"geo_x"`
		GeoY                             float32 `json:"geo_y"`
		Geoprivacy                       string  `json:"geoprivacy,omitempty"`
		Latitude                         float32 `json:"latitude"`
		License                          string  `json:"license,omitempty"`
		LocationIsExact                  bool    `json:"location_is_exact,omitempty"`
		Longitude                        float32 `json:"longitude"`
		MakeLicenseDefault               bool    `json:"make_license_default,omitempty"`
		MakeLicensesSame                 bool    `json:"make_licenses_same,omitempty"`
		MapScale                         int     `json:"map_scale,omitempty"`
		ObservationFieldValuesAttributes []struct {
			ObservationFieldID int         `json:"observation_field_id"`
			Value              interface{} `json:"value"`
		} `json:"observation_field_values_attributes,omitempty"`
		ObservedOnString               string  `json:"observed_on_string"`
		OwnersIdentificationFromVision bool    `json:"owners_identification_from_vision,omitempty"`
		PlaceGuess                     string  `json:"place_guess"`
		PositionalAccuracy             float32 `json:"positional_accuracy"`
		PositioningDevice              string  `json:"positioning_device"`
		PositioningMethod              string  `json:"positioning_method"`
		PrefersCommunityTaxon          bool    `json:"prefers_community_taxon,omitempty"`
		ProjectID                      int     `json:"project_id,omitempty"`
		SiteID                         int     `json:"site_id,omitempty"`

		// SpeciesGuess The name of the organism observed. If the taxon ID is absent, iNat will try to choose a single taxon based on this string, but it may fail if there's some taxonomic amgiguity.
		SpeciesGuess string             `json:"species_guess"`
		TagList      string             `json:"tag_list"`
		TaxonID      float32            `json:"taxon_id,omitempty"`
		TaxonName    float32            `json:"taxon_name,omitempty"`
		TimeZone     string             `json:"time_zone,omitempty"`
		UUID         openapi_types.UUID `json:"uuid,omitempty"`
	} `json:"observation,omitempty"`
}

// Photo defines model for Photo.
type Photo struct {
	Attribution     string `json:"attribution,omitempty"`
	AttributionName string `json:"attribution_name"`
	Flags           []Flag `json:"flags,omitempty"`
	Hidden          bool   `json:"hidden,omitempty"`

	// ID Unique auto-increment integer identifier.
	ID                 int               `json:"id"`
	LargeURL           string            `json:"large_url"`
	LicenseCode        string            `json:"license_code"`
	MediumURL          string            `json:"medium_url"`
	ModeratorActions   []ModeratorAction `json:"moderator_actions,omitempty"`
	NativePageURL      string            `json:"native_page_url"`
	NativePhotoID      string            `json:"native_photo_id"`
	OriginalDimensions struct {
		Height int `json:"height"`
		Width  int `json:"width"`
	} `json:"original_dimensions"`
	OriginalURL string `json:"original_url"`
	SmallURL    string `json:"small_url"`
	SquareURL   string `json:"square_url"`
	Type        string `json:"type,omitempty"`
	URL         string `json:"url"`
}

// PhotosCreate defines model for PhotosCreate.
type PhotosCreate struct {
	Fields interface{}        `json:"fields,omitempty"`
	File   openapi_types.File `json:"file"`
	UUID   openapi_types.UUID `json:"uuid,omitempty"`
}

// Place defines model for Place.
type Place struct {
	AdminLevel              int            `json:"admin_level"`
	AncestorPlaceIds        []int          `json:"ancestor_place_ids"`
	BboxArea                float32        `json:"bbox_area"`
	BoundingBoxGeojson      PolygonGeoJSON `json:"bounding_box_geojson"`
	DisplayName             string         `json:"display_name"`
	DisplayNameAutocomplete string         `json:"display_name_autocomplete"`
	GeometryGeojson         PolygonGeoJSON `json:"geometry_geojson"`

	// ID Unique auto-increment integer identifier.
	ID                  int                `json:"id"`
	Location            string             `json:"location"`
	MatchedTerm         string             `json:"matched_term"`
	Name                string             `json:"name,omitempty"`
	ObservationsCount   int                `json:"observations_count,omitempty"`
	PlaceType           int                `json:"place_type"`
	PointGeojson        PointGeoJSON       `json:"point_geojson"`
	Slug                string             `json:"slug"`
	UniversalSearchRank int                `json:"universal_search_rank"`
	User                User               `json:"user"`
	UUID                openapi_types.UUID `json:"uuid,omitempty"`
	WithoutCheckList    bool               `json:"without_check_list"`
}

// PointGeoJSON defines model for PointGeoJson.
type PointGeoJSON struct {
	Coordinates []float32 `json:"coordinates"`
	Type        string    `json:"type"`
}

// PolygonGeoJSON defines model for PolygonGeoJson.
type PolygonGeoJSON struct {
	Coordinates PolygonGeoJSON_Coordinates `json:"coordinates"`
	Type        string                     `json:"type"`
}

// PolygonGeoJSONCoordinates0 defines model for .
type PolygonGeoJSONCoordinates0 = [][][][]float32

// PolygonGeoJSONCoordinates1 defines model for .
type PolygonGeoJSONCoordinates1 = [][][]float32

// PolygonGeoJSON_Coordinates defines model for PolygonGeoJSON.Coordinates.
type PolygonGeoJSON_Coordinates struct {
	union json.RawMessage
}

// PrivateUser defines model for PrivateUser.
type PrivateUser struct {
	ActivityCount              int       `json:"activity_count,omitempty"`
	AnnotatedObservationsCount int       `json:"annotated_observations_count,omitempty"`
	BlockedUserIds             []int     `json:"blocked_user_ids"`
	ConfirmationSentAt         time.Time `json:"confirmation_sent_at"`
	ConfirmedAt                time.Time `json:"confirmed_at"`
	CreatedAt                  time.Time `json:"created_at,omitempty"`
	DataTransferConsent        bool      `json:"data_transfer_consent"`
	Description                string    `json:"description"`
	Email                      string    `json:"email"`

	// FavedProjectIds Ordered list of IDs of projects the user has faved
	FavedProjectIds []float32 `json:"faved_project_ids,omitempty"`
	Icon            string    `json:"icon"`
	IconURL         string    `json:"icon_url"`

	// ID Unique auto-increment integer identifier.
	ID                   int       `json:"id"`
	IdentificationsCount int       `json:"identifications_count,omitempty"`
	JournalPostsCount    int       `json:"journal_posts_count,omitempty"`
	LastActive           time.Time `json:"last_active,omitempty"`
	Locale               string    `json:"locale"`
	Login                string    `json:"login,omitempty"`
	MonthlySupporter     bool      `json:"monthly_supporter"`
	MutedUserIds         []int     `json:"muted_user_ids"`
	Name                 string    `json:"name"`
	ObservationsCount    int       `json:"observations_count,omitempty"`
	Orcid                string    `json:"orcid"`
	PiConsent            bool      `json:"pi_consent"`
	PlaceID              int       `json:"place_id"`
	Preferences          struct {
		// PrefersCommonNames Prefers to view common names
		PrefersCommonNames   bool `json:"prefers_common_names,omitempty"`
		PrefersCommunityTaxa bool `json:"prefers_community_taxa,omitempty"`

		// PrefersObservationFieldsBy Allows this kind of user to add observation field values to their observations
		PrefersObservationFieldsBy string `json:"prefers_observation_fields_by,omitempty"`

		// PrefersProjectAdditionBy Allows this kind of user to add their observations to projects
		PrefersProjectAdditionBy string `json:"prefers_project_addition_by,omitempty"`

		// PrefersScientificNameFirst Prefers to view scientific names before common names
		PrefersScientificNameFirst bool `json:"prefers_scientific_name_first,omitempty"`
	} `json:"preferences,omitempty"`
	PreferredObservationFieldsBy                        string              `json:"preferred_observation_fields_by"`
	PreferredObservationLicense                         string              `json:"preferred_observation_license"`
	PreferredPhotoLicense                               string              `json:"preferred_photo_license"`
	PreferredProjectAdditionBy                          string              `json:"preferred_project_addition_by"`
	PreferredSoundLicense                               string              `json:"preferred_sound_license"`
	PrefersAutomaticTaxonomicChanges                    bool                `json:"prefers_automatic_taxonomic_changes"`
	PrefersCommentEmailNotification                     bool                `json:"prefers_comment_email_notification"`
	PrefersCommonNames                                  bool                `json:"prefers_common_names"`
	PrefersCommunityTaxa                                bool                `json:"prefers_community_taxa"`
	PrefersIdentificationEmailNotification              bool                `json:"prefers_identification_email_notification"`
	PrefersInfraspeciesIdentificationNotifications      bool                `json:"prefers_infraspecies_identification_notifications"`
	PrefersMentionEmailNotification                     bool                `json:"prefers_mention_email_notification"`
	PrefersMessageEmailNotification                     bool                `json:"prefers_message_email_notification"`
	PrefersMonthlySupporterBadge                        bool                `json:"prefers_monthly_supporter_badge"`
	PrefersNoEmail                                      bool                `json:"prefers_no_email"`
	PrefersNoTracking                                   bool                `json:"prefers_no_tracking"`
	PrefersNonDisagreeingIdentificationNotifications    bool                `json:"prefers_non_disagreeing_identification_notifications"`
	PrefersProjectAddedYourObservationEmailNotification bool                `json:"prefers_project_added_your_observation_email_notification"`
	PrefersProjectCuratorChangeEmailNotification        bool                `json:"prefers_project_curator_change_email_notification"`
	PrefersProjectJournalPostEmailNotification          bool                `json:"prefers_project_journal_post_email_notification"`
	PrefersReceiveMentions                              bool                `json:"prefers_receive_mentions"`
	PrefersRedundantIdentificationNotifications         bool                `json:"prefers_redundant_identification_notifications"`
	PrefersScientificNameFirst                          bool                `json:"prefers_scientific_name_first"`
	PrefersTaxonChangeEmailNotification                 bool                `json:"prefers_taxon_change_email_notification"`
	PrefersTaxonOrPlaceObservationEmailNotification     bool                `json:"prefers_taxon_or_place_observation_email_notification"`
	PrefersUserObservationEmailNotification             bool                `json:"prefers_user_observation_email_notification"`
	Privileges                                          []string            `json:"privileges"`
	Roles                                               []string            `json:"roles,omitempty"`
	SearchPlaceID                                       int                 `json:"search_place_id"`
	Site                                                Site                `json:"site"`
	SiteID                                              int                 `json:"site_id"`
	Spam                                                bool                `json:"spam,omitempty"`
	SpeciesCount                                        int                 `json:"species_count,omitempty"`
	Suspended                                           bool                `json:"suspended,omitempty"`
	TaxonNamePriorities                                 []TaxonNamePriority `json:"taxon_name_priorities,omitempty"`
	TimeZone                                            string              `json:"time_zone"`
	UnconfirmedEmail                                    string              `json:"unconfirmed_email"`
	UniversalSearchRank                                 int                 `json:"universal_search_rank,omitempty"`
	UpdatedAt                                           time.Time           `json:"updated_at,omitempty"`
	UUID                                                openapi_types.UUID  `json:"uuid,omitempty"`
}

// Project defines model for Project.
type Project struct {
	Admins []struct {
		ID        int    `json:"id,omitempty"`
		ProjectID int    `json:"project_id,omitempty"`
		Role      string `json:"role,omitempty"`
		User      User   `json:"user"`
		UserID    int    `json:"user_id,omitempty"`
	} `json:"admins,omitempty"`
	BannerColor          string `json:"banner_color"`
	CreatedAt            string `json:"created_at,omitempty"`
	DelegatedProjectID   int    `json:"delegated_project_id"`
	Description          string `json:"description"`
	Flags                []Flag `json:"flags,omitempty"`
	HeaderImageContain   bool   `json:"header_image_contain,omitempty"`
	HeaderImageFileName  string `json:"header_image_file_name"`
	HeaderImageURL       string `json:"header_image_url"`
	HideTitle            bool   `json:"hide_title,omitempty"`
	HideUmbrellaMapFlags bool   `json:"hide_umbrella_map_flags,omitempty"`
	Icon                 string `json:"icon"`
	IconFileName         string `json:"icon_file_name"`

	// ID Unique auto-increment integer identifier.
	ID                               int       `json:"id"`
	IsDelegatedUmbrella              bool      `json:"is_delegated_umbrella"`
	IsUmbrella                       bool      `json:"is_umbrella,omitempty"`
	Latitude                         string    `json:"latitude,omitempty"`
	Location                         string    `json:"location"`
	Longitude                        string    `json:"longitude,omitempty"`
	ObservationRequirementsUpdatedAt time.Time `json:"observation_requirements_updated_at"`
	PlaceID                          int       `json:"place_id"`
	PrefersUserTrust                 bool      `json:"prefers_user_trust"`
	ProjectObservationFields         []struct {
		ID               int              `json:"id"`
		ObservationField ObservationField `json:"observation_field,omitempty"`
		Position         int              `json:"position,omitempty"`
		Required         bool             `json:"required"`
	} `json:"project_observation_fields,omitempty"`
	ProjectObservationRules []struct {
		ID          int     `json:"id"`
		OperandID   int     `json:"operand_id"`
		OperandType string  `json:"operand_type"`
		Operator    string  `json:"operator,omitempty"`
		Place       Place   `json:"place"`
		Project     Project `json:"project"`
		Taxon       Taxon   `json:"taxon"`
		User        User    `json:"user"`
	} `json:"project_observation_rules,omitempty"`
	ProjectType     string `json:"project_type"`
	RulePreferences []struct {
		// Field Observation attribute this rule assesses
		Field string `json:"field,omitempty"`

		// Value Required observation attribute value(s)
		Value interface{} `json:"value,omitempty"`
	} `json:"rule_preferences,omitempty"`
	SearchParameters []struct {
		Field string `json:"field,omitempty"`

		// Value TODO: values can be single values or arrays
		Value     interface{} `json:"value,omitempty"`
		ValueBool bool        `json:"value_bool,omitempty"`
		ValueDate []string    `json:"value_date,omitempty"`

		// ValueKeyword TODO: values can be single values or arrays
		ValueKeyword interface{}                          `json:"value_keyword,omitempty"`
		ValueNumber  Project_SearchParameters_ValueNumber `json:"value_number,omitempty"`
	} `json:"search_parameters,omitempty"`

	// SiteFeatures TODO: fix this
	SiteFeatures []struct {
		FeaturedAt time.Time `json:"featured_at,omitempty"`
		Noteworthy bool      `json:"noteworthy,omitempty"`
		SiteID     int       `json:"site_id,omitempty"`
	} `json:"site_features"`
	Slug      string `json:"slug,omitempty"`
	Terms     string `json:"terms"`
	Title     string `json:"title,omitempty"`
	UpdatedAt string `json:"updated_at,omitempty"`
	User      User   `json:"user"`
	UserID    int    `json:"user_id,omitempty"`
	UserIds   []int  `json:"user_ids,omitempty"`
}

// ProjectSearchParametersValueNumber0 defines model for .
type ProjectSearchParametersValueNumber0 = float32

// ProjectSearchParametersValueNumber1 defines model for .
type ProjectSearchParametersValueNumber1 = []float32

// Project_SearchParameters_ValueNumber defines model for Project.SearchParameters.ValueNumber.
type Project_SearchParameters_ValueNumber struct {
	union json.RawMessage
}

// ProjectMembership defines model for ProjectMembership.
type ProjectMembership struct {
	CreatedAt time.Time `json:"created_at,omitempty"`

	// ID Unique auto-increment integer identifier.
	ID                                int       `json:"id"`
	PrefersCuratorCoordinateAccessFor string    `json:"prefers_curator_coordinate_access_for"`
	PrefersUpdates                    bool      `json:"prefers_updates"`
	ProjectID                         int       `json:"project_id,omitempty"`
	Role                              string    `json:"role"`
	UpdatedAt                         time.Time `json:"updated_at,omitempty"`
}

// ProjectObservation defines model for ProjectObservation.
type ProjectObservation struct {
	// ID Unique auto-increment integer identifier.
	ID          int `json:"id"`
	Preferences struct {
		AllowsCuratorCoordinateAccess bool `json:"allows_curator_coordinate_access,omitempty"`
	} `json:"preferences,omitempty"`
	Project     Project            `json:"project"`
	ProjectID   int                `json:"project_id,omitempty"`
	ProjectUser ProjectUser        `json:"project_user,omitempty"`
	User        User               `json:"user"`
	UserID      int                `json:"user_id"`
	UUID        openapi_types.UUID `json:"uuid"`
}

// ProjectObservationsCreate defines model for ProjectObservationsCreate.
type ProjectObservationsCreate struct {
	Fields             interface{} `json:"fields,omitempty"`
	ProjectObservation struct {
		ObservationID openapi_types.UUID `json:"observation_id"`
		ProjectID     int                `json:"project_id"`
	} `json:"project_observation,omitempty"`
}

// ProjectObservationsUpdate defines model for ProjectObservationsUpdate.
type ProjectObservationsUpdate struct {
	Fields             interface{} `json:"fields,omitempty"`
	ProjectObservation struct {
		// PrefersCuratorCoordinateAccess Whether the observer allows project curators to view the coordinates of this observation
		PrefersCuratorCoordinateAccess bool `json:"prefers_curator_coordinate_access,omitempty"`
	} `json:"project_observation,omitempty"`
}

// ProjectUser defines model for ProjectUser.
type ProjectUser struct {
	CreatedAt    time.Time `json:"created_at,omitempty"`
	CreatedAtUtc time.Time `json:"created_at_utc,omitempty"`

	// ID Unique auto-increment integer identifier.
	ID                                int       `json:"id"`
	ObservationsCount                 int       `json:"observations_count,omitempty"`
	PrefersCuratorCoordinateAccessFor string    `json:"prefers_curator_coordinate_access_for,omitempty"`
	ProjectID                         int       `json:"project_id,omitempty"`
	Role                              string    `json:"role"`
	TaxaCount                         int       `json:"taxa_count,omitempty"`
	UpdatedAt                         time.Time `json:"updated_at,omitempty"`
	UpdatedAtUtc                      time.Time `json:"updated_at_utc,omitempty"`
	UserID                            int       `json:"user_id,omitempty"`
}

// ProjectUsersUpdate defines model for ProjectUsersUpdate.
type ProjectUsersUpdate struct {
	ProjectUser struct {
		PrefersCuratorCoordinateAccessFor ProjectUsersUpdateProjectUserPrefersCuratorCoordinateAccessFor `json:"prefers_curator_coordinate_access_for,omitempty"`
		PrefersUpdates                    bool                                                           `json:"prefers_updates,omitempty"`
	} `json:"project_user,omitempty"`
}

// ProjectUsersUpdateProjectUserPrefersCuratorCoordinateAccessFor defines model for ProjectUsersUpdate.ProjectUser.PrefersCuratorCoordinateAccessFor.
type ProjectUsersUpdateProjectUserPrefersCuratorCoordinateAccessFor string

// ProviderAuthorization defines model for ProviderAuthorization.
type ProviderAuthorization struct {
	CreatedAt time.Time `json:"created_at,omitempty"`
	ID        int       `json:"id"`

	// ProviderName Name of the provider from a controlled vocabulary. The `open_id` means Yahoo in this context
	ProviderName ProviderAuthorizationProviderName `json:"provider_name,omitempty"`

	// ProviderUID Unique identifier for the user from the provider
	ProviderUID string `json:"provider_uid"`

	// Scope Comma-separated list of OAuth scopes granted by the provider
	Scope     string    `json:"scope"`
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	UserID    int       `json:"user_id,omitempty"`
}

// ProviderAuthorizationProviderName Name of the provider from a controlled vocabulary. The `open_id` means Yahoo in this context
type ProviderAuthorizationProviderName string

// QualityMetric defines model for QualityMetric.
type QualityMetric struct {
	Agree bool `json:"agree,omitempty"`

	// ID Unique auto-increment integer identifier.
	ID     int    `json:"id"`
	Metric string `json:"metric,omitempty"`
	User   User   `json:"user"`
	UserID int    `json:"user_id"`
}

// Relationship defines model for Relationship.
type Relationship struct {
	CreatedAt time.Time `json:"created_at,omitempty"`

	// Following Whether the user notifications about new content made by the friend
	Following  bool `json:"following,omitempty"`
	FriendUser User `json:"friend_user"`

	// ID Unique auto-increment integer identifier.
	ID int `json:"id"`

	// ReciprocalTrust Whether the friend trusts the user with hidden coordinates
	ReciprocalTrust bool `json:"reciprocal_trust,omitempty"`

	// Trust Whether the user trusts the friend with hidden coordinates
	Trust     bool      `json:"trust,omitempty"`
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	User      User      `json:"user"`
}

// RelationshipsCreate defines model for RelationshipsCreate.
type RelationshipsCreate struct {
	Fields       interface{} `json:"fields,omitempty"`
	Relationship struct {
		// Following Whether the user notifications about new content made by the friend
		Following bool `json:"following,omitempty"`

		// FriendID
		//         Sequential ID of the user that is the object of the relationship, i.e.
		//         the user that the authenticated user is establishing a relationship
		//         with
		//
		FriendID int `json:"friend_id"`

		// Trust Whether the user trusts the friend with hidden coordinates
		Trust bool `json:"trust,omitempty"`
	} `json:"relationship"`
}

// RelationshipsUpdate defines model for RelationshipsUpdate.
type RelationshipsUpdate struct {
	Fields       interface{} `json:"fields,omitempty"`
	Relationship struct {
		// Following Whether the user notifications about new content made by the friend
		Following bool `json:"following,omitempty"`

		// Trust Whether the user trusts the friend with hidden coordinates
		Trust bool `json:"trust,omitempty"`
	} `json:"relationship"`
}

// ResultsAnnotations defines model for ResultsAnnotations.
type ResultsAnnotations struct {
	Page         int          `json:"page"`
	PerPage      int          `json:"per_page"`
	Results      []Annotation `json:"results"`
	TotalResults int          `json:"total_results"`
}

// ResultsAnnouncements defines model for ResultsAnnouncements.
type ResultsAnnouncements struct {
	Page         int            `json:"page"`
	PerPage      int            `json:"per_page"`
	Results      []Announcement `json:"results"`
	TotalResults int            `json:"total_results"`
}

// ResultsAuthorizedApplications defines model for ResultsAuthorizedApplications.
type ResultsAuthorizedApplications struct {
	Page         int                     `json:"page"`
	PerPage      int                     `json:"per_page"`
	Results      []AuthorizedApplication `json:"results"`
	TotalResults int                     `json:"total_results"`
}

// ResultsComments defines model for ResultsComments.
type ResultsComments struct {
	Page         int       `json:"page"`
	PerPage      int       `json:"per_page"`
	Results      []Comment `json:"results"`
	TotalResults int       `json:"total_results"`
}

// ResultsControlledTerms defines model for ResultsControlledTerms.
type ResultsControlledTerms struct {
	Page         int              `json:"page"`
	PerPage      int              `json:"per_page"`
	Results      []ControlledTerm `json:"results"`
	TotalResults int              `json:"total_results"`
}

// ResultsEmailAvailable defines model for ResultsEmailAvailable.
type ResultsEmailAvailable struct {
	Available bool `json:"available,omitempty"`
}

// ResultsFlags defines model for ResultsFlags.
type ResultsFlags struct {
	Page         int    `json:"page"`
	PerPage      int    `json:"per_page"`
	Results      []Flag `json:"results"`
	TotalResults int    `json:"total_results"`
}

// ResultsIdentifications defines model for ResultsIdentifications.
type ResultsIdentifications struct {
	Page         int              `json:"page"`
	PerPage      int              `json:"per_page"`
	Results      []Identification `json:"results"`
	TotalResults int              `json:"total_results"`
}

// ResultsIdentificationsRecentTaxa defines model for ResultsIdentificationsRecentTaxa.
type ResultsIdentificationsRecentTaxa struct {
	AllResultsAvailable bool `json:"all_results_available,omitempty"`
	Page                int  `json:"page"`
	PerPage             int  `json:"per_page"`
	Results             []struct {
		Identification Identification `json:"identification"`
		Taxon          Taxon          `json:"taxon"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsIdentifiers defines model for ResultsIdentifiers.
type ResultsIdentifiers struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		Count  int  `json:"count"`
		User   User `json:"user"`
		UserID int  `json:"user_id,omitempty"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsMessages defines model for ResultsMessages.
type ResultsMessages struct {
	Page         int       `json:"page"`
	PerPage      int       `json:"per_page"`
	Results      []Message `json:"results"`
	TotalResults int       `json:"total_results"`
}

// ResultsMessagesThread defines model for ResultsMessagesThread.
type ResultsMessagesThread struct {
	FlaggableMessageID int       `json:"flaggable_message_id,omitempty"`
	Page               int       `json:"page"`
	PerPage            int       `json:"per_page"`
	ReplyToUser        User      `json:"reply_to_user"`
	Results            []Message `json:"results"`
	ThreadID           int       `json:"thread_id,omitempty"`
	TotalResults       int       `json:"total_results"`
}

// ResultsObservationFieldValues defines model for ResultsObservationFieldValues.
type ResultsObservationFieldValues struct {
	Page         int                     `json:"page"`
	PerPage      int                     `json:"per_page"`
	Results      []ObservationFieldValue `json:"results"`
	TotalResults int                     `json:"total_results"`
}

// ResultsObservationFields defines model for ResultsObservationFields.
type ResultsObservationFields struct {
	Page         int                `json:"page"`
	PerPage      int                `json:"per_page"`
	Results      []ObservationField `json:"results"`
	TotalResults int                `json:"total_results"`
}

// ResultsObservationPhotos defines model for ResultsObservationPhotos.
type ResultsObservationPhotos struct {
	Page         int                `json:"page"`
	PerPage      int                `json:"per_page"`
	Results      []ObservationPhoto `json:"results"`
	TotalResults int                `json:"total_results"`
}

// ResultsObservationSounds defines model for ResultsObservationSounds.
type ResultsObservationSounds struct {
	Page         int                `json:"page"`
	PerPage      int                `json:"per_page"`
	Results      []ObservationPhoto `json:"results"`
	TotalResults int                `json:"total_results"`
}

// ResultsObservations defines model for ResultsObservations.
type ResultsObservations struct {
	Page        int           `json:"page"`
	PerPage     int           `json:"per_page"`
	Results     []Observation `json:"results"`
	TotalBounds struct {
		Nelat float32 `json:"nelat,omitempty"`
		Nelng float32 `json:"nelng,omitempty"`
		Swlat float32 `json:"swlat,omitempty"`
		Swlng float32 `json:"swlng,omitempty"`
	} `json:"total_bounds,omitempty"`
	TotalResults int `json:"total_results"`
}

// ResultsObservationsDeleted defines model for ResultsObservationsDeleted.
type ResultsObservationsDeleted struct {
	Page         int   `json:"page"`
	PerPage      int   `json:"per_page"`
	Results      []int `json:"results"`
	TotalResults int   `json:"total_results"`
}

// ResultsObservationsHistogram defines model for ResultsObservationsHistogram.
type ResultsObservationsHistogram struct {
	Page         int                                  `json:"page"`
	PerPage      int                                  `json:"per_page"`
	Results      ResultsObservationsHistogram_Results `json:"results"`
	TotalResults int                                  `json:"total_results"`
}

// ResultsObservationsHistogramResults0 defines model for .
type ResultsObservationsHistogramResults0 struct {
	Day         map[string]int `json:"day,omitempty"`
	Hour        map[string]int `json:"hour,omitempty"`
	Month       map[string]int `json:"month,omitempty"`
	MonthOfYear map[string]int `json:"month_of_year,omitempty"`
	Week        map[string]int `json:"week,omitempty"`
	WeekOfYear  map[string]int `json:"week_of_year,omitempty"`
	Year        map[string]int `json:"year,omitempty"`
}

// ResultsObservationsHistogram_Results defines model for ResultsObservationsHistogram.Results.
type ResultsObservationsHistogram_Results struct {
	union json.RawMessage
}

// ResultsObservationsIdentificationCategories defines model for ResultsObservationsIdentificationCategories.
type ResultsObservationsIdentificationCategories struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		Category string `json:"category"`
		Count    int    `json:"count"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsObservationsIdentifiers defines model for ResultsObservationsIdentifiers.
type ResultsObservationsIdentifiers struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		Count int  `json:"count"`
		User  User `json:"user"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsObservationsObservers defines model for ResultsObservationsObservers.
type ResultsObservationsObservers struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		ObservationCount int  `json:"observation_count"`
		SpeciesCount     int  `json:"species_count"`
		User             User `json:"user"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsObservationsPopularFieldValues defines model for ResultsObservationsPopularFieldValues.
type ResultsObservationsPopularFieldValues struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		ControlledAttribute struct {
			ExceptedTaxonIds []int  `json:"excepted_taxon_ids,omitempty"`
			ID               int    `json:"id,omitempty"`
			IsValue          bool   `json:"is_value,omitempty"`
			Label            string `json:"label,omitempty"`
			Multivalued      bool   `json:"multivalued,omitempty"`
			OntologyURI      string `json:"ontology_uri,omitempty"`
			TaxonIds         []int  `json:"taxon_ids,omitempty"`
			URI              string `json:"uri,omitempty"`
			Values           []struct {
				Blocking    bool   `json:"blocking,omitempty"`
				ID          int    `json:"id,omitempty"`
				Label       string `json:"label,omitempty"`
				OntologyURI string `json:"ontology_uri,omitempty"`
				TaxonIds    []int  `json:"taxon_ids,omitempty"`
				URI         string `json:"uri,omitempty"`
			} `json:"values,omitempty"`
		} `json:"controlled_attribute,omitempty"`
		ControlledValue struct {
			Blocking    bool          `json:"blocking,omitempty"`
			ID          int           `json:"id,omitempty"`
			IsValue     bool          `json:"is_value,omitempty"`
			Label       string        `json:"label,omitempty"`
			OntologyURI string        `json:"ontology_uri,omitempty"`
			TaxonIds    []int         `json:"taxon_ids,omitempty"`
			URI         string        `json:"uri,omitempty"`
			Values      []interface{} `json:"values,omitempty"`
		} `json:"controlled_value,omitempty"`
		Count       int         `json:"count"`
		MonthOfYear interface{} `json:"month_of_year,omitempty"`
		WeekOfYear  interface{} `json:"week_of_year,omitempty"`
	} `json:"results"`
	TotalResults int                                                                               `json:"total_results"`
	Unannotated  map[string]ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties `json:"unannotated,omitempty"`
}

// ResultsObservationsPopularFieldValuesUnannotated0 defines model for .
type ResultsObservationsPopularFieldValuesUnannotated0 struct {
	Count       int            `json:"count,omitempty"`
	MonthOfYear map[string]int `json:"month_of_year,omitempty"`
}

// ResultsObservationsPopularFieldValuesUnannotated1 defines model for .
type ResultsObservationsPopularFieldValuesUnannotated1 struct {
	Count      int            `json:"count,omitempty"`
	WeekOfYear map[string]int `json:"week_of_year,omitempty"`
}

// ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties defines model for ResultsObservationsPopularFieldValues.unannotated.AdditionalProperties.
type ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties struct {
	union json.RawMessage
}

// ResultsObservationsQualityGrades defines model for ResultsObservationsQualityGrades.
type ResultsObservationsQualityGrades struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		Count        int    `json:"count"`
		QualityGrade string `json:"quality_grade"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsObservationsSpeciesCounts defines model for ResultsObservationsSpeciesCounts.
type ResultsObservationsSpeciesCounts struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		Count int   `json:"count"`
		Taxon Taxon `json:"taxon"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsObservationsUmbrellaProjectStats defines model for ResultsObservationsUmbrellaProjectStats.
type ResultsObservationsUmbrellaProjectStats struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		ObservationCount int     `json:"observation_count"`
		ObserversCount   int     `json:"observers_count"`
		Project          Project `json:"project"`
		SpeciesCount     int     `json:"species_count"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsPhotos defines model for ResultsPhotos.
type ResultsPhotos struct {
	Page         int     `json:"page"`
	PerPage      int     `json:"per_page"`
	Results      []Photo `json:"results"`
	TotalResults int     `json:"total_results"`
}

// ResultsPlaces defines model for ResultsPlaces.
type ResultsPlaces struct {
	Page         int     `json:"page"`
	PerPage      int     `json:"per_page"`
	Results      []Place `json:"results"`
	TotalResults int     `json:"total_results"`
}

// ResultsPlacesNearby defines model for ResultsPlacesNearby.
type ResultsPlacesNearby struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results struct {
		Community []Place `json:"community,omitempty"`
		Standard  []Place `json:"standard,omitempty"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsProjectMembership defines model for ResultsProjectMembership.
type ResultsProjectMembership struct {
	Page         int                 `json:"page"`
	PerPage      int                 `json:"per_page"`
	Results      []ProjectMembership `json:"results"`
	TotalResults int                 `json:"total_results"`
}

// ResultsProjectObservations defines model for ResultsProjectObservations.
type ResultsProjectObservations struct {
	Page         int                  `json:"page"`
	PerPage      int                  `json:"per_page"`
	Results      []ProjectObservation `json:"results"`
	TotalResults int                  `json:"total_results"`
}

// ResultsProjects defines model for ResultsProjects.
type ResultsProjects struct {
	Page         int       `json:"page"`
	PerPage      int       `json:"per_page"`
	Results      []Project `json:"results"`
	TotalResults int       `json:"total_results"`
}

// ResultsProjectsMembers defines model for ResultsProjectsMembers.
type ResultsProjectsMembers struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		CreatedAt         time.Time `json:"created_at,omitempty"`
		ID                int       `json:"id"`
		ObservationsCount int       `json:"observations_count"`
		ProjectID         int       `json:"project_id,omitempty"`
		Role              string    `json:"role"`
		TaxaCount         int       `json:"taxa_count,omitempty"`
		UpdatedAt         time.Time `json:"updated_at,omitempty"`
		User              struct {
			Icon    string `json:"icon"`
			IconURL string `json:"icon_url"`
			ID      int    `json:"id"`
			Login   string `json:"login,omitempty"`
			Name    string `json:"name"`
			Orcid   string `json:"orcid"`
		} `json:"user"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsProjectsPosts defines model for ResultsProjectsPosts.
type ResultsProjectsPosts struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		Body        string                                `json:"body,omitempty"`
		CreatedAt   time.Time                             `json:"created_at,omitempty"`
		Distance    float32                               `json:"distance"`
		ID          int                                   `json:"id,omitempty"`
		Latitude    float32                               `json:"latitude"`
		Longitude   float32                               `json:"longitude"`
		ParentID    int                                   `json:"parent_id,omitempty"`
		ParentType  ResultsProjectsPostsResultsParentType `json:"parent_type,omitempty"`
		PlaceID     int                                   `json:"place_id"`
		PublishedAt time.Time                             `json:"published_at,omitempty"`
		Radius      float32                               `json:"radius"`
		StartTime   time.Time                             `json:"start_time"`
		StopTime    time.Time                             `json:"stop_time"`
		Title       string                                `json:"title,omitempty"`
		Type        string                                `json:"type"`
		UpdatedAt   time.Time                             `json:"updated_at,omitempty"`
		User        User                                  `json:"user"`
		UUID        openapi_types.UUID                    `json:"uuid"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsProjectsPostsResultsParentType defines model for ResultsProjectsPosts.Results.ParentType.
type ResultsProjectsPostsResultsParentType string

// ResultsProviderAuthorizations defines model for ResultsProviderAuthorizations.
type ResultsProviderAuthorizations struct {
	Page         int                     `json:"page"`
	PerPage      int                     `json:"per_page"`
	Results      []ProviderAuthorization `json:"results"`
	TotalResults int                     `json:"total_results"`
}

// ResultsQualityMetrics defines model for ResultsQualityMetrics.
type ResultsQualityMetrics struct {
	Page         int             `json:"page"`
	PerPage      int             `json:"per_page"`
	Results      []QualityMetric `json:"results"`
	TotalResults int             `json:"total_results"`
}

// ResultsRelationships defines model for ResultsRelationships.
type ResultsRelationships struct {
	Page         int            `json:"page"`
	PerPage      int            `json:"per_page"`
	Results      []Relationship `json:"results"`
	TotalResults int            `json:"total_results"`
}

// ResultsSavedLocations defines model for ResultsSavedLocations.
type ResultsSavedLocations struct {
	Page         int             `json:"page"`
	PerPage      int             `json:"per_page"`
	Results      []SavedLocation `json:"results"`
	TotalResults int             `json:"total_results"`
}

// ResultsSearch defines model for ResultsSearch.
type ResultsSearch struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		// Matches Array of text field values that matched the search query
		Matches []string `json:"matches,omitempty"`
		Place   Place    `json:"place"`
		Project Project  `json:"project"`

		// Score Search score; can be used to sort search results
		Score float32 `json:"score,omitempty"`
		Taxon Taxon   `json:"taxon"`

		// Type Type of record for this search result
		Type ResultsSearchResultsType `json:"type"`
		User User                     `json:"user"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsSearchResultsType Type of record for this search result
type ResultsSearchResultsType string

// ResultsSites defines model for ResultsSites.
type ResultsSites struct {
	Page         int    `json:"page"`
	PerPage      int    `json:"per_page"`
	Results      []Site `json:"results"`
	TotalResults int    `json:"total_results"`
}

// ResultsSounds defines model for ResultsSounds.
type ResultsSounds struct {
	Page         int     `json:"page"`
	PerPage      int     `json:"per_page"`
	Results      []Sound `json:"results"`
	TotalResults int     `json:"total_results"`
}

// ResultsSubscriptions defines model for ResultsSubscriptions.
type ResultsSubscriptions struct {
	Page         int            `json:"page"`
	PerPage      int            `json:"per_page"`
	Results      []Subscription `json:"results"`
	TotalResults int            `json:"total_results"`
}

// ResultsTaxa defines model for ResultsTaxa.
type ResultsTaxa struct {
	Page         int     `json:"page"`
	PerPage      int     `json:"per_page"`
	Results      []Taxon `json:"results"`
	TotalResults int     `json:"total_results"`
}

// ResultsTaxaCounts defines model for ResultsTaxaCounts.
type ResultsTaxaCounts struct {
	Page         int          `json:"page"`
	PerPage      int          `json:"per_page"`
	Results      []TaxonCount `json:"results"`
	TotalResults int          `json:"total_results"`
}

// ResultsTaxaSuggest defines model for ResultsTaxaSuggest.
type ResultsTaxaSuggest struct {
	// CommonAncestor  Common ancestor taxon of some of the top results weighted by combined score.
	//   If present, it generally has a much higher chance of being accurate (if not
	//   precise), often by as much as 30-40 percentage points.
	CommonAncestor CommonAncestor `json:"common_ancestor,omitempty"`

	// Comprehensiveness  Set when the suggestions are believed to be comprehensive given the search
	//       parameters, e.g. if retrieving suggestions for squirrels in California,
	//       these should represent *all* the squirrels known to occur in California.
	//       If blank or absent, that means the suggestions may or may not be
	//       comprehensive. Currently only set when `source` is `checklist`
	//
	Comprehensiveness struct {
		// List Source of these comprehensive suggestions
		List struct {
			// ID Unique auto-increment integer identifier.
			ID     int `json:"id"`
			Source struct {
				InText string `json:"in_text,omitempty"`
				URL    string `json:"url,omitempty"`
			} `json:"source,omitempty"`
			Title string `json:"title,omitempty"`
		} `json:"list,omitempty"`
	} `json:"comprehensiveness,omitempty"`

	// Query  Query parameters used to generate these results. When `source` is
	//       `*observations` this may have some additional parameters used to set
	//       defaults for the observations query.
	//
	Query struct {
		// FeaturedObservationID When `source` is `observations`, ignore this observation
		FeaturedObservationID openapi_types.UUID `json:"featured_observation_id,omitempty"`
		Fields                interface{}        `json:"fields,omitempty"`

		// ImageURL URL for image to use when `source` is `visual`
		ImageURL                    string                                               `json:"image_url,omitempty"`
		IncludeRepresentativePhotos ResultsTaxaSuggest_Query_IncludeRepresentativePhotos `json:"include_representative_photos,omitempty"`

		// Lat Coordinate used when fetching nearby results `source` is `visual` or `*observations`
		Lat float32 `json:"lat,omitempty"`

		// Limit Number of results to return
		Limit float32 `json:"limit,omitempty"`

		// Lng Coordinate used when fetching nearby results `source` is `visual` or `*observations`
		Lng    float32 `json:"lng,omitempty"`
		Locale string  `json:"locale,omitempty"`
		Months string  `json:"months,omitempty"`

		// ObservationID  Automatically set place and taxon filters based on this observation; this
		//       will override the values of `place_id` and `taxon_id` if these values
		//       can be derived from the observation
		//
		ObservationID openapi_types.UUID `json:"observation_id,omitempty"`

		// ObservedOn  Date the subject was observed (YYYY-MM-DD), used to refine suggestions to
		//       those observed at a similar time of year
		//
		ObservedOn string `json:"observed_on,omitempty"`

		// OrderBy  How the suggestions will be ordered. The default is to order by whatever default
		//       a source uses, e.g. the score when `source` is `visual`, or the number of
		//       observations (frequency) when the `source` is `*observations`. Ordering by
		//       `taxonomy` will group the results by their closeness in the taxonomic
		//       tree, but continue to use default ordering for siblings (e.g. species in the
		//       same genus).
		//
		OrderBy ResultsTaxaSuggestQueryOrderBy `json:"order_by,omitempty"`

		// PlaceID  Only retrieve suggestions from this place when `source` is `checklist`
		//       or `*observations`
		//
		PlaceID int `json:"place_id,omitempty"`

		// PlaceLat  Coordinate used to set a place filter when source is `*observations` by
		//       choosing the place whose boundary contains the coordinate. Only chooses
		//       from places curated by staff (aka "standard" places) and only sets the
		//       place when lat, lng, and place_id are blank
		//
		PlaceLat float32 `json:"place_lat,omitempty"`

		// PlaceLng See `place_lat`
		PlaceLng float32 `json:"place_lng,omitempty"`

		// Source  Source of the suggestions. Note that different sources support different
		//       search parameters. See each parameter for details
		//
		Source ResultsTaxaSuggestQuerySource `json:"source"`

		// TaxonID  Only retrieve suggestions in this taxon. If taxon is below genus level it
		//       will be replaced with the genus that contains it. When `source` is
		//       `misidentifications`, suggestions will be species commonly misidentified
		//       as this taxon
		//
		TaxonID int `json:"taxon_id,omitempty"`
	} `json:"query,omitempty"`
	QueryPlace Place `json:"queryPlace"`
	QueryTaxon Taxon `json:"queryTaxon"`
	Results    []struct {
		Score         float32 `json:"score"`
		SourceDetails struct {
			CombinedScore     float32     `json:"combined_score,omitempty"`
			FrequencyScore    float32     `json:"frequency_score,omitempty"`
			ListedTaxon       ListedTaxon `json:"listed_taxon"`
			ObservationsCount int         `json:"observations_count,omitempty"`
			VisionScore       float32     `json:"vision_score,omitempty"`
		} `json:"source_details,omitempty"`
		SourceType string `json:"source_type"`
		Taxon      Taxon  `json:"taxon"`
	} `json:"results"`
}

// ResultsTaxaSuggestQueryIncludeRepresentativePhotos0 defines model for .
type ResultsTaxaSuggestQueryIncludeRepresentativePhotos0 = bool

// ResultsTaxaSuggestQueryIncludeRepresentativePhotos1 defines model for .
type ResultsTaxaSuggestQueryIncludeRepresentativePhotos1 = string

// ResultsTaxaSuggest_Query_IncludeRepresentativePhotos defines model for ResultsTaxaSuggest.Query.IncludeRepresentativePhotos.
type ResultsTaxaSuggest_Query_IncludeRepresentativePhotos struct {
	union json.RawMessage
}

// ResultsTaxaSuggestQueryOrderBy  How the suggestions will be ordered. The default is to order by whatever default
//
//	a source uses, e.g. the score when `source` is `visual`, or the number of
//	observations (frequency) when the `source` is `*observations`. Ordering by
//	`taxonomy` will group the results by their closeness in the taxonomic
//	tree, but continue to use default ordering for siblings (e.g. species in the
//	same genus).
type ResultsTaxaSuggestQueryOrderBy string

// ResultsTaxaSuggestQuerySource  Source of the suggestions. Note that different sources support different
//
//	search parameters. See each parameter for details
type ResultsTaxaSuggestQuerySource string

// ResultsTaxonNamePriorities defines model for ResultsTaxonNamePriorities.
type ResultsTaxonNamePriorities struct {
	Page         int                 `json:"page"`
	PerPage      int                 `json:"per_page"`
	Results      []TaxonNamePriority `json:"results"`
	TotalResults int                 `json:"total_results"`
}

// ResultsTaxonSummary defines model for ResultsTaxonSummary.
type ResultsTaxonSummary struct {
	ConservationStatus ConservationStatus `json:"conservation_status"`
	ListedTaxon        ListedTaxon        `json:"listed_taxon"`

	// WikipediaSummary Summary description of this taxon from Wikipedia
	WikipediaSummary string `json:"wikipedia_summary"`
}

// ResultsTranslationsLocales defines model for ResultsTranslationsLocales.
type ResultsTranslationsLocales struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		LanguageInLocale string `json:"language_in_locale,omitempty"`
		Locale           string `json:"locale"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsUpdates defines model for ResultsUpdates.
type ResultsUpdates struct {
	Page         int      `json:"page"`
	PerPage      int      `json:"per_page"`
	Results      []Update `json:"results"`
	TotalResults int      `json:"total_results"`
}

// ResultsUsers defines model for ResultsUsers.
type ResultsUsers struct {
	Page         int    `json:"page"`
	PerPage      int    `json:"per_page"`
	Results      []User `json:"results"`
	TotalResults int    `json:"total_results"`
}

// ResultsUsersMe defines model for ResultsUsersMe.
type ResultsUsersMe struct {
	Page         int           `json:"page"`
	PerPage      int           `json:"per_page"`
	Results      []PrivateUser `json:"results"`
	TotalResults int           `json:"total_results"`
}

// ResultsUsersNotificationCounts defines model for ResultsUsersNotificationCounts.
type ResultsUsersNotificationCounts struct {
	MessagesCount int `json:"messages_count"`
	UpdatesCount  int `json:"updates_count"`
}

// SavedLocation defines model for SavedLocation.
type SavedLocation struct {
	CreatedAt  time.Time               `json:"created_at,omitempty"`
	Geoprivacy SavedLocationGeoprivacy `json:"geoprivacy"`

	// ID Unique auto-increment integer identifier.
	ID                 int       `json:"id"`
	Latitude           float32   `json:"latitude,omitempty"`
	Longitude          float32   `json:"longitude,omitempty"`
	PositionalAccuracy int       `json:"positional_accuracy,omitempty"`
	Title              string    `json:"title,omitempty"`
	UpdatedAt          time.Time `json:"updated_at,omitempty"`
	UserID             int       `json:"user_id,omitempty"`
}

// SavedLocationGeoprivacy defines model for SavedLocation.Geoprivacy.
type SavedLocationGeoprivacy string

// SavedLocationsCreate defines model for SavedLocationsCreate.
type SavedLocationsCreate struct {
	Fields        interface{} `json:"fields,omitempty"`
	SavedLocation struct {
		Geoprivacy         SavedLocationsCreateSavedLocationGeoprivacy `json:"geoprivacy,omitempty"`
		Latitude           float32                                     `json:"latitude,omitempty"`
		Longitude          float32                                     `json:"longitude,omitempty"`
		PositionalAccuracy int                                         `json:"positional_accuracy,omitempty"`
		Title              string                                      `json:"title,omitempty"`
	} `json:"saved_location"`
}

// SavedLocationsCreateSavedLocationGeoprivacy defines model for SavedLocationsCreate.SavedLocation.Geoprivacy.
type SavedLocationsCreateSavedLocationGeoprivacy string

// Site defines model for Site.
type Site struct {
	// IconURL URL of an icon image for the site
	IconURL string `json:"icon_url,omitempty"`

	// ID Unique auto-increment integer identifier.
	ID int `json:"id"`

	// Locale Default language code for users of this site
	Locale string `json:"locale"`

	// Name Full name of the site
	Name string `json:"name,omitempty"`

	// PlaceID Integer ID of the default search place for this site
	PlaceID int `json:"place_id"`

	// SiteNameShort Short name for this site
	SiteNameShort string `json:"site_name_short"`
	URL           string `json:"url,omitempty"`
}

// Sound defines model for Sound.
type Sound struct {
	Attribution     string `json:"attribution,omitempty"`
	FileContentType string `json:"file_content_type,omitempty"`
	FileURL         string `json:"file_url,omitempty"`
	Flags           []Flag `json:"flags,omitempty"`
	Hidden          bool   `json:"hidden,omitempty"`

	// ID Unique auto-increment integer identifier.
	ID               int               `json:"id"`
	LicenseCode      string            `json:"license_code"`
	ModeratorActions []ModeratorAction `json:"moderator_actions,omitempty"`
	NativeSoundID    string            `json:"native_sound_id"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	CreatedAt string `json:"created_at,omitempty"`

	// ID Unique auto-increment integer identifier.
	ID           int    `json:"id"`
	ResourceID   int    `json:"resource_id,omitempty"`
	ResourceType string `json:"resource_type,omitempty"`
	TaxonID      int    `json:"taxon_id,omitempty"`
	UpdatedAt    string `json:"updated_at,omitempty"`
	UserID       int    `json:"user_id,omitempty"`
}

// Taxon defines model for Taxon.
type Taxon struct {
	AncestorIds               []int                `json:"ancestor_ids,omitempty"`
	Ancestors                 []Taxon              `json:"ancestors,omitempty"`
	Ancestry                  string               `json:"ancestry"`
	AtlasID                   int                  `json:"atlas_id"`
	Children                  []Taxon              `json:"children,omitempty"`
	CompleteRank              string               `json:"complete_rank,omitempty"`
	CompleteSpeciesCount      int                  `json:"complete_species_count"`
	ConservationStatus        ConservationStatus   `json:"conservation_status"`
	ConservationStatuses      []ConservationStatus `json:"conservation_statuses,omitempty"`
	CreatedAt                 string               `json:"created_at,omitempty"`
	CurrentSynonymousTaxonIds []int                `json:"current_synonymous_taxon_ids"`
	DefaultPhoto              Photo                `json:"default_photo"`
	Endemic                   bool                 `json:"endemic,omitempty"`
	EnglishCommonName         string               `json:"english_common_name,omitempty"`
	EstablishmentMeans        struct {
		EstablishmentMeans string `json:"establishment_means,omitempty"`
		ID                 int    `json:"id,omitempty"`
		Place              struct {
			Ancestry    string `json:"ancestry,omitempty"`
			DisplayName string `json:"display_name,omitempty"`
			ID          int    `json:"id,omitempty"`
			Name        string `json:"name,omitempty"`
		} `json:"place,omitempty"`
	} `json:"establishment_means,omitempty"`
	Extinct    bool `json:"extinct,omitempty"`
	FlagCounts struct {
		Resolved   int `json:"resolved,omitempty"`
		Unresolved int `json:"unresolved,omitempty"`
	} `json:"flag_counts,omitempty"`
	IconicTaxonID   int    `json:"iconic_taxon_id"`
	IconicTaxonName string `json:"iconic_taxon_name,omitempty"`

	// ID Unique auto-increment integer identifier.
	ID         int  `json:"id"`
	Introduced bool `json:"introduced,omitempty"`
	IsActive   bool `json:"is_active,omitempty"`
	ListedTaxa []struct {
		EstablishmentMeans string `json:"establishment_means,omitempty"`
		ID                 int    `json:"id,omitempty"`
		List               List   `json:"list"`
		Place              Place  `json:"place"`
		Taxon              Taxon  `json:"taxon"`
		TaxonID            int    `json:"taxon_id,omitempty"`
	} `json:"listed_taxa,omitempty"`
	ListedTaxaCount    int    `json:"listed_taxa_count,omitempty"`
	MatchedTerm        string `json:"matched_term,omitempty"`
	MinSpeciesAncestry string `json:"min_species_ancestry,omitempty"`
	MinSpeciesTaxonID  int    `json:"min_species_taxon_id,omitempty"`
	Name               string `json:"name,omitempty"`
	Native             bool   `json:"native,omitempty"`
	ObservationsCount  int    `json:"observations_count,omitempty"`
	ParentID           int    `json:"parent_id"`

	// PhotosLocked Whether or not photos for this taxon can be edited
	PhotosLocked                bool          `json:"photos_locked,omitempty"`
	PreferredCommonName         string        `json:"preferred_common_name"`
	PreferredCommonNames        []interface{} `json:"preferred_common_names"`
	PreferredEstablishmentMeans string        `json:"preferred_establishment_means,omitempty"`
	Rank                        string        `json:"rank,omitempty"`
	RankLevel                   float32       `json:"rank_level,omitempty"`
	RepresentativePhoto         Photo         `json:"representative_photo"`
	Statuses                    []interface{} `json:"statuses,omitempty"`
	TaxonChangesCount           int           `json:"taxon_changes_count,omitempty"`
	TaxonPhotos                 []struct {
		Photo   Photo `json:"photo"`
		Taxon   Taxon `json:"taxon"`
		TaxonID int   `json:"taxon_id,omitempty"`
	} `json:"taxon_photos,omitempty"`
	TaxonSchemesCount   int                `json:"taxon_schemes_count,omitempty"`
	Threatened          bool               `json:"threatened,omitempty"`
	UniversalSearchRank int                `json:"universal_search_rank,omitempty"`
	UUID                openapi_types.UUID `json:"uuid,omitempty"`
	Vision              bool               `json:"vision,omitempty"`
	WikipediaSummary    string             `json:"wikipedia_summary"`
	WikipediaURL        string             `json:"wikipedia_url"`
}

// TaxonCount defines model for TaxonCount.
type TaxonCount struct {
	Count int   `json:"count"`
	Taxon Taxon `json:"taxon"`
}

// TaxonNamePrioritiesCreate defines model for TaxonNamePrioritiesCreate.
type TaxonNamePrioritiesCreate struct {
	Fields            interface{} `json:"fields,omitempty"`
	TaxonNamePriority struct {
		Lexicon string `json:"lexicon"`
		PlaceID int    `json:"place_id"`
	} `json:"taxon_name_priority"`
}

// TaxonNamePrioritiesUpdate defines model for TaxonNamePrioritiesUpdate.
type TaxonNamePrioritiesUpdate struct {
	Fields            interface{} `json:"fields,omitempty"`
	TaxonNamePriority struct {
		Position int `json:"position"`
	} `json:"taxon_name_priority"`
}

// TaxonNamePriority defines model for TaxonNamePriority.
type TaxonNamePriority struct {
	ID      int    `json:"id"`
	Lexicon string `json:"lexicon"`
	Place   struct {
		DisplayName string             `json:"display_name"`
		ID          int                `json:"id"`
		Name        string             `json:"name,omitempty"`
		UUID        openapi_types.UUID `json:"uuid,omitempty"`
	} `json:"place,omitempty"`
	PlaceID  int `json:"place_id"`
	Position int `json:"position"`
	UserID   int `json:"user_id"`
}

// Update defines model for Update.
type Update struct {
	Comment   Comment   `json:"comment,omitempty"`
	CommentID int       `json:"comment_id"`
	CreatedAt time.Time `json:"created_at,omitempty"`

	// ID Unique auto-increment integer identifier.
	ID               int                `json:"id"`
	Identification   Identification     `json:"identification,omitempty"`
	IdentificationID int                `json:"identification_id"`
	Notification     string             `json:"notification,omitempty"`
	NotifierID       int                `json:"notifier_id,omitempty"`
	NotifierType     string             `json:"notifier_type,omitempty"`
	ResourceID       int                `json:"resource_id,omitempty"`
	ResourceOwnerID  int                `json:"resource_owner_id,omitempty"`
	ResourceType     string             `json:"resource_type,omitempty"`
	ResourceUUID     openapi_types.UUID `json:"resource_uuid,omitempty"`
	Viewed           bool               `json:"viewed,omitempty"`
}

// User defines model for User.
type User struct {
	AnnotatedObservationsCount int       `json:"annotated_observations_count,omitempty"`
	CreatedAt                  time.Time `json:"created_at,omitempty"`
	Description                string    `json:"description"`

	// FavedProjectIds Ordered list of IDs of projects the user has faved
	FavedProjectIds []float32 `json:"faved_project_ids,omitempty"`
	Icon            string    `json:"icon"`
	IconURL         string    `json:"icon_url"`

	// ID Unique auto-increment integer identifier.
	ID                   int       `json:"id"`
	IdentificationsCount int       `json:"identifications_count,omitempty"`
	JournalPostsCount    int       `json:"journal_posts_count,omitempty"`
	LastActive           time.Time `json:"last_active,omitempty"`
	Login                string    `json:"login,omitempty"`
	MonthlySupporter     bool      `json:"monthly_supporter"`
	Name                 string    `json:"name"`
	ObservationsCount    int       `json:"observations_count,omitempty"`
	Orcid                string    `json:"orcid"`
	Preferences          struct {
		// PrefersCommunityTaxa
		//         Whether the user allows the Community Taxon to be the taxon their observation is associated with
		//
		PrefersCommunityTaxa       bool                                      `json:"prefers_community_taxa,omitempty"`
		PrefersObservationFieldsBy UserPreferencesPrefersObservationFieldsBy `json:"prefers_observation_fields_by,omitempty"`
		PrefersProjectAdditionBy   UserPreferencesPrefersProjectAdditionBy   `json:"prefers_project_addition_by,omitempty"`
	} `json:"preferences,omitempty"`
	Roles        []string           `json:"roles,omitempty"`
	Site         Site               `json:"site"`
	SiteID       int                `json:"site_id"`
	Spam         bool               `json:"spam,omitempty"`
	SpeciesCount int                `json:"species_count,omitempty"`
	Suspended    bool               `json:"suspended,omitempty"`
	UpdatedAt    time.Time          `json:"updated_at,omitempty"`
	UUID         openapi_types.UUID `json:"uuid,omitempty"`
}

// UserPreferencesPrefersObservationFieldsBy defines model for User.Preferences.PrefersObservationFieldsBy.
type UserPreferencesPrefersObservationFieldsBy string

// UserPreferencesPrefersProjectAdditionBy defines model for User.Preferences.PrefersProjectAdditionBy.
type UserPreferencesPrefersProjectAdditionBy string

// UsersResetPassword defines model for UsersResetPassword.
type UsersResetPassword struct {
	User struct {
		Email openapi_types.Email `json:"email"`
	} `json:"user,omitempty"`
}

// UsersUpdate defines model for UsersUpdate.
type UsersUpdate struct {
	IconDelete bool `json:"icon_delete,omitempty"`
	User       struct {
		// DataTransferConsent
		//         Whether the user consents to the transfer of their personal
		//         information to the United States. The only way to revoke this consent
		//         is to delete the account.
		//
		DataTransferConsent bool   `json:"data_transfer_consent"`
		Description         string `json:"description"`
		Email               string `json:"email,omitempty"`

		// FavedProjectIds
		//         Ordered list of IDs of projects the user has faved. Order of IDs in
		//         the array is the order in which they will be displayed
		//
		FavedProjectIds []float32              `json:"faved_project_ids,omitempty"`
		Icon            map[string]interface{} `json:"icon"`
		Locale          string                 `json:"locale"`
		Login           string                 `json:"login,omitempty"`

		// MakeObservationLicensesSame Whether a change to `preferred_observation_license` should be apply to all the user's existing observations
		MakeObservationLicensesSame bool `json:"make_observation_licenses_same,omitempty"`

		// MakePhotoLicensesSame Whether a change to `preferred_photo_license` should be apply to all the user's existing photos
		MakePhotoLicensesSame bool `json:"make_photo_licenses_same,omitempty"`

		// MakeSoundLicensesSame Whether a change to `preferred_sound_license` should be apply to all the user's existing sounds
		MakeSoundLicensesSame bool   `json:"make_sound_licenses_same,omitempty"`
		Name                  string `json:"name"`
		Password              string `json:"password,omitempty"`
		PasswordConfirmation  string `json:"password_confirmation,omitempty"`

		// PiConsent
		//         Whether the user consents to the storage of their personal
		//         information. The only way to revoke this consent is to delete the
		//         account.
		//
		PiConsent bool `json:"pi_consent"`

		// PlaceID ID of place for localizing common names
		PlaceID                                             int    `json:"place_id"`
		PreferredObservationFieldsBy                        string `json:"preferred_observation_fields_by,omitempty"`
		PreferredObservationLicense                         string `json:"preferred_observation_license"`
		PreferredPhotoLicense                               string `json:"preferred_photo_license"`
		PreferredProjectAdditionBy                          string `json:"preferred_project_addition_by,omitempty"`
		PreferredSoundLicense                               string `json:"preferred_sound_license"`
		PrefersAutomaticTaxonomicChanges                    bool   `json:"prefers_automatic_taxonomic_changes,omitempty"`
		PrefersCommentEmailNotification                     bool   `json:"prefers_comment_email_notification,omitempty"`
		PrefersCommonNames                                  bool   `json:"prefers_common_names,omitempty"`
		PrefersCommunityTaxa                                bool   `json:"prefers_community_taxa,omitempty"`
		PrefersIdentificationEmailNotification              bool   `json:"prefers_identification_email_notification,omitempty"`
		PrefersInfraspeciesIdentificationNotifications      bool   `json:"prefers_infraspecies_identification_notifications,omitempty"`
		PrefersMentionEmailNotification                     bool   `json:"prefers_mention_email_notification,omitempty"`
		PrefersMessageEmailNotification                     bool   `json:"prefers_message_email_notification,omitempty"`
		PrefersMonthlySupporterBadge                        bool   `json:"prefers_monthly_supporter_badge,omitempty"`
		PrefersNoEmail                                      bool   `json:"prefers_no_email,omitempty"`
		PrefersNoTracking                                   bool   `json:"prefers_no_tracking,omitempty"`
		PrefersNonDisagreeingIdentificationNotifications    bool   `json:"prefers_non_disagreeing_identification_notifications,omitempty"`
		PrefersProjectAddedYourObservationEmailNotification bool   `json:"prefers_project_added_your_observation_email_notification,omitempty"`
		PrefersProjectCuratorChangeEmailNotification        bool   `json:"prefers_project_curator_change_email_notification,omitempty"`
		PrefersProjectJournalPostEmailNotification          bool   `json:"prefers_project_journal_post_email_notification,omitempty"`
		PrefersReceiveMentions                              bool   `json:"prefers_receive_mentions,omitempty"`
		PrefersRedundantIdentificationNotifications         bool   `json:"prefers_redundant_identification_notifications,omitempty"`
		PrefersScientificNameFirst                          bool   `json:"prefers_scientific_name_first,omitempty"`
		PrefersTaxonChangeEmailNotification                 bool   `json:"prefers_taxon_change_email_notification,omitempty"`
		PrefersTaxonOrPlaceObservationEmailNotification     bool   `json:"prefers_taxon_or_place_observation_email_notification,omitempty"`
		PrefersUserObservationEmailNotification             bool   `json:"prefers_user_observation_email_notification,omitempty"`

		// SearchPlaceID ID of place for default observation searches
		SearchPlaceID int    `json:"search_place_id"`
		SiteID        int    `json:"site_id"`
		TimeZone      string `json:"time_zone"`
	} `json:"user,omitempty"`
}

// UsersUpdateMultipart defines model for UsersUpdateMultipart.
type UsersUpdateMultipart struct {
	IconDelete bool `json:"icon_delete,omitempty"`

	// UserDataTransferConsent
	//         Whether the user consents to the transfer of their personal
	//         information to the United States. The only way to revoke this consent
	//         is to delete the account.
	//
	UserDataTransferConsent bool   `json:"user[data_transfer_consent]"`
	UserDescription         string `json:"user[description]"`
	UserEmail               string `json:"user[email],omitempty"`

	// UserFavedProjectIds
	//         Ordered list of IDs of projects the user has faved. Order of IDs in
	//         the array is the order in which they will be displayed
	//
	UserFavedProjectIds []float32          `json:"user[faved_project_ids],omitempty"`
	UserIcon            openapi_types.File `json:"user[icon],omitempty"`
	UserLocale          string             `json:"user[locale]"`
	UserLogin           string             `json:"user[login],omitempty"`

	// UserMakeObservationLicensesSame Whether a change to `preferred_observation_license` should be apply to all the user's existing observations
	UserMakeObservationLicensesSame bool `json:"user[make_observation_licenses_same],omitempty"`

	// UserMakePhotoLicensesSame Whether a change to `preferred_photo_license` should be apply to all the user's existing photos
	UserMakePhotoLicensesSame bool `json:"user[make_photo_licenses_same],omitempty"`

	// UserMakeSoundLicensesSame Whether a change to `preferred_sound_license` should be apply to all the user's existing sounds
	UserMakeSoundLicensesSame bool   `json:"user[make_sound_licenses_same],omitempty"`
	UserName                  string `json:"user[name]"`
	UserPassword              string `json:"user[password],omitempty"`
	UserPasswordConfirmation  string `json:"user[password_confirmation],omitempty"`

	// UserPiConsent
	//         Whether the user consents to the storage of their personal
	//         information. The only way to revoke this consent is to delete the
	//         account.
	//
	UserPiConsent bool `json:"user[pi_consent]"`

	// UserPlaceID ID of place for localizing common names
	UserPlaceID                                             int    `json:"user[place_id]"`
	UserPreferredObservationFieldsBy                        string `json:"user[preferred_observation_fields_by],omitempty"`
	UserPreferredObservationLicense                         string `json:"user[preferred_observation_license]"`
	UserPreferredPhotoLicense                               string `json:"user[preferred_photo_license]"`
	UserPreferredProjectAdditionBy                          string `json:"user[preferred_project_addition_by],omitempty"`
	UserPreferredSoundLicense                               string `json:"user[preferred_sound_license]"`
	UserPrefersAutomaticTaxonomicChanges                    bool   `json:"user[prefers_automatic_taxonomic_changes],omitempty"`
	UserPrefersCommentEmailNotification                     bool   `json:"user[prefers_comment_email_notification],omitempty"`
	UserPrefersCommonNames                                  bool   `json:"user[prefers_common_names],omitempty"`
	UserPrefersCommunityTaxa                                bool   `json:"user[prefers_community_taxa],omitempty"`
	UserPrefersIdentificationEmailNotification              bool   `json:"user[prefers_identification_email_notification],omitempty"`
	UserPrefersInfraspeciesIdentificationNotifications      bool   `json:"user[prefers_infraspecies_identification_notifications],omitempty"`
	UserPrefersMentionEmailNotification                     bool   `json:"user[prefers_mention_email_notification],omitempty"`
	UserPrefersMessageEmailNotification                     bool   `json:"user[prefers_message_email_notification],omitempty"`
	UserPrefersMonthlySupporterBadge                        bool   `json:"user[prefers_monthly_supporter_badge],omitempty"`
	UserPrefersNoEmail                                      bool   `json:"user[prefers_no_email],omitempty"`
	UserPrefersNoTracking                                   bool   `json:"user[prefers_no_tracking],omitempty"`
	UserPrefersNonDisagreeingIdentificationNotifications    bool   `json:"user[prefers_non_disagreeing_identification_notifications],omitempty"`
	UserPrefersProjectAddedYourObservationEmailNotification bool   `json:"user[prefers_project_added_your_observation_email_notification],omitempty"`
	UserPrefersProjectCuratorChangeEmailNotification        bool   `json:"user[prefers_project_curator_change_email_notification],omitempty"`
	UserPrefersProjectJournalPostEmailNotification          bool   `json:"user[prefers_project_journal_post_email_notification],omitempty"`
	UserPrefersReceiveMentions                              bool   `json:"user[prefers_receive_mentions],omitempty"`
	UserPrefersRedundantIdentificationNotifications         bool   `json:"user[prefers_redundant_identification_notifications],omitempty"`
	UserPrefersScientificNameFirst                          bool   `json:"user[prefers_scientific_name_first],omitempty"`
	UserPrefersTaxonChangeEmailNotification                 bool   `json:"user[prefers_taxon_change_email_notification],omitempty"`
	UserPrefersTaxonOrPlaceObservationEmailNotification     bool   `json:"user[prefers_taxon_or_place_observation_email_notification],omitempty"`
	UserPrefersUserObservationEmailNotification             bool   `json:"user[prefers_user_observation_email_notification],omitempty"`

	// UserSearchPlaceID ID of place for default observation searches
	UserSearchPlaceID int    `json:"user[search_place_id]"`
	UserSiteID        int    `json:"user[site_id]"`
	UserTimeZone      string `json:"user[time_zone]"`
}

// UtfGrid defines model for UtfGrid.
type UtfGrid struct {
	Data map[string]interface{} `json:"data"`
	Grid []string               `json:"grid"`
	Keys []string               `json:"keys"`
}

// Vote defines model for Vote.
type Vote struct {
	CreatedAt string `json:"created_at,omitempty"`

	// ID Unique auto-increment integer identifier.
	ID        int    `json:"id,omitempty"`
	User      User   `json:"user"`
	UserID    int    `json:"user_id,omitempty"`
	VoteFlag  bool   `json:"vote_flag,omitempty"`
	VoteScope string `json:"vote_scope"`
}

// GetAnnouncementsParams defines parameters for GetAnnouncements.
type GetAnnouncementsParams struct {
	Placement           GetAnnouncementsParamsPlacement `form:"placement,omitempty" json:"placement,omitempty"`
	Client              GetAnnouncementsParamsClient    `form:"client,omitempty" json:"client,omitempty"`
	Locale              string                          `form:"locale,omitempty" json:"locale,omitempty"`
	Fields              interface{}                     `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string                          `json:"X-HTTP-Method-Override,omitempty"`
}

// GetAnnouncementsParamsPlacement defines parameters for GetAnnouncements.
type GetAnnouncementsParamsPlacement string

// GetAnnouncementsParamsClient defines parameters for GetAnnouncements.
type GetAnnouncementsParamsClient string

// GetAuthorizedApplicationsParams defines parameters for GetAuthorizedApplications.
type GetAuthorizedApplicationsParams struct {
	Fields              string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetControlledTermsParams defines parameters for GetControlledTerms.
type GetControlledTermsParams struct {
	Fields              string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetControlledTermsForTaxonTaxonIDParams defines parameters for GetControlledTermsForTaxonTaxonID.
type GetControlledTermsForTaxonTaxonIDParams struct {
	Fields              string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetGeomodelIDZoomXYPngParams defines parameters for GetGeomodelIDZoomXYPng.
type GetGeomodelIDZoomXYPngParams struct {
	TileSize GetGeomodelIDZoomXYPngParamsTileSize `form:"tile_size,omitempty" json:"tile_size,omitempty"`

	// Thresholded Set to true to render only cells above the Seen Nearby threshold
	Thresholded interface{} `form:"thresholded,omitempty" json:"thresholded,omitempty"`
}

// GetGeomodelIDZoomXYPngParamsTileSize defines parameters for GetGeomodelIDZoomXYPng.
type GetGeomodelIDZoomXYPngParamsTileSize int

// GetGeomodelComparisonIDZoomXYPngParams defines parameters for GetGeomodelComparisonIDZoomXYPng.
type GetGeomodelComparisonIDZoomXYPngParams struct {
	TileSize GetGeomodelComparisonIDZoomXYPngParamsTileSize `form:"tile_size,omitempty" json:"tile_size,omitempty"`
}

// GetGeomodelComparisonIDZoomXYPngParamsTileSize defines parameters for GetGeomodelComparisonIDZoomXYPng.
type GetGeomodelComparisonIDZoomXYPngParamsTileSize int

// GetGeomodelTaxonRangeIDZoomXYPngParams defines parameters for GetGeomodelTaxonRangeIDZoomXYPng.
type GetGeomodelTaxonRangeIDZoomXYPngParams struct {
	TileSize GetGeomodelTaxonRangeIDZoomXYPngParamsTileSize `form:"tile_size,omitempty" json:"tile_size,omitempty"`
}

// GetGeomodelTaxonRangeIDZoomXYPngParamsTileSize defines parameters for GetGeomodelTaxonRangeIDZoomXYPng.
type GetGeomodelTaxonRangeIDZoomXYPngParamsTileSize int

// GetGridZoomXYGridJSONParams defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParams struct {
	TileSize GetGridZoomXYGridJSONParamsTileSize `form:"tile_size,omitempty" json:"tile_size,omitempty"`

	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IDPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                               `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	ID           []GetGridZoomXYGridJSONParams_ID_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotID        []openapi_types.UUID                      `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      []GetGridZoomXYGridJSONParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense []GetGridZoomXYGridJSONParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                  `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceID       []GetGridZoomXYGridJSONParams_PlaceID_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectID     []GetGridZoomXYGridJSONParams_ProjectID_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                  `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            []GetGridZoomXYGridJSONParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteID                          []int                                        `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    []GetGridZoomXYGridJSONParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonID                         []int                                        `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonID                  []int                                        `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       string                                       `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserID                          []string                                     `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       []string                                     `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            []int                                        `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             []int                                        `form:"day,omitempty" json:"day,omitempty"`
	Month                           []int                                        `form:"month,omitempty" json:"month,omitempty"`
	Year                            []int                                        `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      []int                                        `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    []int                                        `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     []int                                        `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermID                          []int                                        `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueID                     []int                                        `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueID              []int                                        `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIDOrUnknown                 []int                                        `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserID                []string                                     `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        int                                          `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        int                                          `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               int                                          `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              string                                       `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              string                                       `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       string                                       `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       string                                       `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       string                                       `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      string                                       `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserID              string                                       `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            string                                       `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentID []int                                        `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              string                                       `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             string                                       `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             []GetGridZoomXYGridJSONParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      []GetGridZoomXYGridJSONParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 []GetGridZoomXYGridJSONParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration []GetGridZoomXYGridJSONParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       []GetGridZoomXYGridJSONParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       []GetGridZoomXYGridJSONParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  []GetGridZoomXYGridJSONParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IDAbove     int                                      `form:"id_above,omitempty" json:"id_above,omitempty"`
	IDBelow     int                                      `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications GetGridZoomXYGridJSONParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                               `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        float32                                   `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        float32                                   `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     float32                                   `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      float32                                   `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      float32                                   `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      float32                                   `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      float32                                   `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListID                     int                                       `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               []string                                  `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor string                                    `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          string                                    `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   GetGridZoomXYGridJSONParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               []GetGridZoomXYGridJSONParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               string                                    `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              string                                    `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               string                                    `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerID                   int                                       `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                               `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                               `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     string                                    `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceID           int                                       `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	TTL                        int                                       `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       int                                       `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    int                                       `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      GetGridZoomXYGridJSONParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    GetGridZoomXYGridJSONParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyID                     interface{}                               `form:"only_id,omitempty" json:"only_id,omitempty"`
}

// GetGridZoomXYGridJSONParamsTileSize defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsTileSize int

// GetGridZoomXYGridJSONParamsID0 defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsID0 = openapi_types.UUID

// GetGridZoomXYGridJSONParamsID1 defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsID1 = int

// GetGridZoomXYGridJSONParamsID2 defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsID2 = string

// GetGridZoomXYGridJSONParams_ID_Item defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParams_ID_Item struct {
	union json.RawMessage
}

// GetGridZoomXYGridJSONParamsLicense defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsLicense string

// GetGridZoomXYGridJSONParamsPhotoLicense defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsPhotoLicense string

// GetGridZoomXYGridJSONParamsPlaceID0 defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsPlaceID0 = openapi_types.UUID

// GetGridZoomXYGridJSONParamsPlaceID1 defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsPlaceID1 = int

// GetGridZoomXYGridJSONParamsPlaceID2 defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsPlaceID2 = string

// GetGridZoomXYGridJSONParams_PlaceID_Item defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParams_PlaceID_Item struct {
	union json.RawMessage
}

// GetGridZoomXYGridJSONParamsProjectID0 defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsProjectID0 = int

// GetGridZoomXYGridJSONParamsProjectID1 defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsProjectID1 = string

// GetGridZoomXYGridJSONParams_ProjectID_Item defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParams_ProjectID_Item struct {
	union json.RawMessage
}

// GetGridZoomXYGridJSONParamsRank defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsRank string

// GetGridZoomXYGridJSONParamsSoundLicense defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsSoundLicense string

// GetGridZoomXYGridJSONParamsCsi defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsCsi string

// GetGridZoomXYGridJSONParamsGeoprivacy defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsGeoprivacy string

// GetGridZoomXYGridJSONParamsTaxonGeoprivacy defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsTaxonGeoprivacy string

// GetGridZoomXYGridJSONParamsObscuration defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsObscuration string

// GetGridZoomXYGridJSONParamsHrank defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsHrank string

// GetGridZoomXYGridJSONParamsLrank defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsLrank string

// GetGridZoomXYGridJSONParamsIconicTaxa defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsIconicTaxa string

// GetGridZoomXYGridJSONParamsIdentifications defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsIdentifications string

// GetGridZoomXYGridJSONParamsSearchOn defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsSearchOn string

// GetGridZoomXYGridJSONParamsQualityGrade defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsQualityGrade string

// GetGridZoomXYGridJSONParamsOrder defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsOrder string

// GetGridZoomXYGridJSONParamsOrderBy defines parameters for GetGridZoomXYGridJSON.
type GetGridZoomXYGridJSONParamsOrderBy string

// GetGridZoomXYPngParams defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParams struct {
	TileSize GetGridZoomXYPngParamsTileSize `form:"tile_size,omitempty" json:"tile_size,omitempty"`

	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IDPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                          `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	ID           []GetGridZoomXYPngParams_ID_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotID        []openapi_types.UUID                 `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      []GetGridZoomXYPngParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense []GetGridZoomXYPngParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                             `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceID       []GetGridZoomXYPngParams_PlaceID_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectID     []GetGridZoomXYPngParams_ProjectID_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                             `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            []GetGridZoomXYPngParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteID                          []int                                   `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    []GetGridZoomXYPngParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonID                         []int                                   `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonID                  []int                                   `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       string                                  `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserID                          []string                                `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       []string                                `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            []int                                   `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             []int                                   `form:"day,omitempty" json:"day,omitempty"`
	Month                           []int                                   `form:"month,omitempty" json:"month,omitempty"`
	Year                            []int                                   `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      []int                                   `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    []int                                   `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     []int                                   `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermID                          []int                                   `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueID                     []int                                   `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueID              []int                                   `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIDOrUnknown                 []int                                   `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserID                []string                                `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        int                                     `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        int                                     `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               int                                     `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              string                                  `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              string                                  `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       string                                  `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       string                                  `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       string                                  `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      string                                  `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserID              string                                  `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            string                                  `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentID []int                                   `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              string                                  `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             string                                  `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             []GetGridZoomXYPngParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      []GetGridZoomXYPngParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 []GetGridZoomXYPngParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration []GetGridZoomXYPngParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       []GetGridZoomXYPngParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       []GetGridZoomXYPngParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  []GetGridZoomXYPngParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IDAbove     int                                 `form:"id_above,omitempty" json:"id_above,omitempty"`
	IDBelow     int                                 `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications GetGridZoomXYPngParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                          `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        float32                              `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        float32                              `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     float32                              `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      float32                              `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      float32                              `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      float32                              `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      float32                              `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListID                     int                                  `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               []string                             `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor string                               `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          string                               `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   GetGridZoomXYPngParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               []GetGridZoomXYPngParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               string                               `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              string                               `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               string                               `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerID                   int                                  `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                          `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                          `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     string                               `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceID           int                                  `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	TTL                        int                                  `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       int                                  `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    int                                  `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      GetGridZoomXYPngParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    GetGridZoomXYPngParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyID                     interface{}                          `form:"only_id,omitempty" json:"only_id,omitempty"`
}

// GetGridZoomXYPngParamsTileSize defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsTileSize int

// GetGridZoomXYPngParamsID0 defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsID0 = openapi_types.UUID

// GetGridZoomXYPngParamsID1 defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsID1 = int

// GetGridZoomXYPngParamsID2 defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsID2 = string

// GetGridZoomXYPngParams_ID_Item defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParams_ID_Item struct {
	union json.RawMessage
}

// GetGridZoomXYPngParamsLicense defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsLicense string

// GetGridZoomXYPngParamsPhotoLicense defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsPhotoLicense string

// GetGridZoomXYPngParamsPlaceID0 defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsPlaceID0 = openapi_types.UUID

// GetGridZoomXYPngParamsPlaceID1 defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsPlaceID1 = int

// GetGridZoomXYPngParamsPlaceID2 defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsPlaceID2 = string

// GetGridZoomXYPngParams_PlaceID_Item defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParams_PlaceID_Item struct {
	union json.RawMessage
}

// GetGridZoomXYPngParamsProjectID0 defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsProjectID0 = int

// GetGridZoomXYPngParamsProjectID1 defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsProjectID1 = string

// GetGridZoomXYPngParams_ProjectID_Item defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParams_ProjectID_Item struct {
	union json.RawMessage
}

// GetGridZoomXYPngParamsRank defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsRank string

// GetGridZoomXYPngParamsSoundLicense defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsSoundLicense string

// GetGridZoomXYPngParamsCsi defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsCsi string

// GetGridZoomXYPngParamsGeoprivacy defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsGeoprivacy string

// GetGridZoomXYPngParamsTaxonGeoprivacy defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsTaxonGeoprivacy string

// GetGridZoomXYPngParamsObscuration defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsObscuration string

// GetGridZoomXYPngParamsHrank defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsHrank string

// GetGridZoomXYPngParamsLrank defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsLrank string

// GetGridZoomXYPngParamsIconicTaxa defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsIconicTaxa string

// GetGridZoomXYPngParamsIdentifications defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsIdentifications string

// GetGridZoomXYPngParamsSearchOn defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsSearchOn string

// GetGridZoomXYPngParamsQualityGrade defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsQualityGrade string

// GetGridZoomXYPngParamsOrder defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsOrder string

// GetGridZoomXYPngParamsOrderBy defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsOrderBy string

// GetHeatmapZoomXYPngParams defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParams struct {
	TileSize GetHeatmapZoomXYPngParamsTileSize `form:"tile_size,omitempty" json:"tile_size,omitempty"`

	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IDPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                             `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	ID           []GetHeatmapZoomXYPngParams_ID_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotID        []openapi_types.UUID                    `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      []GetHeatmapZoomXYPngParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense []GetHeatmapZoomXYPngParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceID       []GetHeatmapZoomXYPngParams_PlaceID_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectID     []GetHeatmapZoomXYPngParams_ProjectID_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            []GetHeatmapZoomXYPngParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteID                          []int                                      `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    []GetHeatmapZoomXYPngParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonID                         []int                                      `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonID                  []int                                      `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       string                                     `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserID                          []string                                   `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       []string                                   `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            []int                                      `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             []int                                      `form:"day,omitempty" json:"day,omitempty"`
	Month                           []int                                      `form:"month,omitempty" json:"month,omitempty"`
	Year                            []int                                      `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      []int                                      `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    []int                                      `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     []int                                      `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermID                          []int                                      `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueID                     []int                                      `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueID              []int                                      `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIDOrUnknown                 []int                                      `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserID                []string                                   `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        int                                        `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        int                                        `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               int                                        `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              string                                     `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              string                                     `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       string                                     `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       string                                     `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       string                                     `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      string                                     `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserID              string                                     `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            string                                     `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentID []int                                      `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              string                                     `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             string                                     `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             []GetHeatmapZoomXYPngParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      []GetHeatmapZoomXYPngParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 []GetHeatmapZoomXYPngParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration []GetHeatmapZoomXYPngParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       []GetHeatmapZoomXYPngParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       []GetHeatmapZoomXYPngParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  []GetHeatmapZoomXYPngParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IDAbove     int                                    `form:"id_above,omitempty" json:"id_above,omitempty"`
	IDBelow     int                                    `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications GetHeatmapZoomXYPngParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                             `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        float32                                 `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        float32                                 `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     float32                                 `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      float32                                 `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      float32                                 `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      float32                                 `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      float32                                 `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListID                     int                                     `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               []string                                `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor string                                  `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          string                                  `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   GetHeatmapZoomXYPngParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               []GetHeatmapZoomXYPngParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               string                                  `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              string                                  `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               string                                  `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerID                   int                                     `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                             `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                             `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     string                                  `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceID           int                                     `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	TTL                        int                                     `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       int                                     `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    int                                     `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      GetHeatmapZoomXYPngParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    GetHeatmapZoomXYPngParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyID                     interface{}                             `form:"only_id,omitempty" json:"only_id,omitempty"`
}

// GetHeatmapZoomXYPngParamsTileSize defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsTileSize int

// GetHeatmapZoomXYPngParamsID0 defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsID0 = openapi_types.UUID

// GetHeatmapZoomXYPngParamsID1 defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsID1 = int

// GetHeatmapZoomXYPngParamsID2 defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsID2 = string

// GetHeatmapZoomXYPngParams_ID_Item defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParams_ID_Item struct {
	union json.RawMessage
}

// GetHeatmapZoomXYPngParamsLicense defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsLicense string

// GetHeatmapZoomXYPngParamsPhotoLicense defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsPhotoLicense string

// GetHeatmapZoomXYPngParamsPlaceID0 defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsPlaceID0 = openapi_types.UUID

// GetHeatmapZoomXYPngParamsPlaceID1 defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsPlaceID1 = int

// GetHeatmapZoomXYPngParamsPlaceID2 defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsPlaceID2 = string

// GetHeatmapZoomXYPngParams_PlaceID_Item defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParams_PlaceID_Item struct {
	union json.RawMessage
}

// GetHeatmapZoomXYPngParamsProjectID0 defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsProjectID0 = int

// GetHeatmapZoomXYPngParamsProjectID1 defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsProjectID1 = string

// GetHeatmapZoomXYPngParams_ProjectID_Item defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParams_ProjectID_Item struct {
	union json.RawMessage
}

// GetHeatmapZoomXYPngParamsRank defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsRank string

// GetHeatmapZoomXYPngParamsSoundLicense defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsSoundLicense string

// GetHeatmapZoomXYPngParamsCsi defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsCsi string

// GetHeatmapZoomXYPngParamsGeoprivacy defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsGeoprivacy string

// GetHeatmapZoomXYPngParamsTaxonGeoprivacy defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsTaxonGeoprivacy string

// GetHeatmapZoomXYPngParamsObscuration defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsObscuration string

// GetHeatmapZoomXYPngParamsHrank defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsHrank string

// GetHeatmapZoomXYPngParamsLrank defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsLrank string

// GetHeatmapZoomXYPngParamsIconicTaxa defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsIconicTaxa string

// GetHeatmapZoomXYPngParamsIdentifications defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsIdentifications string

// GetHeatmapZoomXYPngParamsSearchOn defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsSearchOn string

// GetHeatmapZoomXYPngParamsQualityGrade defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsQualityGrade string

// GetHeatmapZoomXYPngParamsOrder defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsOrder string

// GetHeatmapZoomXYPngParamsOrderBy defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsOrderBy string

// GetIdentificationsIdentifiersParams defines parameters for GetIdentificationsIdentifiers.
type GetIdentificationsIdentifiersParams struct {
	Page    int    `form:"page,omitempty" json:"page,omitempty"`
	PerPage int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Fields  string `form:"fields,omitempty" json:"fields,omitempty"`

	// TaxonID ID taxa must match the given taxa or their descendants
	TaxonID []string `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`

	// QualityGrade Observation must have this quality grade
	QualityGrade        []GetIdentificationsIdentifiersParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	XHTTPMethodOverride string                                            `json:"X-HTTP-Method-Override,omitempty"`
}

// GetIdentificationsIdentifiersParamsQualityGrade defines parameters for GetIdentificationsIdentifiers.
type GetIdentificationsIdentifiersParamsQualityGrade string

// GetIdentificationsRecentTaxaParams defines parameters for GetIdentificationsRecentTaxa.
type GetIdentificationsRecentTaxaParams struct {
	Page       int         `form:"page,omitempty" json:"page,omitempty"`
	PerPage    int         `form:"per_page,omitempty" json:"per_page,omitempty"`
	Fields     string      `form:"fields,omitempty" json:"fields,omitempty"`
	Verifiable interface{} `form:"verifiable,omitempty" json:"verifiable,omitempty"`

	// TaxonID ID taxa must match the given taxa or their descendants
	TaxonID []int `form:"taxon_id" json:"taxon_id"`

	// QualityGrade Observation must have this quality grade
	QualityGrade        []GetIdentificationsRecentTaxaParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	Rank                string                                           `form:"rank,omitempty" json:"rank,omitempty"`
	Category            []string                                         `form:"category,omitempty" json:"category,omitempty"`
	Locale              string                                           `form:"locale,omitempty" json:"locale,omitempty"`
	XHTTPMethodOverride string                                           `json:"X-HTTP-Method-Override,omitempty"`
}

// GetIdentificationsRecentTaxaParamsQualityGrade defines parameters for GetIdentificationsRecentTaxa.
type GetIdentificationsRecentTaxaParamsQualityGrade string

// GetIdentificationsSimilarSpeciesParams defines parameters for GetIdentificationsSimilarSpecies.
type GetIdentificationsSimilarSpeciesParams struct {
	Page    int    `form:"page,omitempty" json:"page,omitempty"`
	PerPage int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Fields  string `form:"fields,omitempty" json:"fields,omitempty"`
	TaxonID int    `form:"taxon_id" json:"taxon_id"`

	// QualityGrade Observation must have this quality grade
	QualityGrade        []GetIdentificationsSimilarSpeciesParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	XHTTPMethodOverride string                                               `json:"X-HTTP-Method-Override,omitempty"`
}

// GetIdentificationsSimilarSpeciesParamsQualityGrade defines parameters for GetIdentificationsSimilarSpecies.
type GetIdentificationsSimilarSpeciesParamsQualityGrade string

// GetMessagesParams defines parameters for GetMessages.
type GetMessagesParams struct {
	Page                int         `form:"page,omitempty" json:"page,omitempty"`
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string      `json:"X-HTTP-Method-Override,omitempty"`
}

// GetMessagesIDParams defines parameters for GetMessagesID.
type GetMessagesIDParams struct {
	Fields              string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsParams defines parameters for GetObservations.
type GetObservationsParams struct {
	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IDPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                         `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	ID           []GetObservationsParams_ID_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotID        []openapi_types.UUID                `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      []GetObservationsParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense []GetObservationsParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                            `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceID       []GetObservationsParams_PlaceID_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectID     []GetObservationsParams_ProjectID_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                            `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            []GetObservationsParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteID                          []int                                  `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    []GetObservationsParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonID                         []int                                  `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonID                  []int                                  `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       string                                 `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserID                          []string                               `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       []string                               `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            []int                                  `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             []int                                  `form:"day,omitempty" json:"day,omitempty"`
	Month                           []int                                  `form:"month,omitempty" json:"month,omitempty"`
	Year                            []int                                  `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      []int                                  `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    []int                                  `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     []int                                  `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermID                          []int                                  `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueID                     []int                                  `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueID              []int                                  `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIDOrUnknown                 []int                                  `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserID                []string                               `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        int                                    `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        int                                    `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               int                                    `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              string                                 `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              string                                 `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       string                                 `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       string                                 `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       string                                 `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      string                                 `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserID              string                                 `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            string                                 `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentID []int                                  `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              string                                 `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             string                                 `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             []GetObservationsParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      []GetObservationsParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 []GetObservationsParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration []GetObservationsParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       []GetObservationsParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       []GetObservationsParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  []GetObservationsParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IDAbove     int                                `form:"id_above,omitempty" json:"id_above,omitempty"`
	IDBelow     int                                `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications GetObservationsParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                         `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        float32                             `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        float32                             `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     float32                             `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      float32                             `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      float32                             `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      float32                             `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      float32                             `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListID                     int                                 `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               []string                            `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor string                              `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          string                              `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   GetObservationsParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               []GetObservationsParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               string                              `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              string                              `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               string                              `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerID                   int                                 `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                         `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                         `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     string                              `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceID           int                                 `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	TTL                        int                                 `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       int                                 `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    int                                 `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      GetObservationsParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    GetObservationsParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyID                     interface{}                         `form:"only_id,omitempty" json:"only_id,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string      `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsParamsID0 defines parameters for GetObservations.
type GetObservationsParamsID0 = openapi_types.UUID

// GetObservationsParamsID1 defines parameters for GetObservations.
type GetObservationsParamsID1 = int

// GetObservationsParamsID2 defines parameters for GetObservations.
type GetObservationsParamsID2 = string

// GetObservationsParams_ID_Item defines parameters for GetObservations.
type GetObservationsParams_ID_Item struct {
	union json.RawMessage
}

// GetObservationsParamsLicense defines parameters for GetObservations.
type GetObservationsParamsLicense string

// GetObservationsParamsPhotoLicense defines parameters for GetObservations.
type GetObservationsParamsPhotoLicense string

// GetObservationsParamsPlaceID0 defines parameters for GetObservations.
type GetObservationsParamsPlaceID0 = openapi_types.UUID

// GetObservationsParamsPlaceID1 defines parameters for GetObservations.
type GetObservationsParamsPlaceID1 = int

// GetObservationsParamsPlaceID2 defines parameters for GetObservations.
type GetObservationsParamsPlaceID2 = string

// GetObservationsParams_PlaceID_Item defines parameters for GetObservations.
type GetObservationsParams_PlaceID_Item struct {
	union json.RawMessage
}

// GetObservationsParamsProjectID0 defines parameters for GetObservations.
type GetObservationsParamsProjectID0 = int

// GetObservationsParamsProjectID1 defines parameters for GetObservations.
type GetObservationsParamsProjectID1 = string

// GetObservationsParams_ProjectID_Item defines parameters for GetObservations.
type GetObservationsParams_ProjectID_Item struct {
	union json.RawMessage
}

// GetObservationsParamsRank defines parameters for GetObservations.
type GetObservationsParamsRank string

// GetObservationsParamsSoundLicense defines parameters for GetObservations.
type GetObservationsParamsSoundLicense string

// GetObservationsParamsCsi defines parameters for GetObservations.
type GetObservationsParamsCsi string

// GetObservationsParamsGeoprivacy defines parameters for GetObservations.
type GetObservationsParamsGeoprivacy string

// GetObservationsParamsTaxonGeoprivacy defines parameters for GetObservations.
type GetObservationsParamsTaxonGeoprivacy string

// GetObservationsParamsObscuration defines parameters for GetObservations.
type GetObservationsParamsObscuration string

// GetObservationsParamsHrank defines parameters for GetObservations.
type GetObservationsParamsHrank string

// GetObservationsParamsLrank defines parameters for GetObservations.
type GetObservationsParamsLrank string

// GetObservationsParamsIconicTaxa defines parameters for GetObservations.
type GetObservationsParamsIconicTaxa string

// GetObservationsParamsIdentifications defines parameters for GetObservations.
type GetObservationsParamsIdentifications string

// GetObservationsParamsSearchOn defines parameters for GetObservations.
type GetObservationsParamsSearchOn string

// GetObservationsParamsQualityGrade defines parameters for GetObservations.
type GetObservationsParamsQualityGrade string

// GetObservationsParamsOrder defines parameters for GetObservations.
type GetObservationsParamsOrder string

// GetObservationsParamsOrderBy defines parameters for GetObservations.
type GetObservationsParamsOrderBy string

// GetObservationsDeletedParams defines parameters for GetObservationsDeleted.
type GetObservationsDeletedParams struct {
	Fields              interface{}        `form:"fields,omitempty" json:"fields,omitempty"`
	Since               openapi_types.Date `form:"since" json:"since"`
	XHTTPMethodOverride string             `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsHistogramParams defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParams struct {
	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IDPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                                  `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	ID           []GetObservationsHistogramParams_ID_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotID        []openapi_types.UUID                         `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      []GetObservationsHistogramParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense []GetObservationsHistogramParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                     `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceID       []GetObservationsHistogramParams_PlaceID_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectID     []GetObservationsHistogramParams_ProjectID_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                     `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            []GetObservationsHistogramParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteID                          []int                                           `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    []GetObservationsHistogramParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonID                         []int                                           `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonID                  []int                                           `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       string                                          `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserID                          []string                                        `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       []string                                        `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            []int                                           `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             []int                                           `form:"day,omitempty" json:"day,omitempty"`
	Month                           []int                                           `form:"month,omitempty" json:"month,omitempty"`
	Year                            []int                                           `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      []int                                           `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    []int                                           `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     []int                                           `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermID                          []int                                           `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueID                     []int                                           `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueID              []int                                           `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIDOrUnknown                 []int                                           `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserID                []string                                        `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        int                                             `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        int                                             `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               int                                             `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              string                                          `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              string                                          `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       string                                          `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       string                                          `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       string                                          `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      string                                          `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserID              string                                          `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            string                                          `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentID []int                                           `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              string                                          `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             string                                          `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             []GetObservationsHistogramParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      []GetObservationsHistogramParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 []GetObservationsHistogramParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration []GetObservationsHistogramParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       []GetObservationsHistogramParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       []GetObservationsHistogramParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  []GetObservationsHistogramParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IDAbove     int                                         `form:"id_above,omitempty" json:"id_above,omitempty"`
	IDBelow     int                                         `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications GetObservationsHistogramParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                                  `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        float32                                      `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        float32                                      `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     float32                                      `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      float32                                      `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      float32                                      `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      float32                                      `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      float32                                      `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListID                     int                                          `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               []string                                     `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor string                                       `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          string                                       `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   GetObservationsHistogramParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               []GetObservationsHistogramParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               string                                       `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              string                                       `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               string                                       `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerID                   int                                          `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                                  `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                                  `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     string                                       `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceID           int                                          `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	TTL                        int                                          `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       int                                          `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    int                                          `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      GetObservationsHistogramParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    GetObservationsHistogramParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyID                     interface{}                                  `form:"only_id,omitempty" json:"only_id,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{}                             `form:"fields,omitempty" json:"fields,omitempty"`
	DateField           GetObservationsHistogramParamsDateField `form:"date_field,omitempty" json:"date_field,omitempty"`
	Interval            GetObservationsHistogramParamsInterval  `form:"interval,omitempty" json:"interval,omitempty"`
	XHTTPMethodOverride string                                  `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsHistogramParamsID0 defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsID0 = openapi_types.UUID

// GetObservationsHistogramParamsID1 defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsID1 = int

// GetObservationsHistogramParamsID2 defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsID2 = string

// GetObservationsHistogramParams_ID_Item defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParams_ID_Item struct {
	union json.RawMessage
}

// GetObservationsHistogramParamsLicense defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsLicense string

// GetObservationsHistogramParamsPhotoLicense defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsPhotoLicense string

// GetObservationsHistogramParamsPlaceID0 defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsPlaceID0 = openapi_types.UUID

// GetObservationsHistogramParamsPlaceID1 defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsPlaceID1 = int

// GetObservationsHistogramParamsPlaceID2 defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsPlaceID2 = string

// GetObservationsHistogramParams_PlaceID_Item defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParams_PlaceID_Item struct {
	union json.RawMessage
}

// GetObservationsHistogramParamsProjectID0 defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsProjectID0 = int

// GetObservationsHistogramParamsProjectID1 defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsProjectID1 = string

// GetObservationsHistogramParams_ProjectID_Item defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParams_ProjectID_Item struct {
	union json.RawMessage
}

// GetObservationsHistogramParamsRank defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsRank string

// GetObservationsHistogramParamsSoundLicense defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsSoundLicense string

// GetObservationsHistogramParamsCsi defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsCsi string

// GetObservationsHistogramParamsGeoprivacy defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsGeoprivacy string

// GetObservationsHistogramParamsTaxonGeoprivacy defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsTaxonGeoprivacy string

// GetObservationsHistogramParamsObscuration defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsObscuration string

// GetObservationsHistogramParamsHrank defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsHrank string

// GetObservationsHistogramParamsLrank defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsLrank string

// GetObservationsHistogramParamsIconicTaxa defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsIconicTaxa string

// GetObservationsHistogramParamsIdentifications defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsIdentifications string

// GetObservationsHistogramParamsSearchOn defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsSearchOn string

// GetObservationsHistogramParamsQualityGrade defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsQualityGrade string

// GetObservationsHistogramParamsOrder defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsOrder string

// GetObservationsHistogramParamsOrderBy defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsOrderBy string

// GetObservationsHistogramParamsDateField defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsDateField string

// GetObservationsHistogramParamsInterval defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsInterval string

// GetObservationsIconicTaxaSpeciesCountsParams defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParams struct {
	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IDPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                                                `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	ID           []GetObservationsIconicTaxaSpeciesCountsParams_ID_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotID        []openapi_types.UUID                                       `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      []GetObservationsIconicTaxaSpeciesCountsParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense []GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                                   `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceID       []GetObservationsIconicTaxaSpeciesCountsParams_PlaceID_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectID     []GetObservationsIconicTaxaSpeciesCountsParams_ProjectID_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                                   `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            []GetObservationsIconicTaxaSpeciesCountsParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteID                          []int                                                         `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    []GetObservationsIconicTaxaSpeciesCountsParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonID                         []int                                                         `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonID                  []int                                                         `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       string                                                        `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserID                          []string                                                      `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       []string                                                      `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            []int                                                         `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             []int                                                         `form:"day,omitempty" json:"day,omitempty"`
	Month                           []int                                                         `form:"month,omitempty" json:"month,omitempty"`
	Year                            []int                                                         `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      []int                                                         `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    []int                                                         `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     []int                                                         `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermID                          []int                                                         `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueID                     []int                                                         `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueID              []int                                                         `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIDOrUnknown                 []int                                                         `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserID                []string                                                      `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        int                                                           `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        int                                                           `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               int                                                           `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              string                                                        `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              string                                                        `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       string                                                        `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       string                                                        `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       string                                                        `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      string                                                        `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserID              string                                                        `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            string                                                        `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentID []int                                                         `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              string                                                        `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             string                                                        `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             []GetObservationsIconicTaxaSpeciesCountsParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      []GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 []GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration []GetObservationsIconicTaxaSpeciesCountsParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       []GetObservationsIconicTaxaSpeciesCountsParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       []GetObservationsIconicTaxaSpeciesCountsParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  []GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IDAbove     int                                                       `form:"id_above,omitempty" json:"id_above,omitempty"`
	IDBelow     int                                                       `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications GetObservationsIconicTaxaSpeciesCountsParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                                                `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        float32                                                    `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        float32                                                    `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     float32                                                    `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      float32                                                    `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      float32                                                    `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      float32                                                    `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      float32                                                    `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListID                     int                                                        `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               []string                                                   `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor string                                                     `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          string                                                     `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   GetObservationsIconicTaxaSpeciesCountsParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               []GetObservationsIconicTaxaSpeciesCountsParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               string                                                     `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              string                                                     `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               string                                                     `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerID                   int                                                        `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                                                `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                                                `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     string                                                     `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceID           int                                                        `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	TTL                        int                                                        `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       int                                                        `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    int                                                        `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      GetObservationsIconicTaxaSpeciesCountsParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    GetObservationsIconicTaxaSpeciesCountsParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyID                     interface{}                                                `form:"only_id,omitempty" json:"only_id,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string      `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsIconicTaxaSpeciesCountsParamsID0 defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsID0 = openapi_types.UUID

// GetObservationsIconicTaxaSpeciesCountsParamsID1 defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsID1 = int

// GetObservationsIconicTaxaSpeciesCountsParamsID2 defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsID2 = string

// GetObservationsIconicTaxaSpeciesCountsParams_ID_Item defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParams_ID_Item struct {
	union json.RawMessage
}

// GetObservationsIconicTaxaSpeciesCountsParamsLicense defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsLicense string

// GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicense defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicense string

// GetObservationsIconicTaxaSpeciesCountsParamsPlaceID0 defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsPlaceID0 = openapi_types.UUID

// GetObservationsIconicTaxaSpeciesCountsParamsPlaceID1 defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsPlaceID1 = int

// GetObservationsIconicTaxaSpeciesCountsParamsPlaceID2 defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsPlaceID2 = string

// GetObservationsIconicTaxaSpeciesCountsParams_PlaceID_Item defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParams_PlaceID_Item struct {
	union json.RawMessage
}

// GetObservationsIconicTaxaSpeciesCountsParamsProjectID0 defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsProjectID0 = int

// GetObservationsIconicTaxaSpeciesCountsParamsProjectID1 defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsProjectID1 = string

// GetObservationsIconicTaxaSpeciesCountsParams_ProjectID_Item defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParams_ProjectID_Item struct {
	union json.RawMessage
}

// GetObservationsIconicTaxaSpeciesCountsParamsRank defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsRank string

// GetObservationsIconicTaxaSpeciesCountsParamsSoundLicense defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsSoundLicense string

// GetObservationsIconicTaxaSpeciesCountsParamsCsi defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsCsi string

// GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacy defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacy string

// GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacy defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacy string

// GetObservationsIconicTaxaSpeciesCountsParamsObscuration defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsObscuration string

// GetObservationsIconicTaxaSpeciesCountsParamsHrank defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsHrank string

// GetObservationsIconicTaxaSpeciesCountsParamsLrank defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsLrank string

// GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa string

// GetObservationsIconicTaxaSpeciesCountsParamsIdentifications defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsIdentifications string

// GetObservationsIconicTaxaSpeciesCountsParamsSearchOn defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsSearchOn string

// GetObservationsIconicTaxaSpeciesCountsParamsQualityGrade defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsQualityGrade string

// GetObservationsIconicTaxaSpeciesCountsParamsOrder defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsOrder string

// GetObservationsIconicTaxaSpeciesCountsParamsOrderBy defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsOrderBy string

// GetObservationsIdentificationCategoriesParams defines parameters for GetObservationsIdentificationCategories.
type GetObservationsIdentificationCategoriesParams struct {
	Fields              string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsIdentifiersParams defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParams struct {
	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IDPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                                    `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	ID           []GetObservationsIdentifiersParams_ID_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotID        []openapi_types.UUID                           `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      []GetObservationsIdentifiersParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense []GetObservationsIdentifiersParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                       `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceID       []GetObservationsIdentifiersParams_PlaceID_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectID     []GetObservationsIdentifiersParams_ProjectID_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                       `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            []GetObservationsIdentifiersParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteID                          []int                                             `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    []GetObservationsIdentifiersParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonID                         []int                                             `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonID                  []int                                             `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       string                                            `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserID                          []string                                          `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       []string                                          `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            []int                                             `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             []int                                             `form:"day,omitempty" json:"day,omitempty"`
	Month                           []int                                             `form:"month,omitempty" json:"month,omitempty"`
	Year                            []int                                             `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      []int                                             `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    []int                                             `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     []int                                             `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermID                          []int                                             `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueID                     []int                                             `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueID              []int                                             `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIDOrUnknown                 []int                                             `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserID                []string                                          `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        int                                               `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        int                                               `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               int                                               `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              string                                            `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              string                                            `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       string                                            `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       string                                            `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       string                                            `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      string                                            `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserID              string                                            `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            string                                            `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentID []int                                             `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              string                                            `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             string                                            `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             []GetObservationsIdentifiersParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      []GetObservationsIdentifiersParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 []GetObservationsIdentifiersParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration []GetObservationsIdentifiersParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       []GetObservationsIdentifiersParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       []GetObservationsIdentifiersParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  []GetObservationsIdentifiersParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IDAbove     int                                           `form:"id_above,omitempty" json:"id_above,omitempty"`
	IDBelow     int                                           `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications GetObservationsIdentifiersParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                                    `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        float32                                        `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        float32                                        `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     float32                                        `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      float32                                        `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      float32                                        `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      float32                                        `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      float32                                        `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListID                     int                                            `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               []string                                       `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor string                                         `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          string                                         `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   GetObservationsIdentifiersParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               []GetObservationsIdentifiersParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               string                                         `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              string                                         `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               string                                         `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerID                   int                                            `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                                    `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                                    `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     string                                         `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceID           int                                            `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	TTL                        int                                            `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       int                                            `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    int                                            `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      GetObservationsIdentifiersParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    GetObservationsIdentifiersParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyID                     interface{}                                    `form:"only_id,omitempty" json:"only_id,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string      `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsIdentifiersParamsID0 defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsID0 = openapi_types.UUID

// GetObservationsIdentifiersParamsID1 defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsID1 = int

// GetObservationsIdentifiersParamsID2 defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsID2 = string

// GetObservationsIdentifiersParams_ID_Item defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParams_ID_Item struct {
	union json.RawMessage
}

// GetObservationsIdentifiersParamsLicense defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsLicense string

// GetObservationsIdentifiersParamsPhotoLicense defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsPhotoLicense string

// GetObservationsIdentifiersParamsPlaceID0 defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsPlaceID0 = openapi_types.UUID

// GetObservationsIdentifiersParamsPlaceID1 defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsPlaceID1 = int

// GetObservationsIdentifiersParamsPlaceID2 defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsPlaceID2 = string

// GetObservationsIdentifiersParams_PlaceID_Item defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParams_PlaceID_Item struct {
	union json.RawMessage
}

// GetObservationsIdentifiersParamsProjectID0 defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsProjectID0 = int

// GetObservationsIdentifiersParamsProjectID1 defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsProjectID1 = string

// GetObservationsIdentifiersParams_ProjectID_Item defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParams_ProjectID_Item struct {
	union json.RawMessage
}

// GetObservationsIdentifiersParamsRank defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsRank string

// GetObservationsIdentifiersParamsSoundLicense defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsSoundLicense string

// GetObservationsIdentifiersParamsCsi defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsCsi string

// GetObservationsIdentifiersParamsGeoprivacy defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsGeoprivacy string

// GetObservationsIdentifiersParamsTaxonGeoprivacy defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsTaxonGeoprivacy string

// GetObservationsIdentifiersParamsObscuration defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsObscuration string

// GetObservationsIdentifiersParamsHrank defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsHrank string

// GetObservationsIdentifiersParamsLrank defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsLrank string

// GetObservationsIdentifiersParamsIconicTaxa defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsIconicTaxa string

// GetObservationsIdentifiersParamsIdentifications defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsIdentifications string

// GetObservationsIdentifiersParamsSearchOn defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsSearchOn string

// GetObservationsIdentifiersParamsQualityGrade defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsQualityGrade string

// GetObservationsIdentifiersParamsOrder defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsOrder string

// GetObservationsIdentifiersParamsOrderBy defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsOrderBy string

// GetObservationsObserversParams defines parameters for GetObservationsObservers.
type GetObservationsObserversParams struct {
	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IDPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                                  `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	ID           []GetObservationsObserversParams_ID_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotID        []openapi_types.UUID                         `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      []GetObservationsObserversParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense []GetObservationsObserversParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                     `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceID       []GetObservationsObserversParams_PlaceID_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectID     []GetObservationsObserversParams_ProjectID_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                     `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            []GetObservationsObserversParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteID                          []int                                           `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    []GetObservationsObserversParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonID                         []int                                           `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonID                  []int                                           `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       string                                          `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserID                          []string                                        `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       []string                                        `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            []int                                           `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             []int                                           `form:"day,omitempty" json:"day,omitempty"`
	Month                           []int                                           `form:"month,omitempty" json:"month,omitempty"`
	Year                            []int                                           `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      []int                                           `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    []int                                           `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     []int                                           `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermID                          []int                                           `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueID                     []int                                           `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueID              []int                                           `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIDOrUnknown                 []int                                           `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserID                []string                                        `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        int                                             `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        int                                             `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               int                                             `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              string                                          `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              string                                          `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       string                                          `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       string                                          `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       string                                          `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      string                                          `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserID              string                                          `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            string                                          `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentID []int                                           `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              string                                          `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             string                                          `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             []GetObservationsObserversParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      []GetObservationsObserversParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 []GetObservationsObserversParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration []GetObservationsObserversParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       []GetObservationsObserversParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       []GetObservationsObserversParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  []GetObservationsObserversParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IDAbove     int                                         `form:"id_above,omitempty" json:"id_above,omitempty"`
	IDBelow     int                                         `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications GetObservationsObserversParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                                  `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        float32                                      `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        float32                                      `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     float32                                      `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      float32                                      `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      float32                                      `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      float32                                      `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      float32                                      `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListID                     int                                          `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               []string                                     `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor string                                       `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          string                                       `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   GetObservationsObserversParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               []GetObservationsObserversParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               string                                       `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              string                                       `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               string                                       `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerID                   int                                          `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                                  `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                                  `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     string                                       `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceID           int                                          `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	TTL                        int                                          `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       int                                          `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    int                                          `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      GetObservationsObserversParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OnlyID                     interface{}                                  `form:"only_id,omitempty" json:"only_id,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{}                           `form:"fields,omitempty" json:"fields,omitempty"`
	OrderBy             GetObservationsObserversParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
	XHTTPMethodOverride string                                `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsObserversParamsID0 defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsID0 = openapi_types.UUID

// GetObservationsObserversParamsID1 defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsID1 = int

// GetObservationsObserversParamsID2 defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsID2 = string

// GetObservationsObserversParams_ID_Item defines parameters for GetObservationsObservers.
type GetObservationsObserversParams_ID_Item struct {
	union json.RawMessage
}

// GetObservationsObserversParamsLicense defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsLicense string

// GetObservationsObserversParamsPhotoLicense defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsPhotoLicense string

// GetObservationsObserversParamsPlaceID0 defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsPlaceID0 = openapi_types.UUID

// GetObservationsObserversParamsPlaceID1 defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsPlaceID1 = int

// GetObservationsObserversParamsPlaceID2 defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsPlaceID2 = string

// GetObservationsObserversParams_PlaceID_Item defines parameters for GetObservationsObservers.
type GetObservationsObserversParams_PlaceID_Item struct {
	union json.RawMessage
}

// GetObservationsObserversParamsProjectID0 defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsProjectID0 = int

// GetObservationsObserversParamsProjectID1 defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsProjectID1 = string

// GetObservationsObserversParams_ProjectID_Item defines parameters for GetObservationsObservers.
type GetObservationsObserversParams_ProjectID_Item struct {
	union json.RawMessage
}

// GetObservationsObserversParamsRank defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsRank string

// GetObservationsObserversParamsSoundLicense defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsSoundLicense string

// GetObservationsObserversParamsCsi defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsCsi string

// GetObservationsObserversParamsGeoprivacy defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsGeoprivacy string

// GetObservationsObserversParamsTaxonGeoprivacy defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsTaxonGeoprivacy string

// GetObservationsObserversParamsObscuration defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsObscuration string

// GetObservationsObserversParamsHrank defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsHrank string

// GetObservationsObserversParamsLrank defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsLrank string

// GetObservationsObserversParamsIconicTaxa defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsIconicTaxa string

// GetObservationsObserversParamsIdentifications defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsIdentifications string

// GetObservationsObserversParamsSearchOn defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsSearchOn string

// GetObservationsObserversParamsQualityGrade defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsQualityGrade string

// GetObservationsObserversParamsOrder defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsOrder string

// GetObservationsObserversParamsOrderBy defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsOrderBy string

// GetObservationsPopularFieldValuesParams defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParams struct {
	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IDPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                                           `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	ID           []GetObservationsPopularFieldValuesParams_ID_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotID        []openapi_types.UUID                                  `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      []GetObservationsPopularFieldValuesParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense []GetObservationsPopularFieldValuesParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                              `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceID       []GetObservationsPopularFieldValuesParams_PlaceID_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectID     []GetObservationsPopularFieldValuesParams_ProjectID_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                              `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            []GetObservationsPopularFieldValuesParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteID                          []int                                                    `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    []GetObservationsPopularFieldValuesParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonID                         []int                                                    `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonID                  []int                                                    `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       string                                                   `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserID                          []string                                                 `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       []string                                                 `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            []int                                                    `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             []int                                                    `form:"day,omitempty" json:"day,omitempty"`
	Month                           []int                                                    `form:"month,omitempty" json:"month,omitempty"`
	Year                            []int                                                    `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      []int                                                    `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    []int                                                    `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     []int                                                    `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermID                          []int                                                    `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueID                     []int                                                    `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueID              []int                                                    `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIDOrUnknown                 []int                                                    `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserID                []string                                                 `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        int                                                      `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        int                                                      `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               int                                                      `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              string                                                   `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              string                                                   `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       string                                                   `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       string                                                   `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       string                                                   `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      string                                                   `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserID              string                                                   `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            string                                                   `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentID []int                                                    `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              string                                                   `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             string                                                   `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             []GetObservationsPopularFieldValuesParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      []GetObservationsPopularFieldValuesParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 []GetObservationsPopularFieldValuesParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration []GetObservationsPopularFieldValuesParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       []GetObservationsPopularFieldValuesParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       []GetObservationsPopularFieldValuesParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  []GetObservationsPopularFieldValuesParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IDAbove     int                                                  `form:"id_above,omitempty" json:"id_above,omitempty"`
	IDBelow     int                                                  `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications GetObservationsPopularFieldValuesParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                                           `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        float32                                               `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        float32                                               `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     float32                                               `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      float32                                               `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      float32                                               `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      float32                                               `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      float32                                               `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListID                     int                                                   `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               []string                                              `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor string                                                `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          string                                                `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   GetObservationsPopularFieldValuesParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               []GetObservationsPopularFieldValuesParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               string                                                `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              string                                                `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               string                                                `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerID                   int                                                   `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                                           `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                                           `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     string                                                `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceID           int                                                   `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	TTL                        int                                                   `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       int                                                   `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    int                                                   `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      GetObservationsPopularFieldValuesParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    GetObservationsPopularFieldValuesParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyID                     interface{}                                           `form:"only_id,omitempty" json:"only_id,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{}                                      `form:"fields,omitempty" json:"fields,omitempty"`
	NoHistograms        interface{}                                      `form:"no_histograms,omitempty" json:"no_histograms,omitempty"`
	Unannotated         interface{}                                      `form:"unannotated,omitempty" json:"unannotated,omitempty"`
	DateField           GetObservationsPopularFieldValuesParamsDateField `form:"date_field,omitempty" json:"date_field,omitempty"`
	Interval            GetObservationsPopularFieldValuesParamsInterval  `form:"interval,omitempty" json:"interval,omitempty"`
	XHTTPMethodOverride string                                           `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsPopularFieldValuesParamsID0 defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsID0 = openapi_types.UUID

// GetObservationsPopularFieldValuesParamsID1 defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsID1 = int

// GetObservationsPopularFieldValuesParamsID2 defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsID2 = string

// GetObservationsPopularFieldValuesParams_ID_Item defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParams_ID_Item struct {
	union json.RawMessage
}

// GetObservationsPopularFieldValuesParamsLicense defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsLicense string

// GetObservationsPopularFieldValuesParamsPhotoLicense defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsPhotoLicense string

// GetObservationsPopularFieldValuesParamsPlaceID0 defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsPlaceID0 = openapi_types.UUID

// GetObservationsPopularFieldValuesParamsPlaceID1 defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsPlaceID1 = int

// GetObservationsPopularFieldValuesParamsPlaceID2 defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsPlaceID2 = string

// GetObservationsPopularFieldValuesParams_PlaceID_Item defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParams_PlaceID_Item struct {
	union json.RawMessage
}

// GetObservationsPopularFieldValuesParamsProjectID0 defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsProjectID0 = int

// GetObservationsPopularFieldValuesParamsProjectID1 defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsProjectID1 = string

// GetObservationsPopularFieldValuesParams_ProjectID_Item defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParams_ProjectID_Item struct {
	union json.RawMessage
}

// GetObservationsPopularFieldValuesParamsRank defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsRank string

// GetObservationsPopularFieldValuesParamsSoundLicense defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsSoundLicense string

// GetObservationsPopularFieldValuesParamsCsi defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsCsi string

// GetObservationsPopularFieldValuesParamsGeoprivacy defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsGeoprivacy string

// GetObservationsPopularFieldValuesParamsTaxonGeoprivacy defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsTaxonGeoprivacy string

// GetObservationsPopularFieldValuesParamsObscuration defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsObscuration string

// GetObservationsPopularFieldValuesParamsHrank defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsHrank string

// GetObservationsPopularFieldValuesParamsLrank defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsLrank string

// GetObservationsPopularFieldValuesParamsIconicTaxa defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsIconicTaxa string

// GetObservationsPopularFieldValuesParamsIdentifications defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsIdentifications string

// GetObservationsPopularFieldValuesParamsSearchOn defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsSearchOn string

// GetObservationsPopularFieldValuesParamsQualityGrade defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsQualityGrade string

// GetObservationsPopularFieldValuesParamsOrder defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsOrder string

// GetObservationsPopularFieldValuesParamsOrderBy defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsOrderBy string

// GetObservationsPopularFieldValuesParamsDateField defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsDateField string

// GetObservationsPopularFieldValuesParamsInterval defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsInterval string

// GetObservationsQualityGradesParams defines parameters for GetObservationsQualityGrades.
type GetObservationsQualityGradesParams struct {
	Fields              string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsSpeciesCountsParams defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParams struct {
	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IDPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                                      `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	ID           []GetObservationsSpeciesCountsParams_ID_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotID        []openapi_types.UUID                             `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      []GetObservationsSpeciesCountsParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense []GetObservationsSpeciesCountsParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                         `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceID       []GetObservationsSpeciesCountsParams_PlaceID_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectID     []GetObservationsSpeciesCountsParams_ProjectID_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                         `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            []GetObservationsSpeciesCountsParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteID                          []int                                               `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    []GetObservationsSpeciesCountsParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonID                         []int                                               `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonID                  []int                                               `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       string                                              `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserID                          []string                                            `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       []string                                            `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            []int                                               `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             []int                                               `form:"day,omitempty" json:"day,omitempty"`
	Month                           []int                                               `form:"month,omitempty" json:"month,omitempty"`
	Year                            []int                                               `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      []int                                               `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    []int                                               `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     []int                                               `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermID                          []int                                               `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueID                     []int                                               `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueID              []int                                               `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIDOrUnknown                 []int                                               `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserID                []string                                            `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        int                                                 `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        int                                                 `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               int                                                 `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              string                                              `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              string                                              `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       string                                              `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       string                                              `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       string                                              `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      string                                              `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserID              string                                              `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            string                                              `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentID []int                                               `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              string                                              `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             string                                              `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             []GetObservationsSpeciesCountsParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      []GetObservationsSpeciesCountsParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 []GetObservationsSpeciesCountsParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration []GetObservationsSpeciesCountsParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       []GetObservationsSpeciesCountsParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       []GetObservationsSpeciesCountsParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  []GetObservationsSpeciesCountsParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IDAbove     int                                             `form:"id_above,omitempty" json:"id_above,omitempty"`
	IDBelow     int                                             `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications GetObservationsSpeciesCountsParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                                      `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        float32                                          `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        float32                                          `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     float32                                          `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      float32                                          `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      float32                                          `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      float32                                          `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      float32                                          `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListID                     int                                              `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               []string                                         `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor string                                           `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          string                                           `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   GetObservationsSpeciesCountsParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               []GetObservationsSpeciesCountsParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               string                                           `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              string                                           `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               string                                           `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerID                   int                                              `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                                      `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                                      `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     string                                           `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceID           int                                              `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	TTL                        int                                              `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       int                                              `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    int                                              `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      GetObservationsSpeciesCountsParamsOrder          `form:"order,omitempty" json:"order,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	IncludeAncestors    interface{} `form:"include_ancestors,omitempty" json:"include_ancestors,omitempty"`
	XHTTPMethodOverride string      `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsSpeciesCountsParamsID0 defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsID0 = openapi_types.UUID

// GetObservationsSpeciesCountsParamsID1 defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsID1 = int

// GetObservationsSpeciesCountsParamsID2 defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsID2 = string

// GetObservationsSpeciesCountsParams_ID_Item defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParams_ID_Item struct {
	union json.RawMessage
}

// GetObservationsSpeciesCountsParamsLicense defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsLicense string

// GetObservationsSpeciesCountsParamsPhotoLicense defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsPhotoLicense string

// GetObservationsSpeciesCountsParamsPlaceID0 defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsPlaceID0 = openapi_types.UUID

// GetObservationsSpeciesCountsParamsPlaceID1 defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsPlaceID1 = int

// GetObservationsSpeciesCountsParamsPlaceID2 defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsPlaceID2 = string

// GetObservationsSpeciesCountsParams_PlaceID_Item defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParams_PlaceID_Item struct {
	union json.RawMessage
}

// GetObservationsSpeciesCountsParamsProjectID0 defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsProjectID0 = int

// GetObservationsSpeciesCountsParamsProjectID1 defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsProjectID1 = string

// GetObservationsSpeciesCountsParams_ProjectID_Item defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParams_ProjectID_Item struct {
	union json.RawMessage
}

// GetObservationsSpeciesCountsParamsRank defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsRank string

// GetObservationsSpeciesCountsParamsSoundLicense defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsSoundLicense string

// GetObservationsSpeciesCountsParamsCsi defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsCsi string

// GetObservationsSpeciesCountsParamsGeoprivacy defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsGeoprivacy string

// GetObservationsSpeciesCountsParamsTaxonGeoprivacy defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsTaxonGeoprivacy string

// GetObservationsSpeciesCountsParamsObscuration defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsObscuration string

// GetObservationsSpeciesCountsParamsHrank defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsHrank string

// GetObservationsSpeciesCountsParamsLrank defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsLrank string

// GetObservationsSpeciesCountsParamsIconicTaxa defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsIconicTaxa string

// GetObservationsSpeciesCountsParamsIdentifications defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsIdentifications string

// GetObservationsSpeciesCountsParamsSearchOn defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsSearchOn string

// GetObservationsSpeciesCountsParamsQualityGrade defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsQualityGrade string

// GetObservationsSpeciesCountsParamsOrder defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsOrder string

// GetObservationsUmbrellaProjectStatsParams defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParams struct {
	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IDPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                                             `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	ID           []GetObservationsUmbrellaProjectStatsParams_ID_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotID        []openapi_types.UUID                                    `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      []GetObservationsUmbrellaProjectStatsParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense []GetObservationsUmbrellaProjectStatsParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                                `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceID       []GetObservationsUmbrellaProjectStatsParams_PlaceID_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectID     []GetObservationsUmbrellaProjectStatsParams_ProjectID_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                                `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            []GetObservationsUmbrellaProjectStatsParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteID                          []int                                                      `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    []GetObservationsUmbrellaProjectStatsParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonID                         []int                                                      `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonID                  []int                                                      `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       string                                                     `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserID                          []string                                                   `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       []string                                                   `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            []int                                                      `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             []int                                                      `form:"day,omitempty" json:"day,omitempty"`
	Month                           []int                                                      `form:"month,omitempty" json:"month,omitempty"`
	Year                            []int                                                      `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      []int                                                      `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    []int                                                      `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     []int                                                      `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermID                          []int                                                      `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueID                     []int                                                      `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueID              []int                                                      `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIDOrUnknown                 []int                                                      `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserID                []string                                                   `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        int                                                        `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        int                                                        `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               int                                                        `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              string                                                     `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              string                                                     `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       string                                                     `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       string                                                     `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       string                                                     `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      string                                                     `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserID              string                                                     `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            string                                                     `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentID []int                                                      `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              string                                                     `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             string                                                     `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             []GetObservationsUmbrellaProjectStatsParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      []GetObservationsUmbrellaProjectStatsParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 []GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration []GetObservationsUmbrellaProjectStatsParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       []GetObservationsUmbrellaProjectStatsParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       []GetObservationsUmbrellaProjectStatsParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  []GetObservationsUmbrellaProjectStatsParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IDAbove     int                                                    `form:"id_above,omitempty" json:"id_above,omitempty"`
	IDBelow     int                                                    `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications GetObservationsUmbrellaProjectStatsParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                                             `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        float32                                                 `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        float32                                                 `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     float32                                                 `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      float32                                                 `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      float32                                                 `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      float32                                                 `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      float32                                                 `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListID                     int                                                     `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               []string                                                `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor string                                                  `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          string                                                  `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   GetObservationsUmbrellaProjectStatsParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               []GetObservationsUmbrellaProjectStatsParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               string                                                  `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              string                                                  `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               string                                                  `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerID                   int                                                     `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                                             `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                                             `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     string                                                  `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceID           int                                                     `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	TTL                        int                                                     `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       int                                                     `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    int                                                     `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      GetObservationsUmbrellaProjectStatsParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    GetObservationsUmbrellaProjectStatsParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyID                     interface{}                                             `form:"only_id,omitempty" json:"only_id,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string      `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsUmbrellaProjectStatsParamsID0 defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsID0 = openapi_types.UUID

// GetObservationsUmbrellaProjectStatsParamsID1 defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsID1 = int

// GetObservationsUmbrellaProjectStatsParamsID2 defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsID2 = string

// GetObservationsUmbrellaProjectStatsParams_ID_Item defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParams_ID_Item struct {
	union json.RawMessage
}

// GetObservationsUmbrellaProjectStatsParamsLicense defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsLicense string

// GetObservationsUmbrellaProjectStatsParamsPhotoLicense defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsPhotoLicense string

// GetObservationsUmbrellaProjectStatsParamsPlaceID0 defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsPlaceID0 = openapi_types.UUID

// GetObservationsUmbrellaProjectStatsParamsPlaceID1 defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsPlaceID1 = int

// GetObservationsUmbrellaProjectStatsParamsPlaceID2 defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsPlaceID2 = string

// GetObservationsUmbrellaProjectStatsParams_PlaceID_Item defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParams_PlaceID_Item struct {
	union json.RawMessage
}

// GetObservationsUmbrellaProjectStatsParamsProjectID0 defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsProjectID0 = int

// GetObservationsUmbrellaProjectStatsParamsProjectID1 defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsProjectID1 = string

// GetObservationsUmbrellaProjectStatsParams_ProjectID_Item defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParams_ProjectID_Item struct {
	union json.RawMessage
}

// GetObservationsUmbrellaProjectStatsParamsRank defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsRank string

// GetObservationsUmbrellaProjectStatsParamsSoundLicense defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsSoundLicense string

// GetObservationsUmbrellaProjectStatsParamsCsi defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsCsi string

// GetObservationsUmbrellaProjectStatsParamsGeoprivacy defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsGeoprivacy string

// GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacy defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacy string

// GetObservationsUmbrellaProjectStatsParamsObscuration defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsObscuration string

// GetObservationsUmbrellaProjectStatsParamsHrank defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsHrank string

// GetObservationsUmbrellaProjectStatsParamsLrank defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsLrank string

// GetObservationsUmbrellaProjectStatsParamsIconicTaxa defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsIconicTaxa string

// GetObservationsUmbrellaProjectStatsParamsIdentifications defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsIdentifications string

// GetObservationsUmbrellaProjectStatsParamsSearchOn defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsSearchOn string

// GetObservationsUmbrellaProjectStatsParamsQualityGrade defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsQualityGrade string

// GetObservationsUmbrellaProjectStatsParamsOrder defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsOrder string

// GetObservationsUmbrellaProjectStatsParamsOrderBy defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsOrderBy string

// GetObservationsUpdatesParams defines parameters for GetObservationsUpdates.
type GetObservationsUpdatesParams struct {
	// CreatedAfter ISO8601 datetime after which the update was created
	CreatedAfter string `form:"created_after,omitempty" json:"created_after,omitempty"`

	// Viewed When false this only returns updates that have not been viewed by the authenticated user. When true it returns all updates.
	Viewed interface{} `form:"viewed,omitempty" json:"viewed,omitempty"`

	// ObservationsBy Restrict to updates on observations by the authenticated user (owner) or on observations the authenticated user is following
	ObservationsBy      GetObservationsUpdatesParamsObservationsBy `form:"observations_by,omitempty" json:"observations_by,omitempty"`
	Page                int                                        `form:"page,omitempty" json:"page,omitempty"`
	PerPage             int                                        `form:"per_page,omitempty" json:"per_page,omitempty"`
	Fields              interface{}                                `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string                                     `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsUpdatesParamsObservationsBy defines parameters for GetObservationsUpdates.
type GetObservationsUpdatesParamsObservationsBy string

// GetObservationsUUIDParams defines parameters for GetObservationsUUID.
type GetObservationsUUIDParams struct {
	Fields              string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string `json:"X-HTTP-Method-Override,omitempty"`
}

// DeleteObservationsUUIDQualityMetricParamsMetric defines parameters for DeleteObservationsUUIDQualityMetric.
type DeleteObservationsUUIDQualityMetricParamsMetric string

// PostObservationsUUIDQualityMetricParams defines parameters for PostObservationsUUIDQualityMetric.
type PostObservationsUUIDQualityMetricParams struct {
	Agree interface{} `form:"agree,omitempty" json:"agree,omitempty"`
}

// PostObservationsUUIDQualityMetricParamsMetric defines parameters for PostObservationsUUIDQualityMetric.
type PostObservationsUUIDQualityMetricParamsMetric string

// GetObservationsUUIDQualityMetricsParams defines parameters for GetObservationsUUIDQualityMetrics.
type GetObservationsUUIDQualityMetricsParams struct {
	Fields              string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsUUIDSubscriptionsParams defines parameters for GetObservationsUUIDSubscriptions.
type GetObservationsUUIDSubscriptionsParams struct {
	Fields              string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsUUIDTaxonSummaryParams defines parameters for GetObservationsUUIDTaxonSummary.
type GetObservationsUUIDTaxonSummaryParams struct {
	// Community Show info about the community taxon instead of the observation taxon
	Community interface{} `form:"community,omitempty" json:"community,omitempty"`
}

// GetPlacesParams defines parameters for GetPlaces.
type GetPlacesParams struct {
	Q                   string                 `form:"q,omitempty" json:"q,omitempty"`
	OrderBy             GetPlacesParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
	Geo                 interface{}            `form:"geo,omitempty" json:"geo,omitempty"`
	PerPage             int                    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Fields              interface{}            `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string                 `json:"X-HTTP-Method-Override,omitempty"`
}

// GetPlacesParamsOrderBy defines parameters for GetPlaces.
type GetPlacesParamsOrderBy string

// GetPlacesNearbyParams defines parameters for GetPlacesNearby.
type GetPlacesNearbyParams struct {
	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IDPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                         `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	ID           []GetPlacesNearbyParams_ID_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotID        []openapi_types.UUID                `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      []GetPlacesNearbyParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense []GetPlacesNearbyParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                            `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceID       []GetPlacesNearbyParams_PlaceID_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectID     []GetPlacesNearbyParams_ProjectID_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                            `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            []GetPlacesNearbyParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteID                          []int                                  `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    []GetPlacesNearbyParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonID                         []int                                  `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonID                  []int                                  `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       string                                 `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserID                          []string                               `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       []string                               `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            []int                                  `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             []int                                  `form:"day,omitempty" json:"day,omitempty"`
	Month                           []int                                  `form:"month,omitempty" json:"month,omitempty"`
	Year                            []int                                  `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      []int                                  `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    []int                                  `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     []int                                  `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermID                          []int                                  `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueID                     []int                                  `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueID              []int                                  `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIDOrUnknown                 []int                                  `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserID                []string                               `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        int                                    `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        int                                    `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               int                                    `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              string                                 `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              string                                 `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       string                                 `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       string                                 `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       string                                 `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      string                                 `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserID              string                                 `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            string                                 `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentID []int                                  `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              string                                 `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             string                                 `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             []GetPlacesNearbyParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      []GetPlacesNearbyParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 []GetPlacesNearbyParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration []GetPlacesNearbyParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       []GetPlacesNearbyParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       []GetPlacesNearbyParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  []GetPlacesNearbyParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IDAbove     int                                `form:"id_above,omitempty" json:"id_above,omitempty"`
	IDBelow     int                                `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications GetPlacesNearbyParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                         `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        float32                             `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        float32                             `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     float32                             `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      float32                             `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      float32                             `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      float32                             `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      float32                             `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListID                     int                                 `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               []string                            `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor string                              `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          string                              `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   GetPlacesNearbyParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               []GetPlacesNearbyParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               string                              `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              string                              `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               string                              `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerID                   int                                 `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                         `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                         `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     string                              `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceID           int                                 `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	TTL                        int                                 `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       int                                 `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    int                                 `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      GetPlacesNearbyParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    GetPlacesNearbyParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyID                     interface{}                         `form:"only_id,omitempty" json:"only_id,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{}                    `form:"fields,omitempty" json:"fields,omitempty"`
	DateField           GetPlacesNearbyParamsDateField `form:"date_field,omitempty" json:"date_field,omitempty"`
	Interval            GetPlacesNearbyParamsInterval  `form:"interval,omitempty" json:"interval,omitempty"`
	XHTTPMethodOverride string                         `json:"X-HTTP-Method-Override,omitempty"`
}

// GetPlacesNearbyParamsID0 defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsID0 = openapi_types.UUID

// GetPlacesNearbyParamsID1 defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsID1 = int

// GetPlacesNearbyParamsID2 defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsID2 = string

// GetPlacesNearbyParams_ID_Item defines parameters for GetPlacesNearby.
type GetPlacesNearbyParams_ID_Item struct {
	union json.RawMessage
}

// GetPlacesNearbyParamsLicense defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsLicense string

// GetPlacesNearbyParamsPhotoLicense defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsPhotoLicense string

// GetPlacesNearbyParamsPlaceID0 defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsPlaceID0 = openapi_types.UUID

// GetPlacesNearbyParamsPlaceID1 defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsPlaceID1 = int

// GetPlacesNearbyParamsPlaceID2 defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsPlaceID2 = string

// GetPlacesNearbyParams_PlaceID_Item defines parameters for GetPlacesNearby.
type GetPlacesNearbyParams_PlaceID_Item struct {
	union json.RawMessage
}

// GetPlacesNearbyParamsProjectID0 defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsProjectID0 = int

// GetPlacesNearbyParamsProjectID1 defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsProjectID1 = string

// GetPlacesNearbyParams_ProjectID_Item defines parameters for GetPlacesNearby.
type GetPlacesNearbyParams_ProjectID_Item struct {
	union json.RawMessage
}

// GetPlacesNearbyParamsRank defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsRank string

// GetPlacesNearbyParamsSoundLicense defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsSoundLicense string

// GetPlacesNearbyParamsCsi defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsCsi string

// GetPlacesNearbyParamsGeoprivacy defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsGeoprivacy string

// GetPlacesNearbyParamsTaxonGeoprivacy defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsTaxonGeoprivacy string

// GetPlacesNearbyParamsObscuration defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsObscuration string

// GetPlacesNearbyParamsHrank defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsHrank string

// GetPlacesNearbyParamsLrank defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsLrank string

// GetPlacesNearbyParamsIconicTaxa defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsIconicTaxa string

// GetPlacesNearbyParamsIdentifications defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsIdentifications string

// GetPlacesNearbyParamsSearchOn defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsSearchOn string

// GetPlacesNearbyParamsQualityGrade defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsQualityGrade string

// GetPlacesNearbyParamsOrder defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsOrder string

// GetPlacesNearbyParamsOrderBy defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsOrderBy string

// GetPlacesNearbyParamsDateField defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsDateField string

// GetPlacesNearbyParamsInterval defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsInterval string

// GetPlacesIDZoomXYPngParams defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParams struct {
	TileSize GetPlacesIDZoomXYPngParamsTileSize `form:"tile_size,omitempty" json:"tile_size,omitempty"`

	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IDPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                              `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	NotID        []openapi_types.UUID                     `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      []GetPlacesIDZoomXYPngParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense []GetPlacesIDZoomXYPngParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                 `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceID       []GetPlacesIDZoomXYPngParams_PlaceID_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectID     []GetPlacesIDZoomXYPngParams_ProjectID_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                 `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            []GetPlacesIDZoomXYPngParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteID                          []int                                       `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    []GetPlacesIDZoomXYPngParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonID                         []int                                       `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonID                  []int                                       `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       string                                      `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserID                          []string                                    `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       []string                                    `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            []int                                       `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             []int                                       `form:"day,omitempty" json:"day,omitempty"`
	Month                           []int                                       `form:"month,omitempty" json:"month,omitempty"`
	Year                            []int                                       `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      []int                                       `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    []int                                       `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     []int                                       `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermID                          []int                                       `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueID                     []int                                       `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueID              []int                                       `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIDOrUnknown                 []int                                       `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserID                []string                                    `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        int                                         `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        int                                         `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               int                                         `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              string                                      `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              string                                      `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       string                                      `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       string                                      `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       string                                      `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      string                                      `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserID              string                                      `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            string                                      `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentID []int                                       `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              string                                      `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             string                                      `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             []GetPlacesIDZoomXYPngParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      []GetPlacesIDZoomXYPngParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 []GetPlacesIDZoomXYPngParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration []GetPlacesIDZoomXYPngParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       []GetPlacesIDZoomXYPngParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       []GetPlacesIDZoomXYPngParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  []GetPlacesIDZoomXYPngParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IDAbove     int                                     `form:"id_above,omitempty" json:"id_above,omitempty"`
	IDBelow     int                                     `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications GetPlacesIDZoomXYPngParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                              `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        float32                                  `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        float32                                  `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     float32                                  `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      float32                                  `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      float32                                  `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      float32                                  `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      float32                                  `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListID                     int                                      `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               []string                                 `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor string                                   `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          string                                   `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   GetPlacesIDZoomXYPngParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               []GetPlacesIDZoomXYPngParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               string                                   `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              string                                   `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               string                                   `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerID                   int                                      `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                              `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                              `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     string                                   `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceID           int                                      `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	TTL                        int                                      `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       int                                      `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    int                                      `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      GetPlacesIDZoomXYPngParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    GetPlacesIDZoomXYPngParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyID                     interface{}                              `form:"only_id,omitempty" json:"only_id,omitempty"`
}

// GetPlacesIDZoomXYPngParamsTileSize defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParamsTileSize int

// GetPlacesIDZoomXYPngParamsLicense defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParamsLicense string

// GetPlacesIDZoomXYPngParamsPhotoLicense defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParamsPhotoLicense string

// GetPlacesIDZoomXYPngParamsPlaceID0 defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParamsPlaceID0 = openapi_types.UUID

// GetPlacesIDZoomXYPngParamsPlaceID1 defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParamsPlaceID1 = int

// GetPlacesIDZoomXYPngParamsPlaceID2 defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParamsPlaceID2 = string

// GetPlacesIDZoomXYPngParams_PlaceID_Item defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParams_PlaceID_Item struct {
	union json.RawMessage
}

// GetPlacesIDZoomXYPngParamsProjectID0 defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParamsProjectID0 = int

// GetPlacesIDZoomXYPngParamsProjectID1 defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParamsProjectID1 = string

// GetPlacesIDZoomXYPngParams_ProjectID_Item defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParams_ProjectID_Item struct {
	union json.RawMessage
}

// GetPlacesIDZoomXYPngParamsRank defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParamsRank string

// GetPlacesIDZoomXYPngParamsSoundLicense defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParamsSoundLicense string

// GetPlacesIDZoomXYPngParamsCsi defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParamsCsi string

// GetPlacesIDZoomXYPngParamsGeoprivacy defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParamsGeoprivacy string

// GetPlacesIDZoomXYPngParamsTaxonGeoprivacy defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParamsTaxonGeoprivacy string

// GetPlacesIDZoomXYPngParamsObscuration defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParamsObscuration string

// GetPlacesIDZoomXYPngParamsHrank defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParamsHrank string

// GetPlacesIDZoomXYPngParamsLrank defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParamsLrank string

// GetPlacesIDZoomXYPngParamsIconicTaxa defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParamsIconicTaxa string

// GetPlacesIDZoomXYPngParamsIdentifications defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParamsIdentifications string

// GetPlacesIDZoomXYPngParamsSearchOn defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParamsSearchOn string

// GetPlacesIDZoomXYPngParamsQualityGrade defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParamsQualityGrade string

// GetPlacesIDZoomXYPngParamsOrder defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParamsOrder string

// GetPlacesIDZoomXYPngParamsOrderBy defines parameters for GetPlacesIDZoomXYPng.
type GetPlacesIDZoomXYPngParamsOrderBy string

// GetPlacesUUIDParams defines parameters for GetPlacesUUID.
type GetPlacesUUIDParams struct {
	// Lat Latitude of coordinate used to sort results by distance
	Lat string `form:"lat,omitempty" json:"lat,omitempty"`

	// Lng Longitude of coordinate used to sort results by distance
	Lng string `form:"lng,omitempty" json:"lng,omitempty"`

	// OrderBy Order results by admin level and distance from a point specified in lat and lng
	OrderBy             GetPlacesUUIDParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
	Fields              string                     `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string                     `json:"X-HTTP-Method-Override,omitempty"`
}

// GetPlacesUUIDParamsOrderBy defines parameters for GetPlacesUUID.
type GetPlacesUUIDParamsOrderBy string

// GetPointsZoomXYGridJSONParams defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParams struct {
	TileSize GetPointsZoomXYGridJSONParamsTileSize `form:"tile_size,omitempty" json:"tile_size,omitempty"`

	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IDPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                                 `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	ID           []GetPointsZoomXYGridJSONParams_ID_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotID        []openapi_types.UUID                        `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      []GetPointsZoomXYGridJSONParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense []GetPointsZoomXYGridJSONParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                    `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceID       []GetPointsZoomXYGridJSONParams_PlaceID_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectID     []GetPointsZoomXYGridJSONParams_ProjectID_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                    `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            []GetPointsZoomXYGridJSONParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteID                          []int                                          `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    []GetPointsZoomXYGridJSONParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonID                         []int                                          `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonID                  []int                                          `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       string                                         `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserID                          []string                                       `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       []string                                       `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            []int                                          `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             []int                                          `form:"day,omitempty" json:"day,omitempty"`
	Month                           []int                                          `form:"month,omitempty" json:"month,omitempty"`
	Year                            []int                                          `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      []int                                          `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    []int                                          `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     []int                                          `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermID                          []int                                          `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueID                     []int                                          `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueID              []int                                          `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIDOrUnknown                 []int                                          `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserID                []string                                       `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        int                                            `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        int                                            `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               int                                            `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              string                                         `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              string                                         `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       string                                         `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       string                                         `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       string                                         `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      string                                         `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserID              string                                         `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            string                                         `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentID []int                                          `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              string                                         `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             string                                         `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             []GetPointsZoomXYGridJSONParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      []GetPointsZoomXYGridJSONParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 []GetPointsZoomXYGridJSONParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration []GetPointsZoomXYGridJSONParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       []GetPointsZoomXYGridJSONParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       []GetPointsZoomXYGridJSONParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  []GetPointsZoomXYGridJSONParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IDAbove     int                                        `form:"id_above,omitempty" json:"id_above,omitempty"`
	IDBelow     int                                        `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications GetPointsZoomXYGridJSONParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                                 `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        float32                                     `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        float32                                     `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     float32                                     `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      float32                                     `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      float32                                     `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      float32                                     `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      float32                                     `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListID                     int                                         `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               []string                                    `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor string                                      `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          string                                      `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   GetPointsZoomXYGridJSONParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               []GetPointsZoomXYGridJSONParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               string                                      `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              string                                      `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               string                                      `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerID                   int                                         `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                                 `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                                 `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     string                                      `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceID           int                                         `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	TTL                        int                                         `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       int                                         `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    int                                         `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      GetPointsZoomXYGridJSONParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    GetPointsZoomXYGridJSONParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyID                     interface{}                                 `form:"only_id,omitempty" json:"only_id,omitempty"`
}

// GetPointsZoomXYGridJSONParamsTileSize defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsTileSize int

// GetPointsZoomXYGridJSONParamsID0 defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsID0 = openapi_types.UUID

// GetPointsZoomXYGridJSONParamsID1 defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsID1 = int

// GetPointsZoomXYGridJSONParamsID2 defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsID2 = string

// GetPointsZoomXYGridJSONParams_ID_Item defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParams_ID_Item struct {
	union json.RawMessage
}

// GetPointsZoomXYGridJSONParamsLicense defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsLicense string

// GetPointsZoomXYGridJSONParamsPhotoLicense defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsPhotoLicense string

// GetPointsZoomXYGridJSONParamsPlaceID0 defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsPlaceID0 = openapi_types.UUID

// GetPointsZoomXYGridJSONParamsPlaceID1 defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsPlaceID1 = int

// GetPointsZoomXYGridJSONParamsPlaceID2 defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsPlaceID2 = string

// GetPointsZoomXYGridJSONParams_PlaceID_Item defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParams_PlaceID_Item struct {
	union json.RawMessage
}

// GetPointsZoomXYGridJSONParamsProjectID0 defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsProjectID0 = int

// GetPointsZoomXYGridJSONParamsProjectID1 defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsProjectID1 = string

// GetPointsZoomXYGridJSONParams_ProjectID_Item defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParams_ProjectID_Item struct {
	union json.RawMessage
}

// GetPointsZoomXYGridJSONParamsRank defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsRank string

// GetPointsZoomXYGridJSONParamsSoundLicense defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsSoundLicense string

// GetPointsZoomXYGridJSONParamsCsi defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsCsi string

// GetPointsZoomXYGridJSONParamsGeoprivacy defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsGeoprivacy string

// GetPointsZoomXYGridJSONParamsTaxonGeoprivacy defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsTaxonGeoprivacy string

// GetPointsZoomXYGridJSONParamsObscuration defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsObscuration string

// GetPointsZoomXYGridJSONParamsHrank defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsHrank string

// GetPointsZoomXYGridJSONParamsLrank defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsLrank string

// GetPointsZoomXYGridJSONParamsIconicTaxa defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsIconicTaxa string

// GetPointsZoomXYGridJSONParamsIdentifications defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsIdentifications string

// GetPointsZoomXYGridJSONParamsSearchOn defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsSearchOn string

// GetPointsZoomXYGridJSONParamsQualityGrade defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsQualityGrade string

// GetPointsZoomXYGridJSONParamsOrder defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsOrder string

// GetPointsZoomXYGridJSONParamsOrderBy defines parameters for GetPointsZoomXYGridJSON.
type GetPointsZoomXYGridJSONParamsOrderBy string

// GetPointsZoomXYPngParams defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParams struct {
	TileSize GetPointsZoomXYPngParamsTileSize `form:"tile_size,omitempty" json:"tile_size,omitempty"`

	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IDPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                            `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	ID           []GetPointsZoomXYPngParams_ID_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotID        []openapi_types.UUID                   `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      []GetPointsZoomXYPngParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense []GetPointsZoomXYPngParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                               `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceID       []GetPointsZoomXYPngParams_PlaceID_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectID     []GetPointsZoomXYPngParams_ProjectID_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                               `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            []GetPointsZoomXYPngParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteID                          []int                                     `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    []GetPointsZoomXYPngParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonID                         []int                                     `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonID                  []int                                     `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       string                                    `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserID                          []string                                  `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       []string                                  `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            []int                                     `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             []int                                     `form:"day,omitempty" json:"day,omitempty"`
	Month                           []int                                     `form:"month,omitempty" json:"month,omitempty"`
	Year                            []int                                     `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      []int                                     `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    []int                                     `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     []int                                     `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermID                          []int                                     `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueID                     []int                                     `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueID              []int                                     `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIDOrUnknown                 []int                                     `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserID                []string                                  `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        int                                       `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        int                                       `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               int                                       `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              string                                    `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              string                                    `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       string                                    `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       string                                    `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       string                                    `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      string                                    `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserID              string                                    `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            string                                    `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentID []int                                     `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              string                                    `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             string                                    `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             []GetPointsZoomXYPngParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      []GetPointsZoomXYPngParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 []GetPointsZoomXYPngParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration []GetPointsZoomXYPngParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       []GetPointsZoomXYPngParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       []GetPointsZoomXYPngParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  []GetPointsZoomXYPngParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IDAbove     int                                   `form:"id_above,omitempty" json:"id_above,omitempty"`
	IDBelow     int                                   `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications GetPointsZoomXYPngParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                            `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        float32                                `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        float32                                `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     float32                                `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      float32                                `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      float32                                `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      float32                                `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      float32                                `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListID                     int                                    `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               []string                               `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor string                                 `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          string                                 `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   GetPointsZoomXYPngParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               []GetPointsZoomXYPngParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               string                                 `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              string                                 `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               string                                 `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerID                   int                                    `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                            `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                            `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     string                                 `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceID           int                                    `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	TTL                        int                                    `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       int                                    `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    int                                    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      GetPointsZoomXYPngParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    GetPointsZoomXYPngParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyID                     interface{}                            `form:"only_id,omitempty" json:"only_id,omitempty"`
}

// GetPointsZoomXYPngParamsTileSize defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsTileSize int

// GetPointsZoomXYPngParamsID0 defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsID0 = openapi_types.UUID

// GetPointsZoomXYPngParamsID1 defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsID1 = int

// GetPointsZoomXYPngParamsID2 defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsID2 = string

// GetPointsZoomXYPngParams_ID_Item defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParams_ID_Item struct {
	union json.RawMessage
}

// GetPointsZoomXYPngParamsLicense defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsLicense string

// GetPointsZoomXYPngParamsPhotoLicense defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsPhotoLicense string

// GetPointsZoomXYPngParamsPlaceID0 defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsPlaceID0 = openapi_types.UUID

// GetPointsZoomXYPngParamsPlaceID1 defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsPlaceID1 = int

// GetPointsZoomXYPngParamsPlaceID2 defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsPlaceID2 = string

// GetPointsZoomXYPngParams_PlaceID_Item defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParams_PlaceID_Item struct {
	union json.RawMessage
}

// GetPointsZoomXYPngParamsProjectID0 defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsProjectID0 = int

// GetPointsZoomXYPngParamsProjectID1 defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsProjectID1 = string

// GetPointsZoomXYPngParams_ProjectID_Item defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParams_ProjectID_Item struct {
	union json.RawMessage
}

// GetPointsZoomXYPngParamsRank defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsRank string

// GetPointsZoomXYPngParamsSoundLicense defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsSoundLicense string

// GetPointsZoomXYPngParamsCsi defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsCsi string

// GetPointsZoomXYPngParamsGeoprivacy defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsGeoprivacy string

// GetPointsZoomXYPngParamsTaxonGeoprivacy defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsTaxonGeoprivacy string

// GetPointsZoomXYPngParamsObscuration defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsObscuration string

// GetPointsZoomXYPngParamsHrank defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsHrank string

// GetPointsZoomXYPngParamsLrank defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsLrank string

// GetPointsZoomXYPngParamsIconicTaxa defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsIconicTaxa string

// GetPointsZoomXYPngParamsIdentifications defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsIdentifications string

// GetPointsZoomXYPngParamsSearchOn defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsSearchOn string

// GetPointsZoomXYPngParamsQualityGrade defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsQualityGrade string

// GetPointsZoomXYPngParamsOrder defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsOrder string

// GetPointsZoomXYPngParamsOrderBy defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsOrderBy string

// GetProjectsParams defines parameters for GetProjects.
type GetProjectsParams struct {
	Q           string                   `form:"q,omitempty" json:"q,omitempty"`
	ID          []int                    `form:"id,omitempty" json:"id,omitempty"`
	NotID       []int                    `form:"not_id,omitempty" json:"not_id,omitempty"`
	Lat         float32                  `form:"lat,omitempty" json:"lat,omitempty"`
	Lng         float32                  `form:"lng,omitempty" json:"lng,omitempty"`
	Radius      int                      `form:"radius,omitempty" json:"radius,omitempty"`
	PlaceID     []int                    `form:"place_id,omitempty" json:"place_id,omitempty"`
	Features    interface{}              `form:"features,omitempty" json:"features,omitempty"`
	Noteworthy  interface{}              `form:"noteworthy,omitempty" json:"noteworthy,omitempty"`
	SiteID      int                      `form:"site_id,omitempty" json:"site_id,omitempty"`
	RuleDetails interface{}              `form:"rule_details,omitempty" json:"rule_details,omitempty"`
	Type        []GetProjectsParamsType  `form:"type,omitempty" json:"type,omitempty"`
	MemberID    []int                    `form:"member_id,omitempty" json:"member_id,omitempty"`
	HasParams   interface{}              `form:"has_params,omitempty" json:"has_params,omitempty"`
	HasPosts    interface{}              `form:"has_posts,omitempty" json:"has_posts,omitempty"`
	Page        int                      `form:"page,omitempty" json:"page,omitempty"`
	PerPage     int                      `form:"per_page,omitempty" json:"per_page,omitempty"`
	OrderBy     GetProjectsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string      `json:"X-HTTP-Method-Override,omitempty"`
}

// GetProjectsParamsType defines parameters for GetProjects.
type GetProjectsParamsType string

// GetProjectsParamsOrderBy defines parameters for GetProjects.
type GetProjectsParamsOrderBy string

// GetProjectsIDParams defines parameters for GetProjectsID.
type GetProjectsIDParams struct {
	RuleDetails         interface{} `form:"rule_details,omitempty" json:"rule_details,omitempty"`
	Fields              string      `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string      `json:"X-HTTP-Method-Override,omitempty"`
}

// GetProjectsIDMembersParams defines parameters for GetProjectsIDMembers.
type GetProjectsIDMembersParams struct {
	// SkipCounts If counts are not needed, consider setting this to true to save on processing time, resulting in faster responses
	SkipCounts          interface{}                       `form:"skip_counts,omitempty" json:"skip_counts,omitempty"`
	Page                int                               `form:"page,omitempty" json:"page,omitempty"`
	PerPage             int                               `form:"per_page,omitempty" json:"per_page,omitempty"`
	Fields              interface{}                       `form:"fields,omitempty" json:"fields,omitempty"`
	OrderBy             GetProjectsIDMembersParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
	XHTTPMethodOverride string                            `json:"X-HTTP-Method-Override,omitempty"`
}

// GetProjectsIDMembersParamsOrderBy defines parameters for GetProjectsIDMembers.
type GetProjectsIDMembersParamsOrderBy string

// GetProjectsIDMembershipParams defines parameters for GetProjectsIDMembership.
type GetProjectsIDMembershipParams struct {
	Fields              string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetProjectsIDPostsParams defines parameters for GetProjectsIDPosts.
type GetProjectsIDPostsParams struct {
	Page                int         `form:"page,omitempty" json:"page,omitempty"`
	PerPage             int         `form:"per_page,omitempty" json:"per_page,omitempty"`
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string      `json:"X-HTTP-Method-Override,omitempty"`
}

// GetProviderAuthorizationsParams defines parameters for GetProviderAuthorizations.
type GetProviderAuthorizationsParams struct {
	Fields              string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetRelationshipsParams defines parameters for GetRelationships.
type GetRelationshipsParams struct {
	Q string `form:"q,omitempty" json:"q,omitempty"`

	// Trusted Whether or not the user trusts the friend with hidden coordinates.
	Trusted GetRelationshipsParamsTrusted `form:"trusted,omitempty" json:"trusted,omitempty"`

	// Following Whether or not the user wants to see updates about new content from the friend.
	Following GetRelationshipsParamsFollowing `form:"following,omitempty" json:"following,omitempty"`
	Order     GetRelationshipsParamsOrder     `form:"order,omitempty" json:"order,omitempty"`
	OrderBy   GetRelationshipsParamsOrderBy   `form:"order_by,omitempty" json:"order_by,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string      `json:"X-HTTP-Method-Override,omitempty"`
}

// GetRelationshipsParamsTrusted defines parameters for GetRelationships.
type GetRelationshipsParamsTrusted string

// GetRelationshipsParamsFollowing defines parameters for GetRelationships.
type GetRelationshipsParamsFollowing string

// GetRelationshipsParamsOrder defines parameters for GetRelationships.
type GetRelationshipsParamsOrder string

// GetRelationshipsParamsOrderBy defines parameters for GetRelationships.
type GetRelationshipsParamsOrderBy string

// GetSavedLocationsParams defines parameters for GetSavedLocations.
type GetSavedLocationsParams struct {
	Q                   string      `form:"q,omitempty" json:"q,omitempty"`
	Page                int         `form:"page,omitempty" json:"page,omitempty"`
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string      `json:"X-HTTP-Method-Override,omitempty"`
}

// GetSearchParams defines parameters for GetSearch.
type GetSearchParams struct {
	// Q Search query
	Q      string `form:"q,omitempty" json:"q,omitempty"`
	Locale string `form:"locale,omitempty" json:"locale,omitempty"`

	// PlaceID Integer ID for a place associated with results; only works for projects
	PlaceID int `form:"place_id,omitempty" json:"place_id,omitempty"`

	// PreferredPlaceID Localizes some response values for the given place
	PreferredPlaceID int `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`

	// Sources Filters search results by record types. Can be specified as an array or a comma-separated list of values
	Sources               []GetSearchParamsSources `form:"sources,omitempty" json:"sources,omitempty"`
	IncludeTaxonAncestors interface{}              `form:"include_taxon_ancestors,omitempty" json:"include_taxon_ancestors,omitempty"`
	Page                  int                      `form:"page,omitempty" json:"page,omitempty"`
	PerPage               int                      `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string      `json:"X-HTTP-Method-Override,omitempty"`
}

// GetSearchParamsSources defines parameters for GetSearch.
type GetSearchParamsSources string

// GetSitesParams defines parameters for GetSites.
type GetSitesParams struct {
	XHTTPMethodOverride string `json:"X-HTTP-Method-Override,omitempty"`
}

// PostSoundsMultipartBody defines parameters for PostSounds.
type PostSoundsMultipartBody struct {
	Fields interface{}        `json:"fields,omitempty"`
	File   openapi_types.File `json:"file"`
	UUID   openapi_types.UUID `json:"uuid,omitempty"`
}

// GetTaxaParams defines parameters for GetTaxa.
type GetTaxaParams struct {
	Q                   string              `form:"q,omitempty" json:"q,omitempty"`
	IsActive            interface{}         `form:"is_active,omitempty" json:"is_active,omitempty"`
	Iconic              interface{}         `form:"iconic,omitempty" json:"iconic,omitempty"`
	TaxonID             int                 `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	ParentID            int                 `form:"parent_id,omitempty" json:"parent_id,omitempty"`
	Rank                []GetTaxaParamsRank `form:"rank,omitempty" json:"rank,omitempty"`
	RankLevel           []float32           `form:"rank_level,omitempty" json:"rank_level,omitempty"`
	IDAbove             int                 `form:"id_above,omitempty" json:"id_above,omitempty"`
	IDBelow             int                 `form:"id_below,omitempty" json:"id_below,omitempty"`
	PerPage             int                 `form:"per_page,omitempty" json:"per_page,omitempty"`
	Locale              string              `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceID    int                 `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	Fields              interface{}         `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string              `json:"X-HTTP-Method-Override,omitempty"`
}

// GetTaxaParamsRank defines parameters for GetTaxa.
type GetTaxaParamsRank string

// GetTaxaAutocompleteParams defines parameters for GetTaxaAutocomplete.
type GetTaxaAutocompleteParams struct {
	Q                   string      `form:"q,omitempty" json:"q,omitempty"`
	IsActive            interface{} `form:"is_active,omitempty" json:"is_active,omitempty"`
	Iconic              interface{} `form:"iconic,omitempty" json:"iconic,omitempty"`
	PerPage             int         `form:"per_page,omitempty" json:"per_page,omitempty"`
	Locale              string      `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceID    int         `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string      `json:"X-HTTP-Method-Override,omitempty"`
}

// GetTaxaIconicParams defines parameters for GetTaxaIconic.
type GetTaxaIconicParams struct {
	Fields              string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetTaxaSuggestParams defines parameters for GetTaxaSuggest.
type GetTaxaSuggestParams struct {
	// FeaturedObservationID When `source` is `observations`, ignore this observation
	FeaturedObservationID openapi_types.UUID `form:"featured_observation_id,omitempty" json:"featured_observation_id,omitempty"`
	Fields                interface{}        `form:"fields,omitempty" json:"fields,omitempty"`

	// ImageURL URL for image to use when `source` is `visual`
	ImageURL                    string `form:"image_url,omitempty" json:"image_url,omitempty"`
	IncludeRepresentativePhotos struct {
		union json.RawMessage
	} `form:"include_representative_photos,omitempty" json:"include_representative_photos,omitempty"`

	// Limit Number of results to return
	Limit float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Lat Coordinate used when fetching nearby results `source` is `visual` or `*observations`
	Lat float32 `form:"lat,omitempty" json:"lat,omitempty"`

	// Lng Coordinate used when fetching nearby results `source` is `visual` or `*observations`
	Lng    float32 `form:"lng,omitempty" json:"lng,omitempty"`
	Locale string  `form:"locale,omitempty" json:"locale,omitempty"`
	Months string  `form:"months,omitempty" json:"months,omitempty"`

	// ObservationID  Automatically set place and taxon filters based on this observation; this
	//       will override the values of `place_id` and `taxon_id` if these values
	//       can be derived from the observation
	//
	ObservationID openapi_types.UUID `form:"observation_id,omitempty" json:"observation_id,omitempty"`

	// ObservedOn  Date the subject was observed (YYYY-MM-DD), used to refine suggestions to
	//       those observed at a similar time of year
	//
	ObservedOn string `form:"observed_on,omitempty" json:"observed_on,omitempty"`

	// OrderBy  How the suggestions will be ordered. The default is to order by whatever default
	//       a source uses, e.g. the score when `source` is `visual`, or the number of
	//       observations (frequency) when the `source` is `*observations`. Ordering by
	//       `taxonomy` will group the results by their closeness in the taxonomic
	//       tree, but continue to use default ordering for siblings (e.g. species in the
	//       same genus).
	//
	OrderBy GetTaxaSuggestParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// PlaceID  Only retrieve suggestions from this place when `source` is `checklist`
	//       or `*observations`
	//
	PlaceID int `form:"place_id,omitempty" json:"place_id,omitempty"`

	// PlaceLat  Coordinate used to set a place filter when source is `*observations` by
	//       choosing the place whose boundary contains the coordinate. Only chooses
	//       from places curated by staff (aka "standard" places) and only sets the
	//       place when lat, lng, and place_id are blank
	//
	PlaceLat float32 `form:"place_lat,omitempty" json:"place_lat,omitempty"`

	// PlaceLng See `place_lat`
	PlaceLng float32 `form:"place_lng,omitempty" json:"place_lng,omitempty"`

	// Source  Source of the suggestions. Note that different sources support different
	//       search parameters. See each parameter for details
	//
	Source GetTaxaSuggestParamsSource `form:"source,omitempty" json:"source,omitempty"`

	// TaxonID  Only retrieve suggestions in this taxon. If taxon is below genus level it
	//       will be replaced with the genus that contains it. When `source` is
	//       `misidentifications`, suggestions will be species commonly misidentified
	//       as this taxon
	//
	TaxonID             int    `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	XHTTPMethodOverride string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetTaxaSuggestParamsIncludeRepresentativePhotos0 defines parameters for GetTaxaSuggest.
type GetTaxaSuggestParamsIncludeRepresentativePhotos0 = bool

// GetTaxaSuggestParamsIncludeRepresentativePhotos1 defines parameters for GetTaxaSuggest.
type GetTaxaSuggestParamsIncludeRepresentativePhotos1 = string

// GetTaxaSuggestParamsOrderBy defines parameters for GetTaxaSuggest.
type GetTaxaSuggestParamsOrderBy string

// GetTaxaSuggestParamsSource defines parameters for GetTaxaSuggest.
type GetTaxaSuggestParamsSource string

// PostTaxaSuggestMultipartBody defines parameters for PostTaxaSuggest.
type PostTaxaSuggestMultipartBody struct {
	// FeaturedObservationID When `source` is `observations`, ignore this observation
	FeaturedObservationID openapi_types.UUID `json:"featured_observation_id,omitempty"`
	Fields                interface{}        `json:"fields,omitempty"`

	// Image Image to use when `source` is `visual`
	Image openapi_types.File `json:"image,omitempty"`

	// ImageURL URL for image to use when `source` is `visual`
	ImageURL                    string                                                   `json:"image_url,omitempty"`
	IncludeRepresentativePhotos PostTaxaSuggestMultipartBody_IncludeRepresentativePhotos `json:"include_representative_photos,omitempty"`

	// Lat Coordinate used when fetching nearby results `source` is `visual` or `*observations`
	Lat float32 `json:"lat,omitempty"`

	// Limit Number of results to return
	Limit float32 `json:"limit,omitempty"`

	// Lng Coordinate used when fetching nearby results `source` is `visual` or `*observations`
	Lng    float32 `json:"lng,omitempty"`
	Locale string  `json:"locale,omitempty"`
	Months string  `json:"months,omitempty"`

	// ObservationID  Automatically set place and taxon filters based on this observation; this
	//       will override the values of `place_id` and `taxon_id` if these values
	//       can be derived from the observation
	//
	ObservationID openapi_types.UUID `json:"observation_id,omitempty"`

	// ObservedOn  Date the subject was observed (YYYY-MM-DD), used to refine suggestions to
	//       those observed at a similar time of year
	//
	ObservedOn string `json:"observed_on,omitempty"`

	// OrderBy  How the suggestions will be ordered. The default is to order by whatever default
	//       a source uses, e.g. the score when `source` is `visual`, or the number of
	//       observations (frequency) when the `source` is `*observations`. Ordering by
	//       `taxonomy` will group the results by their closeness in the taxonomic
	//       tree, but continue to use default ordering for siblings (e.g. species in the
	//       same genus).
	//
	OrderBy PostTaxaSuggestMultipartBodyOrderBy `json:"order_by,omitempty"`

	// PlaceID  Only retrieve suggestions from this place when `source` is `checklist`
	//       or `*observations`
	//
	PlaceID int `json:"place_id,omitempty"`

	// PlaceLat  Coordinate used to set a place filter when source is `*observations` by
	//       choosing the place whose boundary contains the coordinate. Only chooses
	//       from places curated by staff (aka "standard" places) and only sets the
	//       place when lat, lng, and place_id are blank
	//
	PlaceLat float32 `json:"place_lat,omitempty"`

	// PlaceLng See `place_lat`
	PlaceLng float32 `json:"place_lng,omitempty"`

	// Source  Source of the suggestions. Note that different sources support different
	//       search parameters. See each parameter for details
	//
	Source PostTaxaSuggestMultipartBodySource `json:"source"`

	// TaxonID  Only retrieve suggestions in this taxon. If taxon is below genus level it
	//       will be replaced with the genus that contains it. When `source` is
	//       `misidentifications`, suggestions will be species commonly misidentified
	//       as this taxon
	//
	TaxonID int `json:"taxon_id,omitempty"`
}

// PostTaxaSuggestMultipartBodyIncludeRepresentativePhotos0 defines parameters for PostTaxaSuggest.
type PostTaxaSuggestMultipartBodyIncludeRepresentativePhotos0 = bool

// PostTaxaSuggestMultipartBodyIncludeRepresentativePhotos1 defines parameters for PostTaxaSuggest.
type PostTaxaSuggestMultipartBodyIncludeRepresentativePhotos1 = string

// PostTaxaSuggestMultipartBody_IncludeRepresentativePhotos defines parameters for PostTaxaSuggest.
type PostTaxaSuggestMultipartBody_IncludeRepresentativePhotos struct {
	union json.RawMessage
}

// PostTaxaSuggestMultipartBodyOrderBy defines parameters for PostTaxaSuggest.
type PostTaxaSuggestMultipartBodyOrderBy string

// PostTaxaSuggestMultipartBodySource defines parameters for PostTaxaSuggest.
type PostTaxaSuggestMultipartBodySource string

// GetTaxaIDParams defines parameters for GetTaxaID.
type GetTaxaIDParams struct {
	RankLevel           []float32 `form:"rank_level,omitempty" json:"rank_level,omitempty"`
	Fields              string    `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string    `json:"X-HTTP-Method-Override,omitempty"`
}

// GetTaxaIDWantedParams defines parameters for GetTaxaIDWanted.
type GetTaxaIDWantedParams struct {
	Page                int    `form:"page,omitempty" json:"page,omitempty"`
	PerPage             int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	XHTTPMethodOverride string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetTaxonPlacesIDZoomXYPngParams defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParams struct {
	TileSize GetTaxonPlacesIDZoomXYPngParamsTileSize `form:"tile_size,omitempty" json:"tile_size,omitempty"`

	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IDPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                                   `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	NotID        []openapi_types.UUID                          `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      []GetTaxonPlacesIDZoomXYPngParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense []GetTaxonPlacesIDZoomXYPngParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                      `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceID       []GetTaxonPlacesIDZoomXYPngParams_PlaceID_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectID     []GetTaxonPlacesIDZoomXYPngParams_ProjectID_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                      `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            []GetTaxonPlacesIDZoomXYPngParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteID                          []int                                            `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    []GetTaxonPlacesIDZoomXYPngParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonID                         []int                                            `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonID                  []int                                            `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       string                                           `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserID                          []string                                         `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       []string                                         `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            []int                                            `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             []int                                            `form:"day,omitempty" json:"day,omitempty"`
	Month                           []int                                            `form:"month,omitempty" json:"month,omitempty"`
	Year                            []int                                            `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      []int                                            `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    []int                                            `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     []int                                            `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermID                          []int                                            `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueID                     []int                                            `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueID              []int                                            `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIDOrUnknown                 []int                                            `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserID                []string                                         `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        int                                              `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        int                                              `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               int                                              `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              string                                           `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              string                                           `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       string                                           `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       string                                           `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       string                                           `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      string                                           `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserID              string                                           `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            string                                           `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentID []int                                            `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              string                                           `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             string                                           `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             []GetTaxonPlacesIDZoomXYPngParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      []GetTaxonPlacesIDZoomXYPngParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 []GetTaxonPlacesIDZoomXYPngParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration []GetTaxonPlacesIDZoomXYPngParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       []GetTaxonPlacesIDZoomXYPngParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       []GetTaxonPlacesIDZoomXYPngParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  []GetTaxonPlacesIDZoomXYPngParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IDAbove     int                                          `form:"id_above,omitempty" json:"id_above,omitempty"`
	IDBelow     int                                          `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications GetTaxonPlacesIDZoomXYPngParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                                   `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        float32                                       `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        float32                                       `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     float32                                       `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      float32                                       `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      float32                                       `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      float32                                       `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      float32                                       `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListID                     int                                           `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               []string                                      `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor string                                        `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          string                                        `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   GetTaxonPlacesIDZoomXYPngParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               []GetTaxonPlacesIDZoomXYPngParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               string                                        `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              string                                        `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               string                                        `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerID                   int                                           `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                                   `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                                   `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     string                                        `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceID           int                                           `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	TTL                        int                                           `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       int                                           `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    int                                           `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      GetTaxonPlacesIDZoomXYPngParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    GetTaxonPlacesIDZoomXYPngParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyID                     interface{}                                   `form:"only_id,omitempty" json:"only_id,omitempty"`
}

// GetTaxonPlacesIDZoomXYPngParamsTileSize defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParamsTileSize int

// GetTaxonPlacesIDZoomXYPngParamsLicense defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParamsLicense string

// GetTaxonPlacesIDZoomXYPngParamsPhotoLicense defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParamsPhotoLicense string

// GetTaxonPlacesIDZoomXYPngParamsPlaceID0 defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParamsPlaceID0 = openapi_types.UUID

// GetTaxonPlacesIDZoomXYPngParamsPlaceID1 defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParamsPlaceID1 = int

// GetTaxonPlacesIDZoomXYPngParamsPlaceID2 defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParamsPlaceID2 = string

// GetTaxonPlacesIDZoomXYPngParams_PlaceID_Item defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParams_PlaceID_Item struct {
	union json.RawMessage
}

// GetTaxonPlacesIDZoomXYPngParamsProjectID0 defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParamsProjectID0 = int

// GetTaxonPlacesIDZoomXYPngParamsProjectID1 defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParamsProjectID1 = string

// GetTaxonPlacesIDZoomXYPngParams_ProjectID_Item defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParams_ProjectID_Item struct {
	union json.RawMessage
}

// GetTaxonPlacesIDZoomXYPngParamsRank defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParamsRank string

// GetTaxonPlacesIDZoomXYPngParamsSoundLicense defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParamsSoundLicense string

// GetTaxonPlacesIDZoomXYPngParamsCsi defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParamsCsi string

// GetTaxonPlacesIDZoomXYPngParamsGeoprivacy defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParamsGeoprivacy string

// GetTaxonPlacesIDZoomXYPngParamsTaxonGeoprivacy defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParamsTaxonGeoprivacy string

// GetTaxonPlacesIDZoomXYPngParamsObscuration defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParamsObscuration string

// GetTaxonPlacesIDZoomXYPngParamsHrank defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParamsHrank string

// GetTaxonPlacesIDZoomXYPngParamsLrank defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParamsLrank string

// GetTaxonPlacesIDZoomXYPngParamsIconicTaxa defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParamsIconicTaxa string

// GetTaxonPlacesIDZoomXYPngParamsIdentifications defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParamsIdentifications string

// GetTaxonPlacesIDZoomXYPngParamsSearchOn defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParamsSearchOn string

// GetTaxonPlacesIDZoomXYPngParamsQualityGrade defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParamsQualityGrade string

// GetTaxonPlacesIDZoomXYPngParamsOrder defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParamsOrder string

// GetTaxonPlacesIDZoomXYPngParamsOrderBy defines parameters for GetTaxonPlacesIDZoomXYPng.
type GetTaxonPlacesIDZoomXYPngParamsOrderBy string

// GetTaxonRangesIDZoomXYPngParams defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParams struct {
	TileSize GetTaxonRangesIDZoomXYPngParamsTileSize `form:"tile_size,omitempty" json:"tile_size,omitempty"`

	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IDPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                                   `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	NotID        []openapi_types.UUID                          `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      []GetTaxonRangesIDZoomXYPngParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense []GetTaxonRangesIDZoomXYPngParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                      `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceID       []GetTaxonRangesIDZoomXYPngParams_PlaceID_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectID     []GetTaxonRangesIDZoomXYPngParams_ProjectID_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                      `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            []GetTaxonRangesIDZoomXYPngParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteID                          []int                                            `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    []GetTaxonRangesIDZoomXYPngParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonID                         []int                                            `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonID                  []int                                            `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       string                                           `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserID                          []string                                         `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       []string                                         `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            []int                                            `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             []int                                            `form:"day,omitempty" json:"day,omitempty"`
	Month                           []int                                            `form:"month,omitempty" json:"month,omitempty"`
	Year                            []int                                            `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      []int                                            `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    []int                                            `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     []int                                            `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermID                          []int                                            `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueID                     []int                                            `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueID              []int                                            `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIDOrUnknown                 []int                                            `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserID                []string                                         `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        int                                              `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        int                                              `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               int                                              `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              string                                           `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              string                                           `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       string                                           `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       string                                           `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       string                                           `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      string                                           `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserID              string                                           `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            string                                           `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentID []int                                            `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              string                                           `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             string                                           `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             []GetTaxonRangesIDZoomXYPngParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      []GetTaxonRangesIDZoomXYPngParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 []GetTaxonRangesIDZoomXYPngParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration []GetTaxonRangesIDZoomXYPngParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       []GetTaxonRangesIDZoomXYPngParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       []GetTaxonRangesIDZoomXYPngParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  []GetTaxonRangesIDZoomXYPngParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IDAbove     int                                          `form:"id_above,omitempty" json:"id_above,omitempty"`
	IDBelow     int                                          `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications GetTaxonRangesIDZoomXYPngParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                                   `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        float32                                       `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        float32                                       `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     float32                                       `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      float32                                       `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      float32                                       `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      float32                                       `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      float32                                       `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListID                     int                                           `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               []string                                      `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor string                                        `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          string                                        `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   GetTaxonRangesIDZoomXYPngParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               []GetTaxonRangesIDZoomXYPngParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               string                                        `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              string                                        `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               string                                        `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerID                   int                                           `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                                   `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                                   `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     string                                        `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceID           int                                           `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	TTL                        int                                           `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       int                                           `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    int                                           `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      GetTaxonRangesIDZoomXYPngParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    GetTaxonRangesIDZoomXYPngParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyID                     interface{}                                   `form:"only_id,omitempty" json:"only_id,omitempty"`
}

// GetTaxonRangesIDZoomXYPngParamsTileSize defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParamsTileSize int

// GetTaxonRangesIDZoomXYPngParamsLicense defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParamsLicense string

// GetTaxonRangesIDZoomXYPngParamsPhotoLicense defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParamsPhotoLicense string

// GetTaxonRangesIDZoomXYPngParamsPlaceID0 defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParamsPlaceID0 = openapi_types.UUID

// GetTaxonRangesIDZoomXYPngParamsPlaceID1 defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParamsPlaceID1 = int

// GetTaxonRangesIDZoomXYPngParamsPlaceID2 defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParamsPlaceID2 = string

// GetTaxonRangesIDZoomXYPngParams_PlaceID_Item defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParams_PlaceID_Item struct {
	union json.RawMessage
}

// GetTaxonRangesIDZoomXYPngParamsProjectID0 defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParamsProjectID0 = int

// GetTaxonRangesIDZoomXYPngParamsProjectID1 defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParamsProjectID1 = string

// GetTaxonRangesIDZoomXYPngParams_ProjectID_Item defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParams_ProjectID_Item struct {
	union json.RawMessage
}

// GetTaxonRangesIDZoomXYPngParamsRank defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParamsRank string

// GetTaxonRangesIDZoomXYPngParamsSoundLicense defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParamsSoundLicense string

// GetTaxonRangesIDZoomXYPngParamsCsi defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParamsCsi string

// GetTaxonRangesIDZoomXYPngParamsGeoprivacy defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParamsGeoprivacy string

// GetTaxonRangesIDZoomXYPngParamsTaxonGeoprivacy defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParamsTaxonGeoprivacy string

// GetTaxonRangesIDZoomXYPngParamsObscuration defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParamsObscuration string

// GetTaxonRangesIDZoomXYPngParamsHrank defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParamsHrank string

// GetTaxonRangesIDZoomXYPngParamsLrank defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParamsLrank string

// GetTaxonRangesIDZoomXYPngParamsIconicTaxa defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParamsIconicTaxa string

// GetTaxonRangesIDZoomXYPngParamsIdentifications defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParamsIdentifications string

// GetTaxonRangesIDZoomXYPngParamsSearchOn defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParamsSearchOn string

// GetTaxonRangesIDZoomXYPngParamsQualityGrade defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParamsQualityGrade string

// GetTaxonRangesIDZoomXYPngParamsOrder defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParamsOrder string

// GetTaxonRangesIDZoomXYPngParamsOrderBy defines parameters for GetTaxonRangesIDZoomXYPng.
type GetTaxonRangesIDZoomXYPngParamsOrderBy string

// GetTranslationsLocalesParams defines parameters for GetTranslationsLocales.
type GetTranslationsLocalesParams struct {
	Fields              string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	Fields  interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	Page    int         `form:"page,omitempty" json:"page,omitempty"`
	PerPage int         `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Following Show users following this user, specified by sequential ID, username, or UUID
	Following struct {
		union json.RawMessage
	} `form:"following,omitempty" json:"following,omitempty"`

	// FollowedBy Show users followed by this user, specified by sequential ID, username, or UUID
	FollowedBy struct {
		union json.RawMessage
	} `form:"followed_by,omitempty" json:"followed_by,omitempty"`

	// Orcid Show users with the specified orcid
	Orcid               string `form:"orcid,omitempty" json:"orcid,omitempty"`
	XHTTPMethodOverride string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetUsersParamsFollowing0 defines parameters for GetUsers.
type GetUsersParamsFollowing0 = int

// GetUsersParamsFollowing1 defines parameters for GetUsers.
type GetUsersParamsFollowing1 = string

// GetUsersParamsFollowing2 defines parameters for GetUsers.
type GetUsersParamsFollowing2 = openapi_types.UUID

// GetUsersParamsFollowedBy0 defines parameters for GetUsers.
type GetUsersParamsFollowedBy0 = int

// GetUsersParamsFollowedBy1 defines parameters for GetUsers.
type GetUsersParamsFollowedBy1 = string

// GetUsersParamsFollowedBy2 defines parameters for GetUsers.
type GetUsersParamsFollowedBy2 = openapi_types.UUID

// GetUsersAutocompleteParams defines parameters for GetUsersAutocomplete.
type GetUsersAutocompleteParams struct {
	Q                string      `form:"q,omitempty" json:"q,omitempty"`
	IncludeSuspended interface{} `form:"include_suspended,omitempty" json:"include_suspended,omitempty"`
	PerPage          int         `form:"per_page,omitempty" json:"per_page,omitempty"`
	Fields           interface{} `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetUsersEmailAvailableParams defines parameters for GetUsersEmailAvailable.
type GetUsersEmailAvailableParams struct {
	Fields              string `form:"fields,omitempty" json:"fields,omitempty"`
	Email               string `form:"email" json:"email"`
	XHTTPMethodOverride string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetUsersMeParams defines parameters for GetUsersMe.
type GetUsersMeParams struct {
	Fields string `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetUsersNotificationCountsParams defines parameters for GetUsersNotificationCounts.
type GetUsersNotificationCountsParams struct {
	Fields string `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetUsersRecentObservationFieldsParams defines parameters for GetUsersRecentObservationFields.
type GetUsersRecentObservationFieldsParams struct {
	Fields string `form:"fields,omitempty" json:"fields,omitempty"`
}

// PutUsersUpdateSessionParams defines parameters for PutUsersUpdateSession.
type PutUsersUpdateSessionParams struct {
	PrefersHideObsShowIdentifiers interface{} `form:"prefers_hide_obs_show_identifiers,omitempty" json:"prefers_hide_obs_show_identifiers,omitempty"`
}

// GetUsersIDParams defines parameters for GetUsersID.
type GetUsersIDParams struct {
	Fields              string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetUsersIDProjectsParams defines parameters for GetUsersIDProjects.
type GetUsersIDProjectsParams struct {
	Fields              string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride string `json:"X-HTTP-Method-Override,omitempty"`
}

// PostAnnotationsJSONRequestBody defines body for PostAnnotations for application/json ContentType.
type PostAnnotationsJSONRequestBody = AnnotationsCreate

// PostCommentsJSONRequestBody defines body for PostComments for application/json ContentType.
type PostCommentsJSONRequestBody = CommentsCreate

// PutCommentsUUIDJSONRequestBody defines body for PutCommentsUUID for application/json ContentType.
type PutCommentsUUIDJSONRequestBody = CommentsUpdate

// PostFlagsJSONRequestBody defines body for PostFlags for application/json ContentType.
type PostFlagsJSONRequestBody = FlagsCreate

// PutFlagsIDJSONRequestBody defines body for PutFlagsID for application/json ContentType.
type PutFlagsIDJSONRequestBody = FlagsUpdate

// PostIdentificationsJSONRequestBody defines body for PostIdentifications for application/json ContentType.
type PostIdentificationsJSONRequestBody = IdentificationsCreate

// PutIdentificationsUUIDJSONRequestBody defines body for PutIdentificationsUUID for application/json ContentType.
type PutIdentificationsUUIDJSONRequestBody = IdentificationsUpdate

// PostMessagesJSONRequestBody defines body for PostMessages for application/json ContentType.
type PostMessagesJSONRequestBody = MessagesCreate

// PostObservationFieldValuesJSONRequestBody defines body for PostObservationFieldValues for application/json ContentType.
type PostObservationFieldValuesJSONRequestBody = ObservationFieldValuesCreate

// PutObservationFieldValuesUUIDJSONRequestBody defines body for PutObservationFieldValuesUUID for application/json ContentType.
type PutObservationFieldValuesUUIDJSONRequestBody = ObservationFieldValuesCreate

// PostObservationPhotosJSONRequestBody defines body for PostObservationPhotos for application/json ContentType.
type PostObservationPhotosJSONRequestBody = ObservationPhotosCreate

// PostObservationPhotosMultipartRequestBody defines body for PostObservationPhotos for multipart/form-data ContentType.
type PostObservationPhotosMultipartRequestBody = ObservationPhotosCreateMultipart

// PutObservationPhotosUUIDJSONRequestBody defines body for PutObservationPhotosUUID for application/json ContentType.
type PutObservationPhotosUUIDJSONRequestBody = ObservationPhotosUpdate

// PostObservationSoundsJSONRequestBody defines body for PostObservationSounds for application/json ContentType.
type PostObservationSoundsJSONRequestBody = ObservationSoundsCreate

// PostObservationSoundsMultipartRequestBody defines body for PostObservationSounds for multipart/form-data ContentType.
type PostObservationSoundsMultipartRequestBody = ObservationSoundsCreateMultipart

// PutObservationSoundsUUIDJSONRequestBody defines body for PutObservationSoundsUUID for application/json ContentType.
type PutObservationSoundsUUIDJSONRequestBody = ObservationSoundsUpdate

// PostObservationsJSONRequestBody defines body for PostObservations for application/json ContentType.
type PostObservationsJSONRequestBody = ObservationsCreate

// PutObservationsUUIDJSONRequestBody defines body for PutObservationsUUID for application/json ContentType.
type PutObservationsUUIDJSONRequestBody = ObservationsUpdate

// PutObservationsUUIDMultipartRequestBody defines body for PutObservationsUUID for multipart/form-data ContentType.
type PutObservationsUUIDMultipartRequestBody = ObservationsUpdate

// PostPhotosMultipartRequestBody defines body for PostPhotos for multipart/form-data ContentType.
type PostPhotosMultipartRequestBody = PhotosCreate

// PostProjectObservationsJSONRequestBody defines body for PostProjectObservations for application/json ContentType.
type PostProjectObservationsJSONRequestBody = ProjectObservationsCreate

// PutProjectObservationsUUIDJSONRequestBody defines body for PutProjectObservationsUUID for application/json ContentType.
type PutProjectObservationsUUIDJSONRequestBody = ProjectObservationsUpdate

// PutProjectUsersIDJSONRequestBody defines body for PutProjectUsersID for application/json ContentType.
type PutProjectUsersIDJSONRequestBody = ProjectUsersUpdate

// PostRelationshipsJSONRequestBody defines body for PostRelationships for application/json ContentType.
type PostRelationshipsJSONRequestBody = RelationshipsCreate

// PutRelationshipsIDJSONRequestBody defines body for PutRelationshipsID for application/json ContentType.
type PutRelationshipsIDJSONRequestBody = RelationshipsUpdate

// PostSavedLocationsJSONRequestBody defines body for PostSavedLocations for application/json ContentType.
type PostSavedLocationsJSONRequestBody = SavedLocationsCreate

// PostSoundsMultipartRequestBody defines body for PostSounds for multipart/form-data ContentType.
type PostSoundsMultipartRequestBody PostSoundsMultipartBody

// PostTaxaSuggestMultipartRequestBody defines body for PostTaxaSuggest for multipart/form-data ContentType.
type PostTaxaSuggestMultipartRequestBody PostTaxaSuggestMultipartBody

// PostTaxonNamePrioritiesJSONRequestBody defines body for PostTaxonNamePriorities for application/json ContentType.
type PostTaxonNamePrioritiesJSONRequestBody = TaxonNamePrioritiesCreate

// PutTaxonNamePrioritiesIDJSONRequestBody defines body for PutTaxonNamePrioritiesID for application/json ContentType.
type PutTaxonNamePrioritiesIDJSONRequestBody = TaxonNamePrioritiesUpdate

// PostUsersResetPasswordJSONRequestBody defines body for PostUsersResetPassword for application/json ContentType.
type PostUsersResetPasswordJSONRequestBody = UsersResetPassword

// PutUsersIDJSONRequestBody defines body for PutUsersID for application/json ContentType.
type PutUsersIDJSONRequestBody = UsersUpdate

// PutUsersIDMultipartRequestBody defines body for PutUsersID for multipart/form-data ContentType.
type PutUsersIDMultipartRequestBody = UsersUpdateMultipart

// AsObservationFieldValuesCreateObservationFieldValueValue0 returns the union data inside the ObservationFieldValuesCreate_ObservationFieldValue_Value as a ObservationFieldValuesCreateObservationFieldValueValue0
func (t ObservationFieldValuesCreate_ObservationFieldValue_Value) AsObservationFieldValuesCreateObservationFieldValueValue0() (ObservationFieldValuesCreateObservationFieldValueValue0, error) {
	var body ObservationFieldValuesCreateObservationFieldValueValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromObservationFieldValuesCreateObservationFieldValueValue0 overwrites any union data inside the ObservationFieldValuesCreate_ObservationFieldValue_Value as the provided ObservationFieldValuesCreateObservationFieldValueValue0
func (t *ObservationFieldValuesCreate_ObservationFieldValue_Value) FromObservationFieldValuesCreateObservationFieldValueValue0(v ObservationFieldValuesCreateObservationFieldValueValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeObservationFieldValuesCreateObservationFieldValueValue0 performs a merge with any union data inside the ObservationFieldValuesCreate_ObservationFieldValue_Value, using the provided ObservationFieldValuesCreateObservationFieldValueValue0
func (t *ObservationFieldValuesCreate_ObservationFieldValue_Value) MergeObservationFieldValuesCreateObservationFieldValueValue0(v ObservationFieldValuesCreateObservationFieldValueValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsObservationFieldValuesCreateObservationFieldValueValue1 returns the union data inside the ObservationFieldValuesCreate_ObservationFieldValue_Value as a ObservationFieldValuesCreateObservationFieldValueValue1
func (t ObservationFieldValuesCreate_ObservationFieldValue_Value) AsObservationFieldValuesCreateObservationFieldValueValue1() (ObservationFieldValuesCreateObservationFieldValueValue1, error) {
	var body ObservationFieldValuesCreateObservationFieldValueValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromObservationFieldValuesCreateObservationFieldValueValue1 overwrites any union data inside the ObservationFieldValuesCreate_ObservationFieldValue_Value as the provided ObservationFieldValuesCreateObservationFieldValueValue1
func (t *ObservationFieldValuesCreate_ObservationFieldValue_Value) FromObservationFieldValuesCreateObservationFieldValueValue1(v ObservationFieldValuesCreateObservationFieldValueValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeObservationFieldValuesCreateObservationFieldValueValue1 performs a merge with any union data inside the ObservationFieldValuesCreate_ObservationFieldValue_Value, using the provided ObservationFieldValuesCreateObservationFieldValueValue1
func (t *ObservationFieldValuesCreate_ObservationFieldValue_Value) MergeObservationFieldValuesCreateObservationFieldValueValue1(v ObservationFieldValuesCreateObservationFieldValueValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ObservationFieldValuesCreate_ObservationFieldValue_Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ObservationFieldValuesCreate_ObservationFieldValue_Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPolygonGeoJSONCoordinates0 returns the union data inside the PolygonGeoJSON_Coordinates as a PolygonGeoJSONCoordinates0
func (t PolygonGeoJSON_Coordinates) AsPolygonGeoJSONCoordinates0() (PolygonGeoJSONCoordinates0, error) {
	var body PolygonGeoJSONCoordinates0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPolygonGeoJSONCoordinates0 overwrites any union data inside the PolygonGeoJSON_Coordinates as the provided PolygonGeoJSONCoordinates0
func (t *PolygonGeoJSON_Coordinates) FromPolygonGeoJSONCoordinates0(v PolygonGeoJSONCoordinates0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePolygonGeoJSONCoordinates0 performs a merge with any union data inside the PolygonGeoJSON_Coordinates, using the provided PolygonGeoJSONCoordinates0
func (t *PolygonGeoJSON_Coordinates) MergePolygonGeoJSONCoordinates0(v PolygonGeoJSONCoordinates0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPolygonGeoJSONCoordinates1 returns the union data inside the PolygonGeoJSON_Coordinates as a PolygonGeoJSONCoordinates1
func (t PolygonGeoJSON_Coordinates) AsPolygonGeoJSONCoordinates1() (PolygonGeoJSONCoordinates1, error) {
	var body PolygonGeoJSONCoordinates1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPolygonGeoJSONCoordinates1 overwrites any union data inside the PolygonGeoJSON_Coordinates as the provided PolygonGeoJSONCoordinates1
func (t *PolygonGeoJSON_Coordinates) FromPolygonGeoJSONCoordinates1(v PolygonGeoJSONCoordinates1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePolygonGeoJSONCoordinates1 performs a merge with any union data inside the PolygonGeoJSON_Coordinates, using the provided PolygonGeoJSONCoordinates1
func (t *PolygonGeoJSON_Coordinates) MergePolygonGeoJSONCoordinates1(v PolygonGeoJSONCoordinates1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PolygonGeoJSON_Coordinates) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PolygonGeoJSON_Coordinates) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsProjectSearchParametersValueNumber0 returns the union data inside the Project_SearchParameters_ValueNumber as a ProjectSearchParametersValueNumber0
func (t Project_SearchParameters_ValueNumber) AsProjectSearchParametersValueNumber0() (ProjectSearchParametersValueNumber0, error) {
	var body ProjectSearchParametersValueNumber0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProjectSearchParametersValueNumber0 overwrites any union data inside the Project_SearchParameters_ValueNumber as the provided ProjectSearchParametersValueNumber0
func (t *Project_SearchParameters_ValueNumber) FromProjectSearchParametersValueNumber0(v ProjectSearchParametersValueNumber0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProjectSearchParametersValueNumber0 performs a merge with any union data inside the Project_SearchParameters_ValueNumber, using the provided ProjectSearchParametersValueNumber0
func (t *Project_SearchParameters_ValueNumber) MergeProjectSearchParametersValueNumber0(v ProjectSearchParametersValueNumber0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProjectSearchParametersValueNumber1 returns the union data inside the Project_SearchParameters_ValueNumber as a ProjectSearchParametersValueNumber1
func (t Project_SearchParameters_ValueNumber) AsProjectSearchParametersValueNumber1() (ProjectSearchParametersValueNumber1, error) {
	var body ProjectSearchParametersValueNumber1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProjectSearchParametersValueNumber1 overwrites any union data inside the Project_SearchParameters_ValueNumber as the provided ProjectSearchParametersValueNumber1
func (t *Project_SearchParameters_ValueNumber) FromProjectSearchParametersValueNumber1(v ProjectSearchParametersValueNumber1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProjectSearchParametersValueNumber1 performs a merge with any union data inside the Project_SearchParameters_ValueNumber, using the provided ProjectSearchParametersValueNumber1
func (t *Project_SearchParameters_ValueNumber) MergeProjectSearchParametersValueNumber1(v ProjectSearchParametersValueNumber1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Project_SearchParameters_ValueNumber) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Project_SearchParameters_ValueNumber) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResultsObservationsHistogramResults0 returns the union data inside the ResultsObservationsHistogram_Results as a ResultsObservationsHistogramResults0
func (t ResultsObservationsHistogram_Results) AsResultsObservationsHistogramResults0() (ResultsObservationsHistogramResults0, error) {
	var body ResultsObservationsHistogramResults0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResultsObservationsHistogramResults0 overwrites any union data inside the ResultsObservationsHistogram_Results as the provided ResultsObservationsHistogramResults0
func (t *ResultsObservationsHistogram_Results) FromResultsObservationsHistogramResults0(v ResultsObservationsHistogramResults0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResultsObservationsHistogramResults0 performs a merge with any union data inside the ResultsObservationsHistogram_Results, using the provided ResultsObservationsHistogramResults0
func (t *ResultsObservationsHistogram_Results) MergeResultsObservationsHistogramResults0(v ResultsObservationsHistogramResults0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResultsObservationsHistogram_Results) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResultsObservationsHistogram_Results) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResultsObservationsPopularFieldValuesUnannotated0 returns the union data inside the ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties as a ResultsObservationsPopularFieldValuesUnannotated0
func (t ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties) AsResultsObservationsPopularFieldValuesUnannotated0() (ResultsObservationsPopularFieldValuesUnannotated0, error) {
	var body ResultsObservationsPopularFieldValuesUnannotated0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResultsObservationsPopularFieldValuesUnannotated0 overwrites any union data inside the ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties as the provided ResultsObservationsPopularFieldValuesUnannotated0
func (t *ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties) FromResultsObservationsPopularFieldValuesUnannotated0(v ResultsObservationsPopularFieldValuesUnannotated0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResultsObservationsPopularFieldValuesUnannotated0 performs a merge with any union data inside the ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties, using the provided ResultsObservationsPopularFieldValuesUnannotated0
func (t *ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties) MergeResultsObservationsPopularFieldValuesUnannotated0(v ResultsObservationsPopularFieldValuesUnannotated0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResultsObservationsPopularFieldValuesUnannotated1 returns the union data inside the ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties as a ResultsObservationsPopularFieldValuesUnannotated1
func (t ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties) AsResultsObservationsPopularFieldValuesUnannotated1() (ResultsObservationsPopularFieldValuesUnannotated1, error) {
	var body ResultsObservationsPopularFieldValuesUnannotated1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResultsObservationsPopularFieldValuesUnannotated1 overwrites any union data inside the ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties as the provided ResultsObservationsPopularFieldValuesUnannotated1
func (t *ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties) FromResultsObservationsPopularFieldValuesUnannotated1(v ResultsObservationsPopularFieldValuesUnannotated1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResultsObservationsPopularFieldValuesUnannotated1 performs a merge with any union data inside the ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties, using the provided ResultsObservationsPopularFieldValuesUnannotated1
func (t *ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties) MergeResultsObservationsPopularFieldValuesUnannotated1(v ResultsObservationsPopularFieldValuesUnannotated1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResultsTaxaSuggestQueryIncludeRepresentativePhotos0 returns the union data inside the ResultsTaxaSuggest_Query_IncludeRepresentativePhotos as a ResultsTaxaSuggestQueryIncludeRepresentativePhotos0
func (t ResultsTaxaSuggest_Query_IncludeRepresentativePhotos) AsResultsTaxaSuggestQueryIncludeRepresentativePhotos0() (ResultsTaxaSuggestQueryIncludeRepresentativePhotos0, error) {
	var body ResultsTaxaSuggestQueryIncludeRepresentativePhotos0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResultsTaxaSuggestQueryIncludeRepresentativePhotos0 overwrites any union data inside the ResultsTaxaSuggest_Query_IncludeRepresentativePhotos as the provided ResultsTaxaSuggestQueryIncludeRepresentativePhotos0
func (t *ResultsTaxaSuggest_Query_IncludeRepresentativePhotos) FromResultsTaxaSuggestQueryIncludeRepresentativePhotos0(v ResultsTaxaSuggestQueryIncludeRepresentativePhotos0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResultsTaxaSuggestQueryIncludeRepresentativePhotos0 performs a merge with any union data inside the ResultsTaxaSuggest_Query_IncludeRepresentativePhotos, using the provided ResultsTaxaSuggestQueryIncludeRepresentativePhotos0
func (t *ResultsTaxaSuggest_Query_IncludeRepresentativePhotos) MergeResultsTaxaSuggestQueryIncludeRepresentativePhotos0(v ResultsTaxaSuggestQueryIncludeRepresentativePhotos0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResultsTaxaSuggestQueryIncludeRepresentativePhotos1 returns the union data inside the ResultsTaxaSuggest_Query_IncludeRepresentativePhotos as a ResultsTaxaSuggestQueryIncludeRepresentativePhotos1
func (t ResultsTaxaSuggest_Query_IncludeRepresentativePhotos) AsResultsTaxaSuggestQueryIncludeRepresentativePhotos1() (ResultsTaxaSuggestQueryIncludeRepresentativePhotos1, error) {
	var body ResultsTaxaSuggestQueryIncludeRepresentativePhotos1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResultsTaxaSuggestQueryIncludeRepresentativePhotos1 overwrites any union data inside the ResultsTaxaSuggest_Query_IncludeRepresentativePhotos as the provided ResultsTaxaSuggestQueryIncludeRepresentativePhotos1
func (t *ResultsTaxaSuggest_Query_IncludeRepresentativePhotos) FromResultsTaxaSuggestQueryIncludeRepresentativePhotos1(v ResultsTaxaSuggestQueryIncludeRepresentativePhotos1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResultsTaxaSuggestQueryIncludeRepresentativePhotos1 performs a merge with any union data inside the ResultsTaxaSuggest_Query_IncludeRepresentativePhotos, using the provided ResultsTaxaSuggestQueryIncludeRepresentativePhotos1
func (t *ResultsTaxaSuggest_Query_IncludeRepresentativePhotos) MergeResultsTaxaSuggestQueryIncludeRepresentativePhotos1(v ResultsTaxaSuggestQueryIncludeRepresentativePhotos1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResultsTaxaSuggest_Query_IncludeRepresentativePhotos) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResultsTaxaSuggest_Query_IncludeRepresentativePhotos) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAnnotationsWithBody request with any body
	PostAnnotationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAnnotations(ctx context.Context, body PostAnnotationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAnnotationsUUID request
	DeleteAnnotationsUUID(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAnnotationsUUIDVote request
	DeleteAnnotationsUUIDVote(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAnnotationsUUIDVote request
	PostAnnotationsUUIDVote(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAnnouncements request
	GetAnnouncements(ctx context.Context, params *GetAnnouncementsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAnnouncementsIDDismiss request
	PutAnnouncementsIDDismiss(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthorizedApplications request
	GetAuthorizedApplications(ctx context.Context, params *GetAuthorizedApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAuthorizedApplicationsID request
	DeleteAuthorizedApplicationsID(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCommentsWithBody request with any body
	PostCommentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostComments(ctx context.Context, body PostCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCommentsUUID request
	DeleteCommentsUUID(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCommentsUUIDWithBody request with any body
	PutCommentsUUIDWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCommentsUUID(ctx context.Context, uuid openapi_types.UUID, body PutCommentsUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetControlledTerms request
	GetControlledTerms(ctx context.Context, params *GetControlledTermsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetControlledTermsForTaxonTaxonID request
	GetControlledTermsForTaxonTaxonID(ctx context.Context, taxonID []string, params *GetControlledTermsForTaxonTaxonIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFlagsWithBody request with any body
	PostFlagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFlags(ctx context.Context, body PostFlagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFlagsID request
	DeleteFlagsID(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFlagsIDWithBody request with any body
	PutFlagsIDWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFlagsID(ctx context.Context, id int, body PutFlagsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGeomodelIDZoomXYPng request
	GetGeomodelIDZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGeomodelComparisonIDZoomXYPng request
	GetGeomodelComparisonIDZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelComparisonIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGeomodelTaxonRangeIDZoomXYPng request
	GetGeomodelTaxonRangeIDZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelTaxonRangeIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGridZoomXYGridJSON request
	GetGridZoomXYGridJSON(ctx context.Context, zoom int, x int, y int, params *GetGridZoomXYGridJSONParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGridZoomXYPng request
	GetGridZoomXYPng(ctx context.Context, zoom int, x int, y int, params *GetGridZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHeatmapZoomXYPng request
	GetHeatmapZoomXYPng(ctx context.Context, zoom int, x int, y int, params *GetHeatmapZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdentificationsWithBody request with any body
	PostIdentificationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIdentifications(ctx context.Context, body PostIdentificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdentificationsIdentifiers request
	GetIdentificationsIdentifiers(ctx context.Context, params *GetIdentificationsIdentifiersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdentificationsRecentTaxa request
	GetIdentificationsRecentTaxa(ctx context.Context, params *GetIdentificationsRecentTaxaParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdentificationsSimilarSpecies request
	GetIdentificationsSimilarSpecies(ctx context.Context, params *GetIdentificationsSimilarSpeciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdentificationsUUID request
	DeleteIdentificationsUUID(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIdentificationsUUIDWithBody request with any body
	PutIdentificationsUUIDWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIdentificationsUUID(ctx context.Context, uuid openapi_types.UUID, body PutIdentificationsUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMessages request
	GetMessages(ctx context.Context, params *GetMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMessagesWithBody request with any body
	PostMessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMessages(ctx context.Context, body PostMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMessagesID request
	GetMessagesID(ctx context.Context, id int, params *GetMessagesIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObservationFieldValuesWithBody request with any body
	PostObservationFieldValuesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostObservationFieldValues(ctx context.Context, body PostObservationFieldValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObservationFieldValuesUUID request
	DeleteObservationFieldValuesUUID(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutObservationFieldValuesUUIDWithBody request with any body
	PutObservationFieldValuesUUIDWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutObservationFieldValuesUUID(ctx context.Context, uuid openapi_types.UUID, body PutObservationFieldValuesUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObservationPhotosWithBody request with any body
	PostObservationPhotosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostObservationPhotos(ctx context.Context, body PostObservationPhotosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObservationPhotosUUID request
	DeleteObservationPhotosUUID(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutObservationPhotosUUIDWithBody request with any body
	PutObservationPhotosUUIDWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutObservationPhotosUUID(ctx context.Context, uuid openapi_types.UUID, body PutObservationPhotosUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObservationSoundsWithBody request with any body
	PostObservationSoundsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostObservationSounds(ctx context.Context, body PostObservationSoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObservationSoundsUUID request
	DeleteObservationSoundsUUID(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutObservationSoundsUUIDWithBody request with any body
	PutObservationSoundsUUIDWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutObservationSoundsUUID(ctx context.Context, uuid openapi_types.UUID, body PutObservationSoundsUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservations request
	GetObservations(ctx context.Context, params *GetObservationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObservationsWithBody request with any body
	PostObservationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostObservations(ctx context.Context, body PostObservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsDeleted request
	GetObservationsDeleted(ctx context.Context, params *GetObservationsDeletedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsHistogram request
	GetObservationsHistogram(ctx context.Context, params *GetObservationsHistogramParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsIconicTaxaSpeciesCounts request
	GetObservationsIconicTaxaSpeciesCounts(ctx context.Context, params *GetObservationsIconicTaxaSpeciesCountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsIdentificationCategories request
	GetObservationsIdentificationCategories(ctx context.Context, params *GetObservationsIdentificationCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsIdentifiers request
	GetObservationsIdentifiers(ctx context.Context, params *GetObservationsIdentifiersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsObservers request
	GetObservationsObservers(ctx context.Context, params *GetObservationsObserversParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsPopularFieldValues request
	GetObservationsPopularFieldValues(ctx context.Context, params *GetObservationsPopularFieldValuesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsQualityGrades request
	GetObservationsQualityGrades(ctx context.Context, params *GetObservationsQualityGradesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsSpeciesCounts request
	GetObservationsSpeciesCounts(ctx context.Context, params *GetObservationsSpeciesCountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsUmbrellaProjectStats request
	GetObservationsUmbrellaProjectStats(ctx context.Context, params *GetObservationsUmbrellaProjectStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsUpdates request
	GetObservationsUpdates(ctx context.Context, params *GetObservationsUpdatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObservationsUUID request
	DeleteObservationsUUID(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsUUID request
	GetObservationsUUID(ctx context.Context, uuid []openapi_types.UUID, params *GetObservationsUUIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutObservationsUUIDWithBody request with any body
	PutObservationsUUIDWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutObservationsUUID(ctx context.Context, uuid openapi_types.UUID, body PutObservationsUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObservationsUUIDFave request
	DeleteObservationsUUIDFave(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObservationsUUIDFave request
	PostObservationsUUIDFave(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObservationsUUIDQualityMetric request
	DeleteObservationsUUIDQualityMetric(ctx context.Context, uuid []openapi_types.UUID, metric DeleteObservationsUUIDQualityMetricParamsMetric, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObservationsUUIDQualityMetric request
	PostObservationsUUIDQualityMetric(ctx context.Context, uuid []openapi_types.UUID, metric PostObservationsUUIDQualityMetricParamsMetric, params *PostObservationsUUIDQualityMetricParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsUUIDQualityMetrics request
	GetObservationsUUIDQualityMetrics(ctx context.Context, uuid []openapi_types.UUID, params *GetObservationsUUIDQualityMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObservationsUUIDReview request
	DeleteObservationsUUIDReview(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObservationsUUIDReview request
	PostObservationsUUIDReview(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutObservationsUUIDSubscription request
	PutObservationsUUIDSubscription(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsUUIDSubscriptions request
	GetObservationsUUIDSubscriptions(ctx context.Context, uuid openapi_types.UUID, params *GetObservationsUUIDSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsUUIDTaxonSummary request
	GetObservationsUUIDTaxonSummary(ctx context.Context, uuid openapi_types.UUID, params *GetObservationsUUIDTaxonSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutObservationsUUIDViewedUpdates request
	PutObservationsUUIDViewedUpdates(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPhotosWithBody request with any body
	PostPhotosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPhotosID request
	PutPhotosID(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaces request
	GetPlaces(ctx context.Context, params *GetPlacesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacesNearby request
	GetPlacesNearby(ctx context.Context, params *GetPlacesNearbyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacesIDZoomXYPng request
	GetPlacesIDZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetPlacesIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacesUUID request
	GetPlacesUUID(ctx context.Context, uuid []string, params *GetPlacesUUIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPointsZoomXYGridJSON request
	GetPointsZoomXYGridJSON(ctx context.Context, zoom int, x int, y int, params *GetPointsZoomXYGridJSONParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPointsZoomXYPng request
	GetPointsZoomXYPng(ctx context.Context, zoom int, x int, y int, params *GetPointsZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectObservationsWithBody request with any body
	PostProjectObservationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProjectObservations(ctx context.Context, body PostProjectObservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProjectObservationsUUID request
	DeleteProjectObservationsUUID(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutProjectObservationsUUIDWithBody request with any body
	PutProjectObservationsUUIDWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutProjectObservationsUUID(ctx context.Context, uuid openapi_types.UUID, body PutProjectObservationsUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutProjectUsersIDWithBody request with any body
	PutProjectUsersIDWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutProjectUsersID(ctx context.Context, id string, body PutProjectUsersIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjects request
	GetProjects(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectsID request
	GetProjectsID(ctx context.Context, id []int, params *GetProjectsIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectsIDMembers request
	GetProjectsIDMembers(ctx context.Context, id int, params *GetProjectsIDMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProjectsIDMembership request
	DeleteProjectsIDMembership(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectsIDMembership request
	GetProjectsIDMembership(ctx context.Context, id []int, params *GetProjectsIDMembershipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectsIDMembership request
	PostProjectsIDMembership(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectsIDPosts request
	GetProjectsIDPosts(ctx context.Context, id []int, params *GetProjectsIDPostsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProviderAuthorizations request
	GetProviderAuthorizations(ctx context.Context, params *GetProviderAuthorizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProviderAuthorizationsID request
	DeleteProviderAuthorizationsID(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRelationships request
	GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRelationshipsWithBody request with any body
	PostRelationshipsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRelationships(ctx context.Context, body PostRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRelationshipsID request
	DeleteRelationshipsID(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRelationshipsIDWithBody request with any body
	PutRelationshipsIDWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRelationshipsID(ctx context.Context, id int, body PutRelationshipsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSavedLocations request
	GetSavedLocations(ctx context.Context, params *GetSavedLocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSavedLocationsWithBody request with any body
	PostSavedLocationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSavedLocations(ctx context.Context, body PostSavedLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSavedLocationsID request
	DeleteSavedLocationsID(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearch request
	GetSearch(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSites request
	GetSites(ctx context.Context, params *GetSitesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSoundsWithBody request with any body
	PostSoundsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxa request
	GetTaxa(ctx context.Context, params *GetTaxaParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxaAutocomplete request
	GetTaxaAutocomplete(ctx context.Context, params *GetTaxaAutocompleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxaIconic request
	GetTaxaIconic(ctx context.Context, params *GetTaxaIconicParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxaSuggest request
	GetTaxaSuggest(ctx context.Context, params *GetTaxaSuggestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTaxaSuggestWithBody request with any body
	PostTaxaSuggestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxaID request
	GetTaxaID(ctx context.Context, id []int, params *GetTaxaIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxaIDWanted request
	GetTaxaIDWanted(ctx context.Context, id int, params *GetTaxaIDWantedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTaxonNamePrioritiesWithBody request with any body
	PostTaxonNamePrioritiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTaxonNamePriorities(ctx context.Context, body PostTaxonNamePrioritiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTaxonNamePrioritiesID request
	DeleteTaxonNamePrioritiesID(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTaxonNamePrioritiesIDWithBody request with any body
	PutTaxonNamePrioritiesIDWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTaxonNamePrioritiesID(ctx context.Context, id int, body PutTaxonNamePrioritiesIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxonPlacesIDZoomXYPng request
	GetTaxonPlacesIDZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetTaxonPlacesIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxonRangesIDZoomXYPng request
	GetTaxonRangesIDZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetTaxonRangesIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTranslationsLocales request
	GetTranslationsLocales(ctx context.Context, params *GetTranslationsLocalesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersAutocomplete request
	GetUsersAutocomplete(ctx context.Context, params *GetUsersAutocompleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersEmailAvailable request
	GetUsersEmailAvailable(ctx context.Context, params *GetUsersEmailAvailableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersMe request
	GetUsersMe(ctx context.Context, params *GetUsersMeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersNotificationCounts request
	GetUsersNotificationCounts(ctx context.Context, params *GetUsersNotificationCountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersRecentObservationFields request
	GetUsersRecentObservationFields(ctx context.Context, params *GetUsersRecentObservationFieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersResendConfirmation request
	PostUsersResendConfirmation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersResetPasswordWithBody request with any body
	PostUsersResetPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsersResetPassword(ctx context.Context, body PostUsersResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUsersUpdateSession request
	PutUsersUpdateSession(ctx context.Context, params *PutUsersUpdateSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersID request
	GetUsersID(ctx context.Context, id string, params *GetUsersIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUsersIDWithBody request with any body
	PutUsersIDWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUsersID(ctx context.Context, id string, body PutUsersIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsersIDBlock request
	DeleteUsersIDBlock(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersIDBlock request
	PostUsersIDBlock(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsersIDMute request
	DeleteUsersIDMute(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersIDMute request
	PostUsersIDMute(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersIDProjects request
	GetUsersIDProjects(ctx context.Context, id int, params *GetUsersIDProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAnnotationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnnotationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAnnotations(ctx context.Context, body PostAnnotationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnnotationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAnnotationsUUID(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAnnotationsUUIDRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAnnotationsUUIDVote(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAnnotationsUUIDVoteRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAnnotationsUUIDVote(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnnotationsUUIDVoteRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAnnouncements(ctx context.Context, params *GetAnnouncementsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAnnouncementsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAnnouncementsIDDismiss(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAnnouncementsIDDismissRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthorizedApplications(ctx context.Context, params *GetAuthorizedApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthorizedApplicationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuthorizedApplicationsID(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthorizedApplicationsIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCommentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCommentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComments(ctx context.Context, body PostCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCommentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCommentsUUID(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCommentsUUIDRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCommentsUUIDWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCommentsUUIDRequestWithBody(c.Server, uuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCommentsUUID(ctx context.Context, uuid openapi_types.UUID, body PutCommentsUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCommentsUUIDRequest(c.Server, uuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetControlledTerms(ctx context.Context, params *GetControlledTermsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetControlledTermsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetControlledTermsForTaxonTaxonID(ctx context.Context, taxonID []string, params *GetControlledTermsForTaxonTaxonIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetControlledTermsForTaxonTaxonIDRequest(c.Server, taxonID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFlagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFlagsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFlags(ctx context.Context, body PostFlagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFlagsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFlagsID(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFlagsIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFlagsIDWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFlagsIDRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFlagsID(ctx context.Context, id int, body PutFlagsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFlagsIDRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGeomodelIDZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGeomodelIDZoomXYPngRequest(c.Server, id, zoom, x, y, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGeomodelComparisonIDZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelComparisonIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGeomodelComparisonIDZoomXYPngRequest(c.Server, id, zoom, x, y, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGeomodelTaxonRangeIDZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelTaxonRangeIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGeomodelTaxonRangeIDZoomXYPngRequest(c.Server, id, zoom, x, y, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGridZoomXYGridJSON(ctx context.Context, zoom int, x int, y int, params *GetGridZoomXYGridJSONParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGridZoomXYGridJSONRequest(c.Server, zoom, x, y, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGridZoomXYPng(ctx context.Context, zoom int, x int, y int, params *GetGridZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGridZoomXYPngRequest(c.Server, zoom, x, y, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHeatmapZoomXYPng(ctx context.Context, zoom int, x int, y int, params *GetHeatmapZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHeatmapZoomXYPngRequest(c.Server, zoom, x, y, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdentificationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdentificationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdentifications(ctx context.Context, body PostIdentificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdentificationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdentificationsIdentifiers(ctx context.Context, params *GetIdentificationsIdentifiersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdentificationsIdentifiersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdentificationsRecentTaxa(ctx context.Context, params *GetIdentificationsRecentTaxaParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdentificationsRecentTaxaRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdentificationsSimilarSpecies(ctx context.Context, params *GetIdentificationsSimilarSpeciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdentificationsSimilarSpeciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdentificationsUUID(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdentificationsUUIDRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdentificationsUUIDWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdentificationsUUIDRequestWithBody(c.Server, uuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdentificationsUUID(ctx context.Context, uuid openapi_types.UUID, body PutIdentificationsUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdentificationsUUIDRequest(c.Server, uuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessages(ctx context.Context, params *GetMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMessagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessages(ctx context.Context, body PostMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMessagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessagesID(ctx context.Context, id int, params *GetMessagesIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessagesIDRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObservationFieldValuesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObservationFieldValuesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObservationFieldValues(ctx context.Context, body PostObservationFieldValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObservationFieldValuesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObservationFieldValuesUUID(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObservationFieldValuesUUIDRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObservationFieldValuesUUIDWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObservationFieldValuesUUIDRequestWithBody(c.Server, uuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObservationFieldValuesUUID(ctx context.Context, uuid openapi_types.UUID, body PutObservationFieldValuesUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObservationFieldValuesUUIDRequest(c.Server, uuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObservationPhotosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObservationPhotosRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObservationPhotos(ctx context.Context, body PostObservationPhotosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObservationPhotosRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObservationPhotosUUID(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObservationPhotosUUIDRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObservationPhotosUUIDWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObservationPhotosUUIDRequestWithBody(c.Server, uuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObservationPhotosUUID(ctx context.Context, uuid openapi_types.UUID, body PutObservationPhotosUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObservationPhotosUUIDRequest(c.Server, uuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObservationSoundsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObservationSoundsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObservationSounds(ctx context.Context, body PostObservationSoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObservationSoundsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObservationSoundsUUID(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObservationSoundsUUIDRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObservationSoundsUUIDWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObservationSoundsUUIDRequestWithBody(c.Server, uuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObservationSoundsUUID(ctx context.Context, uuid openapi_types.UUID, body PutObservationSoundsUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObservationSoundsUUIDRequest(c.Server, uuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservations(ctx context.Context, params *GetObservationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObservationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObservationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObservations(ctx context.Context, body PostObservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObservationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsDeleted(ctx context.Context, params *GetObservationsDeletedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsDeletedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsHistogram(ctx context.Context, params *GetObservationsHistogramParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsHistogramRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsIconicTaxaSpeciesCounts(ctx context.Context, params *GetObservationsIconicTaxaSpeciesCountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsIconicTaxaSpeciesCountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsIdentificationCategories(ctx context.Context, params *GetObservationsIdentificationCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsIdentificationCategoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsIdentifiers(ctx context.Context, params *GetObservationsIdentifiersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsIdentifiersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsObservers(ctx context.Context, params *GetObservationsObserversParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsObserversRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsPopularFieldValues(ctx context.Context, params *GetObservationsPopularFieldValuesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsPopularFieldValuesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsQualityGrades(ctx context.Context, params *GetObservationsQualityGradesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsQualityGradesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsSpeciesCounts(ctx context.Context, params *GetObservationsSpeciesCountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsSpeciesCountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsUmbrellaProjectStats(ctx context.Context, params *GetObservationsUmbrellaProjectStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsUmbrellaProjectStatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsUpdates(ctx context.Context, params *GetObservationsUpdatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsUpdatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObservationsUUID(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObservationsUUIDRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsUUID(ctx context.Context, uuid []openapi_types.UUID, params *GetObservationsUUIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsUUIDRequest(c.Server, uuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObservationsUUIDWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObservationsUUIDRequestWithBody(c.Server, uuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObservationsUUID(ctx context.Context, uuid openapi_types.UUID, body PutObservationsUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObservationsUUIDRequest(c.Server, uuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObservationsUUIDFave(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObservationsUUIDFaveRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObservationsUUIDFave(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObservationsUUIDFaveRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObservationsUUIDQualityMetric(ctx context.Context, uuid []openapi_types.UUID, metric DeleteObservationsUUIDQualityMetricParamsMetric, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObservationsUUIDQualityMetricRequest(c.Server, uuid, metric)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObservationsUUIDQualityMetric(ctx context.Context, uuid []openapi_types.UUID, metric PostObservationsUUIDQualityMetricParamsMetric, params *PostObservationsUUIDQualityMetricParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObservationsUUIDQualityMetricRequest(c.Server, uuid, metric, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsUUIDQualityMetrics(ctx context.Context, uuid []openapi_types.UUID, params *GetObservationsUUIDQualityMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsUUIDQualityMetricsRequest(c.Server, uuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObservationsUUIDReview(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObservationsUUIDReviewRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObservationsUUIDReview(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObservationsUUIDReviewRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObservationsUUIDSubscription(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObservationsUUIDSubscriptionRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsUUIDSubscriptions(ctx context.Context, uuid openapi_types.UUID, params *GetObservationsUUIDSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsUUIDSubscriptionsRequest(c.Server, uuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsUUIDTaxonSummary(ctx context.Context, uuid openapi_types.UUID, params *GetObservationsUUIDTaxonSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsUUIDTaxonSummaryRequest(c.Server, uuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObservationsUUIDViewedUpdates(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObservationsUUIDViewedUpdatesRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPhotosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPhotosRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPhotosID(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPhotosIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaces(ctx context.Context, params *GetPlacesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacesNearby(ctx context.Context, params *GetPlacesNearbyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacesNearbyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacesIDZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetPlacesIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacesIDZoomXYPngRequest(c.Server, id, zoom, x, y, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacesUUID(ctx context.Context, uuid []string, params *GetPlacesUUIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacesUUIDRequest(c.Server, uuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPointsZoomXYGridJSON(ctx context.Context, zoom int, x int, y int, params *GetPointsZoomXYGridJSONParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPointsZoomXYGridJSONRequest(c.Server, zoom, x, y, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPointsZoomXYPng(ctx context.Context, zoom int, x int, y int, params *GetPointsZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPointsZoomXYPngRequest(c.Server, zoom, x, y, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectObservationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectObservationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectObservations(ctx context.Context, body PostProjectObservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectObservationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProjectObservationsUUID(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectObservationsUUIDRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProjectObservationsUUIDWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProjectObservationsUUIDRequestWithBody(c.Server, uuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProjectObservationsUUID(ctx context.Context, uuid openapi_types.UUID, body PutProjectObservationsUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProjectObservationsUUIDRequest(c.Server, uuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProjectUsersIDWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProjectUsersIDRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProjectUsersID(ctx context.Context, id string, body PutProjectUsersIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProjectUsersIDRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjects(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectsID(ctx context.Context, id []int, params *GetProjectsIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsIDRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectsIDMembers(ctx context.Context, id int, params *GetProjectsIDMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsIDMembersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProjectsIDMembership(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectsIDMembershipRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectsIDMembership(ctx context.Context, id []int, params *GetProjectsIDMembershipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsIDMembershipRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsIDMembership(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsIDMembershipRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectsIDPosts(ctx context.Context, id []int, params *GetProjectsIDPostsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsIDPostsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProviderAuthorizations(ctx context.Context, params *GetProviderAuthorizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProviderAuthorizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProviderAuthorizationsID(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProviderAuthorizationsIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRelationshipsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRelationshipsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRelationships(ctx context.Context, body PostRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRelationshipsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRelationshipsID(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRelationshipsIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRelationshipsIDWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRelationshipsIDRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRelationshipsID(ctx context.Context, id int, body PutRelationshipsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRelationshipsIDRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSavedLocations(ctx context.Context, params *GetSavedLocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSavedLocationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSavedLocationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSavedLocationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSavedLocations(ctx context.Context, body PostSavedLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSavedLocationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSavedLocationsID(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSavedLocationsIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearch(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSites(ctx context.Context, params *GetSitesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSitesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSoundsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSoundsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxa(ctx context.Context, params *GetTaxaParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxaRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxaAutocomplete(ctx context.Context, params *GetTaxaAutocompleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxaAutocompleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxaIconic(ctx context.Context, params *GetTaxaIconicParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxaIconicRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxaSuggest(ctx context.Context, params *GetTaxaSuggestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxaSuggestRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTaxaSuggestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTaxaSuggestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxaID(ctx context.Context, id []int, params *GetTaxaIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxaIDRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxaIDWanted(ctx context.Context, id int, params *GetTaxaIDWantedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxaIDWantedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTaxonNamePrioritiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTaxonNamePrioritiesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTaxonNamePriorities(ctx context.Context, body PostTaxonNamePrioritiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTaxonNamePrioritiesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTaxonNamePrioritiesID(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTaxonNamePrioritiesIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTaxonNamePrioritiesIDWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTaxonNamePrioritiesIDRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTaxonNamePrioritiesID(ctx context.Context, id int, body PutTaxonNamePrioritiesIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTaxonNamePrioritiesIDRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxonPlacesIDZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetTaxonPlacesIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxonPlacesIDZoomXYPngRequest(c.Server, id, zoom, x, y, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxonRangesIDZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetTaxonRangesIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxonRangesIDZoomXYPngRequest(c.Server, id, zoom, x, y, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTranslationsLocales(ctx context.Context, params *GetTranslationsLocalesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTranslationsLocalesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersAutocomplete(ctx context.Context, params *GetUsersAutocompleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersAutocompleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersEmailAvailable(ctx context.Context, params *GetUsersEmailAvailableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersEmailAvailableRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersMe(ctx context.Context, params *GetUsersMeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersMeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersNotificationCounts(ctx context.Context, params *GetUsersNotificationCountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersNotificationCountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersRecentObservationFields(ctx context.Context, params *GetUsersRecentObservationFieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRecentObservationFieldsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersResendConfirmation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersResendConfirmationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersResetPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersResetPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersResetPassword(ctx context.Context, body PostUsersResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersResetPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUsersUpdateSession(ctx context.Context, params *PutUsersUpdateSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUsersUpdateSessionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersID(ctx context.Context, id string, params *GetUsersIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersIDRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUsersIDWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUsersIDRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUsersID(ctx context.Context, id string, body PutUsersIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUsersIDRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsersIDBlock(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsersIDBlockRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersIDBlock(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersIDBlockRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsersIDMute(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsersIDMuteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersIDMute(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersIDMuteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersIDProjects(ctx context.Context, id int, params *GetUsersIDProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersIDProjectsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAnnotationsRequest calls the generic PostAnnotations builder with application/json body
func NewPostAnnotationsRequest(server string, body PostAnnotationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAnnotationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAnnotationsRequestWithBody generates requests for PostAnnotations with any type of body
func NewPostAnnotationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/annotations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAnnotationsUUIDRequest generates requests for DeleteAnnotationsUUID
func NewDeleteAnnotationsUUIDRequest(server string, uuid []openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/annotations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAnnotationsUUIDVoteRequest generates requests for DeleteAnnotationsUUIDVote
func NewDeleteAnnotationsUUIDVoteRequest(server string, uuid []openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/annotations/%s/vote", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAnnotationsUUIDVoteRequest generates requests for PostAnnotationsUUIDVote
func NewPostAnnotationsUUIDVoteRequest(server string, uuid []openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/annotations/%s/vote", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAnnouncementsRequest generates requests for GetAnnouncements
func NewGetAnnouncementsRequest(server string, params *GetAnnouncementsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/announcements")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "placement", runtime.ParamLocationQuery, params.Placement); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client", runtime.ParamLocationQuery, params.Client); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewPutAnnouncementsIDDismissRequest generates requests for PutAnnouncementsIDDismiss
func NewPutAnnouncementsIDDismissRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/announcements/%s/dismiss", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthorizedApplicationsRequest generates requests for GetAuthorizedApplications
func NewGetAuthorizedApplicationsRequest(server string, params *GetAuthorizedApplicationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorized_applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewDeleteAuthorizedApplicationsIDRequest generates requests for DeleteAuthorizedApplicationsID
func NewDeleteAuthorizedApplicationsIDRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorized_applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCommentsRequest calls the generic PostComments builder with application/json body
func NewPostCommentsRequest(server string, body PostCommentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCommentsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCommentsRequestWithBody generates requests for PostComments with any type of body
func NewPostCommentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/comments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCommentsUUIDRequest generates requests for DeleteCommentsUUID
func NewDeleteCommentsUUIDRequest(server string, uuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/comments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCommentsUUIDRequest calls the generic PutCommentsUUID builder with application/json body
func NewPutCommentsUUIDRequest(server string, uuid openapi_types.UUID, body PutCommentsUUIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCommentsUUIDRequestWithBody(server, uuid, "application/json", bodyReader)
}

// NewPutCommentsUUIDRequestWithBody generates requests for PutCommentsUUID with any type of body
func NewPutCommentsUUIDRequestWithBody(server string, uuid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/comments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetControlledTermsRequest generates requests for GetControlledTerms
func NewGetControlledTermsRequest(server string, params *GetControlledTermsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/controlled_terms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetControlledTermsForTaxonTaxonIDRequest generates requests for GetControlledTermsForTaxonTaxonID
func NewGetControlledTermsForTaxonTaxonIDRequest(server string, taxonID []string, params *GetControlledTermsForTaxonTaxonIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "taxon_id", runtime.ParamLocationPath, taxonID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/controlled_terms/for_taxon/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewPostFlagsRequest calls the generic PostFlags builder with application/json body
func NewPostFlagsRequest(server string, body PostFlagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFlagsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFlagsRequestWithBody generates requests for PostFlags with any type of body
func NewPostFlagsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/flags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFlagsIDRequest generates requests for DeleteFlagsID
func NewDeleteFlagsIDRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/flags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutFlagsIDRequest calls the generic PutFlagsID builder with application/json body
func NewPutFlagsIDRequest(server string, id int, body PutFlagsIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFlagsIDRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutFlagsIDRequestWithBody generates requests for PutFlagsID with any type of body
func NewPutFlagsIDRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/flags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGeomodelIDZoomXYPngRequest generates requests for GetGeomodelIDZoomXYPng
func NewGetGeomodelIDZoomXYPngRequest(server string, id string, zoom int, x int, y int, params *GetGeomodelIDZoomXYPngParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/geomodel/%s/%s/%s/%s.png", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tile_size", runtime.ParamLocationQuery, params.TileSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thresholded", runtime.ParamLocationQuery, params.Thresholded); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGeomodelComparisonIDZoomXYPngRequest generates requests for GetGeomodelComparisonIDZoomXYPng
func NewGetGeomodelComparisonIDZoomXYPngRequest(server string, id string, zoom int, x int, y int, params *GetGeomodelComparisonIDZoomXYPngParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/geomodel_comparison/%s/%s/%s/%s.png", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tile_size", runtime.ParamLocationQuery, params.TileSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGeomodelTaxonRangeIDZoomXYPngRequest generates requests for GetGeomodelTaxonRangeIDZoomXYPng
func NewGetGeomodelTaxonRangeIDZoomXYPngRequest(server string, id string, zoom int, x int, y int, params *GetGeomodelTaxonRangeIDZoomXYPngParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/geomodel_taxon_range/%s/%s/%s/%s.png", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tile_size", runtime.ParamLocationQuery, params.TileSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGridZoomXYGridJSONRequest generates requests for GetGridZoomXYGridJSON
func NewGetGridZoomXYGridJSONRequest(server string, zoom int, x int, y int, params *GetGridZoomXYGridJSONParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grid/%s/%s/%s.grid.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tile_size", runtime.ParamLocationQuery, params.TileSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IDPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, params.ID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, params.NotID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, params.License); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, params.PhotoLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, params.PlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, params.ProjectID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, params.Rank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, params.SiteID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, params.SoundLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, params.TaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, params.WithoutTaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, params.TaxonName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, params.UserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, params.UserLogin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, params.Hour); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, params.Day); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, params.Month); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, params.CreatedDay); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, params.CreatedMonth); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, params.CreatedYear); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, params.TermID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, params.TermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, params.WithoutTermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, params.TermIDOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, params.AnnotationUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, params.AccAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, params.AccBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, params.AccBelowOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, params.D1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, params.D2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, params.CreatedD1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, params.CreatedD2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, params.CreatedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, params.ObservedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, params.UnobservedByUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, params.ApplyProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, params.ObservationAccuracyExperimentID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, params.Cs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, params.Csa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, params.Csi); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, params.Geoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, params.TaxonGeoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, params.Obscuration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, params.Hrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, params.Lrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, params.IconicTaxa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, params.IDAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, params.IDBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, params.Identifications); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, params.Lng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, params.Radius); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, params.Nelat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, params.Nelng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, params.Swlat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, params.Swlng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, params.ListID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, params.NotInProject); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, params.NotMatchingProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, params.SearchOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, params.QualityGrade); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, params.WithoutField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, params.OutlinkSource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, params.UpdatedSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, params.ViewerID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, params.PreferredPlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, params.TTL); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGridZoomXYPngRequest generates requests for GetGridZoomXYPng
func NewGetGridZoomXYPngRequest(server string, zoom int, x int, y int, params *GetGridZoomXYPngParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grid/%s/%s/%s.png", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tile_size", runtime.ParamLocationQuery, params.TileSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IDPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, params.ID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, params.NotID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, params.License); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, params.PhotoLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, params.PlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, params.ProjectID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, params.Rank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, params.SiteID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, params.SoundLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, params.TaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, params.WithoutTaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, params.TaxonName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, params.UserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, params.UserLogin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, params.Hour); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, params.Day); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, params.Month); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, params.CreatedDay); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, params.CreatedMonth); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, params.CreatedYear); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, params.TermID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, params.TermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, params.WithoutTermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, params.TermIDOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, params.AnnotationUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, params.AccAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, params.AccBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, params.AccBelowOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, params.D1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, params.D2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, params.CreatedD1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, params.CreatedD2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, params.CreatedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, params.ObservedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, params.UnobservedByUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, params.ApplyProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, params.ObservationAccuracyExperimentID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, params.Cs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, params.Csa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, params.Csi); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, params.Geoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, params.TaxonGeoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, params.Obscuration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, params.Hrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, params.Lrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, params.IconicTaxa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, params.IDAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, params.IDBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, params.Identifications); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, params.Lng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, params.Radius); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, params.Nelat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, params.Nelng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, params.Swlat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, params.Swlng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, params.ListID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, params.NotInProject); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, params.NotMatchingProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, params.SearchOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, params.QualityGrade); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, params.WithoutField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, params.OutlinkSource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, params.UpdatedSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, params.ViewerID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, params.PreferredPlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, params.TTL); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHeatmapZoomXYPngRequest generates requests for GetHeatmapZoomXYPng
func NewGetHeatmapZoomXYPngRequest(server string, zoom int, x int, y int, params *GetHeatmapZoomXYPngParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/heatmap/%s/%s/%s.png", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tile_size", runtime.ParamLocationQuery, params.TileSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IDPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, params.ID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, params.NotID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, params.License); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, params.PhotoLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, params.PlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, params.ProjectID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, params.Rank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, params.SiteID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, params.SoundLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, params.TaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, params.WithoutTaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, params.TaxonName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, params.UserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, params.UserLogin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, params.Hour); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, params.Day); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, params.Month); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, params.CreatedDay); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, params.CreatedMonth); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, params.CreatedYear); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, params.TermID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, params.TermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, params.WithoutTermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, params.TermIDOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, params.AnnotationUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, params.AccAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, params.AccBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, params.AccBelowOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, params.D1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, params.D2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, params.CreatedD1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, params.CreatedD2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, params.CreatedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, params.ObservedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, params.UnobservedByUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, params.ApplyProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, params.ObservationAccuracyExperimentID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, params.Cs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, params.Csa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, params.Csi); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, params.Geoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, params.TaxonGeoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, params.Obscuration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, params.Hrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, params.Lrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, params.IconicTaxa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, params.IDAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, params.IDBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, params.Identifications); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, params.Lng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, params.Radius); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, params.Nelat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, params.Nelng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, params.Swlat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, params.Swlng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, params.ListID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, params.NotInProject); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, params.NotMatchingProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, params.SearchOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, params.QualityGrade); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, params.WithoutField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, params.OutlinkSource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, params.UpdatedSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, params.ViewerID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, params.PreferredPlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, params.TTL); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIdentificationsRequest calls the generic PostIdentifications builder with application/json body
func NewPostIdentificationsRequest(server string, body PostIdentificationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIdentificationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIdentificationsRequestWithBody generates requests for PostIdentifications with any type of body
func NewPostIdentificationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdentificationsIdentifiersRequest generates requests for GetIdentificationsIdentifiers
func NewGetIdentificationsIdentifiersRequest(server string, params *GetIdentificationsIdentifiersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identifications/identifiers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, params.TaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, params.QualityGrade); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetIdentificationsRecentTaxaRequest generates requests for GetIdentificationsRecentTaxa
func NewGetIdentificationsRecentTaxaRequest(server string, params *GetIdentificationsRecentTaxaParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identifications/recent_taxa")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, params.TaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, params.QualityGrade); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rank", runtime.ParamLocationQuery, params.Rank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "category", runtime.ParamLocationQuery, params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetIdentificationsSimilarSpeciesRequest generates requests for GetIdentificationsSimilarSpecies
func NewGetIdentificationsSimilarSpeciesRequest(server string, params *GetIdentificationsSimilarSpeciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identifications/similar_species")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_id", runtime.ParamLocationQuery, params.TaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, params.QualityGrade); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewDeleteIdentificationsUUIDRequest generates requests for DeleteIdentificationsUUID
func NewDeleteIdentificationsUUIDRequest(server string, uuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identifications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIdentificationsUUIDRequest calls the generic PutIdentificationsUUID builder with application/json body
func NewPutIdentificationsUUIDRequest(server string, uuid openapi_types.UUID, body PutIdentificationsUUIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIdentificationsUUIDRequestWithBody(server, uuid, "application/json", bodyReader)
}

// NewPutIdentificationsUUIDRequestWithBody generates requests for PutIdentificationsUUID with any type of body
func NewPutIdentificationsUUIDRequestWithBody(server string, uuid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identifications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMessagesRequest generates requests for GetMessages
func NewGetMessagesRequest(server string, params *GetMessagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewPostMessagesRequest calls the generic PostMessages builder with application/json body
func NewPostMessagesRequest(server string, body PostMessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMessagesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMessagesRequestWithBody generates requests for PostMessages with any type of body
func NewPostMessagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMessagesIDRequest generates requests for GetMessagesID
func NewGetMessagesIDRequest(server string, id int, params *GetMessagesIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewPostObservationFieldValuesRequest calls the generic PostObservationFieldValues builder with application/json body
func NewPostObservationFieldValuesRequest(server string, body PostObservationFieldValuesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostObservationFieldValuesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostObservationFieldValuesRequestWithBody generates requests for PostObservationFieldValues with any type of body
func NewPostObservationFieldValuesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observation_field_values")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteObservationFieldValuesUUIDRequest generates requests for DeleteObservationFieldValuesUUID
func NewDeleteObservationFieldValuesUUIDRequest(server string, uuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observation_field_values/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutObservationFieldValuesUUIDRequest calls the generic PutObservationFieldValuesUUID builder with application/json body
func NewPutObservationFieldValuesUUIDRequest(server string, uuid openapi_types.UUID, body PutObservationFieldValuesUUIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutObservationFieldValuesUUIDRequestWithBody(server, uuid, "application/json", bodyReader)
}

// NewPutObservationFieldValuesUUIDRequestWithBody generates requests for PutObservationFieldValuesUUID with any type of body
func NewPutObservationFieldValuesUUIDRequestWithBody(server string, uuid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observation_field_values/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostObservationPhotosRequest calls the generic PostObservationPhotos builder with application/json body
func NewPostObservationPhotosRequest(server string, body PostObservationPhotosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostObservationPhotosRequestWithBody(server, "application/json", bodyReader)
}

// NewPostObservationPhotosRequestWithBody generates requests for PostObservationPhotos with any type of body
func NewPostObservationPhotosRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observation_photos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteObservationPhotosUUIDRequest generates requests for DeleteObservationPhotosUUID
func NewDeleteObservationPhotosUUIDRequest(server string, uuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observation_photos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutObservationPhotosUUIDRequest calls the generic PutObservationPhotosUUID builder with application/json body
func NewPutObservationPhotosUUIDRequest(server string, uuid openapi_types.UUID, body PutObservationPhotosUUIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutObservationPhotosUUIDRequestWithBody(server, uuid, "application/json", bodyReader)
}

// NewPutObservationPhotosUUIDRequestWithBody generates requests for PutObservationPhotosUUID with any type of body
func NewPutObservationPhotosUUIDRequestWithBody(server string, uuid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observation_photos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostObservationSoundsRequest calls the generic PostObservationSounds builder with application/json body
func NewPostObservationSoundsRequest(server string, body PostObservationSoundsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostObservationSoundsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostObservationSoundsRequestWithBody generates requests for PostObservationSounds with any type of body
func NewPostObservationSoundsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observation_sounds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteObservationSoundsUUIDRequest generates requests for DeleteObservationSoundsUUID
func NewDeleteObservationSoundsUUIDRequest(server string, uuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observation_sounds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutObservationSoundsUUIDRequest calls the generic PutObservationSoundsUUID builder with application/json body
func NewPutObservationSoundsUUIDRequest(server string, uuid openapi_types.UUID, body PutObservationSoundsUUIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutObservationSoundsUUIDRequestWithBody(server, uuid, "application/json", bodyReader)
}

// NewPutObservationSoundsUUIDRequestWithBody generates requests for PutObservationSoundsUUID with any type of body
func NewPutObservationSoundsUUIDRequestWithBody(server string, uuid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observation_sounds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetObservationsRequest generates requests for GetObservations
func NewGetObservationsRequest(server string, params *GetObservationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IDPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, params.ID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, params.NotID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, params.License); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, params.PhotoLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, params.PlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, params.ProjectID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, params.Rank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, params.SiteID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, params.SoundLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, params.TaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, params.WithoutTaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, params.TaxonName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, params.UserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, params.UserLogin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, params.Hour); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, params.Day); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, params.Month); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, params.CreatedDay); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, params.CreatedMonth); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, params.CreatedYear); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, params.TermID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, params.TermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, params.WithoutTermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, params.TermIDOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, params.AnnotationUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, params.AccAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, params.AccBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, params.AccBelowOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, params.D1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, params.D2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, params.CreatedD1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, params.CreatedD2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, params.CreatedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, params.ObservedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, params.UnobservedByUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, params.ApplyProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, params.ObservationAccuracyExperimentID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, params.Cs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, params.Csa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, params.Csi); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, params.Geoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, params.TaxonGeoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, params.Obscuration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, params.Hrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, params.Lrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, params.IconicTaxa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, params.IDAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, params.IDBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, params.Identifications); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, params.Lng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, params.Radius); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, params.Nelat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, params.Nelng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, params.Swlat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, params.Swlng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, params.ListID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, params.NotInProject); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, params.NotMatchingProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, params.SearchOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, params.QualityGrade); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, params.WithoutField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, params.OutlinkSource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, params.UpdatedSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, params.ViewerID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, params.PreferredPlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, params.TTL); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewPostObservationsRequest calls the generic PostObservations builder with application/json body
func NewPostObservationsRequest(server string, body PostObservationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostObservationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostObservationsRequestWithBody generates requests for PostObservations with any type of body
func NewPostObservationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetObservationsDeletedRequest generates requests for GetObservationsDeleted
func NewGetObservationsDeletedRequest(server string, params *GetObservationsDeletedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/deleted")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetObservationsHistogramRequest generates requests for GetObservationsHistogram
func NewGetObservationsHistogramRequest(server string, params *GetObservationsHistogramParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/histogram")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IDPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, params.ID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, params.NotID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, params.License); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, params.PhotoLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, params.PlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, params.ProjectID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, params.Rank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, params.SiteID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, params.SoundLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, params.TaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, params.WithoutTaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, params.TaxonName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, params.UserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, params.UserLogin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, params.Hour); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, params.Day); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, params.Month); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, params.CreatedDay); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, params.CreatedMonth); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, params.CreatedYear); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, params.TermID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, params.TermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, params.WithoutTermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, params.TermIDOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, params.AnnotationUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, params.AccAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, params.AccBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, params.AccBelowOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, params.D1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, params.D2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, params.CreatedD1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, params.CreatedD2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, params.CreatedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, params.ObservedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, params.UnobservedByUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, params.ApplyProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, params.ObservationAccuracyExperimentID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, params.Cs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, params.Csa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, params.Csi); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, params.Geoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, params.TaxonGeoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, params.Obscuration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, params.Hrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, params.Lrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, params.IconicTaxa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, params.IDAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, params.IDBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, params.Identifications); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, params.Lng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, params.Radius); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, params.Nelat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, params.Nelng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, params.Swlat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, params.Swlng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, params.ListID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, params.NotInProject); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, params.NotMatchingProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, params.SearchOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, params.QualityGrade); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, params.WithoutField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, params.OutlinkSource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, params.UpdatedSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, params.ViewerID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, params.PreferredPlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, params.TTL); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_field", runtime.ParamLocationQuery, params.DateField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "interval", runtime.ParamLocationQuery, params.Interval); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetObservationsIconicTaxaSpeciesCountsRequest generates requests for GetObservationsIconicTaxaSpeciesCounts
func NewGetObservationsIconicTaxaSpeciesCountsRequest(server string, params *GetObservationsIconicTaxaSpeciesCountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/iconic_taxa_species_counts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IDPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, params.ID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, params.NotID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, params.License); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, params.PhotoLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, params.PlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, params.ProjectID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, params.Rank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, params.SiteID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, params.SoundLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, params.TaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, params.WithoutTaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, params.TaxonName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, params.UserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, params.UserLogin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, params.Hour); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, params.Day); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, params.Month); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, params.CreatedDay); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, params.CreatedMonth); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, params.CreatedYear); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, params.TermID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, params.TermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, params.WithoutTermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, params.TermIDOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, params.AnnotationUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, params.AccAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, params.AccBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, params.AccBelowOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, params.D1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, params.D2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, params.CreatedD1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, params.CreatedD2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, params.CreatedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, params.ObservedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, params.UnobservedByUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, params.ApplyProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, params.ObservationAccuracyExperimentID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, params.Cs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, params.Csa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, params.Csi); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, params.Geoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, params.TaxonGeoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, params.Obscuration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, params.Hrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, params.Lrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, params.IconicTaxa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, params.IDAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, params.IDBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, params.Identifications); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, params.Lng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, params.Radius); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, params.Nelat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, params.Nelng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, params.Swlat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, params.Swlng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, params.ListID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, params.NotInProject); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, params.NotMatchingProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, params.SearchOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, params.QualityGrade); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, params.WithoutField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, params.OutlinkSource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, params.UpdatedSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, params.ViewerID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, params.PreferredPlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, params.TTL); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetObservationsIdentificationCategoriesRequest generates requests for GetObservationsIdentificationCategories
func NewGetObservationsIdentificationCategoriesRequest(server string, params *GetObservationsIdentificationCategoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/identification_categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetObservationsIdentifiersRequest generates requests for GetObservationsIdentifiers
func NewGetObservationsIdentifiersRequest(server string, params *GetObservationsIdentifiersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/identifiers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IDPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, params.ID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, params.NotID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, params.License); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, params.PhotoLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, params.PlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, params.ProjectID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, params.Rank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, params.SiteID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, params.SoundLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, params.TaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, params.WithoutTaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, params.TaxonName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, params.UserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, params.UserLogin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, params.Hour); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, params.Day); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, params.Month); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, params.CreatedDay); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, params.CreatedMonth); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, params.CreatedYear); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, params.TermID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, params.TermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, params.WithoutTermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, params.TermIDOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, params.AnnotationUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, params.AccAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, params.AccBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, params.AccBelowOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, params.D1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, params.D2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, params.CreatedD1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, params.CreatedD2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, params.CreatedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, params.ObservedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, params.UnobservedByUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, params.ApplyProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, params.ObservationAccuracyExperimentID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, params.Cs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, params.Csa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, params.Csi); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, params.Geoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, params.TaxonGeoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, params.Obscuration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, params.Hrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, params.Lrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, params.IconicTaxa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, params.IDAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, params.IDBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, params.Identifications); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, params.Lng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, params.Radius); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, params.Nelat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, params.Nelng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, params.Swlat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, params.Swlng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, params.ListID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, params.NotInProject); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, params.NotMatchingProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, params.SearchOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, params.QualityGrade); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, params.WithoutField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, params.OutlinkSource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, params.UpdatedSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, params.ViewerID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, params.PreferredPlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, params.TTL); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetObservationsObserversRequest generates requests for GetObservationsObservers
func NewGetObservationsObserversRequest(server string, params *GetObservationsObserversParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/observers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IDPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, params.ID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, params.NotID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, params.License); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, params.PhotoLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, params.PlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, params.ProjectID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, params.Rank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, params.SiteID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, params.SoundLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, params.TaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, params.WithoutTaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, params.TaxonName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, params.UserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, params.UserLogin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, params.Hour); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, params.Day); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, params.Month); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, params.CreatedDay); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, params.CreatedMonth); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, params.CreatedYear); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, params.TermID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, params.TermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, params.WithoutTermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, params.TermIDOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, params.AnnotationUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, params.AccAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, params.AccBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, params.AccBelowOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, params.D1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, params.D2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, params.CreatedD1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, params.CreatedD2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, params.CreatedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, params.ObservedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, params.UnobservedByUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, params.ApplyProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, params.ObservationAccuracyExperimentID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, params.Cs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, params.Csa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, params.Csi); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, params.Geoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, params.TaxonGeoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, params.Obscuration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, params.Hrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, params.Lrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, params.IconicTaxa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, params.IDAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, params.IDBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, params.Identifications); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, params.Lng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, params.Radius); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, params.Nelat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, params.Nelng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, params.Swlat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, params.Swlng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, params.ListID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, params.NotInProject); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, params.NotMatchingProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, params.SearchOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, params.QualityGrade); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, params.WithoutField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, params.OutlinkSource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, params.UpdatedSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, params.ViewerID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, params.PreferredPlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, params.TTL); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetObservationsPopularFieldValuesRequest generates requests for GetObservationsPopularFieldValues
func NewGetObservationsPopularFieldValuesRequest(server string, params *GetObservationsPopularFieldValuesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/popular_field_values")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IDPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, params.ID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, params.NotID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, params.License); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, params.PhotoLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, params.PlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, params.ProjectID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, params.Rank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, params.SiteID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, params.SoundLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, params.TaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, params.WithoutTaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, params.TaxonName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, params.UserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, params.UserLogin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, params.Hour); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, params.Day); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, params.Month); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, params.CreatedDay); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, params.CreatedMonth); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, params.CreatedYear); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, params.TermID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, params.TermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, params.WithoutTermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, params.TermIDOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, params.AnnotationUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, params.AccAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, params.AccBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, params.AccBelowOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, params.D1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, params.D2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, params.CreatedD1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, params.CreatedD2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, params.CreatedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, params.ObservedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, params.UnobservedByUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, params.ApplyProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, params.ObservationAccuracyExperimentID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, params.Cs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, params.Csa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, params.Csi); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, params.Geoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, params.TaxonGeoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, params.Obscuration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, params.Hrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, params.Lrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, params.IconicTaxa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, params.IDAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, params.IDBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, params.Identifications); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, params.Lng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, params.Radius); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, params.Nelat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, params.Nelng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, params.Swlat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, params.Swlng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, params.ListID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, params.NotInProject); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, params.NotMatchingProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, params.SearchOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, params.QualityGrade); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, params.WithoutField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, params.OutlinkSource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, params.UpdatedSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, params.ViewerID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, params.PreferredPlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, params.TTL); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "no_histograms", runtime.ParamLocationQuery, params.NoHistograms); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unannotated", runtime.ParamLocationQuery, params.Unannotated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_field", runtime.ParamLocationQuery, params.DateField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "interval", runtime.ParamLocationQuery, params.Interval); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetObservationsQualityGradesRequest generates requests for GetObservationsQualityGrades
func NewGetObservationsQualityGradesRequest(server string, params *GetObservationsQualityGradesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/quality_grades")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetObservationsSpeciesCountsRequest generates requests for GetObservationsSpeciesCounts
func NewGetObservationsSpeciesCountsRequest(server string, params *GetObservationsSpeciesCountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/species_counts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IDPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, params.ID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, params.NotID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, params.License); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, params.PhotoLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, params.PlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, params.ProjectID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, params.Rank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, params.SiteID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, params.SoundLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, params.TaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, params.WithoutTaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, params.TaxonName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, params.UserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, params.UserLogin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, params.Hour); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, params.Day); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, params.Month); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, params.CreatedDay); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, params.CreatedMonth); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, params.CreatedYear); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, params.TermID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, params.TermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, params.WithoutTermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, params.TermIDOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, params.AnnotationUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, params.AccAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, params.AccBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, params.AccBelowOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, params.D1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, params.D2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, params.CreatedD1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, params.CreatedD2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, params.CreatedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, params.ObservedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, params.UnobservedByUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, params.ApplyProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, params.ObservationAccuracyExperimentID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, params.Cs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, params.Csa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, params.Csi); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, params.Geoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, params.TaxonGeoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, params.Obscuration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, params.Hrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, params.Lrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, params.IconicTaxa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, params.IDAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, params.IDBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, params.Identifications); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, params.Lng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, params.Radius); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, params.Nelat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, params.Nelng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, params.Swlat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, params.Swlng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, params.ListID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, params.NotInProject); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, params.NotMatchingProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, params.SearchOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, params.QualityGrade); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, params.WithoutField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, params.OutlinkSource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, params.UpdatedSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, params.ViewerID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, params.PreferredPlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, params.TTL); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_ancestors", runtime.ParamLocationQuery, params.IncludeAncestors); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetObservationsUmbrellaProjectStatsRequest generates requests for GetObservationsUmbrellaProjectStats
func NewGetObservationsUmbrellaProjectStatsRequest(server string, params *GetObservationsUmbrellaProjectStatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/umbrella_project_stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IDPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, params.ID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, params.NotID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, params.License); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, params.PhotoLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, params.PlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, params.ProjectID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, params.Rank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, params.SiteID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, params.SoundLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, params.TaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, params.WithoutTaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, params.TaxonName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, params.UserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, params.UserLogin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, params.Hour); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, params.Day); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, params.Month); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, params.CreatedDay); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, params.CreatedMonth); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, params.CreatedYear); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, params.TermID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, params.TermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, params.WithoutTermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, params.TermIDOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, params.AnnotationUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, params.AccAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, params.AccBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, params.AccBelowOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, params.D1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, params.D2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, params.CreatedD1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, params.CreatedD2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, params.CreatedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, params.ObservedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, params.UnobservedByUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, params.ApplyProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, params.ObservationAccuracyExperimentID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, params.Cs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, params.Csa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, params.Csi); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, params.Geoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, params.TaxonGeoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, params.Obscuration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, params.Hrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, params.Lrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, params.IconicTaxa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, params.IDAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, params.IDBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, params.Identifications); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, params.Lng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, params.Radius); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, params.Nelat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, params.Nelng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, params.Swlat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, params.Swlng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, params.ListID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, params.NotInProject); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, params.NotMatchingProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, params.SearchOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, params.QualityGrade); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, params.WithoutField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, params.OutlinkSource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, params.UpdatedSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, params.ViewerID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, params.PreferredPlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, params.TTL); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetObservationsUpdatesRequest generates requests for GetObservationsUpdates
func NewGetObservationsUpdatesRequest(server string, params *GetObservationsUpdatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/updates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_after", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewed", runtime.ParamLocationQuery, params.Viewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observations_by", runtime.ParamLocationQuery, params.ObservationsBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewDeleteObservationsUUIDRequest generates requests for DeleteObservationsUUID
func NewDeleteObservationsUUIDRequest(server string, uuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObservationsUUIDRequest generates requests for GetObservationsUUID
func NewGetObservationsUUIDRequest(server string, uuid []openapi_types.UUID, params *GetObservationsUUIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewPutObservationsUUIDRequest calls the generic PutObservationsUUID builder with application/json body
func NewPutObservationsUUIDRequest(server string, uuid openapi_types.UUID, body PutObservationsUUIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutObservationsUUIDRequestWithBody(server, uuid, "application/json", bodyReader)
}

// NewPutObservationsUUIDRequestWithBody generates requests for PutObservationsUUID with any type of body
func NewPutObservationsUUIDRequestWithBody(server string, uuid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteObservationsUUIDFaveRequest generates requests for DeleteObservationsUUIDFave
func NewDeleteObservationsUUIDFaveRequest(server string, uuid []openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s/fave", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostObservationsUUIDFaveRequest generates requests for PostObservationsUUIDFave
func NewPostObservationsUUIDFaveRequest(server string, uuid []openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s/fave", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteObservationsUUIDQualityMetricRequest generates requests for DeleteObservationsUUIDQualityMetric
func NewDeleteObservationsUUIDQualityMetricRequest(server string, uuid []openapi_types.UUID, metric DeleteObservationsUUIDQualityMetricParamsMetric) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metric", runtime.ParamLocationPath, metric)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s/quality/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostObservationsUUIDQualityMetricRequest generates requests for PostObservationsUUIDQualityMetric
func NewPostObservationsUUIDQualityMetricRequest(server string, uuid []openapi_types.UUID, metric PostObservationsUUIDQualityMetricParamsMetric, params *PostObservationsUUIDQualityMetricParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metric", runtime.ParamLocationPath, metric)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s/quality/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agree", runtime.ParamLocationQuery, params.Agree); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObservationsUUIDQualityMetricsRequest generates requests for GetObservationsUUIDQualityMetrics
func NewGetObservationsUUIDQualityMetricsRequest(server string, uuid []openapi_types.UUID, params *GetObservationsUUIDQualityMetricsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s/quality_metrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewDeleteObservationsUUIDReviewRequest generates requests for DeleteObservationsUUIDReview
func NewDeleteObservationsUUIDReviewRequest(server string, uuid []openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s/review", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostObservationsUUIDReviewRequest generates requests for PostObservationsUUIDReview
func NewPostObservationsUUIDReviewRequest(server string, uuid []openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s/review", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutObservationsUUIDSubscriptionRequest generates requests for PutObservationsUUIDSubscription
func NewPutObservationsUUIDSubscriptionRequest(server string, uuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s/subscription", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObservationsUUIDSubscriptionsRequest generates requests for GetObservationsUUIDSubscriptions
func NewGetObservationsUUIDSubscriptionsRequest(server string, uuid openapi_types.UUID, params *GetObservationsUUIDSubscriptionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s/subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetObservationsUUIDTaxonSummaryRequest generates requests for GetObservationsUUIDTaxonSummary
func NewGetObservationsUUIDTaxonSummaryRequest(server string, uuid openapi_types.UUID, params *GetObservationsUUIDTaxonSummaryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s/taxon_summary", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "community", runtime.ParamLocationQuery, params.Community); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutObservationsUUIDViewedUpdatesRequest generates requests for PutObservationsUUIDViewedUpdates
func NewPutObservationsUUIDViewedUpdatesRequest(server string, uuid []openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s/viewed_updates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPhotosRequestWithBody generates requests for PostPhotos with any type of body
func NewPostPhotosRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/photos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutPhotosIDRequest generates requests for PutPhotosID
func NewPutPhotosIDRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/photos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacesRequest generates requests for GetPlaces
func NewGetPlacesRequest(server string, params *GetPlacesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/places")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetPlacesNearbyRequest generates requests for GetPlacesNearby
func NewGetPlacesNearbyRequest(server string, params *GetPlacesNearbyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/places/nearby")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IDPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, params.ID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, params.NotID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, params.License); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, params.PhotoLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, params.PlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, params.ProjectID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, params.Rank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, params.SiteID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, params.SoundLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, params.TaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, params.WithoutTaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, params.TaxonName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, params.UserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, params.UserLogin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, params.Hour); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, params.Day); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, params.Month); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, params.CreatedDay); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, params.CreatedMonth); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, params.CreatedYear); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, params.TermID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, params.TermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, params.WithoutTermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, params.TermIDOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, params.AnnotationUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, params.AccAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, params.AccBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, params.AccBelowOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, params.D1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, params.D2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, params.CreatedD1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, params.CreatedD2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, params.CreatedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, params.ObservedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, params.UnobservedByUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, params.ApplyProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, params.ObservationAccuracyExperimentID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, params.Cs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, params.Csa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, params.Csi); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, params.Geoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, params.TaxonGeoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, params.Obscuration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, params.Hrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, params.Lrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, params.IconicTaxa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, params.IDAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, params.IDBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, params.Identifications); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, params.Lng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, params.Radius); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, params.Nelat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, params.Nelng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, params.Swlat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, params.Swlng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, params.ListID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, params.NotInProject); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, params.NotMatchingProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, params.SearchOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, params.QualityGrade); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, params.WithoutField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, params.OutlinkSource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, params.UpdatedSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, params.ViewerID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, params.PreferredPlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, params.TTL); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_field", runtime.ParamLocationQuery, params.DateField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "interval", runtime.ParamLocationQuery, params.Interval); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetPlacesIDZoomXYPngRequest generates requests for GetPlacesIDZoomXYPng
func NewGetPlacesIDZoomXYPngRequest(server string, id string, zoom int, x int, y int, params *GetPlacesIDZoomXYPngParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/places/%s/%s/%s/%s.png", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tile_size", runtime.ParamLocationQuery, params.TileSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IDPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, params.NotID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, params.License); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, params.PhotoLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, params.PlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, params.ProjectID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, params.Rank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, params.SiteID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, params.SoundLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, params.TaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, params.WithoutTaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, params.TaxonName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, params.UserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, params.UserLogin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, params.Hour); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, params.Day); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, params.Month); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, params.CreatedDay); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, params.CreatedMonth); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, params.CreatedYear); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, params.TermID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, params.TermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, params.WithoutTermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, params.TermIDOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, params.AnnotationUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, params.AccAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, params.AccBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, params.AccBelowOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, params.D1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, params.D2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, params.CreatedD1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, params.CreatedD2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, params.CreatedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, params.ObservedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, params.UnobservedByUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, params.ApplyProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, params.ObservationAccuracyExperimentID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, params.Cs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, params.Csa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, params.Csi); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, params.Geoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, params.TaxonGeoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, params.Obscuration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, params.Hrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, params.Lrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, params.IconicTaxa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, params.IDAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, params.IDBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, params.Identifications); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, params.Lng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, params.Radius); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, params.Nelat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, params.Nelng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, params.Swlat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, params.Swlng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, params.ListID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, params.NotInProject); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, params.NotMatchingProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, params.SearchOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, params.QualityGrade); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, params.WithoutField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, params.OutlinkSource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, params.UpdatedSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, params.ViewerID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, params.PreferredPlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, params.TTL); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacesUUIDRequest generates requests for GetPlacesUUID
func NewGetPlacesUUIDRequest(server string, uuid []string, params *GetPlacesUUIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/places/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, params.Lng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetPointsZoomXYGridJSONRequest generates requests for GetPointsZoomXYGridJSON
func NewGetPointsZoomXYGridJSONRequest(server string, zoom int, x int, y int, params *GetPointsZoomXYGridJSONParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/points/%s/%s/%s.grid.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tile_size", runtime.ParamLocationQuery, params.TileSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IDPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, params.ID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, params.NotID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, params.License); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, params.PhotoLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, params.PlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, params.ProjectID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, params.Rank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, params.SiteID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, params.SoundLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, params.TaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, params.WithoutTaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, params.TaxonName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, params.UserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, params.UserLogin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, params.Hour); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, params.Day); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, params.Month); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, params.CreatedDay); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, params.CreatedMonth); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, params.CreatedYear); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, params.TermID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, params.TermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, params.WithoutTermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, params.TermIDOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, params.AnnotationUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, params.AccAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, params.AccBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, params.AccBelowOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, params.D1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, params.D2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, params.CreatedD1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, params.CreatedD2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, params.CreatedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, params.ObservedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, params.UnobservedByUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, params.ApplyProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, params.ObservationAccuracyExperimentID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, params.Cs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, params.Csa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, params.Csi); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, params.Geoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, params.TaxonGeoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, params.Obscuration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, params.Hrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, params.Lrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, params.IconicTaxa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, params.IDAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, params.IDBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, params.Identifications); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, params.Lng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, params.Radius); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, params.Nelat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, params.Nelng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, params.Swlat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, params.Swlng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, params.ListID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, params.NotInProject); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, params.NotMatchingProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, params.SearchOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, params.QualityGrade); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, params.WithoutField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, params.OutlinkSource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, params.UpdatedSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, params.ViewerID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, params.PreferredPlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, params.TTL); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPointsZoomXYPngRequest generates requests for GetPointsZoomXYPng
func NewGetPointsZoomXYPngRequest(server string, zoom int, x int, y int, params *GetPointsZoomXYPngParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/points/%s/%s/%s.png", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tile_size", runtime.ParamLocationQuery, params.TileSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IDPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, params.ID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, params.NotID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, params.License); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, params.PhotoLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, params.PlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, params.ProjectID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, params.Rank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, params.SiteID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, params.SoundLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, params.TaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, params.WithoutTaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, params.TaxonName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, params.UserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, params.UserLogin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, params.Hour); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, params.Day); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, params.Month); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, params.CreatedDay); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, params.CreatedMonth); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, params.CreatedYear); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, params.TermID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, params.TermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, params.WithoutTermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, params.TermIDOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, params.AnnotationUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, params.AccAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, params.AccBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, params.AccBelowOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, params.D1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, params.D2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, params.CreatedD1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, params.CreatedD2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, params.CreatedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, params.ObservedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, params.UnobservedByUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, params.ApplyProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, params.ObservationAccuracyExperimentID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, params.Cs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, params.Csa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, params.Csi); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, params.Geoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, params.TaxonGeoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, params.Obscuration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, params.Hrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, params.Lrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, params.IconicTaxa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, params.IDAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, params.IDBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, params.Identifications); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, params.Lng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, params.Radius); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, params.Nelat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, params.Nelng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, params.Swlat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, params.Swlng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, params.ListID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, params.NotInProject); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, params.NotMatchingProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, params.SearchOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, params.QualityGrade); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, params.WithoutField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, params.OutlinkSource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, params.UpdatedSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, params.ViewerID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, params.PreferredPlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, params.TTL); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostProjectObservationsRequest calls the generic PostProjectObservations builder with application/json body
func NewPostProjectObservationsRequest(server string, body PostProjectObservationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProjectObservationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostProjectObservationsRequestWithBody generates requests for PostProjectObservations with any type of body
func NewPostProjectObservationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project_observations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProjectObservationsUUIDRequest generates requests for DeleteProjectObservationsUUID
func NewDeleteProjectObservationsUUIDRequest(server string, uuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project_observations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutProjectObservationsUUIDRequest calls the generic PutProjectObservationsUUID builder with application/json body
func NewPutProjectObservationsUUIDRequest(server string, uuid openapi_types.UUID, body PutProjectObservationsUUIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutProjectObservationsUUIDRequestWithBody(server, uuid, "application/json", bodyReader)
}

// NewPutProjectObservationsUUIDRequestWithBody generates requests for PutProjectObservationsUUID with any type of body
func NewPutProjectObservationsUUIDRequestWithBody(server string, uuid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project_observations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutProjectUsersIDRequest calls the generic PutProjectUsersID builder with application/json body
func NewPutProjectUsersIDRequest(server string, id string, body PutProjectUsersIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutProjectUsersIDRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutProjectUsersIDRequestWithBody generates requests for PutProjectUsersID with any type of body
func NewPutProjectUsersIDRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project_users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectsRequest generates requests for GetProjects
func NewGetProjectsRequest(server string, params *GetProjectsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, params.ID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, params.NotID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, params.Lng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, params.Radius); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, params.PlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "features", runtime.ParamLocationQuery, params.Features); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "noteworthy", runtime.ParamLocationQuery, params.Noteworthy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site_id", runtime.ParamLocationQuery, params.SiteID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rule_details", runtime.ParamLocationQuery, params.RuleDetails); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "member_id", runtime.ParamLocationQuery, params.MemberID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "has_params", runtime.ParamLocationQuery, params.HasParams); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "has_posts", runtime.ParamLocationQuery, params.HasPosts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetProjectsIDRequest generates requests for GetProjectsID
func NewGetProjectsIDRequest(server string, id []int, params *GetProjectsIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rule_details", runtime.ParamLocationQuery, params.RuleDetails); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetProjectsIDMembersRequest generates requests for GetProjectsIDMembers
func NewGetProjectsIDMembersRequest(server string, id int, params *GetProjectsIDMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip_counts", runtime.ParamLocationQuery, params.SkipCounts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewDeleteProjectsIDMembershipRequest generates requests for DeleteProjectsIDMembership
func NewDeleteProjectsIDMembershipRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/membership", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectsIDMembershipRequest generates requests for GetProjectsIDMembership
func NewGetProjectsIDMembershipRequest(server string, id []int, params *GetProjectsIDMembershipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/membership", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewPostProjectsIDMembershipRequest generates requests for PostProjectsIDMembership
func NewPostProjectsIDMembershipRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/membership", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectsIDPostsRequest generates requests for GetProjectsIDPosts
func NewGetProjectsIDPostsRequest(server string, id []int, params *GetProjectsIDPostsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/posts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetProviderAuthorizationsRequest generates requests for GetProviderAuthorizations
func NewGetProviderAuthorizationsRequest(server string, params *GetProviderAuthorizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/provider_authorizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewDeleteProviderAuthorizationsIDRequest generates requests for DeleteProviderAuthorizationsID
func NewDeleteProviderAuthorizationsIDRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/provider_authorizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRelationshipsRequest generates requests for GetRelationships
func NewGetRelationshipsRequest(server string, params *GetRelationshipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trusted", runtime.ParamLocationQuery, params.Trusted); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "following", runtime.ParamLocationQuery, params.Following); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewPostRelationshipsRequest calls the generic PostRelationships builder with application/json body
func NewPostRelationshipsRequest(server string, body PostRelationshipsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRelationshipsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRelationshipsRequestWithBody generates requests for PostRelationships with any type of body
func NewPostRelationshipsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRelationshipsIDRequest generates requests for DeleteRelationshipsID
func NewDeleteRelationshipsIDRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRelationshipsIDRequest calls the generic PutRelationshipsID builder with application/json body
func NewPutRelationshipsIDRequest(server string, id int, body PutRelationshipsIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRelationshipsIDRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutRelationshipsIDRequestWithBody generates requests for PutRelationshipsID with any type of body
func NewPutRelationshipsIDRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSavedLocationsRequest generates requests for GetSavedLocations
func NewGetSavedLocationsRequest(server string, params *GetSavedLocationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/saved_locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewPostSavedLocationsRequest calls the generic PostSavedLocations builder with application/json body
func NewPostSavedLocationsRequest(server string, body PostSavedLocationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSavedLocationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSavedLocationsRequestWithBody generates requests for PostSavedLocations with any type of body
func NewPostSavedLocationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/saved_locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSavedLocationsIDRequest generates requests for DeleteSavedLocationsID
func NewDeleteSavedLocationsIDRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/saved_locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSearchRequest generates requests for GetSearch
func NewGetSearchRequest(server string, params *GetSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "place_id", runtime.ParamLocationQuery, params.PlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, params.PreferredPlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sources", runtime.ParamLocationQuery, params.Sources); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_taxon_ancestors", runtime.ParamLocationQuery, params.IncludeTaxonAncestors); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetSitesRequest generates requests for GetSites
func NewGetSitesRequest(server string, params *GetSitesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sites")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewPostSoundsRequestWithBody generates requests for PostSounds with any type of body
func NewPostSoundsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sounds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTaxaRequest generates requests for GetTaxa
func NewGetTaxaRequest(server string, params *GetTaxaParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxa")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_active", runtime.ParamLocationQuery, params.IsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "iconic", runtime.ParamLocationQuery, params.Iconic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_id", runtime.ParamLocationQuery, params.TaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_id", runtime.ParamLocationQuery, params.ParentID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, params.Rank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank_level", runtime.ParamLocationQuery, params.RankLevel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, params.IDAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, params.IDBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, params.PreferredPlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetTaxaAutocompleteRequest generates requests for GetTaxaAutocomplete
func NewGetTaxaAutocompleteRequest(server string, params *GetTaxaAutocompleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxa/autocomplete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_active", runtime.ParamLocationQuery, params.IsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "iconic", runtime.ParamLocationQuery, params.Iconic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, params.PreferredPlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetTaxaIconicRequest generates requests for GetTaxaIconic
func NewGetTaxaIconicRequest(server string, params *GetTaxaIconicParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxa/iconic")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetTaxaSuggestRequest generates requests for GetTaxaSuggest
func NewGetTaxaSuggestRequest(server string, params *GetTaxaSuggestParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxa/suggest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "featured_observation_id", runtime.ParamLocationQuery, params.FeaturedObservationID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "image_url", runtime.ParamLocationQuery, params.ImageURL); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_representative_photos", runtime.ParamLocationQuery, params.IncludeRepresentativePhotos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, params.Lng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "months", runtime.ParamLocationQuery, params.Months); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observation_id", runtime.ParamLocationQuery, params.ObservationID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, params.ObservedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "place_id", runtime.ParamLocationQuery, params.PlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "place_lat", runtime.ParamLocationQuery, params.PlaceLat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "place_lng", runtime.ParamLocationQuery, params.PlaceLng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source", runtime.ParamLocationQuery, params.Source); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_id", runtime.ParamLocationQuery, params.TaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewPostTaxaSuggestRequestWithBody generates requests for PostTaxaSuggest with any type of body
func NewPostTaxaSuggestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxa/suggest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTaxaIDRequest generates requests for GetTaxaID
func NewGetTaxaIDRequest(server string, id []int, params *GetTaxaIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxa/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank_level", runtime.ParamLocationQuery, params.RankLevel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetTaxaIDWantedRequest generates requests for GetTaxaIDWanted
func NewGetTaxaIDWantedRequest(server string, id int, params *GetTaxaIDWantedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxa/%s/wanted", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewPostTaxonNamePrioritiesRequest calls the generic PostTaxonNamePriorities builder with application/json body
func NewPostTaxonNamePrioritiesRequest(server string, body PostTaxonNamePrioritiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTaxonNamePrioritiesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTaxonNamePrioritiesRequestWithBody generates requests for PostTaxonNamePriorities with any type of body
func NewPostTaxonNamePrioritiesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxon_name_priorities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTaxonNamePrioritiesIDRequest generates requests for DeleteTaxonNamePrioritiesID
func NewDeleteTaxonNamePrioritiesIDRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxon_name_priorities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTaxonNamePrioritiesIDRequest calls the generic PutTaxonNamePrioritiesID builder with application/json body
func NewPutTaxonNamePrioritiesIDRequest(server string, id int, body PutTaxonNamePrioritiesIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTaxonNamePrioritiesIDRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutTaxonNamePrioritiesIDRequestWithBody generates requests for PutTaxonNamePrioritiesID with any type of body
func NewPutTaxonNamePrioritiesIDRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxon_name_priorities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTaxonPlacesIDZoomXYPngRequest generates requests for GetTaxonPlacesIDZoomXYPng
func NewGetTaxonPlacesIDZoomXYPngRequest(server string, id string, zoom int, x int, y int, params *GetTaxonPlacesIDZoomXYPngParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxon_places/%s/%s/%s/%s.png", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tile_size", runtime.ParamLocationQuery, params.TileSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IDPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, params.NotID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, params.License); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, params.PhotoLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, params.PlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, params.ProjectID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, params.Rank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, params.SiteID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, params.SoundLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, params.TaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, params.WithoutTaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, params.TaxonName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, params.UserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, params.UserLogin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, params.Hour); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, params.Day); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, params.Month); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, params.CreatedDay); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, params.CreatedMonth); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, params.CreatedYear); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, params.TermID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, params.TermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, params.WithoutTermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, params.TermIDOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, params.AnnotationUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, params.AccAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, params.AccBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, params.AccBelowOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, params.D1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, params.D2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, params.CreatedD1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, params.CreatedD2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, params.CreatedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, params.ObservedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, params.UnobservedByUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, params.ApplyProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, params.ObservationAccuracyExperimentID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, params.Cs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, params.Csa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, params.Csi); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, params.Geoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, params.TaxonGeoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, params.Obscuration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, params.Hrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, params.Lrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, params.IconicTaxa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, params.IDAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, params.IDBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, params.Identifications); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, params.Lng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, params.Radius); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, params.Nelat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, params.Nelng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, params.Swlat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, params.Swlng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, params.ListID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, params.NotInProject); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, params.NotMatchingProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, params.SearchOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, params.QualityGrade); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, params.WithoutField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, params.OutlinkSource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, params.UpdatedSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, params.ViewerID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, params.PreferredPlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, params.TTL); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaxonRangesIDZoomXYPngRequest generates requests for GetTaxonRangesIDZoomXYPng
func NewGetTaxonRangesIDZoomXYPngRequest(server string, id string, zoom int, x int, y int, params *GetTaxonRangesIDZoomXYPngParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxon_ranges/%s/%s/%s/%s.png", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tile_size", runtime.ParamLocationQuery, params.TileSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IDPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, params.NotID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, params.License); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, params.PhotoLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, params.PlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, params.ProjectID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, params.Rank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, params.SiteID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, params.SoundLicense); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, params.TaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, params.WithoutTaxonID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, params.TaxonName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, params.UserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, params.UserLogin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, params.Hour); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, params.Day); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, params.Month); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, params.CreatedDay); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, params.CreatedMonth); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, params.CreatedYear); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, params.TermID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, params.TermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, params.WithoutTermValueID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, params.TermIDOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, params.AnnotationUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, params.AccAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, params.AccBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, params.AccBelowOrUnknown); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, params.D1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, params.D2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, params.CreatedD1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, params.CreatedD2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, params.CreatedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, params.ObservedOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, params.UnobservedByUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, params.ApplyProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, params.ObservationAccuracyExperimentID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, params.Cs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, params.Csa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, params.Csi); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, params.Geoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, params.TaxonGeoprivacy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, params.Obscuration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, params.Hrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, params.Lrank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, params.IconicTaxa); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, params.IDAbove); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, params.IDBelow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, params.Identifications); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, params.Lng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, params.Radius); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, params.Nelat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, params.Nelng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, params.Swlat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, params.Swlng); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, params.ListID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, params.NotInProject); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, params.NotMatchingProjectRulesFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, params.SearchOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, params.QualityGrade); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, params.WithoutField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, params.OutlinkSource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, params.UpdatedSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, params.ViewerID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, params.PreferredPlaceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, params.TTL); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTranslationsLocalesRequest generates requests for GetTranslationsLocales
func NewGetTranslationsLocalesRequest(server string, params *GetTranslationsLocalesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/translations/locales")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, params *GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "following", runtime.ParamLocationQuery, params.Following); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "followed_by", runtime.ParamLocationQuery, params.FollowedBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orcid", runtime.ParamLocationQuery, params.Orcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetUsersAutocompleteRequest generates requests for GetUsersAutocomplete
func NewGetUsersAutocompleteRequest(server string, params *GetUsersAutocompleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/autocomplete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_suspended", runtime.ParamLocationQuery, params.IncludeSuspended); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersEmailAvailableRequest generates requests for GetUsersEmailAvailable
func NewGetUsersEmailAvailableRequest(server string, params *GetUsersEmailAvailableParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/email_available")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewGetUsersMeRequest generates requests for GetUsersMe
func NewGetUsersMeRequest(server string, params *GetUsersMeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersNotificationCountsRequest generates requests for GetUsersNotificationCounts
func NewGetUsersNotificationCountsRequest(server string, params *GetUsersNotificationCountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/notification_counts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersRecentObservationFieldsRequest generates requests for GetUsersRecentObservationFields
func NewGetUsersRecentObservationFieldsRequest(server string, params *GetUsersRecentObservationFieldsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/recent_observation_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersResendConfirmationRequest generates requests for PostUsersResendConfirmation
func NewPostUsersResendConfirmationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/resend_confirmation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersResetPasswordRequest calls the generic PostUsersResetPassword builder with application/json body
func NewPostUsersResetPasswordRequest(server string, body PostUsersResetPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersResetPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUsersResetPasswordRequestWithBody generates requests for PostUsersResetPassword with any type of body
func NewPostUsersResetPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/reset_password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutUsersUpdateSessionRequest generates requests for PutUsersUpdateSession
func NewPutUsersUpdateSessionRequest(server string, params *PutUsersUpdateSessionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/update_session")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefers_hide_obs_show_identifiers", runtime.ParamLocationQuery, params.PrefersHideObsShowIdentifiers); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersIDRequest generates requests for GetUsersID
func NewGetUsersIDRequest(server string, id string, params *GetUsersIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

// NewPutUsersIDRequest calls the generic PutUsersID builder with application/json body
func NewPutUsersIDRequest(server string, id string, body PutUsersIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUsersIDRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutUsersIDRequestWithBody generates requests for PutUsersID with any type of body
func NewPutUsersIDRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUsersIDBlockRequest generates requests for DeleteUsersIDBlock
func NewDeleteUsersIDBlockRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/block", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersIDBlockRequest generates requests for PostUsersIDBlock
func NewPostUsersIDBlockRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/block", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUsersIDMuteRequest generates requests for DeleteUsersIDMute
func NewDeleteUsersIDMuteRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/mute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersIDMuteRequest generates requests for PostUsersIDMute
func NewPostUsersIDMuteRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/mute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersIDProjectsRequest generates requests for GetUsersIDProjects
func NewGetUsersIDProjectsRequest(server string, id int, params *GetUsersIDProjectsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/projects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, params.XHTTPMethodOverride)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-HTTP-Method-Override", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAnnotationsWithBodyWithResponse request with any body
	PostAnnotationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAnnotationsResponse, error)

	PostAnnotationsWithResponse(ctx context.Context, body PostAnnotationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAnnotationsResponse, error)

	// DeleteAnnotationsUUIDWithResponse request
	DeleteAnnotationsUUIDWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteAnnotationsUUIDResponse, error)

	// DeleteAnnotationsUUIDVoteWithResponse request
	DeleteAnnotationsUUIDVoteWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteAnnotationsUUIDVoteResponse, error)

	// PostAnnotationsUUIDVoteWithResponse request
	PostAnnotationsUUIDVoteWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostAnnotationsUUIDVoteResponse, error)

	// GetAnnouncementsWithResponse request
	GetAnnouncementsWithResponse(ctx context.Context, params *GetAnnouncementsParams, reqEditors ...RequestEditorFn) (*GetAnnouncementsResponse, error)

	// PutAnnouncementsIDDismissWithResponse request
	PutAnnouncementsIDDismissWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PutAnnouncementsIDDismissResponse, error)

	// GetAuthorizedApplicationsWithResponse request
	GetAuthorizedApplicationsWithResponse(ctx context.Context, params *GetAuthorizedApplicationsParams, reqEditors ...RequestEditorFn) (*GetAuthorizedApplicationsResponse, error)

	// DeleteAuthorizedApplicationsIDWithResponse request
	DeleteAuthorizedApplicationsIDWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteAuthorizedApplicationsIDResponse, error)

	// PostCommentsWithBodyWithResponse request with any body
	PostCommentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCommentsResponse, error)

	PostCommentsWithResponse(ctx context.Context, body PostCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCommentsResponse, error)

	// DeleteCommentsUUIDWithResponse request
	DeleteCommentsUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteCommentsUUIDResponse, error)

	// PutCommentsUUIDWithBodyWithResponse request with any body
	PutCommentsUUIDWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCommentsUUIDResponse, error)

	PutCommentsUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutCommentsUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCommentsUUIDResponse, error)

	// GetControlledTermsWithResponse request
	GetControlledTermsWithResponse(ctx context.Context, params *GetControlledTermsParams, reqEditors ...RequestEditorFn) (*GetControlledTermsResponse, error)

	// GetControlledTermsForTaxonTaxonIDWithResponse request
	GetControlledTermsForTaxonTaxonIDWithResponse(ctx context.Context, taxonID []string, params *GetControlledTermsForTaxonTaxonIDParams, reqEditors ...RequestEditorFn) (*GetControlledTermsForTaxonTaxonIDResponse, error)

	// PostFlagsWithBodyWithResponse request with any body
	PostFlagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFlagsResponse, error)

	PostFlagsWithResponse(ctx context.Context, body PostFlagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFlagsResponse, error)

	// DeleteFlagsIDWithResponse request
	DeleteFlagsIDWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteFlagsIDResponse, error)

	// PutFlagsIDWithBodyWithResponse request with any body
	PutFlagsIDWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFlagsIDResponse, error)

	PutFlagsIDWithResponse(ctx context.Context, id int, body PutFlagsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFlagsIDResponse, error)

	// GetGeomodelIDZoomXYPngWithResponse request
	GetGeomodelIDZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetGeomodelIDZoomXYPngResponse, error)

	// GetGeomodelComparisonIDZoomXYPngWithResponse request
	GetGeomodelComparisonIDZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelComparisonIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetGeomodelComparisonIDZoomXYPngResponse, error)

	// GetGeomodelTaxonRangeIDZoomXYPngWithResponse request
	GetGeomodelTaxonRangeIDZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelTaxonRangeIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetGeomodelTaxonRangeIDZoomXYPngResponse, error)

	// GetGridZoomXYGridJSONWithResponse request
	GetGridZoomXYGridJSONWithResponse(ctx context.Context, zoom int, x int, y int, params *GetGridZoomXYGridJSONParams, reqEditors ...RequestEditorFn) (*GetGridZoomXYGridJSONResponse, error)

	// GetGridZoomXYPngWithResponse request
	GetGridZoomXYPngWithResponse(ctx context.Context, zoom int, x int, y int, params *GetGridZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetGridZoomXYPngResponse, error)

	// GetHeatmapZoomXYPngWithResponse request
	GetHeatmapZoomXYPngWithResponse(ctx context.Context, zoom int, x int, y int, params *GetHeatmapZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetHeatmapZoomXYPngResponse, error)

	// PostIdentificationsWithBodyWithResponse request with any body
	PostIdentificationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIdentificationsResponse, error)

	PostIdentificationsWithResponse(ctx context.Context, body PostIdentificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIdentificationsResponse, error)

	// GetIdentificationsIdentifiersWithResponse request
	GetIdentificationsIdentifiersWithResponse(ctx context.Context, params *GetIdentificationsIdentifiersParams, reqEditors ...RequestEditorFn) (*GetIdentificationsIdentifiersResponse, error)

	// GetIdentificationsRecentTaxaWithResponse request
	GetIdentificationsRecentTaxaWithResponse(ctx context.Context, params *GetIdentificationsRecentTaxaParams, reqEditors ...RequestEditorFn) (*GetIdentificationsRecentTaxaResponse, error)

	// GetIdentificationsSimilarSpeciesWithResponse request
	GetIdentificationsSimilarSpeciesWithResponse(ctx context.Context, params *GetIdentificationsSimilarSpeciesParams, reqEditors ...RequestEditorFn) (*GetIdentificationsSimilarSpeciesResponse, error)

	// DeleteIdentificationsUUIDWithResponse request
	DeleteIdentificationsUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteIdentificationsUUIDResponse, error)

	// PutIdentificationsUUIDWithBodyWithResponse request with any body
	PutIdentificationsUUIDWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIdentificationsUUIDResponse, error)

	PutIdentificationsUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutIdentificationsUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIdentificationsUUIDResponse, error)

	// GetMessagesWithResponse request
	GetMessagesWithResponse(ctx context.Context, params *GetMessagesParams, reqEditors ...RequestEditorFn) (*GetMessagesResponse, error)

	// PostMessagesWithBodyWithResponse request with any body
	PostMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMessagesResponse, error)

	PostMessagesWithResponse(ctx context.Context, body PostMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMessagesResponse, error)

	// GetMessagesIDWithResponse request
	GetMessagesIDWithResponse(ctx context.Context, id int, params *GetMessagesIDParams, reqEditors ...RequestEditorFn) (*GetMessagesIDResponse, error)

	// PostObservationFieldValuesWithBodyWithResponse request with any body
	PostObservationFieldValuesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObservationFieldValuesResponse, error)

	PostObservationFieldValuesWithResponse(ctx context.Context, body PostObservationFieldValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObservationFieldValuesResponse, error)

	// DeleteObservationFieldValuesUUIDWithResponse request
	DeleteObservationFieldValuesUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationFieldValuesUUIDResponse, error)

	// PutObservationFieldValuesUUIDWithBodyWithResponse request with any body
	PutObservationFieldValuesUUIDWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObservationFieldValuesUUIDResponse, error)

	PutObservationFieldValuesUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutObservationFieldValuesUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObservationFieldValuesUUIDResponse, error)

	// PostObservationPhotosWithBodyWithResponse request with any body
	PostObservationPhotosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObservationPhotosResponse, error)

	PostObservationPhotosWithResponse(ctx context.Context, body PostObservationPhotosJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObservationPhotosResponse, error)

	// DeleteObservationPhotosUUIDWithResponse request
	DeleteObservationPhotosUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationPhotosUUIDResponse, error)

	// PutObservationPhotosUUIDWithBodyWithResponse request with any body
	PutObservationPhotosUUIDWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObservationPhotosUUIDResponse, error)

	PutObservationPhotosUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutObservationPhotosUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObservationPhotosUUIDResponse, error)

	// PostObservationSoundsWithBodyWithResponse request with any body
	PostObservationSoundsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObservationSoundsResponse, error)

	PostObservationSoundsWithResponse(ctx context.Context, body PostObservationSoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObservationSoundsResponse, error)

	// DeleteObservationSoundsUUIDWithResponse request
	DeleteObservationSoundsUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationSoundsUUIDResponse, error)

	// PutObservationSoundsUUIDWithBodyWithResponse request with any body
	PutObservationSoundsUUIDWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObservationSoundsUUIDResponse, error)

	PutObservationSoundsUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutObservationSoundsUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObservationSoundsUUIDResponse, error)

	// GetObservationsWithResponse request
	GetObservationsWithResponse(ctx context.Context, params *GetObservationsParams, reqEditors ...RequestEditorFn) (*GetObservationsResponse, error)

	// PostObservationsWithBodyWithResponse request with any body
	PostObservationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObservationsResponse, error)

	PostObservationsWithResponse(ctx context.Context, body PostObservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObservationsResponse, error)

	// GetObservationsDeletedWithResponse request
	GetObservationsDeletedWithResponse(ctx context.Context, params *GetObservationsDeletedParams, reqEditors ...RequestEditorFn) (*GetObservationsDeletedResponse, error)

	// GetObservationsHistogramWithResponse request
	GetObservationsHistogramWithResponse(ctx context.Context, params *GetObservationsHistogramParams, reqEditors ...RequestEditorFn) (*GetObservationsHistogramResponse, error)

	// GetObservationsIconicTaxaSpeciesCountsWithResponse request
	GetObservationsIconicTaxaSpeciesCountsWithResponse(ctx context.Context, params *GetObservationsIconicTaxaSpeciesCountsParams, reqEditors ...RequestEditorFn) (*GetObservationsIconicTaxaSpeciesCountsResponse, error)

	// GetObservationsIdentificationCategoriesWithResponse request
	GetObservationsIdentificationCategoriesWithResponse(ctx context.Context, params *GetObservationsIdentificationCategoriesParams, reqEditors ...RequestEditorFn) (*GetObservationsIdentificationCategoriesResponse, error)

	// GetObservationsIdentifiersWithResponse request
	GetObservationsIdentifiersWithResponse(ctx context.Context, params *GetObservationsIdentifiersParams, reqEditors ...RequestEditorFn) (*GetObservationsIdentifiersResponse, error)

	// GetObservationsObserversWithResponse request
	GetObservationsObserversWithResponse(ctx context.Context, params *GetObservationsObserversParams, reqEditors ...RequestEditorFn) (*GetObservationsObserversResponse, error)

	// GetObservationsPopularFieldValuesWithResponse request
	GetObservationsPopularFieldValuesWithResponse(ctx context.Context, params *GetObservationsPopularFieldValuesParams, reqEditors ...RequestEditorFn) (*GetObservationsPopularFieldValuesResponse, error)

	// GetObservationsQualityGradesWithResponse request
	GetObservationsQualityGradesWithResponse(ctx context.Context, params *GetObservationsQualityGradesParams, reqEditors ...RequestEditorFn) (*GetObservationsQualityGradesResponse, error)

	// GetObservationsSpeciesCountsWithResponse request
	GetObservationsSpeciesCountsWithResponse(ctx context.Context, params *GetObservationsSpeciesCountsParams, reqEditors ...RequestEditorFn) (*GetObservationsSpeciesCountsResponse, error)

	// GetObservationsUmbrellaProjectStatsWithResponse request
	GetObservationsUmbrellaProjectStatsWithResponse(ctx context.Context, params *GetObservationsUmbrellaProjectStatsParams, reqEditors ...RequestEditorFn) (*GetObservationsUmbrellaProjectStatsResponse, error)

	// GetObservationsUpdatesWithResponse request
	GetObservationsUpdatesWithResponse(ctx context.Context, params *GetObservationsUpdatesParams, reqEditors ...RequestEditorFn) (*GetObservationsUpdatesResponse, error)

	// DeleteObservationsUUIDWithResponse request
	DeleteObservationsUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationsUUIDResponse, error)

	// GetObservationsUUIDWithResponse request
	GetObservationsUUIDWithResponse(ctx context.Context, uuid []openapi_types.UUID, params *GetObservationsUUIDParams, reqEditors ...RequestEditorFn) (*GetObservationsUUIDResponse, error)

	// PutObservationsUUIDWithBodyWithResponse request with any body
	PutObservationsUUIDWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObservationsUUIDResponse, error)

	PutObservationsUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutObservationsUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObservationsUUIDResponse, error)

	// DeleteObservationsUUIDFaveWithResponse request
	DeleteObservationsUUIDFaveWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationsUUIDFaveResponse, error)

	// PostObservationsUUIDFaveWithResponse request
	PostObservationsUUIDFaveWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostObservationsUUIDFaveResponse, error)

	// DeleteObservationsUUIDQualityMetricWithResponse request
	DeleteObservationsUUIDQualityMetricWithResponse(ctx context.Context, uuid []openapi_types.UUID, metric DeleteObservationsUUIDQualityMetricParamsMetric, reqEditors ...RequestEditorFn) (*DeleteObservationsUUIDQualityMetricResponse, error)

	// PostObservationsUUIDQualityMetricWithResponse request
	PostObservationsUUIDQualityMetricWithResponse(ctx context.Context, uuid []openapi_types.UUID, metric PostObservationsUUIDQualityMetricParamsMetric, params *PostObservationsUUIDQualityMetricParams, reqEditors ...RequestEditorFn) (*PostObservationsUUIDQualityMetricResponse, error)

	// GetObservationsUUIDQualityMetricsWithResponse request
	GetObservationsUUIDQualityMetricsWithResponse(ctx context.Context, uuid []openapi_types.UUID, params *GetObservationsUUIDQualityMetricsParams, reqEditors ...RequestEditorFn) (*GetObservationsUUIDQualityMetricsResponse, error)

	// DeleteObservationsUUIDReviewWithResponse request
	DeleteObservationsUUIDReviewWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationsUUIDReviewResponse, error)

	// PostObservationsUUIDReviewWithResponse request
	PostObservationsUUIDReviewWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostObservationsUUIDReviewResponse, error)

	// PutObservationsUUIDSubscriptionWithResponse request
	PutObservationsUUIDSubscriptionWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*PutObservationsUUIDSubscriptionResponse, error)

	// GetObservationsUUIDSubscriptionsWithResponse request
	GetObservationsUUIDSubscriptionsWithResponse(ctx context.Context, uuid openapi_types.UUID, params *GetObservationsUUIDSubscriptionsParams, reqEditors ...RequestEditorFn) (*GetObservationsUUIDSubscriptionsResponse, error)

	// GetObservationsUUIDTaxonSummaryWithResponse request
	GetObservationsUUIDTaxonSummaryWithResponse(ctx context.Context, uuid openapi_types.UUID, params *GetObservationsUUIDTaxonSummaryParams, reqEditors ...RequestEditorFn) (*GetObservationsUUIDTaxonSummaryResponse, error)

	// PutObservationsUUIDViewedUpdatesWithResponse request
	PutObservationsUUIDViewedUpdatesWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*PutObservationsUUIDViewedUpdatesResponse, error)

	// PostPhotosWithBodyWithResponse request with any body
	PostPhotosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPhotosResponse, error)

	// PutPhotosIDWithResponse request
	PutPhotosIDWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PutPhotosIDResponse, error)

	// GetPlacesWithResponse request
	GetPlacesWithResponse(ctx context.Context, params *GetPlacesParams, reqEditors ...RequestEditorFn) (*GetPlacesResponse, error)

	// GetPlacesNearbyWithResponse request
	GetPlacesNearbyWithResponse(ctx context.Context, params *GetPlacesNearbyParams, reqEditors ...RequestEditorFn) (*GetPlacesNearbyResponse, error)

	// GetPlacesIDZoomXYPngWithResponse request
	GetPlacesIDZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetPlacesIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetPlacesIDZoomXYPngResponse, error)

	// GetPlacesUUIDWithResponse request
	GetPlacesUUIDWithResponse(ctx context.Context, uuid []string, params *GetPlacesUUIDParams, reqEditors ...RequestEditorFn) (*GetPlacesUUIDResponse, error)

	// GetPointsZoomXYGridJSONWithResponse request
	GetPointsZoomXYGridJSONWithResponse(ctx context.Context, zoom int, x int, y int, params *GetPointsZoomXYGridJSONParams, reqEditors ...RequestEditorFn) (*GetPointsZoomXYGridJSONResponse, error)

	// GetPointsZoomXYPngWithResponse request
	GetPointsZoomXYPngWithResponse(ctx context.Context, zoom int, x int, y int, params *GetPointsZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetPointsZoomXYPngResponse, error)

	// PostProjectObservationsWithBodyWithResponse request with any body
	PostProjectObservationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectObservationsResponse, error)

	PostProjectObservationsWithResponse(ctx context.Context, body PostProjectObservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectObservationsResponse, error)

	// DeleteProjectObservationsUUIDWithResponse request
	DeleteProjectObservationsUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteProjectObservationsUUIDResponse, error)

	// PutProjectObservationsUUIDWithBodyWithResponse request with any body
	PutProjectObservationsUUIDWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProjectObservationsUUIDResponse, error)

	PutProjectObservationsUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutProjectObservationsUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProjectObservationsUUIDResponse, error)

	// PutProjectUsersIDWithBodyWithResponse request with any body
	PutProjectUsersIDWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProjectUsersIDResponse, error)

	PutProjectUsersIDWithResponse(ctx context.Context, id string, body PutProjectUsersIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProjectUsersIDResponse, error)

	// GetProjectsWithResponse request
	GetProjectsWithResponse(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error)

	// GetProjectsIDWithResponse request
	GetProjectsIDWithResponse(ctx context.Context, id []int, params *GetProjectsIDParams, reqEditors ...RequestEditorFn) (*GetProjectsIDResponse, error)

	// GetProjectsIDMembersWithResponse request
	GetProjectsIDMembersWithResponse(ctx context.Context, id int, params *GetProjectsIDMembersParams, reqEditors ...RequestEditorFn) (*GetProjectsIDMembersResponse, error)

	// DeleteProjectsIDMembershipWithResponse request
	DeleteProjectsIDMembershipWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteProjectsIDMembershipResponse, error)

	// GetProjectsIDMembershipWithResponse request
	GetProjectsIDMembershipWithResponse(ctx context.Context, id []int, params *GetProjectsIDMembershipParams, reqEditors ...RequestEditorFn) (*GetProjectsIDMembershipResponse, error)

	// PostProjectsIDMembershipWithResponse request
	PostProjectsIDMembershipWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostProjectsIDMembershipResponse, error)

	// GetProjectsIDPostsWithResponse request
	GetProjectsIDPostsWithResponse(ctx context.Context, id []int, params *GetProjectsIDPostsParams, reqEditors ...RequestEditorFn) (*GetProjectsIDPostsResponse, error)

	// GetProviderAuthorizationsWithResponse request
	GetProviderAuthorizationsWithResponse(ctx context.Context, params *GetProviderAuthorizationsParams, reqEditors ...RequestEditorFn) (*GetProviderAuthorizationsResponse, error)

	// DeleteProviderAuthorizationsIDWithResponse request
	DeleteProviderAuthorizationsIDWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteProviderAuthorizationsIDResponse, error)

	// GetRelationshipsWithResponse request
	GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error)

	// PostRelationshipsWithBodyWithResponse request with any body
	PostRelationshipsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRelationshipsResponse, error)

	PostRelationshipsWithResponse(ctx context.Context, body PostRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRelationshipsResponse, error)

	// DeleteRelationshipsIDWithResponse request
	DeleteRelationshipsIDWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteRelationshipsIDResponse, error)

	// PutRelationshipsIDWithBodyWithResponse request with any body
	PutRelationshipsIDWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRelationshipsIDResponse, error)

	PutRelationshipsIDWithResponse(ctx context.Context, id int, body PutRelationshipsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRelationshipsIDResponse, error)

	// GetSavedLocationsWithResponse request
	GetSavedLocationsWithResponse(ctx context.Context, params *GetSavedLocationsParams, reqEditors ...RequestEditorFn) (*GetSavedLocationsResponse, error)

	// PostSavedLocationsWithBodyWithResponse request with any body
	PostSavedLocationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSavedLocationsResponse, error)

	PostSavedLocationsWithResponse(ctx context.Context, body PostSavedLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSavedLocationsResponse, error)

	// DeleteSavedLocationsIDWithResponse request
	DeleteSavedLocationsIDWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteSavedLocationsIDResponse, error)

	// GetSearchWithResponse request
	GetSearchWithResponse(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*GetSearchResponse, error)

	// GetSitesWithResponse request
	GetSitesWithResponse(ctx context.Context, params *GetSitesParams, reqEditors ...RequestEditorFn) (*GetSitesResponse, error)

	// PostSoundsWithBodyWithResponse request with any body
	PostSoundsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSoundsResponse, error)

	// GetTaxaWithResponse request
	GetTaxaWithResponse(ctx context.Context, params *GetTaxaParams, reqEditors ...RequestEditorFn) (*GetTaxaResponse, error)

	// GetTaxaAutocompleteWithResponse request
	GetTaxaAutocompleteWithResponse(ctx context.Context, params *GetTaxaAutocompleteParams, reqEditors ...RequestEditorFn) (*GetTaxaAutocompleteResponse, error)

	// GetTaxaIconicWithResponse request
	GetTaxaIconicWithResponse(ctx context.Context, params *GetTaxaIconicParams, reqEditors ...RequestEditorFn) (*GetTaxaIconicResponse, error)

	// GetTaxaSuggestWithResponse request
	GetTaxaSuggestWithResponse(ctx context.Context, params *GetTaxaSuggestParams, reqEditors ...RequestEditorFn) (*GetTaxaSuggestResponse, error)

	// PostTaxaSuggestWithBodyWithResponse request with any body
	PostTaxaSuggestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTaxaSuggestResponse, error)

	// GetTaxaIDWithResponse request
	GetTaxaIDWithResponse(ctx context.Context, id []int, params *GetTaxaIDParams, reqEditors ...RequestEditorFn) (*GetTaxaIDResponse, error)

	// GetTaxaIDWantedWithResponse request
	GetTaxaIDWantedWithResponse(ctx context.Context, id int, params *GetTaxaIDWantedParams, reqEditors ...RequestEditorFn) (*GetTaxaIDWantedResponse, error)

	// PostTaxonNamePrioritiesWithBodyWithResponse request with any body
	PostTaxonNamePrioritiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTaxonNamePrioritiesResponse, error)

	PostTaxonNamePrioritiesWithResponse(ctx context.Context, body PostTaxonNamePrioritiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTaxonNamePrioritiesResponse, error)

	// DeleteTaxonNamePrioritiesIDWithResponse request
	DeleteTaxonNamePrioritiesIDWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteTaxonNamePrioritiesIDResponse, error)

	// PutTaxonNamePrioritiesIDWithBodyWithResponse request with any body
	PutTaxonNamePrioritiesIDWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTaxonNamePrioritiesIDResponse, error)

	PutTaxonNamePrioritiesIDWithResponse(ctx context.Context, id int, body PutTaxonNamePrioritiesIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTaxonNamePrioritiesIDResponse, error)

	// GetTaxonPlacesIDZoomXYPngWithResponse request
	GetTaxonPlacesIDZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetTaxonPlacesIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetTaxonPlacesIDZoomXYPngResponse, error)

	// GetTaxonRangesIDZoomXYPngWithResponse request
	GetTaxonRangesIDZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetTaxonRangesIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetTaxonRangesIDZoomXYPngResponse, error)

	// GetTranslationsLocalesWithResponse request
	GetTranslationsLocalesWithResponse(ctx context.Context, params *GetTranslationsLocalesParams, reqEditors ...RequestEditorFn) (*GetTranslationsLocalesResponse, error)

	// GetUsersWithResponse request
	GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// GetUsersAutocompleteWithResponse request
	GetUsersAutocompleteWithResponse(ctx context.Context, params *GetUsersAutocompleteParams, reqEditors ...RequestEditorFn) (*GetUsersAutocompleteResponse, error)

	// GetUsersEmailAvailableWithResponse request
	GetUsersEmailAvailableWithResponse(ctx context.Context, params *GetUsersEmailAvailableParams, reqEditors ...RequestEditorFn) (*GetUsersEmailAvailableResponse, error)

	// GetUsersMeWithResponse request
	GetUsersMeWithResponse(ctx context.Context, params *GetUsersMeParams, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error)

	// GetUsersNotificationCountsWithResponse request
	GetUsersNotificationCountsWithResponse(ctx context.Context, params *GetUsersNotificationCountsParams, reqEditors ...RequestEditorFn) (*GetUsersNotificationCountsResponse, error)

	// GetUsersRecentObservationFieldsWithResponse request
	GetUsersRecentObservationFieldsWithResponse(ctx context.Context, params *GetUsersRecentObservationFieldsParams, reqEditors ...RequestEditorFn) (*GetUsersRecentObservationFieldsResponse, error)

	// PostUsersResendConfirmationWithResponse request
	PostUsersResendConfirmationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostUsersResendConfirmationResponse, error)

	// PostUsersResetPasswordWithBodyWithResponse request with any body
	PostUsersResetPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersResetPasswordResponse, error)

	PostUsersResetPasswordWithResponse(ctx context.Context, body PostUsersResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersResetPasswordResponse, error)

	// PutUsersUpdateSessionWithResponse request
	PutUsersUpdateSessionWithResponse(ctx context.Context, params *PutUsersUpdateSessionParams, reqEditors ...RequestEditorFn) (*PutUsersUpdateSessionResponse, error)

	// GetUsersIDWithResponse request
	GetUsersIDWithResponse(ctx context.Context, id string, params *GetUsersIDParams, reqEditors ...RequestEditorFn) (*GetUsersIDResponse, error)

	// PutUsersIDWithBodyWithResponse request with any body
	PutUsersIDWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUsersIDResponse, error)

	PutUsersIDWithResponse(ctx context.Context, id string, body PutUsersIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUsersIDResponse, error)

	// DeleteUsersIDBlockWithResponse request
	DeleteUsersIDBlockWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteUsersIDBlockResponse, error)

	// PostUsersIDBlockWithResponse request
	PostUsersIDBlockWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostUsersIDBlockResponse, error)

	// DeleteUsersIDMuteWithResponse request
	DeleteUsersIDMuteWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteUsersIDMuteResponse, error)

	// PostUsersIDMuteWithResponse request
	PostUsersIDMuteWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostUsersIDMuteResponse, error)

	// GetUsersIDProjectsWithResponse request
	GetUsersIDProjectsWithResponse(ctx context.Context, id int, params *GetUsersIDProjectsParams, reqEditors ...RequestEditorFn) (*GetUsersIDProjectsResponse, error)
}

type PostAnnotationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsAnnotations
}

// Status returns HTTPResponse.Status
func (r PostAnnotationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAnnotationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAnnotationsUUIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAnnotationsUUIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAnnotationsUUIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAnnotationsUUIDVoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAnnotationsUUIDVoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAnnotationsUUIDVoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAnnotationsUUIDVoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAnnotationsUUIDVoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAnnotationsUUIDVoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAnnouncementsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsAnnouncements
}

// Status returns HTTPResponse.Status
func (r GetAnnouncementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAnnouncementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAnnouncementsIDDismissResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAnnouncementsIDDismissResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAnnouncementsIDDismissResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthorizedApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsAuthorizedApplications
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetAuthorizedApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthorizedApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAuthorizedApplicationsIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteAuthorizedApplicationsIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthorizedApplicationsIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCommentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsComments
}

// Status returns HTTPResponse.Status
func (r PostCommentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCommentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCommentsUUIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCommentsUUIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCommentsUUIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCommentsUUIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsComments
}

// Status returns HTTPResponse.Status
func (r PutCommentsUUIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCommentsUUIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetControlledTermsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsControlledTerms
}

// Status returns HTTPResponse.Status
func (r GetControlledTermsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetControlledTermsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetControlledTermsForTaxonTaxonIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsControlledTerms
}

// Status returns HTTPResponse.Status
func (r GetControlledTermsForTaxonTaxonIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetControlledTermsForTaxonTaxonIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFlagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsFlags
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostFlagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFlagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFlagsIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteFlagsIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFlagsIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFlagsIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsFlags
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutFlagsIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFlagsIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGeomodelIDZoomXYPngResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetGeomodelIDZoomXYPngResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGeomodelIDZoomXYPngResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGeomodelComparisonIDZoomXYPngResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetGeomodelComparisonIDZoomXYPngResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGeomodelComparisonIDZoomXYPngResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGeomodelTaxonRangeIDZoomXYPngResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetGeomodelTaxonRangeIDZoomXYPngResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGeomodelTaxonRangeIDZoomXYPngResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGridZoomXYGridJSONResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UtfGrid
}

// Status returns HTTPResponse.Status
func (r GetGridZoomXYGridJSONResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGridZoomXYGridJSONResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGridZoomXYPngResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetGridZoomXYPngResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGridZoomXYPngResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHeatmapZoomXYPngResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHeatmapZoomXYPngResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHeatmapZoomXYPngResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdentificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsIdentifications
}

// Status returns HTTPResponse.Status
func (r PostIdentificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdentificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdentificationsIdentifiersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsIdentifiers
}

// Status returns HTTPResponse.Status
func (r GetIdentificationsIdentifiersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdentificationsIdentifiersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdentificationsRecentTaxaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsIdentificationsRecentTaxa
}

// Status returns HTTPResponse.Status
func (r GetIdentificationsRecentTaxaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdentificationsRecentTaxaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdentificationsSimilarSpeciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTaxaCounts
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetIdentificationsSimilarSpeciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdentificationsSimilarSpeciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdentificationsUUIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdentificationsUUIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdentificationsUUIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIdentificationsUUIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservations
}

// Status returns HTTPResponse.Status
func (r PutIdentificationsUUIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIdentificationsUUIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsMessages
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsMessages
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessagesIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsMessagesThread
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetMessagesIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessagesIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObservationFieldValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationFieldValues
}

// Status returns HTTPResponse.Status
func (r PostObservationFieldValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObservationFieldValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObservationFieldValuesUUIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObservationFieldValuesUUIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObservationFieldValuesUUIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutObservationFieldValuesUUIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationFieldValues
}

// Status returns HTTPResponse.Status
func (r PutObservationFieldValuesUUIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutObservationFieldValuesUUIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObservationPhotosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationPhotos
}

// Status returns HTTPResponse.Status
func (r PostObservationPhotosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObservationPhotosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObservationPhotosUUIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObservationPhotosUUIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObservationPhotosUUIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutObservationPhotosUUIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationPhotos
}

// Status returns HTTPResponse.Status
func (r PutObservationPhotosUUIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutObservationPhotosUUIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObservationSoundsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationSounds
}

// Status returns HTTPResponse.Status
func (r PostObservationSoundsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObservationSoundsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObservationSoundsUUIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObservationSoundsUUIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObservationSoundsUUIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutObservationSoundsUUIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationSounds
}

// Status returns HTTPResponse.Status
func (r PutObservationSoundsUUIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutObservationSoundsUUIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservations
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetObservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservations
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostObservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsDeletedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationsDeleted
}

// Status returns HTTPResponse.Status
func (r GetObservationsDeletedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsDeletedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsHistogramResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationsHistogram
}

// Status returns HTTPResponse.Status
func (r GetObservationsHistogramResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsHistogramResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsIconicTaxaSpeciesCountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationsSpeciesCounts
}

// Status returns HTTPResponse.Status
func (r GetObservationsIconicTaxaSpeciesCountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsIconicTaxaSpeciesCountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsIdentificationCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationsIdentificationCategories
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetObservationsIdentificationCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsIdentificationCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsIdentifiersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationsIdentifiers
}

// Status returns HTTPResponse.Status
func (r GetObservationsIdentifiersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsIdentifiersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsObserversResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationsObservers
}

// Status returns HTTPResponse.Status
func (r GetObservationsObserversResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsObserversResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsPopularFieldValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationsPopularFieldValues
}

// Status returns HTTPResponse.Status
func (r GetObservationsPopularFieldValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsPopularFieldValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsQualityGradesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationsQualityGrades
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetObservationsQualityGradesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsQualityGradesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsSpeciesCountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationsSpeciesCounts
}

// Status returns HTTPResponse.Status
func (r GetObservationsSpeciesCountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsSpeciesCountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsUmbrellaProjectStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationsUmbrellaProjectStats
}

// Status returns HTTPResponse.Status
func (r GetObservationsUmbrellaProjectStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsUmbrellaProjectStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsUpdatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsUpdates
}

// Status returns HTTPResponse.Status
func (r GetObservationsUpdatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsUpdatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObservationsUUIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObservationsUUIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObservationsUUIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsUUIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservations
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetObservationsUUIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsUUIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutObservationsUUIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservations
}

// Status returns HTTPResponse.Status
func (r PutObservationsUUIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutObservationsUUIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObservationsUUIDFaveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObservationsUUIDFaveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObservationsUUIDFaveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObservationsUUIDFaveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostObservationsUUIDFaveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObservationsUUIDFaveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObservationsUUIDQualityMetricResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObservationsUUIDQualityMetricResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObservationsUUIDQualityMetricResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObservationsUUIDQualityMetricResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostObservationsUUIDQualityMetricResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObservationsUUIDQualityMetricResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsUUIDQualityMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsQualityMetrics
}

// Status returns HTTPResponse.Status
func (r GetObservationsUUIDQualityMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsUUIDQualityMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObservationsUUIDReviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObservationsUUIDReviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObservationsUUIDReviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObservationsUUIDReviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostObservationsUUIDReviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObservationsUUIDReviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutObservationsUUIDSubscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutObservationsUUIDSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutObservationsUUIDSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsUUIDSubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsSubscriptions
}

// Status returns HTTPResponse.Status
func (r GetObservationsUUIDSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsUUIDSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsUUIDTaxonSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTaxonSummary
}

// Status returns HTTPResponse.Status
func (r GetObservationsUUIDTaxonSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsUUIDTaxonSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutObservationsUUIDViewedUpdatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutObservationsUUIDViewedUpdatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutObservationsUUIDViewedUpdatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPhotosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsPhotos
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostPhotosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPhotosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPhotosIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsPhotos
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutPhotosIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPhotosIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsPlaces
}

// Status returns HTTPResponse.Status
func (r GetPlacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacesNearbyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsPlacesNearby
}

// Status returns HTTPResponse.Status
func (r GetPlacesNearbyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacesNearbyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacesIDZoomXYPngResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlacesIDZoomXYPngResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacesIDZoomXYPngResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacesUUIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsPlaces
}

// Status returns HTTPResponse.Status
func (r GetPlacesUUIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacesUUIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPointsZoomXYGridJSONResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UtfGrid
}

// Status returns HTTPResponse.Status
func (r GetPointsZoomXYGridJSONResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPointsZoomXYGridJSONResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPointsZoomXYPngResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPointsZoomXYPngResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPointsZoomXYPngResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectObservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsProjectObservations
}

// Status returns HTTPResponse.Status
func (r PostProjectObservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectObservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectObservationsUUIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteProjectObservationsUUIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectObservationsUUIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutProjectObservationsUUIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsProjectObservations
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutProjectObservationsUUIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutProjectObservationsUUIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutProjectUsersIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectUser
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutProjectUsersIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutProjectUsersIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsProjects
}

// Status returns HTTPResponse.Status
func (r GetProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsProjects
}

// Status returns HTTPResponse.Status
func (r GetProjectsIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsIDMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsProjectsMembers
}

// Status returns HTTPResponse.Status
func (r GetProjectsIDMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsIDMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectsIDMembershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteProjectsIDMembershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectsIDMembershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsIDMembershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsProjectMembership
}

// Status returns HTTPResponse.Status
func (r GetProjectsIDMembershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsIDMembershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsIDMembershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostProjectsIDMembershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsIDMembershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsIDPostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsProjectsPosts
}

// Status returns HTTPResponse.Status
func (r GetProjectsIDPostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsIDPostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProviderAuthorizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsProviderAuthorizations
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetProviderAuthorizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProviderAuthorizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProviderAuthorizationsIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteProviderAuthorizationsIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProviderAuthorizationsIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsRelationships
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsRelationships
}

// Status returns HTTPResponse.Status
func (r PostRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRelationshipsIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRelationshipsIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRelationshipsIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRelationshipsIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsRelationships
}

// Status returns HTTPResponse.Status
func (r PutRelationshipsIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRelationshipsIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSavedLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsSavedLocations
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetSavedLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSavedLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSavedLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsSavedLocations
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostSavedLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSavedLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSavedLocationsIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSavedLocationsIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSavedLocationsIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsSearch
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSitesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsSites
}

// Status returns HTTPResponse.Status
func (r GetSitesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSitesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSoundsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsSounds
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostSoundsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSoundsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTaxa
}

// Status returns HTTPResponse.Status
func (r GetTaxaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxaAutocompleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTaxa
}

// Status returns HTTPResponse.Status
func (r GetTaxaAutocompleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxaAutocompleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxaIconicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTaxa
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetTaxaIconicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxaIconicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxaSuggestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTaxaSuggest
}

// Status returns HTTPResponse.Status
func (r GetTaxaSuggestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxaSuggestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTaxaSuggestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTaxaSuggest
}

// Status returns HTTPResponse.Status
func (r PostTaxaSuggestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTaxaSuggestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxaIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTaxa
}

// Status returns HTTPResponse.Status
func (r GetTaxaIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxaIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxaIDWantedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTaxa
}

// Status returns HTTPResponse.Status
func (r GetTaxaIDWantedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxaIDWantedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTaxonNamePrioritiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTaxonNamePriorities
}

// Status returns HTTPResponse.Status
func (r PostTaxonNamePrioritiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTaxonNamePrioritiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTaxonNamePrioritiesIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTaxonNamePrioritiesIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTaxonNamePrioritiesIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTaxonNamePrioritiesIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTaxonNamePriorities
}

// Status returns HTTPResponse.Status
func (r PutTaxonNamePrioritiesIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTaxonNamePrioritiesIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxonPlacesIDZoomXYPngResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTaxonPlacesIDZoomXYPngResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxonPlacesIDZoomXYPngResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxonRangesIDZoomXYPngResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTaxonRangesIDZoomXYPngResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxonRangesIDZoomXYPngResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTranslationsLocalesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTranslationsLocales
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetTranslationsLocalesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTranslationsLocalesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsUsers
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersAutocompleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsUsers
}

// Status returns HTTPResponse.Status
func (r GetUsersAutocompleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersAutocompleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersEmailAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsEmailAvailable
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersEmailAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersEmailAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsUsersMe
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersNotificationCountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsUsersNotificationCounts
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersNotificationCountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersNotificationCountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersRecentObservationFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationFields
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersRecentObservationFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersRecentObservationFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersResendConfirmationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUsersResendConfirmationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersResendConfirmationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersResetPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostUsersResetPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersResetPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUsersUpdateSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutUsersUpdateSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUsersUpdateSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsUsers
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUsersIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutUsersIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUsersIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsersIDBlockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUsersIDBlockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsersIDBlockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersIDBlockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUsersIDBlockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersIDBlockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsersIDMuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUsersIDMuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsersIDMuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersIDMuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUsersIDMuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersIDMuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersIDProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsProjects
}

// Status returns HTTPResponse.Status
func (r GetUsersIDProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersIDProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAnnotationsWithBodyWithResponse request with arbitrary body returning *PostAnnotationsResponse
func (c *ClientWithResponses) PostAnnotationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAnnotationsResponse, error) {
	rsp, err := c.PostAnnotationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnnotationsResponse(rsp)
}

func (c *ClientWithResponses) PostAnnotationsWithResponse(ctx context.Context, body PostAnnotationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAnnotationsResponse, error) {
	rsp, err := c.PostAnnotations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnnotationsResponse(rsp)
}

// DeleteAnnotationsUUIDWithResponse request returning *DeleteAnnotationsUUIDResponse
func (c *ClientWithResponses) DeleteAnnotationsUUIDWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteAnnotationsUUIDResponse, error) {
	rsp, err := c.DeleteAnnotationsUUID(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAnnotationsUUIDResponse(rsp)
}

// DeleteAnnotationsUUIDVoteWithResponse request returning *DeleteAnnotationsUUIDVoteResponse
func (c *ClientWithResponses) DeleteAnnotationsUUIDVoteWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteAnnotationsUUIDVoteResponse, error) {
	rsp, err := c.DeleteAnnotationsUUIDVote(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAnnotationsUUIDVoteResponse(rsp)
}

// PostAnnotationsUUIDVoteWithResponse request returning *PostAnnotationsUUIDVoteResponse
func (c *ClientWithResponses) PostAnnotationsUUIDVoteWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostAnnotationsUUIDVoteResponse, error) {
	rsp, err := c.PostAnnotationsUUIDVote(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnnotationsUUIDVoteResponse(rsp)
}

// GetAnnouncementsWithResponse request returning *GetAnnouncementsResponse
func (c *ClientWithResponses) GetAnnouncementsWithResponse(ctx context.Context, params *GetAnnouncementsParams, reqEditors ...RequestEditorFn) (*GetAnnouncementsResponse, error) {
	rsp, err := c.GetAnnouncements(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAnnouncementsResponse(rsp)
}

// PutAnnouncementsIDDismissWithResponse request returning *PutAnnouncementsIDDismissResponse
func (c *ClientWithResponses) PutAnnouncementsIDDismissWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PutAnnouncementsIDDismissResponse, error) {
	rsp, err := c.PutAnnouncementsIDDismiss(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAnnouncementsIDDismissResponse(rsp)
}

// GetAuthorizedApplicationsWithResponse request returning *GetAuthorizedApplicationsResponse
func (c *ClientWithResponses) GetAuthorizedApplicationsWithResponse(ctx context.Context, params *GetAuthorizedApplicationsParams, reqEditors ...RequestEditorFn) (*GetAuthorizedApplicationsResponse, error) {
	rsp, err := c.GetAuthorizedApplications(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthorizedApplicationsResponse(rsp)
}

// DeleteAuthorizedApplicationsIDWithResponse request returning *DeleteAuthorizedApplicationsIDResponse
func (c *ClientWithResponses) DeleteAuthorizedApplicationsIDWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteAuthorizedApplicationsIDResponse, error) {
	rsp, err := c.DeleteAuthorizedApplicationsID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthorizedApplicationsIDResponse(rsp)
}

// PostCommentsWithBodyWithResponse request with arbitrary body returning *PostCommentsResponse
func (c *ClientWithResponses) PostCommentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCommentsResponse, error) {
	rsp, err := c.PostCommentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCommentsResponse(rsp)
}

func (c *ClientWithResponses) PostCommentsWithResponse(ctx context.Context, body PostCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCommentsResponse, error) {
	rsp, err := c.PostComments(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCommentsResponse(rsp)
}

// DeleteCommentsUUIDWithResponse request returning *DeleteCommentsUUIDResponse
func (c *ClientWithResponses) DeleteCommentsUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteCommentsUUIDResponse, error) {
	rsp, err := c.DeleteCommentsUUID(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCommentsUUIDResponse(rsp)
}

// PutCommentsUUIDWithBodyWithResponse request with arbitrary body returning *PutCommentsUUIDResponse
func (c *ClientWithResponses) PutCommentsUUIDWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCommentsUUIDResponse, error) {
	rsp, err := c.PutCommentsUUIDWithBody(ctx, uuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCommentsUUIDResponse(rsp)
}

func (c *ClientWithResponses) PutCommentsUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutCommentsUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCommentsUUIDResponse, error) {
	rsp, err := c.PutCommentsUUID(ctx, uuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCommentsUUIDResponse(rsp)
}

// GetControlledTermsWithResponse request returning *GetControlledTermsResponse
func (c *ClientWithResponses) GetControlledTermsWithResponse(ctx context.Context, params *GetControlledTermsParams, reqEditors ...RequestEditorFn) (*GetControlledTermsResponse, error) {
	rsp, err := c.GetControlledTerms(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetControlledTermsResponse(rsp)
}

// GetControlledTermsForTaxonTaxonIDWithResponse request returning *GetControlledTermsForTaxonTaxonIDResponse
func (c *ClientWithResponses) GetControlledTermsForTaxonTaxonIDWithResponse(ctx context.Context, taxonID []string, params *GetControlledTermsForTaxonTaxonIDParams, reqEditors ...RequestEditorFn) (*GetControlledTermsForTaxonTaxonIDResponse, error) {
	rsp, err := c.GetControlledTermsForTaxonTaxonID(ctx, taxonID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetControlledTermsForTaxonTaxonIDResponse(rsp)
}

// PostFlagsWithBodyWithResponse request with arbitrary body returning *PostFlagsResponse
func (c *ClientWithResponses) PostFlagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFlagsResponse, error) {
	rsp, err := c.PostFlagsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFlagsResponse(rsp)
}

func (c *ClientWithResponses) PostFlagsWithResponse(ctx context.Context, body PostFlagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFlagsResponse, error) {
	rsp, err := c.PostFlags(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFlagsResponse(rsp)
}

// DeleteFlagsIDWithResponse request returning *DeleteFlagsIDResponse
func (c *ClientWithResponses) DeleteFlagsIDWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteFlagsIDResponse, error) {
	rsp, err := c.DeleteFlagsID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFlagsIDResponse(rsp)
}

// PutFlagsIDWithBodyWithResponse request with arbitrary body returning *PutFlagsIDResponse
func (c *ClientWithResponses) PutFlagsIDWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFlagsIDResponse, error) {
	rsp, err := c.PutFlagsIDWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFlagsIDResponse(rsp)
}

func (c *ClientWithResponses) PutFlagsIDWithResponse(ctx context.Context, id int, body PutFlagsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFlagsIDResponse, error) {
	rsp, err := c.PutFlagsID(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFlagsIDResponse(rsp)
}

// GetGeomodelIDZoomXYPngWithResponse request returning *GetGeomodelIDZoomXYPngResponse
func (c *ClientWithResponses) GetGeomodelIDZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetGeomodelIDZoomXYPngResponse, error) {
	rsp, err := c.GetGeomodelIDZoomXYPng(ctx, id, zoom, x, y, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGeomodelIDZoomXYPngResponse(rsp)
}

// GetGeomodelComparisonIDZoomXYPngWithResponse request returning *GetGeomodelComparisonIDZoomXYPngResponse
func (c *ClientWithResponses) GetGeomodelComparisonIDZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelComparisonIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetGeomodelComparisonIDZoomXYPngResponse, error) {
	rsp, err := c.GetGeomodelComparisonIDZoomXYPng(ctx, id, zoom, x, y, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGeomodelComparisonIDZoomXYPngResponse(rsp)
}

// GetGeomodelTaxonRangeIDZoomXYPngWithResponse request returning *GetGeomodelTaxonRangeIDZoomXYPngResponse
func (c *ClientWithResponses) GetGeomodelTaxonRangeIDZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelTaxonRangeIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetGeomodelTaxonRangeIDZoomXYPngResponse, error) {
	rsp, err := c.GetGeomodelTaxonRangeIDZoomXYPng(ctx, id, zoom, x, y, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGeomodelTaxonRangeIDZoomXYPngResponse(rsp)
}

// GetGridZoomXYGridJSONWithResponse request returning *GetGridZoomXYGridJSONResponse
func (c *ClientWithResponses) GetGridZoomXYGridJSONWithResponse(ctx context.Context, zoom int, x int, y int, params *GetGridZoomXYGridJSONParams, reqEditors ...RequestEditorFn) (*GetGridZoomXYGridJSONResponse, error) {
	rsp, err := c.GetGridZoomXYGridJSON(ctx, zoom, x, y, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGridZoomXYGridJSONResponse(rsp)
}

// GetGridZoomXYPngWithResponse request returning *GetGridZoomXYPngResponse
func (c *ClientWithResponses) GetGridZoomXYPngWithResponse(ctx context.Context, zoom int, x int, y int, params *GetGridZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetGridZoomXYPngResponse, error) {
	rsp, err := c.GetGridZoomXYPng(ctx, zoom, x, y, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGridZoomXYPngResponse(rsp)
}

// GetHeatmapZoomXYPngWithResponse request returning *GetHeatmapZoomXYPngResponse
func (c *ClientWithResponses) GetHeatmapZoomXYPngWithResponse(ctx context.Context, zoom int, x int, y int, params *GetHeatmapZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetHeatmapZoomXYPngResponse, error) {
	rsp, err := c.GetHeatmapZoomXYPng(ctx, zoom, x, y, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHeatmapZoomXYPngResponse(rsp)
}

// PostIdentificationsWithBodyWithResponse request with arbitrary body returning *PostIdentificationsResponse
func (c *ClientWithResponses) PostIdentificationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIdentificationsResponse, error) {
	rsp, err := c.PostIdentificationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdentificationsResponse(rsp)
}

func (c *ClientWithResponses) PostIdentificationsWithResponse(ctx context.Context, body PostIdentificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIdentificationsResponse, error) {
	rsp, err := c.PostIdentifications(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdentificationsResponse(rsp)
}

// GetIdentificationsIdentifiersWithResponse request returning *GetIdentificationsIdentifiersResponse
func (c *ClientWithResponses) GetIdentificationsIdentifiersWithResponse(ctx context.Context, params *GetIdentificationsIdentifiersParams, reqEditors ...RequestEditorFn) (*GetIdentificationsIdentifiersResponse, error) {
	rsp, err := c.GetIdentificationsIdentifiers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdentificationsIdentifiersResponse(rsp)
}

// GetIdentificationsRecentTaxaWithResponse request returning *GetIdentificationsRecentTaxaResponse
func (c *ClientWithResponses) GetIdentificationsRecentTaxaWithResponse(ctx context.Context, params *GetIdentificationsRecentTaxaParams, reqEditors ...RequestEditorFn) (*GetIdentificationsRecentTaxaResponse, error) {
	rsp, err := c.GetIdentificationsRecentTaxa(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdentificationsRecentTaxaResponse(rsp)
}

// GetIdentificationsSimilarSpeciesWithResponse request returning *GetIdentificationsSimilarSpeciesResponse
func (c *ClientWithResponses) GetIdentificationsSimilarSpeciesWithResponse(ctx context.Context, params *GetIdentificationsSimilarSpeciesParams, reqEditors ...RequestEditorFn) (*GetIdentificationsSimilarSpeciesResponse, error) {
	rsp, err := c.GetIdentificationsSimilarSpecies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdentificationsSimilarSpeciesResponse(rsp)
}

// DeleteIdentificationsUUIDWithResponse request returning *DeleteIdentificationsUUIDResponse
func (c *ClientWithResponses) DeleteIdentificationsUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteIdentificationsUUIDResponse, error) {
	rsp, err := c.DeleteIdentificationsUUID(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdentificationsUUIDResponse(rsp)
}

// PutIdentificationsUUIDWithBodyWithResponse request with arbitrary body returning *PutIdentificationsUUIDResponse
func (c *ClientWithResponses) PutIdentificationsUUIDWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIdentificationsUUIDResponse, error) {
	rsp, err := c.PutIdentificationsUUIDWithBody(ctx, uuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIdentificationsUUIDResponse(rsp)
}

func (c *ClientWithResponses) PutIdentificationsUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutIdentificationsUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIdentificationsUUIDResponse, error) {
	rsp, err := c.PutIdentificationsUUID(ctx, uuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIdentificationsUUIDResponse(rsp)
}

// GetMessagesWithResponse request returning *GetMessagesResponse
func (c *ClientWithResponses) GetMessagesWithResponse(ctx context.Context, params *GetMessagesParams, reqEditors ...RequestEditorFn) (*GetMessagesResponse, error) {
	rsp, err := c.GetMessages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessagesResponse(rsp)
}

// PostMessagesWithBodyWithResponse request with arbitrary body returning *PostMessagesResponse
func (c *ClientWithResponses) PostMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMessagesResponse, error) {
	rsp, err := c.PostMessagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMessagesResponse(rsp)
}

func (c *ClientWithResponses) PostMessagesWithResponse(ctx context.Context, body PostMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMessagesResponse, error) {
	rsp, err := c.PostMessages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMessagesResponse(rsp)
}

// GetMessagesIDWithResponse request returning *GetMessagesIDResponse
func (c *ClientWithResponses) GetMessagesIDWithResponse(ctx context.Context, id int, params *GetMessagesIDParams, reqEditors ...RequestEditorFn) (*GetMessagesIDResponse, error) {
	rsp, err := c.GetMessagesID(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessagesIDResponse(rsp)
}

// PostObservationFieldValuesWithBodyWithResponse request with arbitrary body returning *PostObservationFieldValuesResponse
func (c *ClientWithResponses) PostObservationFieldValuesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObservationFieldValuesResponse, error) {
	rsp, err := c.PostObservationFieldValuesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObservationFieldValuesResponse(rsp)
}

func (c *ClientWithResponses) PostObservationFieldValuesWithResponse(ctx context.Context, body PostObservationFieldValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObservationFieldValuesResponse, error) {
	rsp, err := c.PostObservationFieldValues(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObservationFieldValuesResponse(rsp)
}

// DeleteObservationFieldValuesUUIDWithResponse request returning *DeleteObservationFieldValuesUUIDResponse
func (c *ClientWithResponses) DeleteObservationFieldValuesUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationFieldValuesUUIDResponse, error) {
	rsp, err := c.DeleteObservationFieldValuesUUID(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObservationFieldValuesUUIDResponse(rsp)
}

// PutObservationFieldValuesUUIDWithBodyWithResponse request with arbitrary body returning *PutObservationFieldValuesUUIDResponse
func (c *ClientWithResponses) PutObservationFieldValuesUUIDWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObservationFieldValuesUUIDResponse, error) {
	rsp, err := c.PutObservationFieldValuesUUIDWithBody(ctx, uuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObservationFieldValuesUUIDResponse(rsp)
}

func (c *ClientWithResponses) PutObservationFieldValuesUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutObservationFieldValuesUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObservationFieldValuesUUIDResponse, error) {
	rsp, err := c.PutObservationFieldValuesUUID(ctx, uuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObservationFieldValuesUUIDResponse(rsp)
}

// PostObservationPhotosWithBodyWithResponse request with arbitrary body returning *PostObservationPhotosResponse
func (c *ClientWithResponses) PostObservationPhotosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObservationPhotosResponse, error) {
	rsp, err := c.PostObservationPhotosWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObservationPhotosResponse(rsp)
}

func (c *ClientWithResponses) PostObservationPhotosWithResponse(ctx context.Context, body PostObservationPhotosJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObservationPhotosResponse, error) {
	rsp, err := c.PostObservationPhotos(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObservationPhotosResponse(rsp)
}

// DeleteObservationPhotosUUIDWithResponse request returning *DeleteObservationPhotosUUIDResponse
func (c *ClientWithResponses) DeleteObservationPhotosUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationPhotosUUIDResponse, error) {
	rsp, err := c.DeleteObservationPhotosUUID(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObservationPhotosUUIDResponse(rsp)
}

// PutObservationPhotosUUIDWithBodyWithResponse request with arbitrary body returning *PutObservationPhotosUUIDResponse
func (c *ClientWithResponses) PutObservationPhotosUUIDWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObservationPhotosUUIDResponse, error) {
	rsp, err := c.PutObservationPhotosUUIDWithBody(ctx, uuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObservationPhotosUUIDResponse(rsp)
}

func (c *ClientWithResponses) PutObservationPhotosUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutObservationPhotosUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObservationPhotosUUIDResponse, error) {
	rsp, err := c.PutObservationPhotosUUID(ctx, uuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObservationPhotosUUIDResponse(rsp)
}

// PostObservationSoundsWithBodyWithResponse request with arbitrary body returning *PostObservationSoundsResponse
func (c *ClientWithResponses) PostObservationSoundsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObservationSoundsResponse, error) {
	rsp, err := c.PostObservationSoundsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObservationSoundsResponse(rsp)
}

func (c *ClientWithResponses) PostObservationSoundsWithResponse(ctx context.Context, body PostObservationSoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObservationSoundsResponse, error) {
	rsp, err := c.PostObservationSounds(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObservationSoundsResponse(rsp)
}

// DeleteObservationSoundsUUIDWithResponse request returning *DeleteObservationSoundsUUIDResponse
func (c *ClientWithResponses) DeleteObservationSoundsUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationSoundsUUIDResponse, error) {
	rsp, err := c.DeleteObservationSoundsUUID(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObservationSoundsUUIDResponse(rsp)
}

// PutObservationSoundsUUIDWithBodyWithResponse request with arbitrary body returning *PutObservationSoundsUUIDResponse
func (c *ClientWithResponses) PutObservationSoundsUUIDWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObservationSoundsUUIDResponse, error) {
	rsp, err := c.PutObservationSoundsUUIDWithBody(ctx, uuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObservationSoundsUUIDResponse(rsp)
}

func (c *ClientWithResponses) PutObservationSoundsUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutObservationSoundsUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObservationSoundsUUIDResponse, error) {
	rsp, err := c.PutObservationSoundsUUID(ctx, uuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObservationSoundsUUIDResponse(rsp)
}

// GetObservationsWithResponse request returning *GetObservationsResponse
func (c *ClientWithResponses) GetObservationsWithResponse(ctx context.Context, params *GetObservationsParams, reqEditors ...RequestEditorFn) (*GetObservationsResponse, error) {
	rsp, err := c.GetObservations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsResponse(rsp)
}

// PostObservationsWithBodyWithResponse request with arbitrary body returning *PostObservationsResponse
func (c *ClientWithResponses) PostObservationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObservationsResponse, error) {
	rsp, err := c.PostObservationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObservationsResponse(rsp)
}

func (c *ClientWithResponses) PostObservationsWithResponse(ctx context.Context, body PostObservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObservationsResponse, error) {
	rsp, err := c.PostObservations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObservationsResponse(rsp)
}

// GetObservationsDeletedWithResponse request returning *GetObservationsDeletedResponse
func (c *ClientWithResponses) GetObservationsDeletedWithResponse(ctx context.Context, params *GetObservationsDeletedParams, reqEditors ...RequestEditorFn) (*GetObservationsDeletedResponse, error) {
	rsp, err := c.GetObservationsDeleted(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsDeletedResponse(rsp)
}

// GetObservationsHistogramWithResponse request returning *GetObservationsHistogramResponse
func (c *ClientWithResponses) GetObservationsHistogramWithResponse(ctx context.Context, params *GetObservationsHistogramParams, reqEditors ...RequestEditorFn) (*GetObservationsHistogramResponse, error) {
	rsp, err := c.GetObservationsHistogram(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsHistogramResponse(rsp)
}

// GetObservationsIconicTaxaSpeciesCountsWithResponse request returning *GetObservationsIconicTaxaSpeciesCountsResponse
func (c *ClientWithResponses) GetObservationsIconicTaxaSpeciesCountsWithResponse(ctx context.Context, params *GetObservationsIconicTaxaSpeciesCountsParams, reqEditors ...RequestEditorFn) (*GetObservationsIconicTaxaSpeciesCountsResponse, error) {
	rsp, err := c.GetObservationsIconicTaxaSpeciesCounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsIconicTaxaSpeciesCountsResponse(rsp)
}

// GetObservationsIdentificationCategoriesWithResponse request returning *GetObservationsIdentificationCategoriesResponse
func (c *ClientWithResponses) GetObservationsIdentificationCategoriesWithResponse(ctx context.Context, params *GetObservationsIdentificationCategoriesParams, reqEditors ...RequestEditorFn) (*GetObservationsIdentificationCategoriesResponse, error) {
	rsp, err := c.GetObservationsIdentificationCategories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsIdentificationCategoriesResponse(rsp)
}

// GetObservationsIdentifiersWithResponse request returning *GetObservationsIdentifiersResponse
func (c *ClientWithResponses) GetObservationsIdentifiersWithResponse(ctx context.Context, params *GetObservationsIdentifiersParams, reqEditors ...RequestEditorFn) (*GetObservationsIdentifiersResponse, error) {
	rsp, err := c.GetObservationsIdentifiers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsIdentifiersResponse(rsp)
}

// GetObservationsObserversWithResponse request returning *GetObservationsObserversResponse
func (c *ClientWithResponses) GetObservationsObserversWithResponse(ctx context.Context, params *GetObservationsObserversParams, reqEditors ...RequestEditorFn) (*GetObservationsObserversResponse, error) {
	rsp, err := c.GetObservationsObservers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsObserversResponse(rsp)
}

// GetObservationsPopularFieldValuesWithResponse request returning *GetObservationsPopularFieldValuesResponse
func (c *ClientWithResponses) GetObservationsPopularFieldValuesWithResponse(ctx context.Context, params *GetObservationsPopularFieldValuesParams, reqEditors ...RequestEditorFn) (*GetObservationsPopularFieldValuesResponse, error) {
	rsp, err := c.GetObservationsPopularFieldValues(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsPopularFieldValuesResponse(rsp)
}

// GetObservationsQualityGradesWithResponse request returning *GetObservationsQualityGradesResponse
func (c *ClientWithResponses) GetObservationsQualityGradesWithResponse(ctx context.Context, params *GetObservationsQualityGradesParams, reqEditors ...RequestEditorFn) (*GetObservationsQualityGradesResponse, error) {
	rsp, err := c.GetObservationsQualityGrades(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsQualityGradesResponse(rsp)
}

// GetObservationsSpeciesCountsWithResponse request returning *GetObservationsSpeciesCountsResponse
func (c *ClientWithResponses) GetObservationsSpeciesCountsWithResponse(ctx context.Context, params *GetObservationsSpeciesCountsParams, reqEditors ...RequestEditorFn) (*GetObservationsSpeciesCountsResponse, error) {
	rsp, err := c.GetObservationsSpeciesCounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsSpeciesCountsResponse(rsp)
}

// GetObservationsUmbrellaProjectStatsWithResponse request returning *GetObservationsUmbrellaProjectStatsResponse
func (c *ClientWithResponses) GetObservationsUmbrellaProjectStatsWithResponse(ctx context.Context, params *GetObservationsUmbrellaProjectStatsParams, reqEditors ...RequestEditorFn) (*GetObservationsUmbrellaProjectStatsResponse, error) {
	rsp, err := c.GetObservationsUmbrellaProjectStats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsUmbrellaProjectStatsResponse(rsp)
}

// GetObservationsUpdatesWithResponse request returning *GetObservationsUpdatesResponse
func (c *ClientWithResponses) GetObservationsUpdatesWithResponse(ctx context.Context, params *GetObservationsUpdatesParams, reqEditors ...RequestEditorFn) (*GetObservationsUpdatesResponse, error) {
	rsp, err := c.GetObservationsUpdates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsUpdatesResponse(rsp)
}

// DeleteObservationsUUIDWithResponse request returning *DeleteObservationsUUIDResponse
func (c *ClientWithResponses) DeleteObservationsUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationsUUIDResponse, error) {
	rsp, err := c.DeleteObservationsUUID(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObservationsUUIDResponse(rsp)
}

// GetObservationsUUIDWithResponse request returning *GetObservationsUUIDResponse
func (c *ClientWithResponses) GetObservationsUUIDWithResponse(ctx context.Context, uuid []openapi_types.UUID, params *GetObservationsUUIDParams, reqEditors ...RequestEditorFn) (*GetObservationsUUIDResponse, error) {
	rsp, err := c.GetObservationsUUID(ctx, uuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsUUIDResponse(rsp)
}

// PutObservationsUUIDWithBodyWithResponse request with arbitrary body returning *PutObservationsUUIDResponse
func (c *ClientWithResponses) PutObservationsUUIDWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObservationsUUIDResponse, error) {
	rsp, err := c.PutObservationsUUIDWithBody(ctx, uuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObservationsUUIDResponse(rsp)
}

func (c *ClientWithResponses) PutObservationsUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutObservationsUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObservationsUUIDResponse, error) {
	rsp, err := c.PutObservationsUUID(ctx, uuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObservationsUUIDResponse(rsp)
}

// DeleteObservationsUUIDFaveWithResponse request returning *DeleteObservationsUUIDFaveResponse
func (c *ClientWithResponses) DeleteObservationsUUIDFaveWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationsUUIDFaveResponse, error) {
	rsp, err := c.DeleteObservationsUUIDFave(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObservationsUUIDFaveResponse(rsp)
}

// PostObservationsUUIDFaveWithResponse request returning *PostObservationsUUIDFaveResponse
func (c *ClientWithResponses) PostObservationsUUIDFaveWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostObservationsUUIDFaveResponse, error) {
	rsp, err := c.PostObservationsUUIDFave(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObservationsUUIDFaveResponse(rsp)
}

// DeleteObservationsUUIDQualityMetricWithResponse request returning *DeleteObservationsUUIDQualityMetricResponse
func (c *ClientWithResponses) DeleteObservationsUUIDQualityMetricWithResponse(ctx context.Context, uuid []openapi_types.UUID, metric DeleteObservationsUUIDQualityMetricParamsMetric, reqEditors ...RequestEditorFn) (*DeleteObservationsUUIDQualityMetricResponse, error) {
	rsp, err := c.DeleteObservationsUUIDQualityMetric(ctx, uuid, metric, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObservationsUUIDQualityMetricResponse(rsp)
}

// PostObservationsUUIDQualityMetricWithResponse request returning *PostObservationsUUIDQualityMetricResponse
func (c *ClientWithResponses) PostObservationsUUIDQualityMetricWithResponse(ctx context.Context, uuid []openapi_types.UUID, metric PostObservationsUUIDQualityMetricParamsMetric, params *PostObservationsUUIDQualityMetricParams, reqEditors ...RequestEditorFn) (*PostObservationsUUIDQualityMetricResponse, error) {
	rsp, err := c.PostObservationsUUIDQualityMetric(ctx, uuid, metric, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObservationsUUIDQualityMetricResponse(rsp)
}

// GetObservationsUUIDQualityMetricsWithResponse request returning *GetObservationsUUIDQualityMetricsResponse
func (c *ClientWithResponses) GetObservationsUUIDQualityMetricsWithResponse(ctx context.Context, uuid []openapi_types.UUID, params *GetObservationsUUIDQualityMetricsParams, reqEditors ...RequestEditorFn) (*GetObservationsUUIDQualityMetricsResponse, error) {
	rsp, err := c.GetObservationsUUIDQualityMetrics(ctx, uuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsUUIDQualityMetricsResponse(rsp)
}

// DeleteObservationsUUIDReviewWithResponse request returning *DeleteObservationsUUIDReviewResponse
func (c *ClientWithResponses) DeleteObservationsUUIDReviewWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationsUUIDReviewResponse, error) {
	rsp, err := c.DeleteObservationsUUIDReview(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObservationsUUIDReviewResponse(rsp)
}

// PostObservationsUUIDReviewWithResponse request returning *PostObservationsUUIDReviewResponse
func (c *ClientWithResponses) PostObservationsUUIDReviewWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostObservationsUUIDReviewResponse, error) {
	rsp, err := c.PostObservationsUUIDReview(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObservationsUUIDReviewResponse(rsp)
}

// PutObservationsUUIDSubscriptionWithResponse request returning *PutObservationsUUIDSubscriptionResponse
func (c *ClientWithResponses) PutObservationsUUIDSubscriptionWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*PutObservationsUUIDSubscriptionResponse, error) {
	rsp, err := c.PutObservationsUUIDSubscription(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObservationsUUIDSubscriptionResponse(rsp)
}

// GetObservationsUUIDSubscriptionsWithResponse request returning *GetObservationsUUIDSubscriptionsResponse
func (c *ClientWithResponses) GetObservationsUUIDSubscriptionsWithResponse(ctx context.Context, uuid openapi_types.UUID, params *GetObservationsUUIDSubscriptionsParams, reqEditors ...RequestEditorFn) (*GetObservationsUUIDSubscriptionsResponse, error) {
	rsp, err := c.GetObservationsUUIDSubscriptions(ctx, uuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsUUIDSubscriptionsResponse(rsp)
}

// GetObservationsUUIDTaxonSummaryWithResponse request returning *GetObservationsUUIDTaxonSummaryResponse
func (c *ClientWithResponses) GetObservationsUUIDTaxonSummaryWithResponse(ctx context.Context, uuid openapi_types.UUID, params *GetObservationsUUIDTaxonSummaryParams, reqEditors ...RequestEditorFn) (*GetObservationsUUIDTaxonSummaryResponse, error) {
	rsp, err := c.GetObservationsUUIDTaxonSummary(ctx, uuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsUUIDTaxonSummaryResponse(rsp)
}

// PutObservationsUUIDViewedUpdatesWithResponse request returning *PutObservationsUUIDViewedUpdatesResponse
func (c *ClientWithResponses) PutObservationsUUIDViewedUpdatesWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*PutObservationsUUIDViewedUpdatesResponse, error) {
	rsp, err := c.PutObservationsUUIDViewedUpdates(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObservationsUUIDViewedUpdatesResponse(rsp)
}

// PostPhotosWithBodyWithResponse request with arbitrary body returning *PostPhotosResponse
func (c *ClientWithResponses) PostPhotosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPhotosResponse, error) {
	rsp, err := c.PostPhotosWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPhotosResponse(rsp)
}

// PutPhotosIDWithResponse request returning *PutPhotosIDResponse
func (c *ClientWithResponses) PutPhotosIDWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PutPhotosIDResponse, error) {
	rsp, err := c.PutPhotosID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPhotosIDResponse(rsp)
}

// GetPlacesWithResponse request returning *GetPlacesResponse
func (c *ClientWithResponses) GetPlacesWithResponse(ctx context.Context, params *GetPlacesParams, reqEditors ...RequestEditorFn) (*GetPlacesResponse, error) {
	rsp, err := c.GetPlaces(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacesResponse(rsp)
}

// GetPlacesNearbyWithResponse request returning *GetPlacesNearbyResponse
func (c *ClientWithResponses) GetPlacesNearbyWithResponse(ctx context.Context, params *GetPlacesNearbyParams, reqEditors ...RequestEditorFn) (*GetPlacesNearbyResponse, error) {
	rsp, err := c.GetPlacesNearby(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacesNearbyResponse(rsp)
}

// GetPlacesIDZoomXYPngWithResponse request returning *GetPlacesIDZoomXYPngResponse
func (c *ClientWithResponses) GetPlacesIDZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetPlacesIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetPlacesIDZoomXYPngResponse, error) {
	rsp, err := c.GetPlacesIDZoomXYPng(ctx, id, zoom, x, y, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacesIDZoomXYPngResponse(rsp)
}

// GetPlacesUUIDWithResponse request returning *GetPlacesUUIDResponse
func (c *ClientWithResponses) GetPlacesUUIDWithResponse(ctx context.Context, uuid []string, params *GetPlacesUUIDParams, reqEditors ...RequestEditorFn) (*GetPlacesUUIDResponse, error) {
	rsp, err := c.GetPlacesUUID(ctx, uuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacesUUIDResponse(rsp)
}

// GetPointsZoomXYGridJSONWithResponse request returning *GetPointsZoomXYGridJSONResponse
func (c *ClientWithResponses) GetPointsZoomXYGridJSONWithResponse(ctx context.Context, zoom int, x int, y int, params *GetPointsZoomXYGridJSONParams, reqEditors ...RequestEditorFn) (*GetPointsZoomXYGridJSONResponse, error) {
	rsp, err := c.GetPointsZoomXYGridJSON(ctx, zoom, x, y, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPointsZoomXYGridJSONResponse(rsp)
}

// GetPointsZoomXYPngWithResponse request returning *GetPointsZoomXYPngResponse
func (c *ClientWithResponses) GetPointsZoomXYPngWithResponse(ctx context.Context, zoom int, x int, y int, params *GetPointsZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetPointsZoomXYPngResponse, error) {
	rsp, err := c.GetPointsZoomXYPng(ctx, zoom, x, y, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPointsZoomXYPngResponse(rsp)
}

// PostProjectObservationsWithBodyWithResponse request with arbitrary body returning *PostProjectObservationsResponse
func (c *ClientWithResponses) PostProjectObservationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectObservationsResponse, error) {
	rsp, err := c.PostProjectObservationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectObservationsResponse(rsp)
}

func (c *ClientWithResponses) PostProjectObservationsWithResponse(ctx context.Context, body PostProjectObservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectObservationsResponse, error) {
	rsp, err := c.PostProjectObservations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectObservationsResponse(rsp)
}

// DeleteProjectObservationsUUIDWithResponse request returning *DeleteProjectObservationsUUIDResponse
func (c *ClientWithResponses) DeleteProjectObservationsUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteProjectObservationsUUIDResponse, error) {
	rsp, err := c.DeleteProjectObservationsUUID(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectObservationsUUIDResponse(rsp)
}

// PutProjectObservationsUUIDWithBodyWithResponse request with arbitrary body returning *PutProjectObservationsUUIDResponse
func (c *ClientWithResponses) PutProjectObservationsUUIDWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProjectObservationsUUIDResponse, error) {
	rsp, err := c.PutProjectObservationsUUIDWithBody(ctx, uuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProjectObservationsUUIDResponse(rsp)
}

func (c *ClientWithResponses) PutProjectObservationsUUIDWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutProjectObservationsUUIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProjectObservationsUUIDResponse, error) {
	rsp, err := c.PutProjectObservationsUUID(ctx, uuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProjectObservationsUUIDResponse(rsp)
}

// PutProjectUsersIDWithBodyWithResponse request with arbitrary body returning *PutProjectUsersIDResponse
func (c *ClientWithResponses) PutProjectUsersIDWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProjectUsersIDResponse, error) {
	rsp, err := c.PutProjectUsersIDWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProjectUsersIDResponse(rsp)
}

func (c *ClientWithResponses) PutProjectUsersIDWithResponse(ctx context.Context, id string, body PutProjectUsersIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProjectUsersIDResponse, error) {
	rsp, err := c.PutProjectUsersID(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProjectUsersIDResponse(rsp)
}

// GetProjectsWithResponse request returning *GetProjectsResponse
func (c *ClientWithResponses) GetProjectsWithResponse(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error) {
	rsp, err := c.GetProjects(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsResponse(rsp)
}

// GetProjectsIDWithResponse request returning *GetProjectsIDResponse
func (c *ClientWithResponses) GetProjectsIDWithResponse(ctx context.Context, id []int, params *GetProjectsIDParams, reqEditors ...RequestEditorFn) (*GetProjectsIDResponse, error) {
	rsp, err := c.GetProjectsID(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsIDResponse(rsp)
}

// GetProjectsIDMembersWithResponse request returning *GetProjectsIDMembersResponse
func (c *ClientWithResponses) GetProjectsIDMembersWithResponse(ctx context.Context, id int, params *GetProjectsIDMembersParams, reqEditors ...RequestEditorFn) (*GetProjectsIDMembersResponse, error) {
	rsp, err := c.GetProjectsIDMembers(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsIDMembersResponse(rsp)
}

// DeleteProjectsIDMembershipWithResponse request returning *DeleteProjectsIDMembershipResponse
func (c *ClientWithResponses) DeleteProjectsIDMembershipWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteProjectsIDMembershipResponse, error) {
	rsp, err := c.DeleteProjectsIDMembership(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectsIDMembershipResponse(rsp)
}

// GetProjectsIDMembershipWithResponse request returning *GetProjectsIDMembershipResponse
func (c *ClientWithResponses) GetProjectsIDMembershipWithResponse(ctx context.Context, id []int, params *GetProjectsIDMembershipParams, reqEditors ...RequestEditorFn) (*GetProjectsIDMembershipResponse, error) {
	rsp, err := c.GetProjectsIDMembership(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsIDMembershipResponse(rsp)
}

// PostProjectsIDMembershipWithResponse request returning *PostProjectsIDMembershipResponse
func (c *ClientWithResponses) PostProjectsIDMembershipWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostProjectsIDMembershipResponse, error) {
	rsp, err := c.PostProjectsIDMembership(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsIDMembershipResponse(rsp)
}

// GetProjectsIDPostsWithResponse request returning *GetProjectsIDPostsResponse
func (c *ClientWithResponses) GetProjectsIDPostsWithResponse(ctx context.Context, id []int, params *GetProjectsIDPostsParams, reqEditors ...RequestEditorFn) (*GetProjectsIDPostsResponse, error) {
	rsp, err := c.GetProjectsIDPosts(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsIDPostsResponse(rsp)
}

// GetProviderAuthorizationsWithResponse request returning *GetProviderAuthorizationsResponse
func (c *ClientWithResponses) GetProviderAuthorizationsWithResponse(ctx context.Context, params *GetProviderAuthorizationsParams, reqEditors ...RequestEditorFn) (*GetProviderAuthorizationsResponse, error) {
	rsp, err := c.GetProviderAuthorizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProviderAuthorizationsResponse(rsp)
}

// DeleteProviderAuthorizationsIDWithResponse request returning *DeleteProviderAuthorizationsIDResponse
func (c *ClientWithResponses) DeleteProviderAuthorizationsIDWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteProviderAuthorizationsIDResponse, error) {
	rsp, err := c.DeleteProviderAuthorizationsID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProviderAuthorizationsIDResponse(rsp)
}

// GetRelationshipsWithResponse request returning *GetRelationshipsResponse
func (c *ClientWithResponses) GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error) {
	rsp, err := c.GetRelationships(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsResponse(rsp)
}

// PostRelationshipsWithBodyWithResponse request with arbitrary body returning *PostRelationshipsResponse
func (c *ClientWithResponses) PostRelationshipsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRelationshipsResponse, error) {
	rsp, err := c.PostRelationshipsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRelationshipsResponse(rsp)
}

func (c *ClientWithResponses) PostRelationshipsWithResponse(ctx context.Context, body PostRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRelationshipsResponse, error) {
	rsp, err := c.PostRelationships(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRelationshipsResponse(rsp)
}

// DeleteRelationshipsIDWithResponse request returning *DeleteRelationshipsIDResponse
func (c *ClientWithResponses) DeleteRelationshipsIDWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteRelationshipsIDResponse, error) {
	rsp, err := c.DeleteRelationshipsID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRelationshipsIDResponse(rsp)
}

// PutRelationshipsIDWithBodyWithResponse request with arbitrary body returning *PutRelationshipsIDResponse
func (c *ClientWithResponses) PutRelationshipsIDWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRelationshipsIDResponse, error) {
	rsp, err := c.PutRelationshipsIDWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRelationshipsIDResponse(rsp)
}

func (c *ClientWithResponses) PutRelationshipsIDWithResponse(ctx context.Context, id int, body PutRelationshipsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRelationshipsIDResponse, error) {
	rsp, err := c.PutRelationshipsID(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRelationshipsIDResponse(rsp)
}

// GetSavedLocationsWithResponse request returning *GetSavedLocationsResponse
func (c *ClientWithResponses) GetSavedLocationsWithResponse(ctx context.Context, params *GetSavedLocationsParams, reqEditors ...RequestEditorFn) (*GetSavedLocationsResponse, error) {
	rsp, err := c.GetSavedLocations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSavedLocationsResponse(rsp)
}

// PostSavedLocationsWithBodyWithResponse request with arbitrary body returning *PostSavedLocationsResponse
func (c *ClientWithResponses) PostSavedLocationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSavedLocationsResponse, error) {
	rsp, err := c.PostSavedLocationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSavedLocationsResponse(rsp)
}

func (c *ClientWithResponses) PostSavedLocationsWithResponse(ctx context.Context, body PostSavedLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSavedLocationsResponse, error) {
	rsp, err := c.PostSavedLocations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSavedLocationsResponse(rsp)
}

// DeleteSavedLocationsIDWithResponse request returning *DeleteSavedLocationsIDResponse
func (c *ClientWithResponses) DeleteSavedLocationsIDWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteSavedLocationsIDResponse, error) {
	rsp, err := c.DeleteSavedLocationsID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSavedLocationsIDResponse(rsp)
}

// GetSearchWithResponse request returning *GetSearchResponse
func (c *ClientWithResponses) GetSearchWithResponse(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*GetSearchResponse, error) {
	rsp, err := c.GetSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchResponse(rsp)
}

// GetSitesWithResponse request returning *GetSitesResponse
func (c *ClientWithResponses) GetSitesWithResponse(ctx context.Context, params *GetSitesParams, reqEditors ...RequestEditorFn) (*GetSitesResponse, error) {
	rsp, err := c.GetSites(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSitesResponse(rsp)
}

// PostSoundsWithBodyWithResponse request with arbitrary body returning *PostSoundsResponse
func (c *ClientWithResponses) PostSoundsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSoundsResponse, error) {
	rsp, err := c.PostSoundsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSoundsResponse(rsp)
}

// GetTaxaWithResponse request returning *GetTaxaResponse
func (c *ClientWithResponses) GetTaxaWithResponse(ctx context.Context, params *GetTaxaParams, reqEditors ...RequestEditorFn) (*GetTaxaResponse, error) {
	rsp, err := c.GetTaxa(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxaResponse(rsp)
}

// GetTaxaAutocompleteWithResponse request returning *GetTaxaAutocompleteResponse
func (c *ClientWithResponses) GetTaxaAutocompleteWithResponse(ctx context.Context, params *GetTaxaAutocompleteParams, reqEditors ...RequestEditorFn) (*GetTaxaAutocompleteResponse, error) {
	rsp, err := c.GetTaxaAutocomplete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxaAutocompleteResponse(rsp)
}

// GetTaxaIconicWithResponse request returning *GetTaxaIconicResponse
func (c *ClientWithResponses) GetTaxaIconicWithResponse(ctx context.Context, params *GetTaxaIconicParams, reqEditors ...RequestEditorFn) (*GetTaxaIconicResponse, error) {
	rsp, err := c.GetTaxaIconic(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxaIconicResponse(rsp)
}

// GetTaxaSuggestWithResponse request returning *GetTaxaSuggestResponse
func (c *ClientWithResponses) GetTaxaSuggestWithResponse(ctx context.Context, params *GetTaxaSuggestParams, reqEditors ...RequestEditorFn) (*GetTaxaSuggestResponse, error) {
	rsp, err := c.GetTaxaSuggest(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxaSuggestResponse(rsp)
}

// PostTaxaSuggestWithBodyWithResponse request with arbitrary body returning *PostTaxaSuggestResponse
func (c *ClientWithResponses) PostTaxaSuggestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTaxaSuggestResponse, error) {
	rsp, err := c.PostTaxaSuggestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTaxaSuggestResponse(rsp)
}

// GetTaxaIDWithResponse request returning *GetTaxaIDResponse
func (c *ClientWithResponses) GetTaxaIDWithResponse(ctx context.Context, id []int, params *GetTaxaIDParams, reqEditors ...RequestEditorFn) (*GetTaxaIDResponse, error) {
	rsp, err := c.GetTaxaID(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxaIDResponse(rsp)
}

// GetTaxaIDWantedWithResponse request returning *GetTaxaIDWantedResponse
func (c *ClientWithResponses) GetTaxaIDWantedWithResponse(ctx context.Context, id int, params *GetTaxaIDWantedParams, reqEditors ...RequestEditorFn) (*GetTaxaIDWantedResponse, error) {
	rsp, err := c.GetTaxaIDWanted(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxaIDWantedResponse(rsp)
}

// PostTaxonNamePrioritiesWithBodyWithResponse request with arbitrary body returning *PostTaxonNamePrioritiesResponse
func (c *ClientWithResponses) PostTaxonNamePrioritiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTaxonNamePrioritiesResponse, error) {
	rsp, err := c.PostTaxonNamePrioritiesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTaxonNamePrioritiesResponse(rsp)
}

func (c *ClientWithResponses) PostTaxonNamePrioritiesWithResponse(ctx context.Context, body PostTaxonNamePrioritiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTaxonNamePrioritiesResponse, error) {
	rsp, err := c.PostTaxonNamePriorities(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTaxonNamePrioritiesResponse(rsp)
}

// DeleteTaxonNamePrioritiesIDWithResponse request returning *DeleteTaxonNamePrioritiesIDResponse
func (c *ClientWithResponses) DeleteTaxonNamePrioritiesIDWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteTaxonNamePrioritiesIDResponse, error) {
	rsp, err := c.DeleteTaxonNamePrioritiesID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTaxonNamePrioritiesIDResponse(rsp)
}

// PutTaxonNamePrioritiesIDWithBodyWithResponse request with arbitrary body returning *PutTaxonNamePrioritiesIDResponse
func (c *ClientWithResponses) PutTaxonNamePrioritiesIDWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTaxonNamePrioritiesIDResponse, error) {
	rsp, err := c.PutTaxonNamePrioritiesIDWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTaxonNamePrioritiesIDResponse(rsp)
}

func (c *ClientWithResponses) PutTaxonNamePrioritiesIDWithResponse(ctx context.Context, id int, body PutTaxonNamePrioritiesIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTaxonNamePrioritiesIDResponse, error) {
	rsp, err := c.PutTaxonNamePrioritiesID(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTaxonNamePrioritiesIDResponse(rsp)
}

// GetTaxonPlacesIDZoomXYPngWithResponse request returning *GetTaxonPlacesIDZoomXYPngResponse
func (c *ClientWithResponses) GetTaxonPlacesIDZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetTaxonPlacesIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetTaxonPlacesIDZoomXYPngResponse, error) {
	rsp, err := c.GetTaxonPlacesIDZoomXYPng(ctx, id, zoom, x, y, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxonPlacesIDZoomXYPngResponse(rsp)
}

// GetTaxonRangesIDZoomXYPngWithResponse request returning *GetTaxonRangesIDZoomXYPngResponse
func (c *ClientWithResponses) GetTaxonRangesIDZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetTaxonRangesIDZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetTaxonRangesIDZoomXYPngResponse, error) {
	rsp, err := c.GetTaxonRangesIDZoomXYPng(ctx, id, zoom, x, y, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxonRangesIDZoomXYPngResponse(rsp)
}

// GetTranslationsLocalesWithResponse request returning *GetTranslationsLocalesResponse
func (c *ClientWithResponses) GetTranslationsLocalesWithResponse(ctx context.Context, params *GetTranslationsLocalesParams, reqEditors ...RequestEditorFn) (*GetTranslationsLocalesResponse, error) {
	rsp, err := c.GetTranslationsLocales(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTranslationsLocalesResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// GetUsersAutocompleteWithResponse request returning *GetUsersAutocompleteResponse
func (c *ClientWithResponses) GetUsersAutocompleteWithResponse(ctx context.Context, params *GetUsersAutocompleteParams, reqEditors ...RequestEditorFn) (*GetUsersAutocompleteResponse, error) {
	rsp, err := c.GetUsersAutocomplete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersAutocompleteResponse(rsp)
}

// GetUsersEmailAvailableWithResponse request returning *GetUsersEmailAvailableResponse
func (c *ClientWithResponses) GetUsersEmailAvailableWithResponse(ctx context.Context, params *GetUsersEmailAvailableParams, reqEditors ...RequestEditorFn) (*GetUsersEmailAvailableResponse, error) {
	rsp, err := c.GetUsersEmailAvailable(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersEmailAvailableResponse(rsp)
}

// GetUsersMeWithResponse request returning *GetUsersMeResponse
func (c *ClientWithResponses) GetUsersMeWithResponse(ctx context.Context, params *GetUsersMeParams, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error) {
	rsp, err := c.GetUsersMe(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersMeResponse(rsp)
}

// GetUsersNotificationCountsWithResponse request returning *GetUsersNotificationCountsResponse
func (c *ClientWithResponses) GetUsersNotificationCountsWithResponse(ctx context.Context, params *GetUsersNotificationCountsParams, reqEditors ...RequestEditorFn) (*GetUsersNotificationCountsResponse, error) {
	rsp, err := c.GetUsersNotificationCounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersNotificationCountsResponse(rsp)
}

// GetUsersRecentObservationFieldsWithResponse request returning *GetUsersRecentObservationFieldsResponse
func (c *ClientWithResponses) GetUsersRecentObservationFieldsWithResponse(ctx context.Context, params *GetUsersRecentObservationFieldsParams, reqEditors ...RequestEditorFn) (*GetUsersRecentObservationFieldsResponse, error) {
	rsp, err := c.GetUsersRecentObservationFields(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersRecentObservationFieldsResponse(rsp)
}

// PostUsersResendConfirmationWithResponse request returning *PostUsersResendConfirmationResponse
func (c *ClientWithResponses) PostUsersResendConfirmationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostUsersResendConfirmationResponse, error) {
	rsp, err := c.PostUsersResendConfirmation(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersResendConfirmationResponse(rsp)
}

// PostUsersResetPasswordWithBodyWithResponse request with arbitrary body returning *PostUsersResetPasswordResponse
func (c *ClientWithResponses) PostUsersResetPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersResetPasswordResponse, error) {
	rsp, err := c.PostUsersResetPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersResetPasswordResponse(rsp)
}

func (c *ClientWithResponses) PostUsersResetPasswordWithResponse(ctx context.Context, body PostUsersResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersResetPasswordResponse, error) {
	rsp, err := c.PostUsersResetPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersResetPasswordResponse(rsp)
}

// PutUsersUpdateSessionWithResponse request returning *PutUsersUpdateSessionResponse
func (c *ClientWithResponses) PutUsersUpdateSessionWithResponse(ctx context.Context, params *PutUsersUpdateSessionParams, reqEditors ...RequestEditorFn) (*PutUsersUpdateSessionResponse, error) {
	rsp, err := c.PutUsersUpdateSession(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUsersUpdateSessionResponse(rsp)
}

// GetUsersIDWithResponse request returning *GetUsersIDResponse
func (c *ClientWithResponses) GetUsersIDWithResponse(ctx context.Context, id string, params *GetUsersIDParams, reqEditors ...RequestEditorFn) (*GetUsersIDResponse, error) {
	rsp, err := c.GetUsersID(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersIDResponse(rsp)
}

// PutUsersIDWithBodyWithResponse request with arbitrary body returning *PutUsersIDResponse
func (c *ClientWithResponses) PutUsersIDWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUsersIDResponse, error) {
	rsp, err := c.PutUsersIDWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUsersIDResponse(rsp)
}

func (c *ClientWithResponses) PutUsersIDWithResponse(ctx context.Context, id string, body PutUsersIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUsersIDResponse, error) {
	rsp, err := c.PutUsersID(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUsersIDResponse(rsp)
}

// DeleteUsersIDBlockWithResponse request returning *DeleteUsersIDBlockResponse
func (c *ClientWithResponses) DeleteUsersIDBlockWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteUsersIDBlockResponse, error) {
	rsp, err := c.DeleteUsersIDBlock(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsersIDBlockResponse(rsp)
}

// PostUsersIDBlockWithResponse request returning *PostUsersIDBlockResponse
func (c *ClientWithResponses) PostUsersIDBlockWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostUsersIDBlockResponse, error) {
	rsp, err := c.PostUsersIDBlock(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersIDBlockResponse(rsp)
}

// DeleteUsersIDMuteWithResponse request returning *DeleteUsersIDMuteResponse
func (c *ClientWithResponses) DeleteUsersIDMuteWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteUsersIDMuteResponse, error) {
	rsp, err := c.DeleteUsersIDMute(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsersIDMuteResponse(rsp)
}

// PostUsersIDMuteWithResponse request returning *PostUsersIDMuteResponse
func (c *ClientWithResponses) PostUsersIDMuteWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostUsersIDMuteResponse, error) {
	rsp, err := c.PostUsersIDMute(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersIDMuteResponse(rsp)
}

// GetUsersIDProjectsWithResponse request returning *GetUsersIDProjectsResponse
func (c *ClientWithResponses) GetUsersIDProjectsWithResponse(ctx context.Context, id int, params *GetUsersIDProjectsParams, reqEditors ...RequestEditorFn) (*GetUsersIDProjectsResponse, error) {
	rsp, err := c.GetUsersIDProjects(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersIDProjectsResponse(rsp)
}

// ParsePostAnnotationsResponse parses an HTTP response from a PostAnnotationsWithResponse call
func ParsePostAnnotationsResponse(rsp *http.Response) (*PostAnnotationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAnnotationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsAnnotations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAnnotationsUUIDResponse parses an HTTP response from a DeleteAnnotationsUUIDWithResponse call
func ParseDeleteAnnotationsUUIDResponse(rsp *http.Response) (*DeleteAnnotationsUUIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAnnotationsUUIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAnnotationsUUIDVoteResponse parses an HTTP response from a DeleteAnnotationsUUIDVoteWithResponse call
func ParseDeleteAnnotationsUUIDVoteResponse(rsp *http.Response) (*DeleteAnnotationsUUIDVoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAnnotationsUUIDVoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAnnotationsUUIDVoteResponse parses an HTTP response from a PostAnnotationsUUIDVoteWithResponse call
func ParsePostAnnotationsUUIDVoteResponse(rsp *http.Response) (*PostAnnotationsUUIDVoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAnnotationsUUIDVoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAnnouncementsResponse parses an HTTP response from a GetAnnouncementsWithResponse call
func ParseGetAnnouncementsResponse(rsp *http.Response) (*GetAnnouncementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAnnouncementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsAnnouncements
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAnnouncementsIDDismissResponse parses an HTTP response from a PutAnnouncementsIDDismissWithResponse call
func ParsePutAnnouncementsIDDismissResponse(rsp *http.Response) (*PutAnnouncementsIDDismissResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAnnouncementsIDDismissResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuthorizedApplicationsResponse parses an HTTP response from a GetAuthorizedApplicationsWithResponse call
func ParseGetAuthorizedApplicationsResponse(rsp *http.Response) (*GetAuthorizedApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthorizedApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsAuthorizedApplications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteAuthorizedApplicationsIDResponse parses an HTTP response from a DeleteAuthorizedApplicationsIDWithResponse call
func ParseDeleteAuthorizedApplicationsIDResponse(rsp *http.Response) (*DeleteAuthorizedApplicationsIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAuthorizedApplicationsIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostCommentsResponse parses an HTTP response from a PostCommentsWithResponse call
func ParsePostCommentsResponse(rsp *http.Response) (*PostCommentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCommentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsComments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCommentsUUIDResponse parses an HTTP response from a DeleteCommentsUUIDWithResponse call
func ParseDeleteCommentsUUIDResponse(rsp *http.Response) (*DeleteCommentsUUIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCommentsUUIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutCommentsUUIDResponse parses an HTTP response from a PutCommentsUUIDWithResponse call
func ParsePutCommentsUUIDResponse(rsp *http.Response) (*PutCommentsUUIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCommentsUUIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsComments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetControlledTermsResponse parses an HTTP response from a GetControlledTermsWithResponse call
func ParseGetControlledTermsResponse(rsp *http.Response) (*GetControlledTermsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetControlledTermsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsControlledTerms
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetControlledTermsForTaxonTaxonIDResponse parses an HTTP response from a GetControlledTermsForTaxonTaxonIDWithResponse call
func ParseGetControlledTermsForTaxonTaxonIDResponse(rsp *http.Response) (*GetControlledTermsForTaxonTaxonIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetControlledTermsForTaxonTaxonIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsControlledTerms
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostFlagsResponse parses an HTTP response from a PostFlagsWithResponse call
func ParsePostFlagsResponse(rsp *http.Response) (*PostFlagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFlagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsFlags
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteFlagsIDResponse parses an HTTP response from a DeleteFlagsIDWithResponse call
func ParseDeleteFlagsIDResponse(rsp *http.Response) (*DeleteFlagsIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFlagsIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutFlagsIDResponse parses an HTTP response from a PutFlagsIDWithResponse call
func ParsePutFlagsIDResponse(rsp *http.Response) (*PutFlagsIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFlagsIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsFlags
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGeomodelIDZoomXYPngResponse parses an HTTP response from a GetGeomodelIDZoomXYPngWithResponse call
func ParseGetGeomodelIDZoomXYPngResponse(rsp *http.Response) (*GetGeomodelIDZoomXYPngResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGeomodelIDZoomXYPngResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGeomodelComparisonIDZoomXYPngResponse parses an HTTP response from a GetGeomodelComparisonIDZoomXYPngWithResponse call
func ParseGetGeomodelComparisonIDZoomXYPngResponse(rsp *http.Response) (*GetGeomodelComparisonIDZoomXYPngResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGeomodelComparisonIDZoomXYPngResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGeomodelTaxonRangeIDZoomXYPngResponse parses an HTTP response from a GetGeomodelTaxonRangeIDZoomXYPngWithResponse call
func ParseGetGeomodelTaxonRangeIDZoomXYPngResponse(rsp *http.Response) (*GetGeomodelTaxonRangeIDZoomXYPngResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGeomodelTaxonRangeIDZoomXYPngResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGridZoomXYGridJSONResponse parses an HTTP response from a GetGridZoomXYGridJSONWithResponse call
func ParseGetGridZoomXYGridJSONResponse(rsp *http.Response) (*GetGridZoomXYGridJSONResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGridZoomXYGridJSONResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UtfGrid
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGridZoomXYPngResponse parses an HTTP response from a GetGridZoomXYPngWithResponse call
func ParseGetGridZoomXYPngResponse(rsp *http.Response) (*GetGridZoomXYPngResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGridZoomXYPngResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetHeatmapZoomXYPngResponse parses an HTTP response from a GetHeatmapZoomXYPngWithResponse call
func ParseGetHeatmapZoomXYPngResponse(rsp *http.Response) (*GetHeatmapZoomXYPngResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHeatmapZoomXYPngResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostIdentificationsResponse parses an HTTP response from a PostIdentificationsWithResponse call
func ParsePostIdentificationsResponse(rsp *http.Response) (*PostIdentificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIdentificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsIdentifications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetIdentificationsIdentifiersResponse parses an HTTP response from a GetIdentificationsIdentifiersWithResponse call
func ParseGetIdentificationsIdentifiersResponse(rsp *http.Response) (*GetIdentificationsIdentifiersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdentificationsIdentifiersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsIdentifiers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetIdentificationsRecentTaxaResponse parses an HTTP response from a GetIdentificationsRecentTaxaWithResponse call
func ParseGetIdentificationsRecentTaxaResponse(rsp *http.Response) (*GetIdentificationsRecentTaxaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdentificationsRecentTaxaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsIdentificationsRecentTaxa
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetIdentificationsSimilarSpeciesResponse parses an HTTP response from a GetIdentificationsSimilarSpeciesWithResponse call
func ParseGetIdentificationsSimilarSpeciesResponse(rsp *http.Response) (*GetIdentificationsSimilarSpeciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdentificationsSimilarSpeciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTaxaCounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIdentificationsUUIDResponse parses an HTTP response from a DeleteIdentificationsUUIDWithResponse call
func ParseDeleteIdentificationsUUIDResponse(rsp *http.Response) (*DeleteIdentificationsUUIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdentificationsUUIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutIdentificationsUUIDResponse parses an HTTP response from a PutIdentificationsUUIDWithResponse call
func ParsePutIdentificationsUUIDResponse(rsp *http.Response) (*PutIdentificationsUUIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutIdentificationsUUIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMessagesResponse parses an HTTP response from a GetMessagesWithResponse call
func ParseGetMessagesResponse(rsp *http.Response) (*GetMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsMessages
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostMessagesResponse parses an HTTP response from a PostMessagesWithResponse call
func ParsePostMessagesResponse(rsp *http.Response) (*PostMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsMessages
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetMessagesIDResponse parses an HTTP response from a GetMessagesIDWithResponse call
func ParseGetMessagesIDResponse(rsp *http.Response) (*GetMessagesIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessagesIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsMessagesThread
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostObservationFieldValuesResponse parses an HTTP response from a PostObservationFieldValuesWithResponse call
func ParsePostObservationFieldValuesResponse(rsp *http.Response) (*PostObservationFieldValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObservationFieldValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationFieldValues
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteObservationFieldValuesUUIDResponse parses an HTTP response from a DeleteObservationFieldValuesUUIDWithResponse call
func ParseDeleteObservationFieldValuesUUIDResponse(rsp *http.Response) (*DeleteObservationFieldValuesUUIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObservationFieldValuesUUIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutObservationFieldValuesUUIDResponse parses an HTTP response from a PutObservationFieldValuesUUIDWithResponse call
func ParsePutObservationFieldValuesUUIDResponse(rsp *http.Response) (*PutObservationFieldValuesUUIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutObservationFieldValuesUUIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationFieldValues
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostObservationPhotosResponse parses an HTTP response from a PostObservationPhotosWithResponse call
func ParsePostObservationPhotosResponse(rsp *http.Response) (*PostObservationPhotosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObservationPhotosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationPhotos
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteObservationPhotosUUIDResponse parses an HTTP response from a DeleteObservationPhotosUUIDWithResponse call
func ParseDeleteObservationPhotosUUIDResponse(rsp *http.Response) (*DeleteObservationPhotosUUIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObservationPhotosUUIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutObservationPhotosUUIDResponse parses an HTTP response from a PutObservationPhotosUUIDWithResponse call
func ParsePutObservationPhotosUUIDResponse(rsp *http.Response) (*PutObservationPhotosUUIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutObservationPhotosUUIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationPhotos
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostObservationSoundsResponse parses an HTTP response from a PostObservationSoundsWithResponse call
func ParsePostObservationSoundsResponse(rsp *http.Response) (*PostObservationSoundsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObservationSoundsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationSounds
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteObservationSoundsUUIDResponse parses an HTTP response from a DeleteObservationSoundsUUIDWithResponse call
func ParseDeleteObservationSoundsUUIDResponse(rsp *http.Response) (*DeleteObservationSoundsUUIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObservationSoundsUUIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutObservationSoundsUUIDResponse parses an HTTP response from a PutObservationSoundsUUIDWithResponse call
func ParsePutObservationSoundsUUIDResponse(rsp *http.Response) (*PutObservationSoundsUUIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutObservationSoundsUUIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationSounds
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObservationsResponse parses an HTTP response from a GetObservationsWithResponse call
func ParseGetObservationsResponse(rsp *http.Response) (*GetObservationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostObservationsResponse parses an HTTP response from a PostObservationsWithResponse call
func ParsePostObservationsResponse(rsp *http.Response) (*PostObservationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetObservationsDeletedResponse parses an HTTP response from a GetObservationsDeletedWithResponse call
func ParseGetObservationsDeletedResponse(rsp *http.Response) (*GetObservationsDeletedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsDeletedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationsDeleted
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObservationsHistogramResponse parses an HTTP response from a GetObservationsHistogramWithResponse call
func ParseGetObservationsHistogramResponse(rsp *http.Response) (*GetObservationsHistogramResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsHistogramResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationsHistogram
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObservationsIconicTaxaSpeciesCountsResponse parses an HTTP response from a GetObservationsIconicTaxaSpeciesCountsWithResponse call
func ParseGetObservationsIconicTaxaSpeciesCountsResponse(rsp *http.Response) (*GetObservationsIconicTaxaSpeciesCountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsIconicTaxaSpeciesCountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationsSpeciesCounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObservationsIdentificationCategoriesResponse parses an HTTP response from a GetObservationsIdentificationCategoriesWithResponse call
func ParseGetObservationsIdentificationCategoriesResponse(rsp *http.Response) (*GetObservationsIdentificationCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsIdentificationCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationsIdentificationCategories
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetObservationsIdentifiersResponse parses an HTTP response from a GetObservationsIdentifiersWithResponse call
func ParseGetObservationsIdentifiersResponse(rsp *http.Response) (*GetObservationsIdentifiersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsIdentifiersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationsIdentifiers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObservationsObserversResponse parses an HTTP response from a GetObservationsObserversWithResponse call
func ParseGetObservationsObserversResponse(rsp *http.Response) (*GetObservationsObserversResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsObserversResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationsObservers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObservationsPopularFieldValuesResponse parses an HTTP response from a GetObservationsPopularFieldValuesWithResponse call
func ParseGetObservationsPopularFieldValuesResponse(rsp *http.Response) (*GetObservationsPopularFieldValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsPopularFieldValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationsPopularFieldValues
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObservationsQualityGradesResponse parses an HTTP response from a GetObservationsQualityGradesWithResponse call
func ParseGetObservationsQualityGradesResponse(rsp *http.Response) (*GetObservationsQualityGradesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsQualityGradesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationsQualityGrades
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetObservationsSpeciesCountsResponse parses an HTTP response from a GetObservationsSpeciesCountsWithResponse call
func ParseGetObservationsSpeciesCountsResponse(rsp *http.Response) (*GetObservationsSpeciesCountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsSpeciesCountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationsSpeciesCounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObservationsUmbrellaProjectStatsResponse parses an HTTP response from a GetObservationsUmbrellaProjectStatsWithResponse call
func ParseGetObservationsUmbrellaProjectStatsResponse(rsp *http.Response) (*GetObservationsUmbrellaProjectStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsUmbrellaProjectStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationsUmbrellaProjectStats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObservationsUpdatesResponse parses an HTTP response from a GetObservationsUpdatesWithResponse call
func ParseGetObservationsUpdatesResponse(rsp *http.Response) (*GetObservationsUpdatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsUpdatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsUpdates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteObservationsUUIDResponse parses an HTTP response from a DeleteObservationsUUIDWithResponse call
func ParseDeleteObservationsUUIDResponse(rsp *http.Response) (*DeleteObservationsUUIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObservationsUUIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObservationsUUIDResponse parses an HTTP response from a GetObservationsUUIDWithResponse call
func ParseGetObservationsUUIDResponse(rsp *http.Response) (*GetObservationsUUIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsUUIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutObservationsUUIDResponse parses an HTTP response from a PutObservationsUUIDWithResponse call
func ParsePutObservationsUUIDResponse(rsp *http.Response) (*PutObservationsUUIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutObservationsUUIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteObservationsUUIDFaveResponse parses an HTTP response from a DeleteObservationsUUIDFaveWithResponse call
func ParseDeleteObservationsUUIDFaveResponse(rsp *http.Response) (*DeleteObservationsUUIDFaveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObservationsUUIDFaveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostObservationsUUIDFaveResponse parses an HTTP response from a PostObservationsUUIDFaveWithResponse call
func ParsePostObservationsUUIDFaveResponse(rsp *http.Response) (*PostObservationsUUIDFaveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObservationsUUIDFaveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteObservationsUUIDQualityMetricResponse parses an HTTP response from a DeleteObservationsUUIDQualityMetricWithResponse call
func ParseDeleteObservationsUUIDQualityMetricResponse(rsp *http.Response) (*DeleteObservationsUUIDQualityMetricResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObservationsUUIDQualityMetricResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostObservationsUUIDQualityMetricResponse parses an HTTP response from a PostObservationsUUIDQualityMetricWithResponse call
func ParsePostObservationsUUIDQualityMetricResponse(rsp *http.Response) (*PostObservationsUUIDQualityMetricResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObservationsUUIDQualityMetricResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObservationsUUIDQualityMetricsResponse parses an HTTP response from a GetObservationsUUIDQualityMetricsWithResponse call
func ParseGetObservationsUUIDQualityMetricsResponse(rsp *http.Response) (*GetObservationsUUIDQualityMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsUUIDQualityMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsQualityMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteObservationsUUIDReviewResponse parses an HTTP response from a DeleteObservationsUUIDReviewWithResponse call
func ParseDeleteObservationsUUIDReviewResponse(rsp *http.Response) (*DeleteObservationsUUIDReviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObservationsUUIDReviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostObservationsUUIDReviewResponse parses an HTTP response from a PostObservationsUUIDReviewWithResponse call
func ParsePostObservationsUUIDReviewResponse(rsp *http.Response) (*PostObservationsUUIDReviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObservationsUUIDReviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutObservationsUUIDSubscriptionResponse parses an HTTP response from a PutObservationsUUIDSubscriptionWithResponse call
func ParsePutObservationsUUIDSubscriptionResponse(rsp *http.Response) (*PutObservationsUUIDSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutObservationsUUIDSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObservationsUUIDSubscriptionsResponse parses an HTTP response from a GetObservationsUUIDSubscriptionsWithResponse call
func ParseGetObservationsUUIDSubscriptionsResponse(rsp *http.Response) (*GetObservationsUUIDSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsUUIDSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsSubscriptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObservationsUUIDTaxonSummaryResponse parses an HTTP response from a GetObservationsUUIDTaxonSummaryWithResponse call
func ParseGetObservationsUUIDTaxonSummaryResponse(rsp *http.Response) (*GetObservationsUUIDTaxonSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsUUIDTaxonSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTaxonSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutObservationsUUIDViewedUpdatesResponse parses an HTTP response from a PutObservationsUUIDViewedUpdatesWithResponse call
func ParsePutObservationsUUIDViewedUpdatesResponse(rsp *http.Response) (*PutObservationsUUIDViewedUpdatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutObservationsUUIDViewedUpdatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPhotosResponse parses an HTTP response from a PostPhotosWithResponse call
func ParsePostPhotosResponse(rsp *http.Response) (*PostPhotosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPhotosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsPhotos
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutPhotosIDResponse parses an HTTP response from a PutPhotosIDWithResponse call
func ParsePutPhotosIDResponse(rsp *http.Response) (*PutPhotosIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPhotosIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsPhotos
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPlacesResponse parses an HTTP response from a GetPlacesWithResponse call
func ParseGetPlacesResponse(rsp *http.Response) (*GetPlacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsPlaces
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPlacesNearbyResponse parses an HTTP response from a GetPlacesNearbyWithResponse call
func ParseGetPlacesNearbyResponse(rsp *http.Response) (*GetPlacesNearbyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacesNearbyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsPlacesNearby
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPlacesIDZoomXYPngResponse parses an HTTP response from a GetPlacesIDZoomXYPngWithResponse call
func ParseGetPlacesIDZoomXYPngResponse(rsp *http.Response) (*GetPlacesIDZoomXYPngResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacesIDZoomXYPngResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlacesUUIDResponse parses an HTTP response from a GetPlacesUUIDWithResponse call
func ParseGetPlacesUUIDResponse(rsp *http.Response) (*GetPlacesUUIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacesUUIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsPlaces
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPointsZoomXYGridJSONResponse parses an HTTP response from a GetPointsZoomXYGridJSONWithResponse call
func ParseGetPointsZoomXYGridJSONResponse(rsp *http.Response) (*GetPointsZoomXYGridJSONResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPointsZoomXYGridJSONResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UtfGrid
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPointsZoomXYPngResponse parses an HTTP response from a GetPointsZoomXYPngWithResponse call
func ParseGetPointsZoomXYPngResponse(rsp *http.Response) (*GetPointsZoomXYPngResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPointsZoomXYPngResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostProjectObservationsResponse parses an HTTP response from a PostProjectObservationsWithResponse call
func ParsePostProjectObservationsResponse(rsp *http.Response) (*PostProjectObservationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectObservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsProjectObservations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteProjectObservationsUUIDResponse parses an HTTP response from a DeleteProjectObservationsUUIDWithResponse call
func ParseDeleteProjectObservationsUUIDResponse(rsp *http.Response) (*DeleteProjectObservationsUUIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectObservationsUUIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutProjectObservationsUUIDResponse parses an HTTP response from a PutProjectObservationsUUIDWithResponse call
func ParsePutProjectObservationsUUIDResponse(rsp *http.Response) (*PutProjectObservationsUUIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutProjectObservationsUUIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsProjectObservations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutProjectUsersIDResponse parses an HTTP response from a PutProjectUsersIDWithResponse call
func ParsePutProjectUsersIDResponse(rsp *http.Response) (*PutProjectUsersIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutProjectUsersIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetProjectsResponse parses an HTTP response from a GetProjectsWithResponse call
func ParseGetProjectsResponse(rsp *http.Response) (*GetProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsProjects
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProjectsIDResponse parses an HTTP response from a GetProjectsIDWithResponse call
func ParseGetProjectsIDResponse(rsp *http.Response) (*GetProjectsIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsProjects
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProjectsIDMembersResponse parses an HTTP response from a GetProjectsIDMembersWithResponse call
func ParseGetProjectsIDMembersResponse(rsp *http.Response) (*GetProjectsIDMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsIDMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsProjectsMembers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteProjectsIDMembershipResponse parses an HTTP response from a DeleteProjectsIDMembershipWithResponse call
func ParseDeleteProjectsIDMembershipResponse(rsp *http.Response) (*DeleteProjectsIDMembershipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectsIDMembershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProjectsIDMembershipResponse parses an HTTP response from a GetProjectsIDMembershipWithResponse call
func ParseGetProjectsIDMembershipResponse(rsp *http.Response) (*GetProjectsIDMembershipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsIDMembershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsProjectMembership
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProjectsIDMembershipResponse parses an HTTP response from a PostProjectsIDMembershipWithResponse call
func ParsePostProjectsIDMembershipResponse(rsp *http.Response) (*PostProjectsIDMembershipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsIDMembershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProjectsIDPostsResponse parses an HTTP response from a GetProjectsIDPostsWithResponse call
func ParseGetProjectsIDPostsResponse(rsp *http.Response) (*GetProjectsIDPostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsIDPostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsProjectsPosts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProviderAuthorizationsResponse parses an HTTP response from a GetProviderAuthorizationsWithResponse call
func ParseGetProviderAuthorizationsResponse(rsp *http.Response) (*GetProviderAuthorizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProviderAuthorizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsProviderAuthorizations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteProviderAuthorizationsIDResponse parses an HTTP response from a DeleteProviderAuthorizationsIDWithResponse call
func ParseDeleteProviderAuthorizationsIDResponse(rsp *http.Response) (*DeleteProviderAuthorizationsIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProviderAuthorizationsIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetRelationshipsResponse parses an HTTP response from a GetRelationshipsWithResponse call
func ParseGetRelationshipsResponse(rsp *http.Response) (*GetRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsRelationships
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostRelationshipsResponse parses an HTTP response from a PostRelationshipsWithResponse call
func ParsePostRelationshipsResponse(rsp *http.Response) (*PostRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsRelationships
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteRelationshipsIDResponse parses an HTTP response from a DeleteRelationshipsIDWithResponse call
func ParseDeleteRelationshipsIDResponse(rsp *http.Response) (*DeleteRelationshipsIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRelationshipsIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutRelationshipsIDResponse parses an HTTP response from a PutRelationshipsIDWithResponse call
func ParsePutRelationshipsIDResponse(rsp *http.Response) (*PutRelationshipsIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRelationshipsIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsRelationships
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSavedLocationsResponse parses an HTTP response from a GetSavedLocationsWithResponse call
func ParseGetSavedLocationsResponse(rsp *http.Response) (*GetSavedLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSavedLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsSavedLocations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSavedLocationsResponse parses an HTTP response from a PostSavedLocationsWithResponse call
func ParsePostSavedLocationsResponse(rsp *http.Response) (*PostSavedLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSavedLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsSavedLocations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteSavedLocationsIDResponse parses an HTTP response from a DeleteSavedLocationsIDWithResponse call
func ParseDeleteSavedLocationsIDResponse(rsp *http.Response) (*DeleteSavedLocationsIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSavedLocationsIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSearchResponse parses an HTTP response from a GetSearchWithResponse call
func ParseGetSearchResponse(rsp *http.Response) (*GetSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsSearch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSitesResponse parses an HTTP response from a GetSitesWithResponse call
func ParseGetSitesResponse(rsp *http.Response) (*GetSitesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSitesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsSites
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSoundsResponse parses an HTTP response from a PostSoundsWithResponse call
func ParsePostSoundsResponse(rsp *http.Response) (*PostSoundsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSoundsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsSounds
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTaxaResponse parses an HTTP response from a GetTaxaWithResponse call
func ParseGetTaxaResponse(rsp *http.Response) (*GetTaxaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTaxa
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaxaAutocompleteResponse parses an HTTP response from a GetTaxaAutocompleteWithResponse call
func ParseGetTaxaAutocompleteResponse(rsp *http.Response) (*GetTaxaAutocompleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxaAutocompleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTaxa
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaxaIconicResponse parses an HTTP response from a GetTaxaIconicWithResponse call
func ParseGetTaxaIconicResponse(rsp *http.Response) (*GetTaxaIconicResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxaIconicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTaxa
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTaxaSuggestResponse parses an HTTP response from a GetTaxaSuggestWithResponse call
func ParseGetTaxaSuggestResponse(rsp *http.Response) (*GetTaxaSuggestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxaSuggestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTaxaSuggest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTaxaSuggestResponse parses an HTTP response from a PostTaxaSuggestWithResponse call
func ParsePostTaxaSuggestResponse(rsp *http.Response) (*PostTaxaSuggestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTaxaSuggestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTaxaSuggest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaxaIDResponse parses an HTTP response from a GetTaxaIDWithResponse call
func ParseGetTaxaIDResponse(rsp *http.Response) (*GetTaxaIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxaIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTaxa
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaxaIDWantedResponse parses an HTTP response from a GetTaxaIDWantedWithResponse call
func ParseGetTaxaIDWantedResponse(rsp *http.Response) (*GetTaxaIDWantedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxaIDWantedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTaxa
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTaxonNamePrioritiesResponse parses an HTTP response from a PostTaxonNamePrioritiesWithResponse call
func ParsePostTaxonNamePrioritiesResponse(rsp *http.Response) (*PostTaxonNamePrioritiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTaxonNamePrioritiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTaxonNamePriorities
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteTaxonNamePrioritiesIDResponse parses an HTTP response from a DeleteTaxonNamePrioritiesIDWithResponse call
func ParseDeleteTaxonNamePrioritiesIDResponse(rsp *http.Response) (*DeleteTaxonNamePrioritiesIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTaxonNamePrioritiesIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutTaxonNamePrioritiesIDResponse parses an HTTP response from a PutTaxonNamePrioritiesIDWithResponse call
func ParsePutTaxonNamePrioritiesIDResponse(rsp *http.Response) (*PutTaxonNamePrioritiesIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTaxonNamePrioritiesIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTaxonNamePriorities
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaxonPlacesIDZoomXYPngResponse parses an HTTP response from a GetTaxonPlacesIDZoomXYPngWithResponse call
func ParseGetTaxonPlacesIDZoomXYPngResponse(rsp *http.Response) (*GetTaxonPlacesIDZoomXYPngResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxonPlacesIDZoomXYPngResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTaxonRangesIDZoomXYPngResponse parses an HTTP response from a GetTaxonRangesIDZoomXYPngWithResponse call
func ParseGetTaxonRangesIDZoomXYPngResponse(rsp *http.Response) (*GetTaxonRangesIDZoomXYPngResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxonRangesIDZoomXYPngResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTranslationsLocalesResponse parses an HTTP response from a GetTranslationsLocalesWithResponse call
func ParseGetTranslationsLocalesResponse(rsp *http.Response) (*GetTranslationsLocalesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTranslationsLocalesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTranslationsLocales
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsUsers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUsersAutocompleteResponse parses an HTTP response from a GetUsersAutocompleteWithResponse call
func ParseGetUsersAutocompleteResponse(rsp *http.Response) (*GetUsersAutocompleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersAutocompleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsUsers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersEmailAvailableResponse parses an HTTP response from a GetUsersEmailAvailableWithResponse call
func ParseGetUsersEmailAvailableResponse(rsp *http.Response) (*GetUsersEmailAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersEmailAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsEmailAvailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUsersMeResponse parses an HTTP response from a GetUsersMeWithResponse call
func ParseGetUsersMeResponse(rsp *http.Response) (*GetUsersMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsUsersMe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUsersNotificationCountsResponse parses an HTTP response from a GetUsersNotificationCountsWithResponse call
func ParseGetUsersNotificationCountsResponse(rsp *http.Response) (*GetUsersNotificationCountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersNotificationCountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsUsersNotificationCounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUsersRecentObservationFieldsResponse parses an HTTP response from a GetUsersRecentObservationFieldsWithResponse call
func ParseGetUsersRecentObservationFieldsResponse(rsp *http.Response) (*GetUsersRecentObservationFieldsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersRecentObservationFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationFields
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUsersResendConfirmationResponse parses an HTTP response from a PostUsersResendConfirmationWithResponse call
func ParsePostUsersResendConfirmationResponse(rsp *http.Response) (*PostUsersResendConfirmationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersResendConfirmationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUsersResetPasswordResponse parses an HTTP response from a PostUsersResetPasswordWithResponse call
func ParsePostUsersResetPasswordResponse(rsp *http.Response) (*PostUsersResetPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersResetPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutUsersUpdateSessionResponse parses an HTTP response from a PutUsersUpdateSessionWithResponse call
func ParsePutUsersUpdateSessionResponse(rsp *http.Response) (*PutUsersUpdateSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUsersUpdateSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUsersIDResponse parses an HTTP response from a GetUsersIDWithResponse call
func ParseGetUsersIDResponse(rsp *http.Response) (*GetUsersIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsUsers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutUsersIDResponse parses an HTTP response from a PutUsersIDWithResponse call
func ParsePutUsersIDResponse(rsp *http.Response) (*PutUsersIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUsersIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteUsersIDBlockResponse parses an HTTP response from a DeleteUsersIDBlockWithResponse call
func ParseDeleteUsersIDBlockResponse(rsp *http.Response) (*DeleteUsersIDBlockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsersIDBlockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUsersIDBlockResponse parses an HTTP response from a PostUsersIDBlockWithResponse call
func ParsePostUsersIDBlockResponse(rsp *http.Response) (*PostUsersIDBlockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersIDBlockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteUsersIDMuteResponse parses an HTTP response from a DeleteUsersIDMuteWithResponse call
func ParseDeleteUsersIDMuteResponse(rsp *http.Response) (*DeleteUsersIDMuteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsersIDMuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUsersIDMuteResponse parses an HTTP response from a PostUsersIDMuteWithResponse call
func ParsePostUsersIDMuteResponse(rsp *http.Response) (*PostUsersIDMuteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersIDMuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUsersIDProjectsResponse parses an HTTP response from a GetUsersIDProjectsWithResponse call
func ParseGetUsersIDProjectsResponse(rsp *http.Response) (*GetUsersIDProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersIDProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsProjects
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
