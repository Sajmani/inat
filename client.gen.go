// Package inat provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package inat

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	AppJwtRequiredScopes  = "appJwtRequired.Scopes"
	UserJwtOptionalScopes = "userJwtOptional.Scopes"
	UserJwtRequiredScopes = "userJwtRequired.Scopes"
)

// Defines values for AuthorizedApplicationScopes.
const (
	AuthorizedApplicationScopesAccountDelete AuthorizedApplicationScopes = "account_delete"
	AuthorizedApplicationScopesLogin         AuthorizedApplicationScopes = "login"
	AuthorizedApplicationScopesWrite         AuthorizedApplicationScopes = "write"
)

// Defines values for CommentsCreateCommentParentType.
const (
	CommentsCreateCommentParentTypeObservation CommentsCreateCommentParentType = "Observation"
	CommentsCreateCommentParentTypePost        CommentsCreateCommentParentType = "Post"
)

// Defines values for ListedTaxonEstablishmentMeans.
const (
	Endemic    ListedTaxonEstablishmentMeans = "endemic"
	Introduced ListedTaxonEstablishmentMeans = "introduced"
	Native     ListedTaxonEstablishmentMeans = "native"
)

// Defines values for ProjectUsersUpdateProjectUserPrefersCuratorCoordinateAccessFor.
const (
	ProjectUsersUpdateProjectUserPrefersCuratorCoordinateAccessForAny   ProjectUsersUpdateProjectUserPrefersCuratorCoordinateAccessFor = "any"
	ProjectUsersUpdateProjectUserPrefersCuratorCoordinateAccessForNone  ProjectUsersUpdateProjectUserPrefersCuratorCoordinateAccessFor = "none"
	ProjectUsersUpdateProjectUserPrefersCuratorCoordinateAccessForTaxon ProjectUsersUpdateProjectUserPrefersCuratorCoordinateAccessFor = "taxon"
)

// Defines values for ProviderAuthorizationProviderName.
const (
	Apple        ProviderAuthorizationProviderName = "apple"
	Facebook     ProviderAuthorizationProviderName = "facebook"
	Flickr       ProviderAuthorizationProviderName = "flickr"
	GoogleOauth2 ProviderAuthorizationProviderName = "google_oauth2"
	OpenId       ProviderAuthorizationProviderName = "open_id"
	Orcid        ProviderAuthorizationProviderName = "orcid"
	Soundcloud   ProviderAuthorizationProviderName = "soundcloud"
	Twitter      ProviderAuthorizationProviderName = "twitter"
)

// Defines values for ResultsProjectsPostsResultsParentType.
const (
	ResultsProjectsPostsResultsParentTypeProject ResultsProjectsPostsResultsParentType = "Project"
)

// Defines values for ResultsSearchResultsType.
const (
	ResultsSearchResultsTypePlace   ResultsSearchResultsType = "place"
	ResultsSearchResultsTypeProject ResultsSearchResultsType = "project"
	ResultsSearchResultsTypeTaxon   ResultsSearchResultsType = "taxon"
	ResultsSearchResultsTypeUser    ResultsSearchResultsType = "user"
)

// Defines values for ResultsTaxaSuggestQueryOrderBy.
const (
	ResultsTaxaSuggestQueryOrderByDefault  ResultsTaxaSuggestQueryOrderBy = "default"
	ResultsTaxaSuggestQueryOrderBySciname  ResultsTaxaSuggestQueryOrderBy = "sciname"
	ResultsTaxaSuggestQueryOrderByTaxonomy ResultsTaxaSuggestQueryOrderBy = "taxonomy"
)

// Defines values for ResultsTaxaSuggestQuerySource.
const (
	ResultsTaxaSuggestQuerySourceCaptiveObservations ResultsTaxaSuggestQuerySource = "captive_observations"
	ResultsTaxaSuggestQuerySourceChecklist           ResultsTaxaSuggestQuerySource = "checklist"
	ResultsTaxaSuggestQuerySourceMisidentifications  ResultsTaxaSuggestQuerySource = "misidentifications"
	ResultsTaxaSuggestQuerySourceObservations        ResultsTaxaSuggestQuerySource = "observations"
	ResultsTaxaSuggestQuerySourceRgObservations      ResultsTaxaSuggestQuerySource = "rg_observations"
	ResultsTaxaSuggestQuerySourceVisual              ResultsTaxaSuggestQuerySource = "visual"
)

// Defines values for SavedLocationGeoprivacy.
const (
	SavedLocationGeoprivacyObscured SavedLocationGeoprivacy = "obscured"
	SavedLocationGeoprivacyOpen     SavedLocationGeoprivacy = "open"
	SavedLocationGeoprivacyPrivate  SavedLocationGeoprivacy = "private"
)

// Defines values for SavedLocationsCreateSavedLocationGeoprivacy.
const (
	SavedLocationsCreateSavedLocationGeoprivacyObscured SavedLocationsCreateSavedLocationGeoprivacy = "obscured"
	SavedLocationsCreateSavedLocationGeoprivacyOpen     SavedLocationsCreateSavedLocationGeoprivacy = "open"
	SavedLocationsCreateSavedLocationGeoprivacyPrivate  SavedLocationsCreateSavedLocationGeoprivacy = "private"
)

// Defines values for UserPreferencesPrefersObservationFieldsBy.
const (
	Anyone   UserPreferencesPrefersObservationFieldsBy = "anyone"
	Curators UserPreferencesPrefersObservationFieldsBy = "curators"
	Observer UserPreferencesPrefersObservationFieldsBy = "observer"
)

// Defines values for UserPreferencesPrefersProjectAdditionBy.
const (
	UserPreferencesPrefersProjectAdditionByAny    UserPreferencesPrefersProjectAdditionBy = "any"
	UserPreferencesPrefersProjectAdditionByJoined UserPreferencesPrefersProjectAdditionBy = "joined"
	UserPreferencesPrefersProjectAdditionByNone   UserPreferencesPrefersProjectAdditionBy = "none"
)

// Defines values for GetAnnouncementsParamsPlacement.
const (
	Mobile                GetAnnouncementsParamsPlacement = "mobile"
	Mobilehome            GetAnnouncementsParamsPlacement = "mobile/home"
	Usersdashboard        GetAnnouncementsParamsPlacement = "users/dashboard"
	UsersdashboardSidebar GetAnnouncementsParamsPlacement = "users/dashboard#sidebar"
	Welcomeindex          GetAnnouncementsParamsPlacement = "welcome/index"
)

// Defines values for GetAnnouncementsParamsClient.
const (
	InatAndroid GetAnnouncementsParamsClient = "inat-android"
	InatIos     GetAnnouncementsParamsClient = "inat-ios"
	Inatrn      GetAnnouncementsParamsClient = "inatrn"
	Seek        GetAnnouncementsParamsClient = "seek"
)

// Defines values for GetGeomodelIdZoomXYPngParamsTileSize.
const (
	GetGeomodelIdZoomXYPngParamsTileSizeN256 GetGeomodelIdZoomXYPngParamsTileSize = 256
	GetGeomodelIdZoomXYPngParamsTileSizeN512 GetGeomodelIdZoomXYPngParamsTileSize = 512
)

// Defines values for GetGeomodelComparisonIdZoomXYPngParamsTileSize.
const (
	GetGeomodelComparisonIdZoomXYPngParamsTileSizeN256 GetGeomodelComparisonIdZoomXYPngParamsTileSize = 256
	GetGeomodelComparisonIdZoomXYPngParamsTileSizeN512 GetGeomodelComparisonIdZoomXYPngParamsTileSize = 512
)

// Defines values for GetGeomodelTaxonRangeIdZoomXYPngParamsTileSize.
const (
	GetGeomodelTaxonRangeIdZoomXYPngParamsTileSizeN256 GetGeomodelTaxonRangeIdZoomXYPngParamsTileSize = 256
	GetGeomodelTaxonRangeIdZoomXYPngParamsTileSizeN512 GetGeomodelTaxonRangeIdZoomXYPngParamsTileSize = 512
)

// Defines values for GetGridZoomXYGridJsonParamsTileSize.
const (
	GetGridZoomXYGridJsonParamsTileSizeN256 GetGridZoomXYGridJsonParamsTileSize = 256
	GetGridZoomXYGridJsonParamsTileSizeN512 GetGridZoomXYGridJsonParamsTileSize = 512
)

// Defines values for GetGridZoomXYGridJsonParamsLicense.
const (
	GetGridZoomXYGridJsonParamsLicenseCc0      GetGridZoomXYGridJsonParamsLicense = "cc0"
	GetGridZoomXYGridJsonParamsLicenseCcBy     GetGridZoomXYGridJsonParamsLicense = "cc-by"
	GetGridZoomXYGridJsonParamsLicenseCcByNc   GetGridZoomXYGridJsonParamsLicense = "cc-by-nc"
	GetGridZoomXYGridJsonParamsLicenseCcByNcNd GetGridZoomXYGridJsonParamsLicense = "cc-by-nc-nd"
	GetGridZoomXYGridJsonParamsLicenseCcByNcSa GetGridZoomXYGridJsonParamsLicense = "cc-by-nc-sa"
	GetGridZoomXYGridJsonParamsLicenseCcByNd   GetGridZoomXYGridJsonParamsLicense = "cc-by-nd"
	GetGridZoomXYGridJsonParamsLicenseCcBySa   GetGridZoomXYGridJsonParamsLicense = "cc-by-sa"
)

// Defines values for GetGridZoomXYGridJsonParamsPhotoLicense.
const (
	GetGridZoomXYGridJsonParamsPhotoLicenseCc0      GetGridZoomXYGridJsonParamsPhotoLicense = "cc0"
	GetGridZoomXYGridJsonParamsPhotoLicenseCcBy     GetGridZoomXYGridJsonParamsPhotoLicense = "cc-by"
	GetGridZoomXYGridJsonParamsPhotoLicenseCcByNc   GetGridZoomXYGridJsonParamsPhotoLicense = "cc-by-nc"
	GetGridZoomXYGridJsonParamsPhotoLicenseCcByNcNd GetGridZoomXYGridJsonParamsPhotoLicense = "cc-by-nc-nd"
	GetGridZoomXYGridJsonParamsPhotoLicenseCcByNcSa GetGridZoomXYGridJsonParamsPhotoLicense = "cc-by-nc-sa"
	GetGridZoomXYGridJsonParamsPhotoLicenseCcByNd   GetGridZoomXYGridJsonParamsPhotoLicense = "cc-by-nd"
	GetGridZoomXYGridJsonParamsPhotoLicenseCcBySa   GetGridZoomXYGridJsonParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetGridZoomXYGridJsonParamsRank.
const (
	GetGridZoomXYGridJsonParamsRankClass         GetGridZoomXYGridJsonParamsRank = "class"
	GetGridZoomXYGridJsonParamsRankComplex       GetGridZoomXYGridJsonParamsRank = "complex"
	GetGridZoomXYGridJsonParamsRankEpifamily     GetGridZoomXYGridJsonParamsRank = "epifamily"
	GetGridZoomXYGridJsonParamsRankFamily        GetGridZoomXYGridJsonParamsRank = "family"
	GetGridZoomXYGridJsonParamsRankForm          GetGridZoomXYGridJsonParamsRank = "form"
	GetGridZoomXYGridJsonParamsRankGenus         GetGridZoomXYGridJsonParamsRank = "genus"
	GetGridZoomXYGridJsonParamsRankGenushybrid   GetGridZoomXYGridJsonParamsRank = "genushybrid"
	GetGridZoomXYGridJsonParamsRankHybrid        GetGridZoomXYGridJsonParamsRank = "hybrid"
	GetGridZoomXYGridJsonParamsRankInfraclass    GetGridZoomXYGridJsonParamsRank = "infraclass"
	GetGridZoomXYGridJsonParamsRankInfrahybrid   GetGridZoomXYGridJsonParamsRank = "infrahybrid"
	GetGridZoomXYGridJsonParamsRankInfraorder    GetGridZoomXYGridJsonParamsRank = "infraorder"
	GetGridZoomXYGridJsonParamsRankKingdom       GetGridZoomXYGridJsonParamsRank = "kingdom"
	GetGridZoomXYGridJsonParamsRankOrder         GetGridZoomXYGridJsonParamsRank = "order"
	GetGridZoomXYGridJsonParamsRankParvorder     GetGridZoomXYGridJsonParamsRank = "parvorder"
	GetGridZoomXYGridJsonParamsRankPhylum        GetGridZoomXYGridJsonParamsRank = "phylum"
	GetGridZoomXYGridJsonParamsRankSection       GetGridZoomXYGridJsonParamsRank = "section"
	GetGridZoomXYGridJsonParamsRankSpecies       GetGridZoomXYGridJsonParamsRank = "species"
	GetGridZoomXYGridJsonParamsRankSubclass      GetGridZoomXYGridJsonParamsRank = "subclass"
	GetGridZoomXYGridJsonParamsRankSubfamily     GetGridZoomXYGridJsonParamsRank = "subfamily"
	GetGridZoomXYGridJsonParamsRankSubgenus      GetGridZoomXYGridJsonParamsRank = "subgenus"
	GetGridZoomXYGridJsonParamsRankSuborder      GetGridZoomXYGridJsonParamsRank = "suborder"
	GetGridZoomXYGridJsonParamsRankSubphylum     GetGridZoomXYGridJsonParamsRank = "subphylum"
	GetGridZoomXYGridJsonParamsRankSubsection    GetGridZoomXYGridJsonParamsRank = "subsection"
	GetGridZoomXYGridJsonParamsRankSubspecies    GetGridZoomXYGridJsonParamsRank = "subspecies"
	GetGridZoomXYGridJsonParamsRankSubterclass   GetGridZoomXYGridJsonParamsRank = "subterclass"
	GetGridZoomXYGridJsonParamsRankSubtribe      GetGridZoomXYGridJsonParamsRank = "subtribe"
	GetGridZoomXYGridJsonParamsRankSuperclass    GetGridZoomXYGridJsonParamsRank = "superclass"
	GetGridZoomXYGridJsonParamsRankSuperfamily   GetGridZoomXYGridJsonParamsRank = "superfamily"
	GetGridZoomXYGridJsonParamsRankSuperorder    GetGridZoomXYGridJsonParamsRank = "superorder"
	GetGridZoomXYGridJsonParamsRankSupertribe    GetGridZoomXYGridJsonParamsRank = "supertribe"
	GetGridZoomXYGridJsonParamsRankTribe         GetGridZoomXYGridJsonParamsRank = "tribe"
	GetGridZoomXYGridJsonParamsRankVariety       GetGridZoomXYGridJsonParamsRank = "variety"
	GetGridZoomXYGridJsonParamsRankZoosection    GetGridZoomXYGridJsonParamsRank = "zoosection"
	GetGridZoomXYGridJsonParamsRankZoosubsection GetGridZoomXYGridJsonParamsRank = "zoosubsection"
)

// Defines values for GetGridZoomXYGridJsonParamsSoundLicense.
const (
	GetGridZoomXYGridJsonParamsSoundLicenseCc0      GetGridZoomXYGridJsonParamsSoundLicense = "cc0"
	GetGridZoomXYGridJsonParamsSoundLicenseCcBy     GetGridZoomXYGridJsonParamsSoundLicense = "cc-by"
	GetGridZoomXYGridJsonParamsSoundLicenseCcByNc   GetGridZoomXYGridJsonParamsSoundLicense = "cc-by-nc"
	GetGridZoomXYGridJsonParamsSoundLicenseCcByNcNd GetGridZoomXYGridJsonParamsSoundLicense = "cc-by-nc-nd"
	GetGridZoomXYGridJsonParamsSoundLicenseCcByNcSa GetGridZoomXYGridJsonParamsSoundLicense = "cc-by-nc-sa"
	GetGridZoomXYGridJsonParamsSoundLicenseCcByNd   GetGridZoomXYGridJsonParamsSoundLicense = "cc-by-nd"
	GetGridZoomXYGridJsonParamsSoundLicenseCcBySa   GetGridZoomXYGridJsonParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetGridZoomXYGridJsonParamsCsi.
const (
	GetGridZoomXYGridJsonParamsCsiCR GetGridZoomXYGridJsonParamsCsi = "CR"
	GetGridZoomXYGridJsonParamsCsiEN GetGridZoomXYGridJsonParamsCsi = "EN"
	GetGridZoomXYGridJsonParamsCsiEW GetGridZoomXYGridJsonParamsCsi = "EW"
	GetGridZoomXYGridJsonParamsCsiEX GetGridZoomXYGridJsonParamsCsi = "EX"
	GetGridZoomXYGridJsonParamsCsiLC GetGridZoomXYGridJsonParamsCsi = "LC"
	GetGridZoomXYGridJsonParamsCsiNT GetGridZoomXYGridJsonParamsCsi = "NT"
	GetGridZoomXYGridJsonParamsCsiVU GetGridZoomXYGridJsonParamsCsi = "VU"
)

// Defines values for GetGridZoomXYGridJsonParamsGeoprivacy.
const (
	GetGridZoomXYGridJsonParamsGeoprivacyObscured        GetGridZoomXYGridJsonParamsGeoprivacy = "obscured"
	GetGridZoomXYGridJsonParamsGeoprivacyObscuredPrivate GetGridZoomXYGridJsonParamsGeoprivacy = "obscured_private"
	GetGridZoomXYGridJsonParamsGeoprivacyOpen            GetGridZoomXYGridJsonParamsGeoprivacy = "open"
	GetGridZoomXYGridJsonParamsGeoprivacyPrivate         GetGridZoomXYGridJsonParamsGeoprivacy = "private"
)

// Defines values for GetGridZoomXYGridJsonParamsTaxonGeoprivacy.
const (
	GetGridZoomXYGridJsonParamsTaxonGeoprivacyObscured        GetGridZoomXYGridJsonParamsTaxonGeoprivacy = "obscured"
	GetGridZoomXYGridJsonParamsTaxonGeoprivacyObscuredPrivate GetGridZoomXYGridJsonParamsTaxonGeoprivacy = "obscured_private"
	GetGridZoomXYGridJsonParamsTaxonGeoprivacyOpen            GetGridZoomXYGridJsonParamsTaxonGeoprivacy = "open"
	GetGridZoomXYGridJsonParamsTaxonGeoprivacyPrivate         GetGridZoomXYGridJsonParamsTaxonGeoprivacy = "private"
)

// Defines values for GetGridZoomXYGridJsonParamsObscuration.
const (
	GetGridZoomXYGridJsonParamsObscurationNone     GetGridZoomXYGridJsonParamsObscuration = "none"
	GetGridZoomXYGridJsonParamsObscurationObscured GetGridZoomXYGridJsonParamsObscuration = "obscured"
	GetGridZoomXYGridJsonParamsObscurationPrivate  GetGridZoomXYGridJsonParamsObscuration = "private"
)

// Defines values for GetGridZoomXYGridJsonParamsHrank.
const (
	GetGridZoomXYGridJsonParamsHrankClass         GetGridZoomXYGridJsonParamsHrank = "class"
	GetGridZoomXYGridJsonParamsHrankComplex       GetGridZoomXYGridJsonParamsHrank = "complex"
	GetGridZoomXYGridJsonParamsHrankEpifamily     GetGridZoomXYGridJsonParamsHrank = "epifamily"
	GetGridZoomXYGridJsonParamsHrankFamily        GetGridZoomXYGridJsonParamsHrank = "family"
	GetGridZoomXYGridJsonParamsHrankForm          GetGridZoomXYGridJsonParamsHrank = "form"
	GetGridZoomXYGridJsonParamsHrankGenus         GetGridZoomXYGridJsonParamsHrank = "genus"
	GetGridZoomXYGridJsonParamsHrankGenushybrid   GetGridZoomXYGridJsonParamsHrank = "genushybrid"
	GetGridZoomXYGridJsonParamsHrankHybrid        GetGridZoomXYGridJsonParamsHrank = "hybrid"
	GetGridZoomXYGridJsonParamsHrankInfraclass    GetGridZoomXYGridJsonParamsHrank = "infraclass"
	GetGridZoomXYGridJsonParamsHrankInfrahybrid   GetGridZoomXYGridJsonParamsHrank = "infrahybrid"
	GetGridZoomXYGridJsonParamsHrankInfraorder    GetGridZoomXYGridJsonParamsHrank = "infraorder"
	GetGridZoomXYGridJsonParamsHrankKingdom       GetGridZoomXYGridJsonParamsHrank = "kingdom"
	GetGridZoomXYGridJsonParamsHrankOrder         GetGridZoomXYGridJsonParamsHrank = "order"
	GetGridZoomXYGridJsonParamsHrankParvorder     GetGridZoomXYGridJsonParamsHrank = "parvorder"
	GetGridZoomXYGridJsonParamsHrankPhylum        GetGridZoomXYGridJsonParamsHrank = "phylum"
	GetGridZoomXYGridJsonParamsHrankSection       GetGridZoomXYGridJsonParamsHrank = "section"
	GetGridZoomXYGridJsonParamsHrankSpecies       GetGridZoomXYGridJsonParamsHrank = "species"
	GetGridZoomXYGridJsonParamsHrankSubclass      GetGridZoomXYGridJsonParamsHrank = "subclass"
	GetGridZoomXYGridJsonParamsHrankSubfamily     GetGridZoomXYGridJsonParamsHrank = "subfamily"
	GetGridZoomXYGridJsonParamsHrankSubgenus      GetGridZoomXYGridJsonParamsHrank = "subgenus"
	GetGridZoomXYGridJsonParamsHrankSuborder      GetGridZoomXYGridJsonParamsHrank = "suborder"
	GetGridZoomXYGridJsonParamsHrankSubphylum     GetGridZoomXYGridJsonParamsHrank = "subphylum"
	GetGridZoomXYGridJsonParamsHrankSubsection    GetGridZoomXYGridJsonParamsHrank = "subsection"
	GetGridZoomXYGridJsonParamsHrankSubspecies    GetGridZoomXYGridJsonParamsHrank = "subspecies"
	GetGridZoomXYGridJsonParamsHrankSubterclass   GetGridZoomXYGridJsonParamsHrank = "subterclass"
	GetGridZoomXYGridJsonParamsHrankSubtribe      GetGridZoomXYGridJsonParamsHrank = "subtribe"
	GetGridZoomXYGridJsonParamsHrankSuperclass    GetGridZoomXYGridJsonParamsHrank = "superclass"
	GetGridZoomXYGridJsonParamsHrankSuperfamily   GetGridZoomXYGridJsonParamsHrank = "superfamily"
	GetGridZoomXYGridJsonParamsHrankSuperorder    GetGridZoomXYGridJsonParamsHrank = "superorder"
	GetGridZoomXYGridJsonParamsHrankSupertribe    GetGridZoomXYGridJsonParamsHrank = "supertribe"
	GetGridZoomXYGridJsonParamsHrankTribe         GetGridZoomXYGridJsonParamsHrank = "tribe"
	GetGridZoomXYGridJsonParamsHrankVariety       GetGridZoomXYGridJsonParamsHrank = "variety"
	GetGridZoomXYGridJsonParamsHrankZoosection    GetGridZoomXYGridJsonParamsHrank = "zoosection"
	GetGridZoomXYGridJsonParamsHrankZoosubsection GetGridZoomXYGridJsonParamsHrank = "zoosubsection"
)

// Defines values for GetGridZoomXYGridJsonParamsLrank.
const (
	GetGridZoomXYGridJsonParamsLrankClass         GetGridZoomXYGridJsonParamsLrank = "class"
	GetGridZoomXYGridJsonParamsLrankComplex       GetGridZoomXYGridJsonParamsLrank = "complex"
	GetGridZoomXYGridJsonParamsLrankEpifamily     GetGridZoomXYGridJsonParamsLrank = "epifamily"
	GetGridZoomXYGridJsonParamsLrankFamily        GetGridZoomXYGridJsonParamsLrank = "family"
	GetGridZoomXYGridJsonParamsLrankForm          GetGridZoomXYGridJsonParamsLrank = "form"
	GetGridZoomXYGridJsonParamsLrankGenus         GetGridZoomXYGridJsonParamsLrank = "genus"
	GetGridZoomXYGridJsonParamsLrankGenushybrid   GetGridZoomXYGridJsonParamsLrank = "genushybrid"
	GetGridZoomXYGridJsonParamsLrankHybrid        GetGridZoomXYGridJsonParamsLrank = "hybrid"
	GetGridZoomXYGridJsonParamsLrankInfraclass    GetGridZoomXYGridJsonParamsLrank = "infraclass"
	GetGridZoomXYGridJsonParamsLrankInfrahybrid   GetGridZoomXYGridJsonParamsLrank = "infrahybrid"
	GetGridZoomXYGridJsonParamsLrankInfraorder    GetGridZoomXYGridJsonParamsLrank = "infraorder"
	GetGridZoomXYGridJsonParamsLrankKingdom       GetGridZoomXYGridJsonParamsLrank = "kingdom"
	GetGridZoomXYGridJsonParamsLrankOrder         GetGridZoomXYGridJsonParamsLrank = "order"
	GetGridZoomXYGridJsonParamsLrankParvorder     GetGridZoomXYGridJsonParamsLrank = "parvorder"
	GetGridZoomXYGridJsonParamsLrankPhylum        GetGridZoomXYGridJsonParamsLrank = "phylum"
	GetGridZoomXYGridJsonParamsLrankSection       GetGridZoomXYGridJsonParamsLrank = "section"
	GetGridZoomXYGridJsonParamsLrankSpecies       GetGridZoomXYGridJsonParamsLrank = "species"
	GetGridZoomXYGridJsonParamsLrankSubclass      GetGridZoomXYGridJsonParamsLrank = "subclass"
	GetGridZoomXYGridJsonParamsLrankSubfamily     GetGridZoomXYGridJsonParamsLrank = "subfamily"
	GetGridZoomXYGridJsonParamsLrankSubgenus      GetGridZoomXYGridJsonParamsLrank = "subgenus"
	GetGridZoomXYGridJsonParamsLrankSuborder      GetGridZoomXYGridJsonParamsLrank = "suborder"
	GetGridZoomXYGridJsonParamsLrankSubphylum     GetGridZoomXYGridJsonParamsLrank = "subphylum"
	GetGridZoomXYGridJsonParamsLrankSubsection    GetGridZoomXYGridJsonParamsLrank = "subsection"
	GetGridZoomXYGridJsonParamsLrankSubspecies    GetGridZoomXYGridJsonParamsLrank = "subspecies"
	GetGridZoomXYGridJsonParamsLrankSubterclass   GetGridZoomXYGridJsonParamsLrank = "subterclass"
	GetGridZoomXYGridJsonParamsLrankSubtribe      GetGridZoomXYGridJsonParamsLrank = "subtribe"
	GetGridZoomXYGridJsonParamsLrankSuperclass    GetGridZoomXYGridJsonParamsLrank = "superclass"
	GetGridZoomXYGridJsonParamsLrankSuperfamily   GetGridZoomXYGridJsonParamsLrank = "superfamily"
	GetGridZoomXYGridJsonParamsLrankSuperorder    GetGridZoomXYGridJsonParamsLrank = "superorder"
	GetGridZoomXYGridJsonParamsLrankSupertribe    GetGridZoomXYGridJsonParamsLrank = "supertribe"
	GetGridZoomXYGridJsonParamsLrankTribe         GetGridZoomXYGridJsonParamsLrank = "tribe"
	GetGridZoomXYGridJsonParamsLrankVariety       GetGridZoomXYGridJsonParamsLrank = "variety"
	GetGridZoomXYGridJsonParamsLrankZoosection    GetGridZoomXYGridJsonParamsLrank = "zoosection"
	GetGridZoomXYGridJsonParamsLrankZoosubsection GetGridZoomXYGridJsonParamsLrank = "zoosubsection"
)

// Defines values for GetGridZoomXYGridJsonParamsIconicTaxa.
const (
	GetGridZoomXYGridJsonParamsIconicTaxaActinopterygii GetGridZoomXYGridJsonParamsIconicTaxa = "Actinopterygii"
	GetGridZoomXYGridJsonParamsIconicTaxaAmphibia       GetGridZoomXYGridJsonParamsIconicTaxa = "Amphibia"
	GetGridZoomXYGridJsonParamsIconicTaxaAnimalia       GetGridZoomXYGridJsonParamsIconicTaxa = "Animalia"
	GetGridZoomXYGridJsonParamsIconicTaxaArachnida      GetGridZoomXYGridJsonParamsIconicTaxa = "Arachnida"
	GetGridZoomXYGridJsonParamsIconicTaxaAves           GetGridZoomXYGridJsonParamsIconicTaxa = "Aves"
	GetGridZoomXYGridJsonParamsIconicTaxaChromista      GetGridZoomXYGridJsonParamsIconicTaxa = "Chromista"
	GetGridZoomXYGridJsonParamsIconicTaxaFungi          GetGridZoomXYGridJsonParamsIconicTaxa = "Fungi"
	GetGridZoomXYGridJsonParamsIconicTaxaInsecta        GetGridZoomXYGridJsonParamsIconicTaxa = "Insecta"
	GetGridZoomXYGridJsonParamsIconicTaxaMammalia       GetGridZoomXYGridJsonParamsIconicTaxa = "Mammalia"
	GetGridZoomXYGridJsonParamsIconicTaxaMollusca       GetGridZoomXYGridJsonParamsIconicTaxa = "Mollusca"
	GetGridZoomXYGridJsonParamsIconicTaxaPlantae        GetGridZoomXYGridJsonParamsIconicTaxa = "Plantae"
	GetGridZoomXYGridJsonParamsIconicTaxaProtozoa       GetGridZoomXYGridJsonParamsIconicTaxa = "Protozoa"
	GetGridZoomXYGridJsonParamsIconicTaxaReptilia       GetGridZoomXYGridJsonParamsIconicTaxa = "Reptilia"
	GetGridZoomXYGridJsonParamsIconicTaxaUnknown        GetGridZoomXYGridJsonParamsIconicTaxa = "unknown"
)

// Defines values for GetGridZoomXYGridJsonParamsIdentifications.
const (
	GetGridZoomXYGridJsonParamsIdentificationsMostAgree    GetGridZoomXYGridJsonParamsIdentifications = "most_agree"
	GetGridZoomXYGridJsonParamsIdentificationsMostDisagree GetGridZoomXYGridJsonParamsIdentifications = "most_disagree"
	GetGridZoomXYGridJsonParamsIdentificationsSomeAgree    GetGridZoomXYGridJsonParamsIdentifications = "some_agree"
)

// Defines values for GetGridZoomXYGridJsonParamsSearchOn.
const (
	GetGridZoomXYGridJsonParamsSearchOnDescription        GetGridZoomXYGridJsonParamsSearchOn = "description"
	GetGridZoomXYGridJsonParamsSearchOnNames              GetGridZoomXYGridJsonParamsSearchOn = "names"
	GetGridZoomXYGridJsonParamsSearchOnPlace              GetGridZoomXYGridJsonParamsSearchOn = "place"
	GetGridZoomXYGridJsonParamsSearchOnTags               GetGridZoomXYGridJsonParamsSearchOn = "tags"
	GetGridZoomXYGridJsonParamsSearchOnTaxonPageObsPhotos GetGridZoomXYGridJsonParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetGridZoomXYGridJsonParamsQualityGrade.
const (
	GetGridZoomXYGridJsonParamsQualityGradeCasual   GetGridZoomXYGridJsonParamsQualityGrade = "casual"
	GetGridZoomXYGridJsonParamsQualityGradeNeedsId  GetGridZoomXYGridJsonParamsQualityGrade = "needs_id"
	GetGridZoomXYGridJsonParamsQualityGradeResearch GetGridZoomXYGridJsonParamsQualityGrade = "research"
)

// Defines values for GetGridZoomXYGridJsonParamsOrder.
const (
	GetGridZoomXYGridJsonParamsOrderAsc  GetGridZoomXYGridJsonParamsOrder = "asc"
	GetGridZoomXYGridJsonParamsOrderDesc GetGridZoomXYGridJsonParamsOrder = "desc"
)

// Defines values for GetGridZoomXYGridJsonParamsOrderBy.
const (
	GetGridZoomXYGridJsonParamsOrderByCreatedAt    GetGridZoomXYGridJsonParamsOrderBy = "created_at"
	GetGridZoomXYGridJsonParamsOrderByGeoScore     GetGridZoomXYGridJsonParamsOrderBy = "geo_score"
	GetGridZoomXYGridJsonParamsOrderById           GetGridZoomXYGridJsonParamsOrderBy = "id"
	GetGridZoomXYGridJsonParamsOrderByObservedOn   GetGridZoomXYGridJsonParamsOrderBy = "observed_on"
	GetGridZoomXYGridJsonParamsOrderByRandom       GetGridZoomXYGridJsonParamsOrderBy = "random"
	GetGridZoomXYGridJsonParamsOrderBySpeciesGuess GetGridZoomXYGridJsonParamsOrderBy = "species_guess"
	GetGridZoomXYGridJsonParamsOrderByUpdatedAt    GetGridZoomXYGridJsonParamsOrderBy = "updated_at"
	GetGridZoomXYGridJsonParamsOrderByVotes        GetGridZoomXYGridJsonParamsOrderBy = "votes"
)

// Defines values for GetGridZoomXYPngParamsTileSize.
const (
	GetGridZoomXYPngParamsTileSizeN256 GetGridZoomXYPngParamsTileSize = 256
	GetGridZoomXYPngParamsTileSizeN512 GetGridZoomXYPngParamsTileSize = 512
)

// Defines values for GetGridZoomXYPngParamsLicense.
const (
	GetGridZoomXYPngParamsLicenseCc0      GetGridZoomXYPngParamsLicense = "cc0"
	GetGridZoomXYPngParamsLicenseCcBy     GetGridZoomXYPngParamsLicense = "cc-by"
	GetGridZoomXYPngParamsLicenseCcByNc   GetGridZoomXYPngParamsLicense = "cc-by-nc"
	GetGridZoomXYPngParamsLicenseCcByNcNd GetGridZoomXYPngParamsLicense = "cc-by-nc-nd"
	GetGridZoomXYPngParamsLicenseCcByNcSa GetGridZoomXYPngParamsLicense = "cc-by-nc-sa"
	GetGridZoomXYPngParamsLicenseCcByNd   GetGridZoomXYPngParamsLicense = "cc-by-nd"
	GetGridZoomXYPngParamsLicenseCcBySa   GetGridZoomXYPngParamsLicense = "cc-by-sa"
)

// Defines values for GetGridZoomXYPngParamsPhotoLicense.
const (
	GetGridZoomXYPngParamsPhotoLicenseCc0      GetGridZoomXYPngParamsPhotoLicense = "cc0"
	GetGridZoomXYPngParamsPhotoLicenseCcBy     GetGridZoomXYPngParamsPhotoLicense = "cc-by"
	GetGridZoomXYPngParamsPhotoLicenseCcByNc   GetGridZoomXYPngParamsPhotoLicense = "cc-by-nc"
	GetGridZoomXYPngParamsPhotoLicenseCcByNcNd GetGridZoomXYPngParamsPhotoLicense = "cc-by-nc-nd"
	GetGridZoomXYPngParamsPhotoLicenseCcByNcSa GetGridZoomXYPngParamsPhotoLicense = "cc-by-nc-sa"
	GetGridZoomXYPngParamsPhotoLicenseCcByNd   GetGridZoomXYPngParamsPhotoLicense = "cc-by-nd"
	GetGridZoomXYPngParamsPhotoLicenseCcBySa   GetGridZoomXYPngParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetGridZoomXYPngParamsRank.
const (
	GetGridZoomXYPngParamsRankClass         GetGridZoomXYPngParamsRank = "class"
	GetGridZoomXYPngParamsRankComplex       GetGridZoomXYPngParamsRank = "complex"
	GetGridZoomXYPngParamsRankEpifamily     GetGridZoomXYPngParamsRank = "epifamily"
	GetGridZoomXYPngParamsRankFamily        GetGridZoomXYPngParamsRank = "family"
	GetGridZoomXYPngParamsRankForm          GetGridZoomXYPngParamsRank = "form"
	GetGridZoomXYPngParamsRankGenus         GetGridZoomXYPngParamsRank = "genus"
	GetGridZoomXYPngParamsRankGenushybrid   GetGridZoomXYPngParamsRank = "genushybrid"
	GetGridZoomXYPngParamsRankHybrid        GetGridZoomXYPngParamsRank = "hybrid"
	GetGridZoomXYPngParamsRankInfraclass    GetGridZoomXYPngParamsRank = "infraclass"
	GetGridZoomXYPngParamsRankInfrahybrid   GetGridZoomXYPngParamsRank = "infrahybrid"
	GetGridZoomXYPngParamsRankInfraorder    GetGridZoomXYPngParamsRank = "infraorder"
	GetGridZoomXYPngParamsRankKingdom       GetGridZoomXYPngParamsRank = "kingdom"
	GetGridZoomXYPngParamsRankOrder         GetGridZoomXYPngParamsRank = "order"
	GetGridZoomXYPngParamsRankParvorder     GetGridZoomXYPngParamsRank = "parvorder"
	GetGridZoomXYPngParamsRankPhylum        GetGridZoomXYPngParamsRank = "phylum"
	GetGridZoomXYPngParamsRankSection       GetGridZoomXYPngParamsRank = "section"
	GetGridZoomXYPngParamsRankSpecies       GetGridZoomXYPngParamsRank = "species"
	GetGridZoomXYPngParamsRankSubclass      GetGridZoomXYPngParamsRank = "subclass"
	GetGridZoomXYPngParamsRankSubfamily     GetGridZoomXYPngParamsRank = "subfamily"
	GetGridZoomXYPngParamsRankSubgenus      GetGridZoomXYPngParamsRank = "subgenus"
	GetGridZoomXYPngParamsRankSuborder      GetGridZoomXYPngParamsRank = "suborder"
	GetGridZoomXYPngParamsRankSubphylum     GetGridZoomXYPngParamsRank = "subphylum"
	GetGridZoomXYPngParamsRankSubsection    GetGridZoomXYPngParamsRank = "subsection"
	GetGridZoomXYPngParamsRankSubspecies    GetGridZoomXYPngParamsRank = "subspecies"
	GetGridZoomXYPngParamsRankSubterclass   GetGridZoomXYPngParamsRank = "subterclass"
	GetGridZoomXYPngParamsRankSubtribe      GetGridZoomXYPngParamsRank = "subtribe"
	GetGridZoomXYPngParamsRankSuperclass    GetGridZoomXYPngParamsRank = "superclass"
	GetGridZoomXYPngParamsRankSuperfamily   GetGridZoomXYPngParamsRank = "superfamily"
	GetGridZoomXYPngParamsRankSuperorder    GetGridZoomXYPngParamsRank = "superorder"
	GetGridZoomXYPngParamsRankSupertribe    GetGridZoomXYPngParamsRank = "supertribe"
	GetGridZoomXYPngParamsRankTribe         GetGridZoomXYPngParamsRank = "tribe"
	GetGridZoomXYPngParamsRankVariety       GetGridZoomXYPngParamsRank = "variety"
	GetGridZoomXYPngParamsRankZoosection    GetGridZoomXYPngParamsRank = "zoosection"
	GetGridZoomXYPngParamsRankZoosubsection GetGridZoomXYPngParamsRank = "zoosubsection"
)

// Defines values for GetGridZoomXYPngParamsSoundLicense.
const (
	GetGridZoomXYPngParamsSoundLicenseCc0      GetGridZoomXYPngParamsSoundLicense = "cc0"
	GetGridZoomXYPngParamsSoundLicenseCcBy     GetGridZoomXYPngParamsSoundLicense = "cc-by"
	GetGridZoomXYPngParamsSoundLicenseCcByNc   GetGridZoomXYPngParamsSoundLicense = "cc-by-nc"
	GetGridZoomXYPngParamsSoundLicenseCcByNcNd GetGridZoomXYPngParamsSoundLicense = "cc-by-nc-nd"
	GetGridZoomXYPngParamsSoundLicenseCcByNcSa GetGridZoomXYPngParamsSoundLicense = "cc-by-nc-sa"
	GetGridZoomXYPngParamsSoundLicenseCcByNd   GetGridZoomXYPngParamsSoundLicense = "cc-by-nd"
	GetGridZoomXYPngParamsSoundLicenseCcBySa   GetGridZoomXYPngParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetGridZoomXYPngParamsCsi.
const (
	GetGridZoomXYPngParamsCsiCR GetGridZoomXYPngParamsCsi = "CR"
	GetGridZoomXYPngParamsCsiEN GetGridZoomXYPngParamsCsi = "EN"
	GetGridZoomXYPngParamsCsiEW GetGridZoomXYPngParamsCsi = "EW"
	GetGridZoomXYPngParamsCsiEX GetGridZoomXYPngParamsCsi = "EX"
	GetGridZoomXYPngParamsCsiLC GetGridZoomXYPngParamsCsi = "LC"
	GetGridZoomXYPngParamsCsiNT GetGridZoomXYPngParamsCsi = "NT"
	GetGridZoomXYPngParamsCsiVU GetGridZoomXYPngParamsCsi = "VU"
)

// Defines values for GetGridZoomXYPngParamsGeoprivacy.
const (
	GetGridZoomXYPngParamsGeoprivacyObscured        GetGridZoomXYPngParamsGeoprivacy = "obscured"
	GetGridZoomXYPngParamsGeoprivacyObscuredPrivate GetGridZoomXYPngParamsGeoprivacy = "obscured_private"
	GetGridZoomXYPngParamsGeoprivacyOpen            GetGridZoomXYPngParamsGeoprivacy = "open"
	GetGridZoomXYPngParamsGeoprivacyPrivate         GetGridZoomXYPngParamsGeoprivacy = "private"
)

// Defines values for GetGridZoomXYPngParamsTaxonGeoprivacy.
const (
	GetGridZoomXYPngParamsTaxonGeoprivacyObscured        GetGridZoomXYPngParamsTaxonGeoprivacy = "obscured"
	GetGridZoomXYPngParamsTaxonGeoprivacyObscuredPrivate GetGridZoomXYPngParamsTaxonGeoprivacy = "obscured_private"
	GetGridZoomXYPngParamsTaxonGeoprivacyOpen            GetGridZoomXYPngParamsTaxonGeoprivacy = "open"
	GetGridZoomXYPngParamsTaxonGeoprivacyPrivate         GetGridZoomXYPngParamsTaxonGeoprivacy = "private"
)

// Defines values for GetGridZoomXYPngParamsObscuration.
const (
	GetGridZoomXYPngParamsObscurationNone     GetGridZoomXYPngParamsObscuration = "none"
	GetGridZoomXYPngParamsObscurationObscured GetGridZoomXYPngParamsObscuration = "obscured"
	GetGridZoomXYPngParamsObscurationPrivate  GetGridZoomXYPngParamsObscuration = "private"
)

// Defines values for GetGridZoomXYPngParamsHrank.
const (
	GetGridZoomXYPngParamsHrankClass         GetGridZoomXYPngParamsHrank = "class"
	GetGridZoomXYPngParamsHrankComplex       GetGridZoomXYPngParamsHrank = "complex"
	GetGridZoomXYPngParamsHrankEpifamily     GetGridZoomXYPngParamsHrank = "epifamily"
	GetGridZoomXYPngParamsHrankFamily        GetGridZoomXYPngParamsHrank = "family"
	GetGridZoomXYPngParamsHrankForm          GetGridZoomXYPngParamsHrank = "form"
	GetGridZoomXYPngParamsHrankGenus         GetGridZoomXYPngParamsHrank = "genus"
	GetGridZoomXYPngParamsHrankGenushybrid   GetGridZoomXYPngParamsHrank = "genushybrid"
	GetGridZoomXYPngParamsHrankHybrid        GetGridZoomXYPngParamsHrank = "hybrid"
	GetGridZoomXYPngParamsHrankInfraclass    GetGridZoomXYPngParamsHrank = "infraclass"
	GetGridZoomXYPngParamsHrankInfrahybrid   GetGridZoomXYPngParamsHrank = "infrahybrid"
	GetGridZoomXYPngParamsHrankInfraorder    GetGridZoomXYPngParamsHrank = "infraorder"
	GetGridZoomXYPngParamsHrankKingdom       GetGridZoomXYPngParamsHrank = "kingdom"
	GetGridZoomXYPngParamsHrankOrder         GetGridZoomXYPngParamsHrank = "order"
	GetGridZoomXYPngParamsHrankParvorder     GetGridZoomXYPngParamsHrank = "parvorder"
	GetGridZoomXYPngParamsHrankPhylum        GetGridZoomXYPngParamsHrank = "phylum"
	GetGridZoomXYPngParamsHrankSection       GetGridZoomXYPngParamsHrank = "section"
	GetGridZoomXYPngParamsHrankSpecies       GetGridZoomXYPngParamsHrank = "species"
	GetGridZoomXYPngParamsHrankSubclass      GetGridZoomXYPngParamsHrank = "subclass"
	GetGridZoomXYPngParamsHrankSubfamily     GetGridZoomXYPngParamsHrank = "subfamily"
	GetGridZoomXYPngParamsHrankSubgenus      GetGridZoomXYPngParamsHrank = "subgenus"
	GetGridZoomXYPngParamsHrankSuborder      GetGridZoomXYPngParamsHrank = "suborder"
	GetGridZoomXYPngParamsHrankSubphylum     GetGridZoomXYPngParamsHrank = "subphylum"
	GetGridZoomXYPngParamsHrankSubsection    GetGridZoomXYPngParamsHrank = "subsection"
	GetGridZoomXYPngParamsHrankSubspecies    GetGridZoomXYPngParamsHrank = "subspecies"
	GetGridZoomXYPngParamsHrankSubterclass   GetGridZoomXYPngParamsHrank = "subterclass"
	GetGridZoomXYPngParamsHrankSubtribe      GetGridZoomXYPngParamsHrank = "subtribe"
	GetGridZoomXYPngParamsHrankSuperclass    GetGridZoomXYPngParamsHrank = "superclass"
	GetGridZoomXYPngParamsHrankSuperfamily   GetGridZoomXYPngParamsHrank = "superfamily"
	GetGridZoomXYPngParamsHrankSuperorder    GetGridZoomXYPngParamsHrank = "superorder"
	GetGridZoomXYPngParamsHrankSupertribe    GetGridZoomXYPngParamsHrank = "supertribe"
	GetGridZoomXYPngParamsHrankTribe         GetGridZoomXYPngParamsHrank = "tribe"
	GetGridZoomXYPngParamsHrankVariety       GetGridZoomXYPngParamsHrank = "variety"
	GetGridZoomXYPngParamsHrankZoosection    GetGridZoomXYPngParamsHrank = "zoosection"
	GetGridZoomXYPngParamsHrankZoosubsection GetGridZoomXYPngParamsHrank = "zoosubsection"
)

// Defines values for GetGridZoomXYPngParamsLrank.
const (
	GetGridZoomXYPngParamsLrankClass         GetGridZoomXYPngParamsLrank = "class"
	GetGridZoomXYPngParamsLrankComplex       GetGridZoomXYPngParamsLrank = "complex"
	GetGridZoomXYPngParamsLrankEpifamily     GetGridZoomXYPngParamsLrank = "epifamily"
	GetGridZoomXYPngParamsLrankFamily        GetGridZoomXYPngParamsLrank = "family"
	GetGridZoomXYPngParamsLrankForm          GetGridZoomXYPngParamsLrank = "form"
	GetGridZoomXYPngParamsLrankGenus         GetGridZoomXYPngParamsLrank = "genus"
	GetGridZoomXYPngParamsLrankGenushybrid   GetGridZoomXYPngParamsLrank = "genushybrid"
	GetGridZoomXYPngParamsLrankHybrid        GetGridZoomXYPngParamsLrank = "hybrid"
	GetGridZoomXYPngParamsLrankInfraclass    GetGridZoomXYPngParamsLrank = "infraclass"
	GetGridZoomXYPngParamsLrankInfrahybrid   GetGridZoomXYPngParamsLrank = "infrahybrid"
	GetGridZoomXYPngParamsLrankInfraorder    GetGridZoomXYPngParamsLrank = "infraorder"
	GetGridZoomXYPngParamsLrankKingdom       GetGridZoomXYPngParamsLrank = "kingdom"
	GetGridZoomXYPngParamsLrankOrder         GetGridZoomXYPngParamsLrank = "order"
	GetGridZoomXYPngParamsLrankParvorder     GetGridZoomXYPngParamsLrank = "parvorder"
	GetGridZoomXYPngParamsLrankPhylum        GetGridZoomXYPngParamsLrank = "phylum"
	GetGridZoomXYPngParamsLrankSection       GetGridZoomXYPngParamsLrank = "section"
	GetGridZoomXYPngParamsLrankSpecies       GetGridZoomXYPngParamsLrank = "species"
	GetGridZoomXYPngParamsLrankSubclass      GetGridZoomXYPngParamsLrank = "subclass"
	GetGridZoomXYPngParamsLrankSubfamily     GetGridZoomXYPngParamsLrank = "subfamily"
	GetGridZoomXYPngParamsLrankSubgenus      GetGridZoomXYPngParamsLrank = "subgenus"
	GetGridZoomXYPngParamsLrankSuborder      GetGridZoomXYPngParamsLrank = "suborder"
	GetGridZoomXYPngParamsLrankSubphylum     GetGridZoomXYPngParamsLrank = "subphylum"
	GetGridZoomXYPngParamsLrankSubsection    GetGridZoomXYPngParamsLrank = "subsection"
	GetGridZoomXYPngParamsLrankSubspecies    GetGridZoomXYPngParamsLrank = "subspecies"
	GetGridZoomXYPngParamsLrankSubterclass   GetGridZoomXYPngParamsLrank = "subterclass"
	GetGridZoomXYPngParamsLrankSubtribe      GetGridZoomXYPngParamsLrank = "subtribe"
	GetGridZoomXYPngParamsLrankSuperclass    GetGridZoomXYPngParamsLrank = "superclass"
	GetGridZoomXYPngParamsLrankSuperfamily   GetGridZoomXYPngParamsLrank = "superfamily"
	GetGridZoomXYPngParamsLrankSuperorder    GetGridZoomXYPngParamsLrank = "superorder"
	GetGridZoomXYPngParamsLrankSupertribe    GetGridZoomXYPngParamsLrank = "supertribe"
	GetGridZoomXYPngParamsLrankTribe         GetGridZoomXYPngParamsLrank = "tribe"
	GetGridZoomXYPngParamsLrankVariety       GetGridZoomXYPngParamsLrank = "variety"
	GetGridZoomXYPngParamsLrankZoosection    GetGridZoomXYPngParamsLrank = "zoosection"
	GetGridZoomXYPngParamsLrankZoosubsection GetGridZoomXYPngParamsLrank = "zoosubsection"
)

// Defines values for GetGridZoomXYPngParamsIconicTaxa.
const (
	GetGridZoomXYPngParamsIconicTaxaActinopterygii GetGridZoomXYPngParamsIconicTaxa = "Actinopterygii"
	GetGridZoomXYPngParamsIconicTaxaAmphibia       GetGridZoomXYPngParamsIconicTaxa = "Amphibia"
	GetGridZoomXYPngParamsIconicTaxaAnimalia       GetGridZoomXYPngParamsIconicTaxa = "Animalia"
	GetGridZoomXYPngParamsIconicTaxaArachnida      GetGridZoomXYPngParamsIconicTaxa = "Arachnida"
	GetGridZoomXYPngParamsIconicTaxaAves           GetGridZoomXYPngParamsIconicTaxa = "Aves"
	GetGridZoomXYPngParamsIconicTaxaChromista      GetGridZoomXYPngParamsIconicTaxa = "Chromista"
	GetGridZoomXYPngParamsIconicTaxaFungi          GetGridZoomXYPngParamsIconicTaxa = "Fungi"
	GetGridZoomXYPngParamsIconicTaxaInsecta        GetGridZoomXYPngParamsIconicTaxa = "Insecta"
	GetGridZoomXYPngParamsIconicTaxaMammalia       GetGridZoomXYPngParamsIconicTaxa = "Mammalia"
	GetGridZoomXYPngParamsIconicTaxaMollusca       GetGridZoomXYPngParamsIconicTaxa = "Mollusca"
	GetGridZoomXYPngParamsIconicTaxaPlantae        GetGridZoomXYPngParamsIconicTaxa = "Plantae"
	GetGridZoomXYPngParamsIconicTaxaProtozoa       GetGridZoomXYPngParamsIconicTaxa = "Protozoa"
	GetGridZoomXYPngParamsIconicTaxaReptilia       GetGridZoomXYPngParamsIconicTaxa = "Reptilia"
	GetGridZoomXYPngParamsIconicTaxaUnknown        GetGridZoomXYPngParamsIconicTaxa = "unknown"
)

// Defines values for GetGridZoomXYPngParamsIdentifications.
const (
	GetGridZoomXYPngParamsIdentificationsMostAgree    GetGridZoomXYPngParamsIdentifications = "most_agree"
	GetGridZoomXYPngParamsIdentificationsMostDisagree GetGridZoomXYPngParamsIdentifications = "most_disagree"
	GetGridZoomXYPngParamsIdentificationsSomeAgree    GetGridZoomXYPngParamsIdentifications = "some_agree"
)

// Defines values for GetGridZoomXYPngParamsSearchOn.
const (
	GetGridZoomXYPngParamsSearchOnDescription        GetGridZoomXYPngParamsSearchOn = "description"
	GetGridZoomXYPngParamsSearchOnNames              GetGridZoomXYPngParamsSearchOn = "names"
	GetGridZoomXYPngParamsSearchOnPlace              GetGridZoomXYPngParamsSearchOn = "place"
	GetGridZoomXYPngParamsSearchOnTags               GetGridZoomXYPngParamsSearchOn = "tags"
	GetGridZoomXYPngParamsSearchOnTaxonPageObsPhotos GetGridZoomXYPngParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetGridZoomXYPngParamsQualityGrade.
const (
	GetGridZoomXYPngParamsQualityGradeCasual   GetGridZoomXYPngParamsQualityGrade = "casual"
	GetGridZoomXYPngParamsQualityGradeNeedsId  GetGridZoomXYPngParamsQualityGrade = "needs_id"
	GetGridZoomXYPngParamsQualityGradeResearch GetGridZoomXYPngParamsQualityGrade = "research"
)

// Defines values for GetGridZoomXYPngParamsOrder.
const (
	GetGridZoomXYPngParamsOrderAsc  GetGridZoomXYPngParamsOrder = "asc"
	GetGridZoomXYPngParamsOrderDesc GetGridZoomXYPngParamsOrder = "desc"
)

// Defines values for GetGridZoomXYPngParamsOrderBy.
const (
	GetGridZoomXYPngParamsOrderByCreatedAt    GetGridZoomXYPngParamsOrderBy = "created_at"
	GetGridZoomXYPngParamsOrderByGeoScore     GetGridZoomXYPngParamsOrderBy = "geo_score"
	GetGridZoomXYPngParamsOrderById           GetGridZoomXYPngParamsOrderBy = "id"
	GetGridZoomXYPngParamsOrderByObservedOn   GetGridZoomXYPngParamsOrderBy = "observed_on"
	GetGridZoomXYPngParamsOrderByRandom       GetGridZoomXYPngParamsOrderBy = "random"
	GetGridZoomXYPngParamsOrderBySpeciesGuess GetGridZoomXYPngParamsOrderBy = "species_guess"
	GetGridZoomXYPngParamsOrderByUpdatedAt    GetGridZoomXYPngParamsOrderBy = "updated_at"
	GetGridZoomXYPngParamsOrderByVotes        GetGridZoomXYPngParamsOrderBy = "votes"
)

// Defines values for GetHeatmapZoomXYPngParamsTileSize.
const (
	GetHeatmapZoomXYPngParamsTileSizeN256 GetHeatmapZoomXYPngParamsTileSize = 256
	GetHeatmapZoomXYPngParamsTileSizeN512 GetHeatmapZoomXYPngParamsTileSize = 512
)

// Defines values for GetHeatmapZoomXYPngParamsLicense.
const (
	GetHeatmapZoomXYPngParamsLicenseCc0      GetHeatmapZoomXYPngParamsLicense = "cc0"
	GetHeatmapZoomXYPngParamsLicenseCcBy     GetHeatmapZoomXYPngParamsLicense = "cc-by"
	GetHeatmapZoomXYPngParamsLicenseCcByNc   GetHeatmapZoomXYPngParamsLicense = "cc-by-nc"
	GetHeatmapZoomXYPngParamsLicenseCcByNcNd GetHeatmapZoomXYPngParamsLicense = "cc-by-nc-nd"
	GetHeatmapZoomXYPngParamsLicenseCcByNcSa GetHeatmapZoomXYPngParamsLicense = "cc-by-nc-sa"
	GetHeatmapZoomXYPngParamsLicenseCcByNd   GetHeatmapZoomXYPngParamsLicense = "cc-by-nd"
	GetHeatmapZoomXYPngParamsLicenseCcBySa   GetHeatmapZoomXYPngParamsLicense = "cc-by-sa"
)

// Defines values for GetHeatmapZoomXYPngParamsPhotoLicense.
const (
	GetHeatmapZoomXYPngParamsPhotoLicenseCc0      GetHeatmapZoomXYPngParamsPhotoLicense = "cc0"
	GetHeatmapZoomXYPngParamsPhotoLicenseCcBy     GetHeatmapZoomXYPngParamsPhotoLicense = "cc-by"
	GetHeatmapZoomXYPngParamsPhotoLicenseCcByNc   GetHeatmapZoomXYPngParamsPhotoLicense = "cc-by-nc"
	GetHeatmapZoomXYPngParamsPhotoLicenseCcByNcNd GetHeatmapZoomXYPngParamsPhotoLicense = "cc-by-nc-nd"
	GetHeatmapZoomXYPngParamsPhotoLicenseCcByNcSa GetHeatmapZoomXYPngParamsPhotoLicense = "cc-by-nc-sa"
	GetHeatmapZoomXYPngParamsPhotoLicenseCcByNd   GetHeatmapZoomXYPngParamsPhotoLicense = "cc-by-nd"
	GetHeatmapZoomXYPngParamsPhotoLicenseCcBySa   GetHeatmapZoomXYPngParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetHeatmapZoomXYPngParamsRank.
const (
	GetHeatmapZoomXYPngParamsRankClass         GetHeatmapZoomXYPngParamsRank = "class"
	GetHeatmapZoomXYPngParamsRankComplex       GetHeatmapZoomXYPngParamsRank = "complex"
	GetHeatmapZoomXYPngParamsRankEpifamily     GetHeatmapZoomXYPngParamsRank = "epifamily"
	GetHeatmapZoomXYPngParamsRankFamily        GetHeatmapZoomXYPngParamsRank = "family"
	GetHeatmapZoomXYPngParamsRankForm          GetHeatmapZoomXYPngParamsRank = "form"
	GetHeatmapZoomXYPngParamsRankGenus         GetHeatmapZoomXYPngParamsRank = "genus"
	GetHeatmapZoomXYPngParamsRankGenushybrid   GetHeatmapZoomXYPngParamsRank = "genushybrid"
	GetHeatmapZoomXYPngParamsRankHybrid        GetHeatmapZoomXYPngParamsRank = "hybrid"
	GetHeatmapZoomXYPngParamsRankInfraclass    GetHeatmapZoomXYPngParamsRank = "infraclass"
	GetHeatmapZoomXYPngParamsRankInfrahybrid   GetHeatmapZoomXYPngParamsRank = "infrahybrid"
	GetHeatmapZoomXYPngParamsRankInfraorder    GetHeatmapZoomXYPngParamsRank = "infraorder"
	GetHeatmapZoomXYPngParamsRankKingdom       GetHeatmapZoomXYPngParamsRank = "kingdom"
	GetHeatmapZoomXYPngParamsRankOrder         GetHeatmapZoomXYPngParamsRank = "order"
	GetHeatmapZoomXYPngParamsRankParvorder     GetHeatmapZoomXYPngParamsRank = "parvorder"
	GetHeatmapZoomXYPngParamsRankPhylum        GetHeatmapZoomXYPngParamsRank = "phylum"
	GetHeatmapZoomXYPngParamsRankSection       GetHeatmapZoomXYPngParamsRank = "section"
	GetHeatmapZoomXYPngParamsRankSpecies       GetHeatmapZoomXYPngParamsRank = "species"
	GetHeatmapZoomXYPngParamsRankSubclass      GetHeatmapZoomXYPngParamsRank = "subclass"
	GetHeatmapZoomXYPngParamsRankSubfamily     GetHeatmapZoomXYPngParamsRank = "subfamily"
	GetHeatmapZoomXYPngParamsRankSubgenus      GetHeatmapZoomXYPngParamsRank = "subgenus"
	GetHeatmapZoomXYPngParamsRankSuborder      GetHeatmapZoomXYPngParamsRank = "suborder"
	GetHeatmapZoomXYPngParamsRankSubphylum     GetHeatmapZoomXYPngParamsRank = "subphylum"
	GetHeatmapZoomXYPngParamsRankSubsection    GetHeatmapZoomXYPngParamsRank = "subsection"
	GetHeatmapZoomXYPngParamsRankSubspecies    GetHeatmapZoomXYPngParamsRank = "subspecies"
	GetHeatmapZoomXYPngParamsRankSubterclass   GetHeatmapZoomXYPngParamsRank = "subterclass"
	GetHeatmapZoomXYPngParamsRankSubtribe      GetHeatmapZoomXYPngParamsRank = "subtribe"
	GetHeatmapZoomXYPngParamsRankSuperclass    GetHeatmapZoomXYPngParamsRank = "superclass"
	GetHeatmapZoomXYPngParamsRankSuperfamily   GetHeatmapZoomXYPngParamsRank = "superfamily"
	GetHeatmapZoomXYPngParamsRankSuperorder    GetHeatmapZoomXYPngParamsRank = "superorder"
	GetHeatmapZoomXYPngParamsRankSupertribe    GetHeatmapZoomXYPngParamsRank = "supertribe"
	GetHeatmapZoomXYPngParamsRankTribe         GetHeatmapZoomXYPngParamsRank = "tribe"
	GetHeatmapZoomXYPngParamsRankVariety       GetHeatmapZoomXYPngParamsRank = "variety"
	GetHeatmapZoomXYPngParamsRankZoosection    GetHeatmapZoomXYPngParamsRank = "zoosection"
	GetHeatmapZoomXYPngParamsRankZoosubsection GetHeatmapZoomXYPngParamsRank = "zoosubsection"
)

// Defines values for GetHeatmapZoomXYPngParamsSoundLicense.
const (
	GetHeatmapZoomXYPngParamsSoundLicenseCc0      GetHeatmapZoomXYPngParamsSoundLicense = "cc0"
	GetHeatmapZoomXYPngParamsSoundLicenseCcBy     GetHeatmapZoomXYPngParamsSoundLicense = "cc-by"
	GetHeatmapZoomXYPngParamsSoundLicenseCcByNc   GetHeatmapZoomXYPngParamsSoundLicense = "cc-by-nc"
	GetHeatmapZoomXYPngParamsSoundLicenseCcByNcNd GetHeatmapZoomXYPngParamsSoundLicense = "cc-by-nc-nd"
	GetHeatmapZoomXYPngParamsSoundLicenseCcByNcSa GetHeatmapZoomXYPngParamsSoundLicense = "cc-by-nc-sa"
	GetHeatmapZoomXYPngParamsSoundLicenseCcByNd   GetHeatmapZoomXYPngParamsSoundLicense = "cc-by-nd"
	GetHeatmapZoomXYPngParamsSoundLicenseCcBySa   GetHeatmapZoomXYPngParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetHeatmapZoomXYPngParamsCsi.
const (
	GetHeatmapZoomXYPngParamsCsiCR GetHeatmapZoomXYPngParamsCsi = "CR"
	GetHeatmapZoomXYPngParamsCsiEN GetHeatmapZoomXYPngParamsCsi = "EN"
	GetHeatmapZoomXYPngParamsCsiEW GetHeatmapZoomXYPngParamsCsi = "EW"
	GetHeatmapZoomXYPngParamsCsiEX GetHeatmapZoomXYPngParamsCsi = "EX"
	GetHeatmapZoomXYPngParamsCsiLC GetHeatmapZoomXYPngParamsCsi = "LC"
	GetHeatmapZoomXYPngParamsCsiNT GetHeatmapZoomXYPngParamsCsi = "NT"
	GetHeatmapZoomXYPngParamsCsiVU GetHeatmapZoomXYPngParamsCsi = "VU"
)

// Defines values for GetHeatmapZoomXYPngParamsGeoprivacy.
const (
	GetHeatmapZoomXYPngParamsGeoprivacyObscured        GetHeatmapZoomXYPngParamsGeoprivacy = "obscured"
	GetHeatmapZoomXYPngParamsGeoprivacyObscuredPrivate GetHeatmapZoomXYPngParamsGeoprivacy = "obscured_private"
	GetHeatmapZoomXYPngParamsGeoprivacyOpen            GetHeatmapZoomXYPngParamsGeoprivacy = "open"
	GetHeatmapZoomXYPngParamsGeoprivacyPrivate         GetHeatmapZoomXYPngParamsGeoprivacy = "private"
)

// Defines values for GetHeatmapZoomXYPngParamsTaxonGeoprivacy.
const (
	GetHeatmapZoomXYPngParamsTaxonGeoprivacyObscured        GetHeatmapZoomXYPngParamsTaxonGeoprivacy = "obscured"
	GetHeatmapZoomXYPngParamsTaxonGeoprivacyObscuredPrivate GetHeatmapZoomXYPngParamsTaxonGeoprivacy = "obscured_private"
	GetHeatmapZoomXYPngParamsTaxonGeoprivacyOpen            GetHeatmapZoomXYPngParamsTaxonGeoprivacy = "open"
	GetHeatmapZoomXYPngParamsTaxonGeoprivacyPrivate         GetHeatmapZoomXYPngParamsTaxonGeoprivacy = "private"
)

// Defines values for GetHeatmapZoomXYPngParamsObscuration.
const (
	GetHeatmapZoomXYPngParamsObscurationNone     GetHeatmapZoomXYPngParamsObscuration = "none"
	GetHeatmapZoomXYPngParamsObscurationObscured GetHeatmapZoomXYPngParamsObscuration = "obscured"
	GetHeatmapZoomXYPngParamsObscurationPrivate  GetHeatmapZoomXYPngParamsObscuration = "private"
)

// Defines values for GetHeatmapZoomXYPngParamsHrank.
const (
	GetHeatmapZoomXYPngParamsHrankClass         GetHeatmapZoomXYPngParamsHrank = "class"
	GetHeatmapZoomXYPngParamsHrankComplex       GetHeatmapZoomXYPngParamsHrank = "complex"
	GetHeatmapZoomXYPngParamsHrankEpifamily     GetHeatmapZoomXYPngParamsHrank = "epifamily"
	GetHeatmapZoomXYPngParamsHrankFamily        GetHeatmapZoomXYPngParamsHrank = "family"
	GetHeatmapZoomXYPngParamsHrankForm          GetHeatmapZoomXYPngParamsHrank = "form"
	GetHeatmapZoomXYPngParamsHrankGenus         GetHeatmapZoomXYPngParamsHrank = "genus"
	GetHeatmapZoomXYPngParamsHrankGenushybrid   GetHeatmapZoomXYPngParamsHrank = "genushybrid"
	GetHeatmapZoomXYPngParamsHrankHybrid        GetHeatmapZoomXYPngParamsHrank = "hybrid"
	GetHeatmapZoomXYPngParamsHrankInfraclass    GetHeatmapZoomXYPngParamsHrank = "infraclass"
	GetHeatmapZoomXYPngParamsHrankInfrahybrid   GetHeatmapZoomXYPngParamsHrank = "infrahybrid"
	GetHeatmapZoomXYPngParamsHrankInfraorder    GetHeatmapZoomXYPngParamsHrank = "infraorder"
	GetHeatmapZoomXYPngParamsHrankKingdom       GetHeatmapZoomXYPngParamsHrank = "kingdom"
	GetHeatmapZoomXYPngParamsHrankOrder         GetHeatmapZoomXYPngParamsHrank = "order"
	GetHeatmapZoomXYPngParamsHrankParvorder     GetHeatmapZoomXYPngParamsHrank = "parvorder"
	GetHeatmapZoomXYPngParamsHrankPhylum        GetHeatmapZoomXYPngParamsHrank = "phylum"
	GetHeatmapZoomXYPngParamsHrankSection       GetHeatmapZoomXYPngParamsHrank = "section"
	GetHeatmapZoomXYPngParamsHrankSpecies       GetHeatmapZoomXYPngParamsHrank = "species"
	GetHeatmapZoomXYPngParamsHrankSubclass      GetHeatmapZoomXYPngParamsHrank = "subclass"
	GetHeatmapZoomXYPngParamsHrankSubfamily     GetHeatmapZoomXYPngParamsHrank = "subfamily"
	GetHeatmapZoomXYPngParamsHrankSubgenus      GetHeatmapZoomXYPngParamsHrank = "subgenus"
	GetHeatmapZoomXYPngParamsHrankSuborder      GetHeatmapZoomXYPngParamsHrank = "suborder"
	GetHeatmapZoomXYPngParamsHrankSubphylum     GetHeatmapZoomXYPngParamsHrank = "subphylum"
	GetHeatmapZoomXYPngParamsHrankSubsection    GetHeatmapZoomXYPngParamsHrank = "subsection"
	GetHeatmapZoomXYPngParamsHrankSubspecies    GetHeatmapZoomXYPngParamsHrank = "subspecies"
	GetHeatmapZoomXYPngParamsHrankSubterclass   GetHeatmapZoomXYPngParamsHrank = "subterclass"
	GetHeatmapZoomXYPngParamsHrankSubtribe      GetHeatmapZoomXYPngParamsHrank = "subtribe"
	GetHeatmapZoomXYPngParamsHrankSuperclass    GetHeatmapZoomXYPngParamsHrank = "superclass"
	GetHeatmapZoomXYPngParamsHrankSuperfamily   GetHeatmapZoomXYPngParamsHrank = "superfamily"
	GetHeatmapZoomXYPngParamsHrankSuperorder    GetHeatmapZoomXYPngParamsHrank = "superorder"
	GetHeatmapZoomXYPngParamsHrankSupertribe    GetHeatmapZoomXYPngParamsHrank = "supertribe"
	GetHeatmapZoomXYPngParamsHrankTribe         GetHeatmapZoomXYPngParamsHrank = "tribe"
	GetHeatmapZoomXYPngParamsHrankVariety       GetHeatmapZoomXYPngParamsHrank = "variety"
	GetHeatmapZoomXYPngParamsHrankZoosection    GetHeatmapZoomXYPngParamsHrank = "zoosection"
	GetHeatmapZoomXYPngParamsHrankZoosubsection GetHeatmapZoomXYPngParamsHrank = "zoosubsection"
)

// Defines values for GetHeatmapZoomXYPngParamsLrank.
const (
	GetHeatmapZoomXYPngParamsLrankClass         GetHeatmapZoomXYPngParamsLrank = "class"
	GetHeatmapZoomXYPngParamsLrankComplex       GetHeatmapZoomXYPngParamsLrank = "complex"
	GetHeatmapZoomXYPngParamsLrankEpifamily     GetHeatmapZoomXYPngParamsLrank = "epifamily"
	GetHeatmapZoomXYPngParamsLrankFamily        GetHeatmapZoomXYPngParamsLrank = "family"
	GetHeatmapZoomXYPngParamsLrankForm          GetHeatmapZoomXYPngParamsLrank = "form"
	GetHeatmapZoomXYPngParamsLrankGenus         GetHeatmapZoomXYPngParamsLrank = "genus"
	GetHeatmapZoomXYPngParamsLrankGenushybrid   GetHeatmapZoomXYPngParamsLrank = "genushybrid"
	GetHeatmapZoomXYPngParamsLrankHybrid        GetHeatmapZoomXYPngParamsLrank = "hybrid"
	GetHeatmapZoomXYPngParamsLrankInfraclass    GetHeatmapZoomXYPngParamsLrank = "infraclass"
	GetHeatmapZoomXYPngParamsLrankInfrahybrid   GetHeatmapZoomXYPngParamsLrank = "infrahybrid"
	GetHeatmapZoomXYPngParamsLrankInfraorder    GetHeatmapZoomXYPngParamsLrank = "infraorder"
	GetHeatmapZoomXYPngParamsLrankKingdom       GetHeatmapZoomXYPngParamsLrank = "kingdom"
	GetHeatmapZoomXYPngParamsLrankOrder         GetHeatmapZoomXYPngParamsLrank = "order"
	GetHeatmapZoomXYPngParamsLrankParvorder     GetHeatmapZoomXYPngParamsLrank = "parvorder"
	GetHeatmapZoomXYPngParamsLrankPhylum        GetHeatmapZoomXYPngParamsLrank = "phylum"
	GetHeatmapZoomXYPngParamsLrankSection       GetHeatmapZoomXYPngParamsLrank = "section"
	GetHeatmapZoomXYPngParamsLrankSpecies       GetHeatmapZoomXYPngParamsLrank = "species"
	GetHeatmapZoomXYPngParamsLrankSubclass      GetHeatmapZoomXYPngParamsLrank = "subclass"
	GetHeatmapZoomXYPngParamsLrankSubfamily     GetHeatmapZoomXYPngParamsLrank = "subfamily"
	GetHeatmapZoomXYPngParamsLrankSubgenus      GetHeatmapZoomXYPngParamsLrank = "subgenus"
	GetHeatmapZoomXYPngParamsLrankSuborder      GetHeatmapZoomXYPngParamsLrank = "suborder"
	GetHeatmapZoomXYPngParamsLrankSubphylum     GetHeatmapZoomXYPngParamsLrank = "subphylum"
	GetHeatmapZoomXYPngParamsLrankSubsection    GetHeatmapZoomXYPngParamsLrank = "subsection"
	GetHeatmapZoomXYPngParamsLrankSubspecies    GetHeatmapZoomXYPngParamsLrank = "subspecies"
	GetHeatmapZoomXYPngParamsLrankSubterclass   GetHeatmapZoomXYPngParamsLrank = "subterclass"
	GetHeatmapZoomXYPngParamsLrankSubtribe      GetHeatmapZoomXYPngParamsLrank = "subtribe"
	GetHeatmapZoomXYPngParamsLrankSuperclass    GetHeatmapZoomXYPngParamsLrank = "superclass"
	GetHeatmapZoomXYPngParamsLrankSuperfamily   GetHeatmapZoomXYPngParamsLrank = "superfamily"
	GetHeatmapZoomXYPngParamsLrankSuperorder    GetHeatmapZoomXYPngParamsLrank = "superorder"
	GetHeatmapZoomXYPngParamsLrankSupertribe    GetHeatmapZoomXYPngParamsLrank = "supertribe"
	GetHeatmapZoomXYPngParamsLrankTribe         GetHeatmapZoomXYPngParamsLrank = "tribe"
	GetHeatmapZoomXYPngParamsLrankVariety       GetHeatmapZoomXYPngParamsLrank = "variety"
	GetHeatmapZoomXYPngParamsLrankZoosection    GetHeatmapZoomXYPngParamsLrank = "zoosection"
	GetHeatmapZoomXYPngParamsLrankZoosubsection GetHeatmapZoomXYPngParamsLrank = "zoosubsection"
)

// Defines values for GetHeatmapZoomXYPngParamsIconicTaxa.
const (
	GetHeatmapZoomXYPngParamsIconicTaxaActinopterygii GetHeatmapZoomXYPngParamsIconicTaxa = "Actinopterygii"
	GetHeatmapZoomXYPngParamsIconicTaxaAmphibia       GetHeatmapZoomXYPngParamsIconicTaxa = "Amphibia"
	GetHeatmapZoomXYPngParamsIconicTaxaAnimalia       GetHeatmapZoomXYPngParamsIconicTaxa = "Animalia"
	GetHeatmapZoomXYPngParamsIconicTaxaArachnida      GetHeatmapZoomXYPngParamsIconicTaxa = "Arachnida"
	GetHeatmapZoomXYPngParamsIconicTaxaAves           GetHeatmapZoomXYPngParamsIconicTaxa = "Aves"
	GetHeatmapZoomXYPngParamsIconicTaxaChromista      GetHeatmapZoomXYPngParamsIconicTaxa = "Chromista"
	GetHeatmapZoomXYPngParamsIconicTaxaFungi          GetHeatmapZoomXYPngParamsIconicTaxa = "Fungi"
	GetHeatmapZoomXYPngParamsIconicTaxaInsecta        GetHeatmapZoomXYPngParamsIconicTaxa = "Insecta"
	GetHeatmapZoomXYPngParamsIconicTaxaMammalia       GetHeatmapZoomXYPngParamsIconicTaxa = "Mammalia"
	GetHeatmapZoomXYPngParamsIconicTaxaMollusca       GetHeatmapZoomXYPngParamsIconicTaxa = "Mollusca"
	GetHeatmapZoomXYPngParamsIconicTaxaPlantae        GetHeatmapZoomXYPngParamsIconicTaxa = "Plantae"
	GetHeatmapZoomXYPngParamsIconicTaxaProtozoa       GetHeatmapZoomXYPngParamsIconicTaxa = "Protozoa"
	GetHeatmapZoomXYPngParamsIconicTaxaReptilia       GetHeatmapZoomXYPngParamsIconicTaxa = "Reptilia"
	GetHeatmapZoomXYPngParamsIconicTaxaUnknown        GetHeatmapZoomXYPngParamsIconicTaxa = "unknown"
)

// Defines values for GetHeatmapZoomXYPngParamsIdentifications.
const (
	GetHeatmapZoomXYPngParamsIdentificationsMostAgree    GetHeatmapZoomXYPngParamsIdentifications = "most_agree"
	GetHeatmapZoomXYPngParamsIdentificationsMostDisagree GetHeatmapZoomXYPngParamsIdentifications = "most_disagree"
	GetHeatmapZoomXYPngParamsIdentificationsSomeAgree    GetHeatmapZoomXYPngParamsIdentifications = "some_agree"
)

// Defines values for GetHeatmapZoomXYPngParamsSearchOn.
const (
	GetHeatmapZoomXYPngParamsSearchOnDescription        GetHeatmapZoomXYPngParamsSearchOn = "description"
	GetHeatmapZoomXYPngParamsSearchOnNames              GetHeatmapZoomXYPngParamsSearchOn = "names"
	GetHeatmapZoomXYPngParamsSearchOnPlace              GetHeatmapZoomXYPngParamsSearchOn = "place"
	GetHeatmapZoomXYPngParamsSearchOnTags               GetHeatmapZoomXYPngParamsSearchOn = "tags"
	GetHeatmapZoomXYPngParamsSearchOnTaxonPageObsPhotos GetHeatmapZoomXYPngParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetHeatmapZoomXYPngParamsQualityGrade.
const (
	GetHeatmapZoomXYPngParamsQualityGradeCasual   GetHeatmapZoomXYPngParamsQualityGrade = "casual"
	GetHeatmapZoomXYPngParamsQualityGradeNeedsId  GetHeatmapZoomXYPngParamsQualityGrade = "needs_id"
	GetHeatmapZoomXYPngParamsQualityGradeResearch GetHeatmapZoomXYPngParamsQualityGrade = "research"
)

// Defines values for GetHeatmapZoomXYPngParamsOrder.
const (
	GetHeatmapZoomXYPngParamsOrderAsc  GetHeatmapZoomXYPngParamsOrder = "asc"
	GetHeatmapZoomXYPngParamsOrderDesc GetHeatmapZoomXYPngParamsOrder = "desc"
)

// Defines values for GetHeatmapZoomXYPngParamsOrderBy.
const (
	GetHeatmapZoomXYPngParamsOrderByCreatedAt    GetHeatmapZoomXYPngParamsOrderBy = "created_at"
	GetHeatmapZoomXYPngParamsOrderByGeoScore     GetHeatmapZoomXYPngParamsOrderBy = "geo_score"
	GetHeatmapZoomXYPngParamsOrderById           GetHeatmapZoomXYPngParamsOrderBy = "id"
	GetHeatmapZoomXYPngParamsOrderByObservedOn   GetHeatmapZoomXYPngParamsOrderBy = "observed_on"
	GetHeatmapZoomXYPngParamsOrderByRandom       GetHeatmapZoomXYPngParamsOrderBy = "random"
	GetHeatmapZoomXYPngParamsOrderBySpeciesGuess GetHeatmapZoomXYPngParamsOrderBy = "species_guess"
	GetHeatmapZoomXYPngParamsOrderByUpdatedAt    GetHeatmapZoomXYPngParamsOrderBy = "updated_at"
	GetHeatmapZoomXYPngParamsOrderByVotes        GetHeatmapZoomXYPngParamsOrderBy = "votes"
)

// Defines values for GetIdentificationsIdentifiersParamsQualityGrade.
const (
	GetIdentificationsIdentifiersParamsQualityGradeCasual   GetIdentificationsIdentifiersParamsQualityGrade = "casual"
	GetIdentificationsIdentifiersParamsQualityGradeNeedsId  GetIdentificationsIdentifiersParamsQualityGrade = "needs_id"
	GetIdentificationsIdentifiersParamsQualityGradeResearch GetIdentificationsIdentifiersParamsQualityGrade = "research"
)

// Defines values for GetIdentificationsRecentTaxaParamsQualityGrade.
const (
	GetIdentificationsRecentTaxaParamsQualityGradeCasual   GetIdentificationsRecentTaxaParamsQualityGrade = "casual"
	GetIdentificationsRecentTaxaParamsQualityGradeNeedsId  GetIdentificationsRecentTaxaParamsQualityGrade = "needs_id"
	GetIdentificationsRecentTaxaParamsQualityGradeResearch GetIdentificationsRecentTaxaParamsQualityGrade = "research"
)

// Defines values for GetIdentificationsSimilarSpeciesParamsQualityGrade.
const (
	GetIdentificationsSimilarSpeciesParamsQualityGradeCasual   GetIdentificationsSimilarSpeciesParamsQualityGrade = "casual"
	GetIdentificationsSimilarSpeciesParamsQualityGradeNeedsId  GetIdentificationsSimilarSpeciesParamsQualityGrade = "needs_id"
	GetIdentificationsSimilarSpeciesParamsQualityGradeResearch GetIdentificationsSimilarSpeciesParamsQualityGrade = "research"
)

// Defines values for GetObservationsParamsLicense.
const (
	GetObservationsParamsLicenseCc0      GetObservationsParamsLicense = "cc0"
	GetObservationsParamsLicenseCcBy     GetObservationsParamsLicense = "cc-by"
	GetObservationsParamsLicenseCcByNc   GetObservationsParamsLicense = "cc-by-nc"
	GetObservationsParamsLicenseCcByNcNd GetObservationsParamsLicense = "cc-by-nc-nd"
	GetObservationsParamsLicenseCcByNcSa GetObservationsParamsLicense = "cc-by-nc-sa"
	GetObservationsParamsLicenseCcByNd   GetObservationsParamsLicense = "cc-by-nd"
	GetObservationsParamsLicenseCcBySa   GetObservationsParamsLicense = "cc-by-sa"
)

// Defines values for GetObservationsParamsPhotoLicense.
const (
	GetObservationsParamsPhotoLicenseCc0      GetObservationsParamsPhotoLicense = "cc0"
	GetObservationsParamsPhotoLicenseCcBy     GetObservationsParamsPhotoLicense = "cc-by"
	GetObservationsParamsPhotoLicenseCcByNc   GetObservationsParamsPhotoLicense = "cc-by-nc"
	GetObservationsParamsPhotoLicenseCcByNcNd GetObservationsParamsPhotoLicense = "cc-by-nc-nd"
	GetObservationsParamsPhotoLicenseCcByNcSa GetObservationsParamsPhotoLicense = "cc-by-nc-sa"
	GetObservationsParamsPhotoLicenseCcByNd   GetObservationsParamsPhotoLicense = "cc-by-nd"
	GetObservationsParamsPhotoLicenseCcBySa   GetObservationsParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetObservationsParamsRank.
const (
	GetObservationsParamsRankClass         GetObservationsParamsRank = "class"
	GetObservationsParamsRankComplex       GetObservationsParamsRank = "complex"
	GetObservationsParamsRankEpifamily     GetObservationsParamsRank = "epifamily"
	GetObservationsParamsRankFamily        GetObservationsParamsRank = "family"
	GetObservationsParamsRankForm          GetObservationsParamsRank = "form"
	GetObservationsParamsRankGenus         GetObservationsParamsRank = "genus"
	GetObservationsParamsRankGenushybrid   GetObservationsParamsRank = "genushybrid"
	GetObservationsParamsRankHybrid        GetObservationsParamsRank = "hybrid"
	GetObservationsParamsRankInfraclass    GetObservationsParamsRank = "infraclass"
	GetObservationsParamsRankInfrahybrid   GetObservationsParamsRank = "infrahybrid"
	GetObservationsParamsRankInfraorder    GetObservationsParamsRank = "infraorder"
	GetObservationsParamsRankKingdom       GetObservationsParamsRank = "kingdom"
	GetObservationsParamsRankOrder         GetObservationsParamsRank = "order"
	GetObservationsParamsRankParvorder     GetObservationsParamsRank = "parvorder"
	GetObservationsParamsRankPhylum        GetObservationsParamsRank = "phylum"
	GetObservationsParamsRankSection       GetObservationsParamsRank = "section"
	GetObservationsParamsRankSpecies       GetObservationsParamsRank = "species"
	GetObservationsParamsRankSubclass      GetObservationsParamsRank = "subclass"
	GetObservationsParamsRankSubfamily     GetObservationsParamsRank = "subfamily"
	GetObservationsParamsRankSubgenus      GetObservationsParamsRank = "subgenus"
	GetObservationsParamsRankSuborder      GetObservationsParamsRank = "suborder"
	GetObservationsParamsRankSubphylum     GetObservationsParamsRank = "subphylum"
	GetObservationsParamsRankSubsection    GetObservationsParamsRank = "subsection"
	GetObservationsParamsRankSubspecies    GetObservationsParamsRank = "subspecies"
	GetObservationsParamsRankSubterclass   GetObservationsParamsRank = "subterclass"
	GetObservationsParamsRankSubtribe      GetObservationsParamsRank = "subtribe"
	GetObservationsParamsRankSuperclass    GetObservationsParamsRank = "superclass"
	GetObservationsParamsRankSuperfamily   GetObservationsParamsRank = "superfamily"
	GetObservationsParamsRankSuperorder    GetObservationsParamsRank = "superorder"
	GetObservationsParamsRankSupertribe    GetObservationsParamsRank = "supertribe"
	GetObservationsParamsRankTribe         GetObservationsParamsRank = "tribe"
	GetObservationsParamsRankVariety       GetObservationsParamsRank = "variety"
	GetObservationsParamsRankZoosection    GetObservationsParamsRank = "zoosection"
	GetObservationsParamsRankZoosubsection GetObservationsParamsRank = "zoosubsection"
)

// Defines values for GetObservationsParamsSoundLicense.
const (
	GetObservationsParamsSoundLicenseCc0      GetObservationsParamsSoundLicense = "cc0"
	GetObservationsParamsSoundLicenseCcBy     GetObservationsParamsSoundLicense = "cc-by"
	GetObservationsParamsSoundLicenseCcByNc   GetObservationsParamsSoundLicense = "cc-by-nc"
	GetObservationsParamsSoundLicenseCcByNcNd GetObservationsParamsSoundLicense = "cc-by-nc-nd"
	GetObservationsParamsSoundLicenseCcByNcSa GetObservationsParamsSoundLicense = "cc-by-nc-sa"
	GetObservationsParamsSoundLicenseCcByNd   GetObservationsParamsSoundLicense = "cc-by-nd"
	GetObservationsParamsSoundLicenseCcBySa   GetObservationsParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetObservationsParamsCsi.
const (
	GetObservationsParamsCsiCR GetObservationsParamsCsi = "CR"
	GetObservationsParamsCsiEN GetObservationsParamsCsi = "EN"
	GetObservationsParamsCsiEW GetObservationsParamsCsi = "EW"
	GetObservationsParamsCsiEX GetObservationsParamsCsi = "EX"
	GetObservationsParamsCsiLC GetObservationsParamsCsi = "LC"
	GetObservationsParamsCsiNT GetObservationsParamsCsi = "NT"
	GetObservationsParamsCsiVU GetObservationsParamsCsi = "VU"
)

// Defines values for GetObservationsParamsGeoprivacy.
const (
	GetObservationsParamsGeoprivacyObscured        GetObservationsParamsGeoprivacy = "obscured"
	GetObservationsParamsGeoprivacyObscuredPrivate GetObservationsParamsGeoprivacy = "obscured_private"
	GetObservationsParamsGeoprivacyOpen            GetObservationsParamsGeoprivacy = "open"
	GetObservationsParamsGeoprivacyPrivate         GetObservationsParamsGeoprivacy = "private"
)

// Defines values for GetObservationsParamsTaxonGeoprivacy.
const (
	GetObservationsParamsTaxonGeoprivacyObscured        GetObservationsParamsTaxonGeoprivacy = "obscured"
	GetObservationsParamsTaxonGeoprivacyObscuredPrivate GetObservationsParamsTaxonGeoprivacy = "obscured_private"
	GetObservationsParamsTaxonGeoprivacyOpen            GetObservationsParamsTaxonGeoprivacy = "open"
	GetObservationsParamsTaxonGeoprivacyPrivate         GetObservationsParamsTaxonGeoprivacy = "private"
)

// Defines values for GetObservationsParamsObscuration.
const (
	GetObservationsParamsObscurationNone     GetObservationsParamsObscuration = "none"
	GetObservationsParamsObscurationObscured GetObservationsParamsObscuration = "obscured"
	GetObservationsParamsObscurationPrivate  GetObservationsParamsObscuration = "private"
)

// Defines values for GetObservationsParamsHrank.
const (
	GetObservationsParamsHrankClass         GetObservationsParamsHrank = "class"
	GetObservationsParamsHrankComplex       GetObservationsParamsHrank = "complex"
	GetObservationsParamsHrankEpifamily     GetObservationsParamsHrank = "epifamily"
	GetObservationsParamsHrankFamily        GetObservationsParamsHrank = "family"
	GetObservationsParamsHrankForm          GetObservationsParamsHrank = "form"
	GetObservationsParamsHrankGenus         GetObservationsParamsHrank = "genus"
	GetObservationsParamsHrankGenushybrid   GetObservationsParamsHrank = "genushybrid"
	GetObservationsParamsHrankHybrid        GetObservationsParamsHrank = "hybrid"
	GetObservationsParamsHrankInfraclass    GetObservationsParamsHrank = "infraclass"
	GetObservationsParamsHrankInfrahybrid   GetObservationsParamsHrank = "infrahybrid"
	GetObservationsParamsHrankInfraorder    GetObservationsParamsHrank = "infraorder"
	GetObservationsParamsHrankKingdom       GetObservationsParamsHrank = "kingdom"
	GetObservationsParamsHrankOrder         GetObservationsParamsHrank = "order"
	GetObservationsParamsHrankParvorder     GetObservationsParamsHrank = "parvorder"
	GetObservationsParamsHrankPhylum        GetObservationsParamsHrank = "phylum"
	GetObservationsParamsHrankSection       GetObservationsParamsHrank = "section"
	GetObservationsParamsHrankSpecies       GetObservationsParamsHrank = "species"
	GetObservationsParamsHrankSubclass      GetObservationsParamsHrank = "subclass"
	GetObservationsParamsHrankSubfamily     GetObservationsParamsHrank = "subfamily"
	GetObservationsParamsHrankSubgenus      GetObservationsParamsHrank = "subgenus"
	GetObservationsParamsHrankSuborder      GetObservationsParamsHrank = "suborder"
	GetObservationsParamsHrankSubphylum     GetObservationsParamsHrank = "subphylum"
	GetObservationsParamsHrankSubsection    GetObservationsParamsHrank = "subsection"
	GetObservationsParamsHrankSubspecies    GetObservationsParamsHrank = "subspecies"
	GetObservationsParamsHrankSubterclass   GetObservationsParamsHrank = "subterclass"
	GetObservationsParamsHrankSubtribe      GetObservationsParamsHrank = "subtribe"
	GetObservationsParamsHrankSuperclass    GetObservationsParamsHrank = "superclass"
	GetObservationsParamsHrankSuperfamily   GetObservationsParamsHrank = "superfamily"
	GetObservationsParamsHrankSuperorder    GetObservationsParamsHrank = "superorder"
	GetObservationsParamsHrankSupertribe    GetObservationsParamsHrank = "supertribe"
	GetObservationsParamsHrankTribe         GetObservationsParamsHrank = "tribe"
	GetObservationsParamsHrankVariety       GetObservationsParamsHrank = "variety"
	GetObservationsParamsHrankZoosection    GetObservationsParamsHrank = "zoosection"
	GetObservationsParamsHrankZoosubsection GetObservationsParamsHrank = "zoosubsection"
)

// Defines values for GetObservationsParamsLrank.
const (
	GetObservationsParamsLrankClass         GetObservationsParamsLrank = "class"
	GetObservationsParamsLrankComplex       GetObservationsParamsLrank = "complex"
	GetObservationsParamsLrankEpifamily     GetObservationsParamsLrank = "epifamily"
	GetObservationsParamsLrankFamily        GetObservationsParamsLrank = "family"
	GetObservationsParamsLrankForm          GetObservationsParamsLrank = "form"
	GetObservationsParamsLrankGenus         GetObservationsParamsLrank = "genus"
	GetObservationsParamsLrankGenushybrid   GetObservationsParamsLrank = "genushybrid"
	GetObservationsParamsLrankHybrid        GetObservationsParamsLrank = "hybrid"
	GetObservationsParamsLrankInfraclass    GetObservationsParamsLrank = "infraclass"
	GetObservationsParamsLrankInfrahybrid   GetObservationsParamsLrank = "infrahybrid"
	GetObservationsParamsLrankInfraorder    GetObservationsParamsLrank = "infraorder"
	GetObservationsParamsLrankKingdom       GetObservationsParamsLrank = "kingdom"
	GetObservationsParamsLrankOrder         GetObservationsParamsLrank = "order"
	GetObservationsParamsLrankParvorder     GetObservationsParamsLrank = "parvorder"
	GetObservationsParamsLrankPhylum        GetObservationsParamsLrank = "phylum"
	GetObservationsParamsLrankSection       GetObservationsParamsLrank = "section"
	GetObservationsParamsLrankSpecies       GetObservationsParamsLrank = "species"
	GetObservationsParamsLrankSubclass      GetObservationsParamsLrank = "subclass"
	GetObservationsParamsLrankSubfamily     GetObservationsParamsLrank = "subfamily"
	GetObservationsParamsLrankSubgenus      GetObservationsParamsLrank = "subgenus"
	GetObservationsParamsLrankSuborder      GetObservationsParamsLrank = "suborder"
	GetObservationsParamsLrankSubphylum     GetObservationsParamsLrank = "subphylum"
	GetObservationsParamsLrankSubsection    GetObservationsParamsLrank = "subsection"
	GetObservationsParamsLrankSubspecies    GetObservationsParamsLrank = "subspecies"
	GetObservationsParamsLrankSubterclass   GetObservationsParamsLrank = "subterclass"
	GetObservationsParamsLrankSubtribe      GetObservationsParamsLrank = "subtribe"
	GetObservationsParamsLrankSuperclass    GetObservationsParamsLrank = "superclass"
	GetObservationsParamsLrankSuperfamily   GetObservationsParamsLrank = "superfamily"
	GetObservationsParamsLrankSuperorder    GetObservationsParamsLrank = "superorder"
	GetObservationsParamsLrankSupertribe    GetObservationsParamsLrank = "supertribe"
	GetObservationsParamsLrankTribe         GetObservationsParamsLrank = "tribe"
	GetObservationsParamsLrankVariety       GetObservationsParamsLrank = "variety"
	GetObservationsParamsLrankZoosection    GetObservationsParamsLrank = "zoosection"
	GetObservationsParamsLrankZoosubsection GetObservationsParamsLrank = "zoosubsection"
)

// Defines values for GetObservationsParamsIconicTaxa.
const (
	GetObservationsParamsIconicTaxaActinopterygii GetObservationsParamsIconicTaxa = "Actinopterygii"
	GetObservationsParamsIconicTaxaAmphibia       GetObservationsParamsIconicTaxa = "Amphibia"
	GetObservationsParamsIconicTaxaAnimalia       GetObservationsParamsIconicTaxa = "Animalia"
	GetObservationsParamsIconicTaxaArachnida      GetObservationsParamsIconicTaxa = "Arachnida"
	GetObservationsParamsIconicTaxaAves           GetObservationsParamsIconicTaxa = "Aves"
	GetObservationsParamsIconicTaxaChromista      GetObservationsParamsIconicTaxa = "Chromista"
	GetObservationsParamsIconicTaxaFungi          GetObservationsParamsIconicTaxa = "Fungi"
	GetObservationsParamsIconicTaxaInsecta        GetObservationsParamsIconicTaxa = "Insecta"
	GetObservationsParamsIconicTaxaMammalia       GetObservationsParamsIconicTaxa = "Mammalia"
	GetObservationsParamsIconicTaxaMollusca       GetObservationsParamsIconicTaxa = "Mollusca"
	GetObservationsParamsIconicTaxaPlantae        GetObservationsParamsIconicTaxa = "Plantae"
	GetObservationsParamsIconicTaxaProtozoa       GetObservationsParamsIconicTaxa = "Protozoa"
	GetObservationsParamsIconicTaxaReptilia       GetObservationsParamsIconicTaxa = "Reptilia"
	GetObservationsParamsIconicTaxaUnknown        GetObservationsParamsIconicTaxa = "unknown"
)

// Defines values for GetObservationsParamsIdentifications.
const (
	GetObservationsParamsIdentificationsMostAgree    GetObservationsParamsIdentifications = "most_agree"
	GetObservationsParamsIdentificationsMostDisagree GetObservationsParamsIdentifications = "most_disagree"
	GetObservationsParamsIdentificationsSomeAgree    GetObservationsParamsIdentifications = "some_agree"
)

// Defines values for GetObservationsParamsSearchOn.
const (
	GetObservationsParamsSearchOnDescription        GetObservationsParamsSearchOn = "description"
	GetObservationsParamsSearchOnNames              GetObservationsParamsSearchOn = "names"
	GetObservationsParamsSearchOnPlace              GetObservationsParamsSearchOn = "place"
	GetObservationsParamsSearchOnTags               GetObservationsParamsSearchOn = "tags"
	GetObservationsParamsSearchOnTaxonPageObsPhotos GetObservationsParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetObservationsParamsQualityGrade.
const (
	GetObservationsParamsQualityGradeCasual   GetObservationsParamsQualityGrade = "casual"
	GetObservationsParamsQualityGradeNeedsId  GetObservationsParamsQualityGrade = "needs_id"
	GetObservationsParamsQualityGradeResearch GetObservationsParamsQualityGrade = "research"
)

// Defines values for GetObservationsParamsOrder.
const (
	GetObservationsParamsOrderAsc  GetObservationsParamsOrder = "asc"
	GetObservationsParamsOrderDesc GetObservationsParamsOrder = "desc"
)

// Defines values for GetObservationsParamsOrderBy.
const (
	GetObservationsParamsOrderByCreatedAt    GetObservationsParamsOrderBy = "created_at"
	GetObservationsParamsOrderByGeoScore     GetObservationsParamsOrderBy = "geo_score"
	GetObservationsParamsOrderById           GetObservationsParamsOrderBy = "id"
	GetObservationsParamsOrderByObservedOn   GetObservationsParamsOrderBy = "observed_on"
	GetObservationsParamsOrderByRandom       GetObservationsParamsOrderBy = "random"
	GetObservationsParamsOrderBySpeciesGuess GetObservationsParamsOrderBy = "species_guess"
	GetObservationsParamsOrderByUpdatedAt    GetObservationsParamsOrderBy = "updated_at"
	GetObservationsParamsOrderByVotes        GetObservationsParamsOrderBy = "votes"
)

// Defines values for GetObservationsHistogramParamsLicense.
const (
	GetObservationsHistogramParamsLicenseCc0      GetObservationsHistogramParamsLicense = "cc0"
	GetObservationsHistogramParamsLicenseCcBy     GetObservationsHistogramParamsLicense = "cc-by"
	GetObservationsHistogramParamsLicenseCcByNc   GetObservationsHistogramParamsLicense = "cc-by-nc"
	GetObservationsHistogramParamsLicenseCcByNcNd GetObservationsHistogramParamsLicense = "cc-by-nc-nd"
	GetObservationsHistogramParamsLicenseCcByNcSa GetObservationsHistogramParamsLicense = "cc-by-nc-sa"
	GetObservationsHistogramParamsLicenseCcByNd   GetObservationsHistogramParamsLicense = "cc-by-nd"
	GetObservationsHistogramParamsLicenseCcBySa   GetObservationsHistogramParamsLicense = "cc-by-sa"
)

// Defines values for GetObservationsHistogramParamsPhotoLicense.
const (
	GetObservationsHistogramParamsPhotoLicenseCc0      GetObservationsHistogramParamsPhotoLicense = "cc0"
	GetObservationsHistogramParamsPhotoLicenseCcBy     GetObservationsHistogramParamsPhotoLicense = "cc-by"
	GetObservationsHistogramParamsPhotoLicenseCcByNc   GetObservationsHistogramParamsPhotoLicense = "cc-by-nc"
	GetObservationsHistogramParamsPhotoLicenseCcByNcNd GetObservationsHistogramParamsPhotoLicense = "cc-by-nc-nd"
	GetObservationsHistogramParamsPhotoLicenseCcByNcSa GetObservationsHistogramParamsPhotoLicense = "cc-by-nc-sa"
	GetObservationsHistogramParamsPhotoLicenseCcByNd   GetObservationsHistogramParamsPhotoLicense = "cc-by-nd"
	GetObservationsHistogramParamsPhotoLicenseCcBySa   GetObservationsHistogramParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetObservationsHistogramParamsRank.
const (
	GetObservationsHistogramParamsRankClass         GetObservationsHistogramParamsRank = "class"
	GetObservationsHistogramParamsRankComplex       GetObservationsHistogramParamsRank = "complex"
	GetObservationsHistogramParamsRankEpifamily     GetObservationsHistogramParamsRank = "epifamily"
	GetObservationsHistogramParamsRankFamily        GetObservationsHistogramParamsRank = "family"
	GetObservationsHistogramParamsRankForm          GetObservationsHistogramParamsRank = "form"
	GetObservationsHistogramParamsRankGenus         GetObservationsHistogramParamsRank = "genus"
	GetObservationsHistogramParamsRankGenushybrid   GetObservationsHistogramParamsRank = "genushybrid"
	GetObservationsHistogramParamsRankHybrid        GetObservationsHistogramParamsRank = "hybrid"
	GetObservationsHistogramParamsRankInfraclass    GetObservationsHistogramParamsRank = "infraclass"
	GetObservationsHistogramParamsRankInfrahybrid   GetObservationsHistogramParamsRank = "infrahybrid"
	GetObservationsHistogramParamsRankInfraorder    GetObservationsHistogramParamsRank = "infraorder"
	GetObservationsHistogramParamsRankKingdom       GetObservationsHistogramParamsRank = "kingdom"
	GetObservationsHistogramParamsRankOrder         GetObservationsHistogramParamsRank = "order"
	GetObservationsHistogramParamsRankParvorder     GetObservationsHistogramParamsRank = "parvorder"
	GetObservationsHistogramParamsRankPhylum        GetObservationsHistogramParamsRank = "phylum"
	GetObservationsHistogramParamsRankSection       GetObservationsHistogramParamsRank = "section"
	GetObservationsHistogramParamsRankSpecies       GetObservationsHistogramParamsRank = "species"
	GetObservationsHistogramParamsRankSubclass      GetObservationsHistogramParamsRank = "subclass"
	GetObservationsHistogramParamsRankSubfamily     GetObservationsHistogramParamsRank = "subfamily"
	GetObservationsHistogramParamsRankSubgenus      GetObservationsHistogramParamsRank = "subgenus"
	GetObservationsHistogramParamsRankSuborder      GetObservationsHistogramParamsRank = "suborder"
	GetObservationsHistogramParamsRankSubphylum     GetObservationsHistogramParamsRank = "subphylum"
	GetObservationsHistogramParamsRankSubsection    GetObservationsHistogramParamsRank = "subsection"
	GetObservationsHistogramParamsRankSubspecies    GetObservationsHistogramParamsRank = "subspecies"
	GetObservationsHistogramParamsRankSubterclass   GetObservationsHistogramParamsRank = "subterclass"
	GetObservationsHistogramParamsRankSubtribe      GetObservationsHistogramParamsRank = "subtribe"
	GetObservationsHistogramParamsRankSuperclass    GetObservationsHistogramParamsRank = "superclass"
	GetObservationsHistogramParamsRankSuperfamily   GetObservationsHistogramParamsRank = "superfamily"
	GetObservationsHistogramParamsRankSuperorder    GetObservationsHistogramParamsRank = "superorder"
	GetObservationsHistogramParamsRankSupertribe    GetObservationsHistogramParamsRank = "supertribe"
	GetObservationsHistogramParamsRankTribe         GetObservationsHistogramParamsRank = "tribe"
	GetObservationsHistogramParamsRankVariety       GetObservationsHistogramParamsRank = "variety"
	GetObservationsHistogramParamsRankZoosection    GetObservationsHistogramParamsRank = "zoosection"
	GetObservationsHistogramParamsRankZoosubsection GetObservationsHistogramParamsRank = "zoosubsection"
)

// Defines values for GetObservationsHistogramParamsSoundLicense.
const (
	GetObservationsHistogramParamsSoundLicenseCc0      GetObservationsHistogramParamsSoundLicense = "cc0"
	GetObservationsHistogramParamsSoundLicenseCcBy     GetObservationsHistogramParamsSoundLicense = "cc-by"
	GetObservationsHistogramParamsSoundLicenseCcByNc   GetObservationsHistogramParamsSoundLicense = "cc-by-nc"
	GetObservationsHistogramParamsSoundLicenseCcByNcNd GetObservationsHistogramParamsSoundLicense = "cc-by-nc-nd"
	GetObservationsHistogramParamsSoundLicenseCcByNcSa GetObservationsHistogramParamsSoundLicense = "cc-by-nc-sa"
	GetObservationsHistogramParamsSoundLicenseCcByNd   GetObservationsHistogramParamsSoundLicense = "cc-by-nd"
	GetObservationsHistogramParamsSoundLicenseCcBySa   GetObservationsHistogramParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetObservationsHistogramParamsCsi.
const (
	GetObservationsHistogramParamsCsiCR GetObservationsHistogramParamsCsi = "CR"
	GetObservationsHistogramParamsCsiEN GetObservationsHistogramParamsCsi = "EN"
	GetObservationsHistogramParamsCsiEW GetObservationsHistogramParamsCsi = "EW"
	GetObservationsHistogramParamsCsiEX GetObservationsHistogramParamsCsi = "EX"
	GetObservationsHistogramParamsCsiLC GetObservationsHistogramParamsCsi = "LC"
	GetObservationsHistogramParamsCsiNT GetObservationsHistogramParamsCsi = "NT"
	GetObservationsHistogramParamsCsiVU GetObservationsHistogramParamsCsi = "VU"
)

// Defines values for GetObservationsHistogramParamsGeoprivacy.
const (
	GetObservationsHistogramParamsGeoprivacyObscured        GetObservationsHistogramParamsGeoprivacy = "obscured"
	GetObservationsHistogramParamsGeoprivacyObscuredPrivate GetObservationsHistogramParamsGeoprivacy = "obscured_private"
	GetObservationsHistogramParamsGeoprivacyOpen            GetObservationsHistogramParamsGeoprivacy = "open"
	GetObservationsHistogramParamsGeoprivacyPrivate         GetObservationsHistogramParamsGeoprivacy = "private"
)

// Defines values for GetObservationsHistogramParamsTaxonGeoprivacy.
const (
	GetObservationsHistogramParamsTaxonGeoprivacyObscured        GetObservationsHistogramParamsTaxonGeoprivacy = "obscured"
	GetObservationsHistogramParamsTaxonGeoprivacyObscuredPrivate GetObservationsHistogramParamsTaxonGeoprivacy = "obscured_private"
	GetObservationsHistogramParamsTaxonGeoprivacyOpen            GetObservationsHistogramParamsTaxonGeoprivacy = "open"
	GetObservationsHistogramParamsTaxonGeoprivacyPrivate         GetObservationsHistogramParamsTaxonGeoprivacy = "private"
)

// Defines values for GetObservationsHistogramParamsObscuration.
const (
	GetObservationsHistogramParamsObscurationNone     GetObservationsHistogramParamsObscuration = "none"
	GetObservationsHistogramParamsObscurationObscured GetObservationsHistogramParamsObscuration = "obscured"
	GetObservationsHistogramParamsObscurationPrivate  GetObservationsHistogramParamsObscuration = "private"
)

// Defines values for GetObservationsHistogramParamsHrank.
const (
	GetObservationsHistogramParamsHrankClass         GetObservationsHistogramParamsHrank = "class"
	GetObservationsHistogramParamsHrankComplex       GetObservationsHistogramParamsHrank = "complex"
	GetObservationsHistogramParamsHrankEpifamily     GetObservationsHistogramParamsHrank = "epifamily"
	GetObservationsHistogramParamsHrankFamily        GetObservationsHistogramParamsHrank = "family"
	GetObservationsHistogramParamsHrankForm          GetObservationsHistogramParamsHrank = "form"
	GetObservationsHistogramParamsHrankGenus         GetObservationsHistogramParamsHrank = "genus"
	GetObservationsHistogramParamsHrankGenushybrid   GetObservationsHistogramParamsHrank = "genushybrid"
	GetObservationsHistogramParamsHrankHybrid        GetObservationsHistogramParamsHrank = "hybrid"
	GetObservationsHistogramParamsHrankInfraclass    GetObservationsHistogramParamsHrank = "infraclass"
	GetObservationsHistogramParamsHrankInfrahybrid   GetObservationsHistogramParamsHrank = "infrahybrid"
	GetObservationsHistogramParamsHrankInfraorder    GetObservationsHistogramParamsHrank = "infraorder"
	GetObservationsHistogramParamsHrankKingdom       GetObservationsHistogramParamsHrank = "kingdom"
	GetObservationsHistogramParamsHrankOrder         GetObservationsHistogramParamsHrank = "order"
	GetObservationsHistogramParamsHrankParvorder     GetObservationsHistogramParamsHrank = "parvorder"
	GetObservationsHistogramParamsHrankPhylum        GetObservationsHistogramParamsHrank = "phylum"
	GetObservationsHistogramParamsHrankSection       GetObservationsHistogramParamsHrank = "section"
	GetObservationsHistogramParamsHrankSpecies       GetObservationsHistogramParamsHrank = "species"
	GetObservationsHistogramParamsHrankSubclass      GetObservationsHistogramParamsHrank = "subclass"
	GetObservationsHistogramParamsHrankSubfamily     GetObservationsHistogramParamsHrank = "subfamily"
	GetObservationsHistogramParamsHrankSubgenus      GetObservationsHistogramParamsHrank = "subgenus"
	GetObservationsHistogramParamsHrankSuborder      GetObservationsHistogramParamsHrank = "suborder"
	GetObservationsHistogramParamsHrankSubphylum     GetObservationsHistogramParamsHrank = "subphylum"
	GetObservationsHistogramParamsHrankSubsection    GetObservationsHistogramParamsHrank = "subsection"
	GetObservationsHistogramParamsHrankSubspecies    GetObservationsHistogramParamsHrank = "subspecies"
	GetObservationsHistogramParamsHrankSubterclass   GetObservationsHistogramParamsHrank = "subterclass"
	GetObservationsHistogramParamsHrankSubtribe      GetObservationsHistogramParamsHrank = "subtribe"
	GetObservationsHistogramParamsHrankSuperclass    GetObservationsHistogramParamsHrank = "superclass"
	GetObservationsHistogramParamsHrankSuperfamily   GetObservationsHistogramParamsHrank = "superfamily"
	GetObservationsHistogramParamsHrankSuperorder    GetObservationsHistogramParamsHrank = "superorder"
	GetObservationsHistogramParamsHrankSupertribe    GetObservationsHistogramParamsHrank = "supertribe"
	GetObservationsHistogramParamsHrankTribe         GetObservationsHistogramParamsHrank = "tribe"
	GetObservationsHistogramParamsHrankVariety       GetObservationsHistogramParamsHrank = "variety"
	GetObservationsHistogramParamsHrankZoosection    GetObservationsHistogramParamsHrank = "zoosection"
	GetObservationsHistogramParamsHrankZoosubsection GetObservationsHistogramParamsHrank = "zoosubsection"
)

// Defines values for GetObservationsHistogramParamsLrank.
const (
	GetObservationsHistogramParamsLrankClass         GetObservationsHistogramParamsLrank = "class"
	GetObservationsHistogramParamsLrankComplex       GetObservationsHistogramParamsLrank = "complex"
	GetObservationsHistogramParamsLrankEpifamily     GetObservationsHistogramParamsLrank = "epifamily"
	GetObservationsHistogramParamsLrankFamily        GetObservationsHistogramParamsLrank = "family"
	GetObservationsHistogramParamsLrankForm          GetObservationsHistogramParamsLrank = "form"
	GetObservationsHistogramParamsLrankGenus         GetObservationsHistogramParamsLrank = "genus"
	GetObservationsHistogramParamsLrankGenushybrid   GetObservationsHistogramParamsLrank = "genushybrid"
	GetObservationsHistogramParamsLrankHybrid        GetObservationsHistogramParamsLrank = "hybrid"
	GetObservationsHistogramParamsLrankInfraclass    GetObservationsHistogramParamsLrank = "infraclass"
	GetObservationsHistogramParamsLrankInfrahybrid   GetObservationsHistogramParamsLrank = "infrahybrid"
	GetObservationsHistogramParamsLrankInfraorder    GetObservationsHistogramParamsLrank = "infraorder"
	GetObservationsHistogramParamsLrankKingdom       GetObservationsHistogramParamsLrank = "kingdom"
	GetObservationsHistogramParamsLrankOrder         GetObservationsHistogramParamsLrank = "order"
	GetObservationsHistogramParamsLrankParvorder     GetObservationsHistogramParamsLrank = "parvorder"
	GetObservationsHistogramParamsLrankPhylum        GetObservationsHistogramParamsLrank = "phylum"
	GetObservationsHistogramParamsLrankSection       GetObservationsHistogramParamsLrank = "section"
	GetObservationsHistogramParamsLrankSpecies       GetObservationsHistogramParamsLrank = "species"
	GetObservationsHistogramParamsLrankSubclass      GetObservationsHistogramParamsLrank = "subclass"
	GetObservationsHistogramParamsLrankSubfamily     GetObservationsHistogramParamsLrank = "subfamily"
	GetObservationsHistogramParamsLrankSubgenus      GetObservationsHistogramParamsLrank = "subgenus"
	GetObservationsHistogramParamsLrankSuborder      GetObservationsHistogramParamsLrank = "suborder"
	GetObservationsHistogramParamsLrankSubphylum     GetObservationsHistogramParamsLrank = "subphylum"
	GetObservationsHistogramParamsLrankSubsection    GetObservationsHistogramParamsLrank = "subsection"
	GetObservationsHistogramParamsLrankSubspecies    GetObservationsHistogramParamsLrank = "subspecies"
	GetObservationsHistogramParamsLrankSubterclass   GetObservationsHistogramParamsLrank = "subterclass"
	GetObservationsHistogramParamsLrankSubtribe      GetObservationsHistogramParamsLrank = "subtribe"
	GetObservationsHistogramParamsLrankSuperclass    GetObservationsHistogramParamsLrank = "superclass"
	GetObservationsHistogramParamsLrankSuperfamily   GetObservationsHistogramParamsLrank = "superfamily"
	GetObservationsHistogramParamsLrankSuperorder    GetObservationsHistogramParamsLrank = "superorder"
	GetObservationsHistogramParamsLrankSupertribe    GetObservationsHistogramParamsLrank = "supertribe"
	GetObservationsHistogramParamsLrankTribe         GetObservationsHistogramParamsLrank = "tribe"
	GetObservationsHistogramParamsLrankVariety       GetObservationsHistogramParamsLrank = "variety"
	GetObservationsHistogramParamsLrankZoosection    GetObservationsHistogramParamsLrank = "zoosection"
	GetObservationsHistogramParamsLrankZoosubsection GetObservationsHistogramParamsLrank = "zoosubsection"
)

// Defines values for GetObservationsHistogramParamsIconicTaxa.
const (
	GetObservationsHistogramParamsIconicTaxaActinopterygii GetObservationsHistogramParamsIconicTaxa = "Actinopterygii"
	GetObservationsHistogramParamsIconicTaxaAmphibia       GetObservationsHistogramParamsIconicTaxa = "Amphibia"
	GetObservationsHistogramParamsIconicTaxaAnimalia       GetObservationsHistogramParamsIconicTaxa = "Animalia"
	GetObservationsHistogramParamsIconicTaxaArachnida      GetObservationsHistogramParamsIconicTaxa = "Arachnida"
	GetObservationsHistogramParamsIconicTaxaAves           GetObservationsHistogramParamsIconicTaxa = "Aves"
	GetObservationsHistogramParamsIconicTaxaChromista      GetObservationsHistogramParamsIconicTaxa = "Chromista"
	GetObservationsHistogramParamsIconicTaxaFungi          GetObservationsHistogramParamsIconicTaxa = "Fungi"
	GetObservationsHistogramParamsIconicTaxaInsecta        GetObservationsHistogramParamsIconicTaxa = "Insecta"
	GetObservationsHistogramParamsIconicTaxaMammalia       GetObservationsHistogramParamsIconicTaxa = "Mammalia"
	GetObservationsHistogramParamsIconicTaxaMollusca       GetObservationsHistogramParamsIconicTaxa = "Mollusca"
	GetObservationsHistogramParamsIconicTaxaPlantae        GetObservationsHistogramParamsIconicTaxa = "Plantae"
	GetObservationsHistogramParamsIconicTaxaProtozoa       GetObservationsHistogramParamsIconicTaxa = "Protozoa"
	GetObservationsHistogramParamsIconicTaxaReptilia       GetObservationsHistogramParamsIconicTaxa = "Reptilia"
	GetObservationsHistogramParamsIconicTaxaUnknown        GetObservationsHistogramParamsIconicTaxa = "unknown"
)

// Defines values for GetObservationsHistogramParamsIdentifications.
const (
	GetObservationsHistogramParamsIdentificationsMostAgree    GetObservationsHistogramParamsIdentifications = "most_agree"
	GetObservationsHistogramParamsIdentificationsMostDisagree GetObservationsHistogramParamsIdentifications = "most_disagree"
	GetObservationsHistogramParamsIdentificationsSomeAgree    GetObservationsHistogramParamsIdentifications = "some_agree"
)

// Defines values for GetObservationsHistogramParamsSearchOn.
const (
	GetObservationsHistogramParamsSearchOnDescription        GetObservationsHistogramParamsSearchOn = "description"
	GetObservationsHistogramParamsSearchOnNames              GetObservationsHistogramParamsSearchOn = "names"
	GetObservationsHistogramParamsSearchOnPlace              GetObservationsHistogramParamsSearchOn = "place"
	GetObservationsHistogramParamsSearchOnTags               GetObservationsHistogramParamsSearchOn = "tags"
	GetObservationsHistogramParamsSearchOnTaxonPageObsPhotos GetObservationsHistogramParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetObservationsHistogramParamsQualityGrade.
const (
	GetObservationsHistogramParamsQualityGradeCasual   GetObservationsHistogramParamsQualityGrade = "casual"
	GetObservationsHistogramParamsQualityGradeNeedsId  GetObservationsHistogramParamsQualityGrade = "needs_id"
	GetObservationsHistogramParamsQualityGradeResearch GetObservationsHistogramParamsQualityGrade = "research"
)

// Defines values for GetObservationsHistogramParamsOrder.
const (
	GetObservationsHistogramParamsOrderAsc  GetObservationsHistogramParamsOrder = "asc"
	GetObservationsHistogramParamsOrderDesc GetObservationsHistogramParamsOrder = "desc"
)

// Defines values for GetObservationsHistogramParamsOrderBy.
const (
	GetObservationsHistogramParamsOrderByCreatedAt    GetObservationsHistogramParamsOrderBy = "created_at"
	GetObservationsHistogramParamsOrderByGeoScore     GetObservationsHistogramParamsOrderBy = "geo_score"
	GetObservationsHistogramParamsOrderById           GetObservationsHistogramParamsOrderBy = "id"
	GetObservationsHistogramParamsOrderByObservedOn   GetObservationsHistogramParamsOrderBy = "observed_on"
	GetObservationsHistogramParamsOrderByRandom       GetObservationsHistogramParamsOrderBy = "random"
	GetObservationsHistogramParamsOrderBySpeciesGuess GetObservationsHistogramParamsOrderBy = "species_guess"
	GetObservationsHistogramParamsOrderByUpdatedAt    GetObservationsHistogramParamsOrderBy = "updated_at"
	GetObservationsHistogramParamsOrderByVotes        GetObservationsHistogramParamsOrderBy = "votes"
)

// Defines values for GetObservationsHistogramParamsDateField.
const (
	GetObservationsHistogramParamsDateFieldCreated  GetObservationsHistogramParamsDateField = "created"
	GetObservationsHistogramParamsDateFieldObserved GetObservationsHistogramParamsDateField = "observed"
)

// Defines values for GetObservationsHistogramParamsInterval.
const (
	GetObservationsHistogramParamsIntervalDay         GetObservationsHistogramParamsInterval = "day"
	GetObservationsHistogramParamsIntervalHour        GetObservationsHistogramParamsInterval = "hour"
	GetObservationsHistogramParamsIntervalMonth       GetObservationsHistogramParamsInterval = "month"
	GetObservationsHistogramParamsIntervalMonthOfYear GetObservationsHistogramParamsInterval = "month_of_year"
	GetObservationsHistogramParamsIntervalWeek        GetObservationsHistogramParamsInterval = "week"
	GetObservationsHistogramParamsIntervalWeekOfYear  GetObservationsHistogramParamsInterval = "week_of_year"
	GetObservationsHistogramParamsIntervalYear        GetObservationsHistogramParamsInterval = "year"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsLicense.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsLicenseCc0      GetObservationsIconicTaxaSpeciesCountsParamsLicense = "cc0"
	GetObservationsIconicTaxaSpeciesCountsParamsLicenseCcBy     GetObservationsIconicTaxaSpeciesCountsParamsLicense = "cc-by"
	GetObservationsIconicTaxaSpeciesCountsParamsLicenseCcByNc   GetObservationsIconicTaxaSpeciesCountsParamsLicense = "cc-by-nc"
	GetObservationsIconicTaxaSpeciesCountsParamsLicenseCcByNcNd GetObservationsIconicTaxaSpeciesCountsParamsLicense = "cc-by-nc-nd"
	GetObservationsIconicTaxaSpeciesCountsParamsLicenseCcByNcSa GetObservationsIconicTaxaSpeciesCountsParamsLicense = "cc-by-nc-sa"
	GetObservationsIconicTaxaSpeciesCountsParamsLicenseCcByNd   GetObservationsIconicTaxaSpeciesCountsParamsLicense = "cc-by-nd"
	GetObservationsIconicTaxaSpeciesCountsParamsLicenseCcBySa   GetObservationsIconicTaxaSpeciesCountsParamsLicense = "cc-by-sa"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicense.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicenseCc0      GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicense = "cc0"
	GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicenseCcBy     GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicense = "cc-by"
	GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicenseCcByNc   GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicense = "cc-by-nc"
	GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicenseCcByNcNd GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicense = "cc-by-nc-nd"
	GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicenseCcByNcSa GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicense = "cc-by-nc-sa"
	GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicenseCcByNd   GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicense = "cc-by-nd"
	GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicenseCcBySa   GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsRank.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsRankClass         GetObservationsIconicTaxaSpeciesCountsParamsRank = "class"
	GetObservationsIconicTaxaSpeciesCountsParamsRankComplex       GetObservationsIconicTaxaSpeciesCountsParamsRank = "complex"
	GetObservationsIconicTaxaSpeciesCountsParamsRankEpifamily     GetObservationsIconicTaxaSpeciesCountsParamsRank = "epifamily"
	GetObservationsIconicTaxaSpeciesCountsParamsRankFamily        GetObservationsIconicTaxaSpeciesCountsParamsRank = "family"
	GetObservationsIconicTaxaSpeciesCountsParamsRankForm          GetObservationsIconicTaxaSpeciesCountsParamsRank = "form"
	GetObservationsIconicTaxaSpeciesCountsParamsRankGenus         GetObservationsIconicTaxaSpeciesCountsParamsRank = "genus"
	GetObservationsIconicTaxaSpeciesCountsParamsRankGenushybrid   GetObservationsIconicTaxaSpeciesCountsParamsRank = "genushybrid"
	GetObservationsIconicTaxaSpeciesCountsParamsRankHybrid        GetObservationsIconicTaxaSpeciesCountsParamsRank = "hybrid"
	GetObservationsIconicTaxaSpeciesCountsParamsRankInfraclass    GetObservationsIconicTaxaSpeciesCountsParamsRank = "infraclass"
	GetObservationsIconicTaxaSpeciesCountsParamsRankInfrahybrid   GetObservationsIconicTaxaSpeciesCountsParamsRank = "infrahybrid"
	GetObservationsIconicTaxaSpeciesCountsParamsRankInfraorder    GetObservationsIconicTaxaSpeciesCountsParamsRank = "infraorder"
	GetObservationsIconicTaxaSpeciesCountsParamsRankKingdom       GetObservationsIconicTaxaSpeciesCountsParamsRank = "kingdom"
	GetObservationsIconicTaxaSpeciesCountsParamsRankOrder         GetObservationsIconicTaxaSpeciesCountsParamsRank = "order"
	GetObservationsIconicTaxaSpeciesCountsParamsRankParvorder     GetObservationsIconicTaxaSpeciesCountsParamsRank = "parvorder"
	GetObservationsIconicTaxaSpeciesCountsParamsRankPhylum        GetObservationsIconicTaxaSpeciesCountsParamsRank = "phylum"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSection       GetObservationsIconicTaxaSpeciesCountsParamsRank = "section"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSpecies       GetObservationsIconicTaxaSpeciesCountsParamsRank = "species"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSubclass      GetObservationsIconicTaxaSpeciesCountsParamsRank = "subclass"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSubfamily     GetObservationsIconicTaxaSpeciesCountsParamsRank = "subfamily"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSubgenus      GetObservationsIconicTaxaSpeciesCountsParamsRank = "subgenus"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSuborder      GetObservationsIconicTaxaSpeciesCountsParamsRank = "suborder"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSubphylum     GetObservationsIconicTaxaSpeciesCountsParamsRank = "subphylum"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSubsection    GetObservationsIconicTaxaSpeciesCountsParamsRank = "subsection"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSubspecies    GetObservationsIconicTaxaSpeciesCountsParamsRank = "subspecies"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSubterclass   GetObservationsIconicTaxaSpeciesCountsParamsRank = "subterclass"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSubtribe      GetObservationsIconicTaxaSpeciesCountsParamsRank = "subtribe"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSuperclass    GetObservationsIconicTaxaSpeciesCountsParamsRank = "superclass"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSuperfamily   GetObservationsIconicTaxaSpeciesCountsParamsRank = "superfamily"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSuperorder    GetObservationsIconicTaxaSpeciesCountsParamsRank = "superorder"
	GetObservationsIconicTaxaSpeciesCountsParamsRankSupertribe    GetObservationsIconicTaxaSpeciesCountsParamsRank = "supertribe"
	GetObservationsIconicTaxaSpeciesCountsParamsRankTribe         GetObservationsIconicTaxaSpeciesCountsParamsRank = "tribe"
	GetObservationsIconicTaxaSpeciesCountsParamsRankVariety       GetObservationsIconicTaxaSpeciesCountsParamsRank = "variety"
	GetObservationsIconicTaxaSpeciesCountsParamsRankZoosection    GetObservationsIconicTaxaSpeciesCountsParamsRank = "zoosection"
	GetObservationsIconicTaxaSpeciesCountsParamsRankZoosubsection GetObservationsIconicTaxaSpeciesCountsParamsRank = "zoosubsection"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsSoundLicense.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsSoundLicenseCc0      GetObservationsIconicTaxaSpeciesCountsParamsSoundLicense = "cc0"
	GetObservationsIconicTaxaSpeciesCountsParamsSoundLicenseCcBy     GetObservationsIconicTaxaSpeciesCountsParamsSoundLicense = "cc-by"
	GetObservationsIconicTaxaSpeciesCountsParamsSoundLicenseCcByNc   GetObservationsIconicTaxaSpeciesCountsParamsSoundLicense = "cc-by-nc"
	GetObservationsIconicTaxaSpeciesCountsParamsSoundLicenseCcByNcNd GetObservationsIconicTaxaSpeciesCountsParamsSoundLicense = "cc-by-nc-nd"
	GetObservationsIconicTaxaSpeciesCountsParamsSoundLicenseCcByNcSa GetObservationsIconicTaxaSpeciesCountsParamsSoundLicense = "cc-by-nc-sa"
	GetObservationsIconicTaxaSpeciesCountsParamsSoundLicenseCcByNd   GetObservationsIconicTaxaSpeciesCountsParamsSoundLicense = "cc-by-nd"
	GetObservationsIconicTaxaSpeciesCountsParamsSoundLicenseCcBySa   GetObservationsIconicTaxaSpeciesCountsParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsCsi.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsCsiCR GetObservationsIconicTaxaSpeciesCountsParamsCsi = "CR"
	GetObservationsIconicTaxaSpeciesCountsParamsCsiEN GetObservationsIconicTaxaSpeciesCountsParamsCsi = "EN"
	GetObservationsIconicTaxaSpeciesCountsParamsCsiEW GetObservationsIconicTaxaSpeciesCountsParamsCsi = "EW"
	GetObservationsIconicTaxaSpeciesCountsParamsCsiEX GetObservationsIconicTaxaSpeciesCountsParamsCsi = "EX"
	GetObservationsIconicTaxaSpeciesCountsParamsCsiLC GetObservationsIconicTaxaSpeciesCountsParamsCsi = "LC"
	GetObservationsIconicTaxaSpeciesCountsParamsCsiNT GetObservationsIconicTaxaSpeciesCountsParamsCsi = "NT"
	GetObservationsIconicTaxaSpeciesCountsParamsCsiVU GetObservationsIconicTaxaSpeciesCountsParamsCsi = "VU"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacy.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacyObscured        GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacy = "obscured"
	GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacyObscuredPrivate GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacy = "obscured_private"
	GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacyOpen            GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacy = "open"
	GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacyPrivate         GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacy = "private"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacy.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacyObscured        GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacy = "obscured"
	GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacyObscuredPrivate GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacy = "obscured_private"
	GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacyOpen            GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacy = "open"
	GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacyPrivate         GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacy = "private"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsObscuration.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsObscurationNone     GetObservationsIconicTaxaSpeciesCountsParamsObscuration = "none"
	GetObservationsIconicTaxaSpeciesCountsParamsObscurationObscured GetObservationsIconicTaxaSpeciesCountsParamsObscuration = "obscured"
	GetObservationsIconicTaxaSpeciesCountsParamsObscurationPrivate  GetObservationsIconicTaxaSpeciesCountsParamsObscuration = "private"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsHrank.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsHrankClass         GetObservationsIconicTaxaSpeciesCountsParamsHrank = "class"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankComplex       GetObservationsIconicTaxaSpeciesCountsParamsHrank = "complex"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankEpifamily     GetObservationsIconicTaxaSpeciesCountsParamsHrank = "epifamily"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankFamily        GetObservationsIconicTaxaSpeciesCountsParamsHrank = "family"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankForm          GetObservationsIconicTaxaSpeciesCountsParamsHrank = "form"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankGenus         GetObservationsIconicTaxaSpeciesCountsParamsHrank = "genus"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankGenushybrid   GetObservationsIconicTaxaSpeciesCountsParamsHrank = "genushybrid"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankHybrid        GetObservationsIconicTaxaSpeciesCountsParamsHrank = "hybrid"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankInfraclass    GetObservationsIconicTaxaSpeciesCountsParamsHrank = "infraclass"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankInfrahybrid   GetObservationsIconicTaxaSpeciesCountsParamsHrank = "infrahybrid"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankInfraorder    GetObservationsIconicTaxaSpeciesCountsParamsHrank = "infraorder"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankKingdom       GetObservationsIconicTaxaSpeciesCountsParamsHrank = "kingdom"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankOrder         GetObservationsIconicTaxaSpeciesCountsParamsHrank = "order"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankParvorder     GetObservationsIconicTaxaSpeciesCountsParamsHrank = "parvorder"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankPhylum        GetObservationsIconicTaxaSpeciesCountsParamsHrank = "phylum"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSection       GetObservationsIconicTaxaSpeciesCountsParamsHrank = "section"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSpecies       GetObservationsIconicTaxaSpeciesCountsParamsHrank = "species"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSubclass      GetObservationsIconicTaxaSpeciesCountsParamsHrank = "subclass"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSubfamily     GetObservationsIconicTaxaSpeciesCountsParamsHrank = "subfamily"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSubgenus      GetObservationsIconicTaxaSpeciesCountsParamsHrank = "subgenus"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSuborder      GetObservationsIconicTaxaSpeciesCountsParamsHrank = "suborder"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSubphylum     GetObservationsIconicTaxaSpeciesCountsParamsHrank = "subphylum"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSubsection    GetObservationsIconicTaxaSpeciesCountsParamsHrank = "subsection"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSubspecies    GetObservationsIconicTaxaSpeciesCountsParamsHrank = "subspecies"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSubterclass   GetObservationsIconicTaxaSpeciesCountsParamsHrank = "subterclass"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSubtribe      GetObservationsIconicTaxaSpeciesCountsParamsHrank = "subtribe"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSuperclass    GetObservationsIconicTaxaSpeciesCountsParamsHrank = "superclass"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSuperfamily   GetObservationsIconicTaxaSpeciesCountsParamsHrank = "superfamily"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSuperorder    GetObservationsIconicTaxaSpeciesCountsParamsHrank = "superorder"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankSupertribe    GetObservationsIconicTaxaSpeciesCountsParamsHrank = "supertribe"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankTribe         GetObservationsIconicTaxaSpeciesCountsParamsHrank = "tribe"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankVariety       GetObservationsIconicTaxaSpeciesCountsParamsHrank = "variety"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankZoosection    GetObservationsIconicTaxaSpeciesCountsParamsHrank = "zoosection"
	GetObservationsIconicTaxaSpeciesCountsParamsHrankZoosubsection GetObservationsIconicTaxaSpeciesCountsParamsHrank = "zoosubsection"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsLrank.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsLrankClass         GetObservationsIconicTaxaSpeciesCountsParamsLrank = "class"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankComplex       GetObservationsIconicTaxaSpeciesCountsParamsLrank = "complex"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankEpifamily     GetObservationsIconicTaxaSpeciesCountsParamsLrank = "epifamily"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankFamily        GetObservationsIconicTaxaSpeciesCountsParamsLrank = "family"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankForm          GetObservationsIconicTaxaSpeciesCountsParamsLrank = "form"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankGenus         GetObservationsIconicTaxaSpeciesCountsParamsLrank = "genus"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankGenushybrid   GetObservationsIconicTaxaSpeciesCountsParamsLrank = "genushybrid"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankHybrid        GetObservationsIconicTaxaSpeciesCountsParamsLrank = "hybrid"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankInfraclass    GetObservationsIconicTaxaSpeciesCountsParamsLrank = "infraclass"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankInfrahybrid   GetObservationsIconicTaxaSpeciesCountsParamsLrank = "infrahybrid"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankInfraorder    GetObservationsIconicTaxaSpeciesCountsParamsLrank = "infraorder"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankKingdom       GetObservationsIconicTaxaSpeciesCountsParamsLrank = "kingdom"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankOrder         GetObservationsIconicTaxaSpeciesCountsParamsLrank = "order"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankParvorder     GetObservationsIconicTaxaSpeciesCountsParamsLrank = "parvorder"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankPhylum        GetObservationsIconicTaxaSpeciesCountsParamsLrank = "phylum"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSection       GetObservationsIconicTaxaSpeciesCountsParamsLrank = "section"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSpecies       GetObservationsIconicTaxaSpeciesCountsParamsLrank = "species"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSubclass      GetObservationsIconicTaxaSpeciesCountsParamsLrank = "subclass"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSubfamily     GetObservationsIconicTaxaSpeciesCountsParamsLrank = "subfamily"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSubgenus      GetObservationsIconicTaxaSpeciesCountsParamsLrank = "subgenus"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSuborder      GetObservationsIconicTaxaSpeciesCountsParamsLrank = "suborder"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSubphylum     GetObservationsIconicTaxaSpeciesCountsParamsLrank = "subphylum"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSubsection    GetObservationsIconicTaxaSpeciesCountsParamsLrank = "subsection"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSubspecies    GetObservationsIconicTaxaSpeciesCountsParamsLrank = "subspecies"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSubterclass   GetObservationsIconicTaxaSpeciesCountsParamsLrank = "subterclass"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSubtribe      GetObservationsIconicTaxaSpeciesCountsParamsLrank = "subtribe"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSuperclass    GetObservationsIconicTaxaSpeciesCountsParamsLrank = "superclass"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSuperfamily   GetObservationsIconicTaxaSpeciesCountsParamsLrank = "superfamily"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSuperorder    GetObservationsIconicTaxaSpeciesCountsParamsLrank = "superorder"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankSupertribe    GetObservationsIconicTaxaSpeciesCountsParamsLrank = "supertribe"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankTribe         GetObservationsIconicTaxaSpeciesCountsParamsLrank = "tribe"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankVariety       GetObservationsIconicTaxaSpeciesCountsParamsLrank = "variety"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankZoosection    GetObservationsIconicTaxaSpeciesCountsParamsLrank = "zoosection"
	GetObservationsIconicTaxaSpeciesCountsParamsLrankZoosubsection GetObservationsIconicTaxaSpeciesCountsParamsLrank = "zoosubsection"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaActinopterygii GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Actinopterygii"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaAmphibia       GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Amphibia"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaAnimalia       GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Animalia"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaArachnida      GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Arachnida"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaAves           GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Aves"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaChromista      GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Chromista"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaFungi          GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Fungi"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaInsecta        GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Insecta"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaMammalia       GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Mammalia"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaMollusca       GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Mollusca"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaPlantae        GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Plantae"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaProtozoa       GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Protozoa"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaReptilia       GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "Reptilia"
	GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxaUnknown        GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa = "unknown"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsIdentifications.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsIdentificationsMostAgree    GetObservationsIconicTaxaSpeciesCountsParamsIdentifications = "most_agree"
	GetObservationsIconicTaxaSpeciesCountsParamsIdentificationsMostDisagree GetObservationsIconicTaxaSpeciesCountsParamsIdentifications = "most_disagree"
	GetObservationsIconicTaxaSpeciesCountsParamsIdentificationsSomeAgree    GetObservationsIconicTaxaSpeciesCountsParamsIdentifications = "some_agree"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsSearchOn.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsSearchOnDescription        GetObservationsIconicTaxaSpeciesCountsParamsSearchOn = "description"
	GetObservationsIconicTaxaSpeciesCountsParamsSearchOnNames              GetObservationsIconicTaxaSpeciesCountsParamsSearchOn = "names"
	GetObservationsIconicTaxaSpeciesCountsParamsSearchOnPlace              GetObservationsIconicTaxaSpeciesCountsParamsSearchOn = "place"
	GetObservationsIconicTaxaSpeciesCountsParamsSearchOnTags               GetObservationsIconicTaxaSpeciesCountsParamsSearchOn = "tags"
	GetObservationsIconicTaxaSpeciesCountsParamsSearchOnTaxonPageObsPhotos GetObservationsIconicTaxaSpeciesCountsParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsQualityGrade.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsQualityGradeCasual   GetObservationsIconicTaxaSpeciesCountsParamsQualityGrade = "casual"
	GetObservationsIconicTaxaSpeciesCountsParamsQualityGradeNeedsId  GetObservationsIconicTaxaSpeciesCountsParamsQualityGrade = "needs_id"
	GetObservationsIconicTaxaSpeciesCountsParamsQualityGradeResearch GetObservationsIconicTaxaSpeciesCountsParamsQualityGrade = "research"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsOrder.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsOrderAsc  GetObservationsIconicTaxaSpeciesCountsParamsOrder = "asc"
	GetObservationsIconicTaxaSpeciesCountsParamsOrderDesc GetObservationsIconicTaxaSpeciesCountsParamsOrder = "desc"
)

// Defines values for GetObservationsIconicTaxaSpeciesCountsParamsOrderBy.
const (
	GetObservationsIconicTaxaSpeciesCountsParamsOrderByCreatedAt    GetObservationsIconicTaxaSpeciesCountsParamsOrderBy = "created_at"
	GetObservationsIconicTaxaSpeciesCountsParamsOrderByGeoScore     GetObservationsIconicTaxaSpeciesCountsParamsOrderBy = "geo_score"
	GetObservationsIconicTaxaSpeciesCountsParamsOrderById           GetObservationsIconicTaxaSpeciesCountsParamsOrderBy = "id"
	GetObservationsIconicTaxaSpeciesCountsParamsOrderByObservedOn   GetObservationsIconicTaxaSpeciesCountsParamsOrderBy = "observed_on"
	GetObservationsIconicTaxaSpeciesCountsParamsOrderByRandom       GetObservationsIconicTaxaSpeciesCountsParamsOrderBy = "random"
	GetObservationsIconicTaxaSpeciesCountsParamsOrderBySpeciesGuess GetObservationsIconicTaxaSpeciesCountsParamsOrderBy = "species_guess"
	GetObservationsIconicTaxaSpeciesCountsParamsOrderByUpdatedAt    GetObservationsIconicTaxaSpeciesCountsParamsOrderBy = "updated_at"
	GetObservationsIconicTaxaSpeciesCountsParamsOrderByVotes        GetObservationsIconicTaxaSpeciesCountsParamsOrderBy = "votes"
)

// Defines values for GetObservationsIdentifiersParamsLicense.
const (
	GetObservationsIdentifiersParamsLicenseCc0      GetObservationsIdentifiersParamsLicense = "cc0"
	GetObservationsIdentifiersParamsLicenseCcBy     GetObservationsIdentifiersParamsLicense = "cc-by"
	GetObservationsIdentifiersParamsLicenseCcByNc   GetObservationsIdentifiersParamsLicense = "cc-by-nc"
	GetObservationsIdentifiersParamsLicenseCcByNcNd GetObservationsIdentifiersParamsLicense = "cc-by-nc-nd"
	GetObservationsIdentifiersParamsLicenseCcByNcSa GetObservationsIdentifiersParamsLicense = "cc-by-nc-sa"
	GetObservationsIdentifiersParamsLicenseCcByNd   GetObservationsIdentifiersParamsLicense = "cc-by-nd"
	GetObservationsIdentifiersParamsLicenseCcBySa   GetObservationsIdentifiersParamsLicense = "cc-by-sa"
)

// Defines values for GetObservationsIdentifiersParamsPhotoLicense.
const (
	GetObservationsIdentifiersParamsPhotoLicenseCc0      GetObservationsIdentifiersParamsPhotoLicense = "cc0"
	GetObservationsIdentifiersParamsPhotoLicenseCcBy     GetObservationsIdentifiersParamsPhotoLicense = "cc-by"
	GetObservationsIdentifiersParamsPhotoLicenseCcByNc   GetObservationsIdentifiersParamsPhotoLicense = "cc-by-nc"
	GetObservationsIdentifiersParamsPhotoLicenseCcByNcNd GetObservationsIdentifiersParamsPhotoLicense = "cc-by-nc-nd"
	GetObservationsIdentifiersParamsPhotoLicenseCcByNcSa GetObservationsIdentifiersParamsPhotoLicense = "cc-by-nc-sa"
	GetObservationsIdentifiersParamsPhotoLicenseCcByNd   GetObservationsIdentifiersParamsPhotoLicense = "cc-by-nd"
	GetObservationsIdentifiersParamsPhotoLicenseCcBySa   GetObservationsIdentifiersParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetObservationsIdentifiersParamsRank.
const (
	GetObservationsIdentifiersParamsRankClass         GetObservationsIdentifiersParamsRank = "class"
	GetObservationsIdentifiersParamsRankComplex       GetObservationsIdentifiersParamsRank = "complex"
	GetObservationsIdentifiersParamsRankEpifamily     GetObservationsIdentifiersParamsRank = "epifamily"
	GetObservationsIdentifiersParamsRankFamily        GetObservationsIdentifiersParamsRank = "family"
	GetObservationsIdentifiersParamsRankForm          GetObservationsIdentifiersParamsRank = "form"
	GetObservationsIdentifiersParamsRankGenus         GetObservationsIdentifiersParamsRank = "genus"
	GetObservationsIdentifiersParamsRankGenushybrid   GetObservationsIdentifiersParamsRank = "genushybrid"
	GetObservationsIdentifiersParamsRankHybrid        GetObservationsIdentifiersParamsRank = "hybrid"
	GetObservationsIdentifiersParamsRankInfraclass    GetObservationsIdentifiersParamsRank = "infraclass"
	GetObservationsIdentifiersParamsRankInfrahybrid   GetObservationsIdentifiersParamsRank = "infrahybrid"
	GetObservationsIdentifiersParamsRankInfraorder    GetObservationsIdentifiersParamsRank = "infraorder"
	GetObservationsIdentifiersParamsRankKingdom       GetObservationsIdentifiersParamsRank = "kingdom"
	GetObservationsIdentifiersParamsRankOrder         GetObservationsIdentifiersParamsRank = "order"
	GetObservationsIdentifiersParamsRankParvorder     GetObservationsIdentifiersParamsRank = "parvorder"
	GetObservationsIdentifiersParamsRankPhylum        GetObservationsIdentifiersParamsRank = "phylum"
	GetObservationsIdentifiersParamsRankSection       GetObservationsIdentifiersParamsRank = "section"
	GetObservationsIdentifiersParamsRankSpecies       GetObservationsIdentifiersParamsRank = "species"
	GetObservationsIdentifiersParamsRankSubclass      GetObservationsIdentifiersParamsRank = "subclass"
	GetObservationsIdentifiersParamsRankSubfamily     GetObservationsIdentifiersParamsRank = "subfamily"
	GetObservationsIdentifiersParamsRankSubgenus      GetObservationsIdentifiersParamsRank = "subgenus"
	GetObservationsIdentifiersParamsRankSuborder      GetObservationsIdentifiersParamsRank = "suborder"
	GetObservationsIdentifiersParamsRankSubphylum     GetObservationsIdentifiersParamsRank = "subphylum"
	GetObservationsIdentifiersParamsRankSubsection    GetObservationsIdentifiersParamsRank = "subsection"
	GetObservationsIdentifiersParamsRankSubspecies    GetObservationsIdentifiersParamsRank = "subspecies"
	GetObservationsIdentifiersParamsRankSubterclass   GetObservationsIdentifiersParamsRank = "subterclass"
	GetObservationsIdentifiersParamsRankSubtribe      GetObservationsIdentifiersParamsRank = "subtribe"
	GetObservationsIdentifiersParamsRankSuperclass    GetObservationsIdentifiersParamsRank = "superclass"
	GetObservationsIdentifiersParamsRankSuperfamily   GetObservationsIdentifiersParamsRank = "superfamily"
	GetObservationsIdentifiersParamsRankSuperorder    GetObservationsIdentifiersParamsRank = "superorder"
	GetObservationsIdentifiersParamsRankSupertribe    GetObservationsIdentifiersParamsRank = "supertribe"
	GetObservationsIdentifiersParamsRankTribe         GetObservationsIdentifiersParamsRank = "tribe"
	GetObservationsIdentifiersParamsRankVariety       GetObservationsIdentifiersParamsRank = "variety"
	GetObservationsIdentifiersParamsRankZoosection    GetObservationsIdentifiersParamsRank = "zoosection"
	GetObservationsIdentifiersParamsRankZoosubsection GetObservationsIdentifiersParamsRank = "zoosubsection"
)

// Defines values for GetObservationsIdentifiersParamsSoundLicense.
const (
	GetObservationsIdentifiersParamsSoundLicenseCc0      GetObservationsIdentifiersParamsSoundLicense = "cc0"
	GetObservationsIdentifiersParamsSoundLicenseCcBy     GetObservationsIdentifiersParamsSoundLicense = "cc-by"
	GetObservationsIdentifiersParamsSoundLicenseCcByNc   GetObservationsIdentifiersParamsSoundLicense = "cc-by-nc"
	GetObservationsIdentifiersParamsSoundLicenseCcByNcNd GetObservationsIdentifiersParamsSoundLicense = "cc-by-nc-nd"
	GetObservationsIdentifiersParamsSoundLicenseCcByNcSa GetObservationsIdentifiersParamsSoundLicense = "cc-by-nc-sa"
	GetObservationsIdentifiersParamsSoundLicenseCcByNd   GetObservationsIdentifiersParamsSoundLicense = "cc-by-nd"
	GetObservationsIdentifiersParamsSoundLicenseCcBySa   GetObservationsIdentifiersParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetObservationsIdentifiersParamsCsi.
const (
	GetObservationsIdentifiersParamsCsiCR GetObservationsIdentifiersParamsCsi = "CR"
	GetObservationsIdentifiersParamsCsiEN GetObservationsIdentifiersParamsCsi = "EN"
	GetObservationsIdentifiersParamsCsiEW GetObservationsIdentifiersParamsCsi = "EW"
	GetObservationsIdentifiersParamsCsiEX GetObservationsIdentifiersParamsCsi = "EX"
	GetObservationsIdentifiersParamsCsiLC GetObservationsIdentifiersParamsCsi = "LC"
	GetObservationsIdentifiersParamsCsiNT GetObservationsIdentifiersParamsCsi = "NT"
	GetObservationsIdentifiersParamsCsiVU GetObservationsIdentifiersParamsCsi = "VU"
)

// Defines values for GetObservationsIdentifiersParamsGeoprivacy.
const (
	GetObservationsIdentifiersParamsGeoprivacyObscured        GetObservationsIdentifiersParamsGeoprivacy = "obscured"
	GetObservationsIdentifiersParamsGeoprivacyObscuredPrivate GetObservationsIdentifiersParamsGeoprivacy = "obscured_private"
	GetObservationsIdentifiersParamsGeoprivacyOpen            GetObservationsIdentifiersParamsGeoprivacy = "open"
	GetObservationsIdentifiersParamsGeoprivacyPrivate         GetObservationsIdentifiersParamsGeoprivacy = "private"
)

// Defines values for GetObservationsIdentifiersParamsTaxonGeoprivacy.
const (
	GetObservationsIdentifiersParamsTaxonGeoprivacyObscured        GetObservationsIdentifiersParamsTaxonGeoprivacy = "obscured"
	GetObservationsIdentifiersParamsTaxonGeoprivacyObscuredPrivate GetObservationsIdentifiersParamsTaxonGeoprivacy = "obscured_private"
	GetObservationsIdentifiersParamsTaxonGeoprivacyOpen            GetObservationsIdentifiersParamsTaxonGeoprivacy = "open"
	GetObservationsIdentifiersParamsTaxonGeoprivacyPrivate         GetObservationsIdentifiersParamsTaxonGeoprivacy = "private"
)

// Defines values for GetObservationsIdentifiersParamsObscuration.
const (
	GetObservationsIdentifiersParamsObscurationNone     GetObservationsIdentifiersParamsObscuration = "none"
	GetObservationsIdentifiersParamsObscurationObscured GetObservationsIdentifiersParamsObscuration = "obscured"
	GetObservationsIdentifiersParamsObscurationPrivate  GetObservationsIdentifiersParamsObscuration = "private"
)

// Defines values for GetObservationsIdentifiersParamsHrank.
const (
	GetObservationsIdentifiersParamsHrankClass         GetObservationsIdentifiersParamsHrank = "class"
	GetObservationsIdentifiersParamsHrankComplex       GetObservationsIdentifiersParamsHrank = "complex"
	GetObservationsIdentifiersParamsHrankEpifamily     GetObservationsIdentifiersParamsHrank = "epifamily"
	GetObservationsIdentifiersParamsHrankFamily        GetObservationsIdentifiersParamsHrank = "family"
	GetObservationsIdentifiersParamsHrankForm          GetObservationsIdentifiersParamsHrank = "form"
	GetObservationsIdentifiersParamsHrankGenus         GetObservationsIdentifiersParamsHrank = "genus"
	GetObservationsIdentifiersParamsHrankGenushybrid   GetObservationsIdentifiersParamsHrank = "genushybrid"
	GetObservationsIdentifiersParamsHrankHybrid        GetObservationsIdentifiersParamsHrank = "hybrid"
	GetObservationsIdentifiersParamsHrankInfraclass    GetObservationsIdentifiersParamsHrank = "infraclass"
	GetObservationsIdentifiersParamsHrankInfrahybrid   GetObservationsIdentifiersParamsHrank = "infrahybrid"
	GetObservationsIdentifiersParamsHrankInfraorder    GetObservationsIdentifiersParamsHrank = "infraorder"
	GetObservationsIdentifiersParamsHrankKingdom       GetObservationsIdentifiersParamsHrank = "kingdom"
	GetObservationsIdentifiersParamsHrankOrder         GetObservationsIdentifiersParamsHrank = "order"
	GetObservationsIdentifiersParamsHrankParvorder     GetObservationsIdentifiersParamsHrank = "parvorder"
	GetObservationsIdentifiersParamsHrankPhylum        GetObservationsIdentifiersParamsHrank = "phylum"
	GetObservationsIdentifiersParamsHrankSection       GetObservationsIdentifiersParamsHrank = "section"
	GetObservationsIdentifiersParamsHrankSpecies       GetObservationsIdentifiersParamsHrank = "species"
	GetObservationsIdentifiersParamsHrankSubclass      GetObservationsIdentifiersParamsHrank = "subclass"
	GetObservationsIdentifiersParamsHrankSubfamily     GetObservationsIdentifiersParamsHrank = "subfamily"
	GetObservationsIdentifiersParamsHrankSubgenus      GetObservationsIdentifiersParamsHrank = "subgenus"
	GetObservationsIdentifiersParamsHrankSuborder      GetObservationsIdentifiersParamsHrank = "suborder"
	GetObservationsIdentifiersParamsHrankSubphylum     GetObservationsIdentifiersParamsHrank = "subphylum"
	GetObservationsIdentifiersParamsHrankSubsection    GetObservationsIdentifiersParamsHrank = "subsection"
	GetObservationsIdentifiersParamsHrankSubspecies    GetObservationsIdentifiersParamsHrank = "subspecies"
	GetObservationsIdentifiersParamsHrankSubterclass   GetObservationsIdentifiersParamsHrank = "subterclass"
	GetObservationsIdentifiersParamsHrankSubtribe      GetObservationsIdentifiersParamsHrank = "subtribe"
	GetObservationsIdentifiersParamsHrankSuperclass    GetObservationsIdentifiersParamsHrank = "superclass"
	GetObservationsIdentifiersParamsHrankSuperfamily   GetObservationsIdentifiersParamsHrank = "superfamily"
	GetObservationsIdentifiersParamsHrankSuperorder    GetObservationsIdentifiersParamsHrank = "superorder"
	GetObservationsIdentifiersParamsHrankSupertribe    GetObservationsIdentifiersParamsHrank = "supertribe"
	GetObservationsIdentifiersParamsHrankTribe         GetObservationsIdentifiersParamsHrank = "tribe"
	GetObservationsIdentifiersParamsHrankVariety       GetObservationsIdentifiersParamsHrank = "variety"
	GetObservationsIdentifiersParamsHrankZoosection    GetObservationsIdentifiersParamsHrank = "zoosection"
	GetObservationsIdentifiersParamsHrankZoosubsection GetObservationsIdentifiersParamsHrank = "zoosubsection"
)

// Defines values for GetObservationsIdentifiersParamsLrank.
const (
	GetObservationsIdentifiersParamsLrankClass         GetObservationsIdentifiersParamsLrank = "class"
	GetObservationsIdentifiersParamsLrankComplex       GetObservationsIdentifiersParamsLrank = "complex"
	GetObservationsIdentifiersParamsLrankEpifamily     GetObservationsIdentifiersParamsLrank = "epifamily"
	GetObservationsIdentifiersParamsLrankFamily        GetObservationsIdentifiersParamsLrank = "family"
	GetObservationsIdentifiersParamsLrankForm          GetObservationsIdentifiersParamsLrank = "form"
	GetObservationsIdentifiersParamsLrankGenus         GetObservationsIdentifiersParamsLrank = "genus"
	GetObservationsIdentifiersParamsLrankGenushybrid   GetObservationsIdentifiersParamsLrank = "genushybrid"
	GetObservationsIdentifiersParamsLrankHybrid        GetObservationsIdentifiersParamsLrank = "hybrid"
	GetObservationsIdentifiersParamsLrankInfraclass    GetObservationsIdentifiersParamsLrank = "infraclass"
	GetObservationsIdentifiersParamsLrankInfrahybrid   GetObservationsIdentifiersParamsLrank = "infrahybrid"
	GetObservationsIdentifiersParamsLrankInfraorder    GetObservationsIdentifiersParamsLrank = "infraorder"
	GetObservationsIdentifiersParamsLrankKingdom       GetObservationsIdentifiersParamsLrank = "kingdom"
	GetObservationsIdentifiersParamsLrankOrder         GetObservationsIdentifiersParamsLrank = "order"
	GetObservationsIdentifiersParamsLrankParvorder     GetObservationsIdentifiersParamsLrank = "parvorder"
	GetObservationsIdentifiersParamsLrankPhylum        GetObservationsIdentifiersParamsLrank = "phylum"
	GetObservationsIdentifiersParamsLrankSection       GetObservationsIdentifiersParamsLrank = "section"
	GetObservationsIdentifiersParamsLrankSpecies       GetObservationsIdentifiersParamsLrank = "species"
	GetObservationsIdentifiersParamsLrankSubclass      GetObservationsIdentifiersParamsLrank = "subclass"
	GetObservationsIdentifiersParamsLrankSubfamily     GetObservationsIdentifiersParamsLrank = "subfamily"
	GetObservationsIdentifiersParamsLrankSubgenus      GetObservationsIdentifiersParamsLrank = "subgenus"
	GetObservationsIdentifiersParamsLrankSuborder      GetObservationsIdentifiersParamsLrank = "suborder"
	GetObservationsIdentifiersParamsLrankSubphylum     GetObservationsIdentifiersParamsLrank = "subphylum"
	GetObservationsIdentifiersParamsLrankSubsection    GetObservationsIdentifiersParamsLrank = "subsection"
	GetObservationsIdentifiersParamsLrankSubspecies    GetObservationsIdentifiersParamsLrank = "subspecies"
	GetObservationsIdentifiersParamsLrankSubterclass   GetObservationsIdentifiersParamsLrank = "subterclass"
	GetObservationsIdentifiersParamsLrankSubtribe      GetObservationsIdentifiersParamsLrank = "subtribe"
	GetObservationsIdentifiersParamsLrankSuperclass    GetObservationsIdentifiersParamsLrank = "superclass"
	GetObservationsIdentifiersParamsLrankSuperfamily   GetObservationsIdentifiersParamsLrank = "superfamily"
	GetObservationsIdentifiersParamsLrankSuperorder    GetObservationsIdentifiersParamsLrank = "superorder"
	GetObservationsIdentifiersParamsLrankSupertribe    GetObservationsIdentifiersParamsLrank = "supertribe"
	GetObservationsIdentifiersParamsLrankTribe         GetObservationsIdentifiersParamsLrank = "tribe"
	GetObservationsIdentifiersParamsLrankVariety       GetObservationsIdentifiersParamsLrank = "variety"
	GetObservationsIdentifiersParamsLrankZoosection    GetObservationsIdentifiersParamsLrank = "zoosection"
	GetObservationsIdentifiersParamsLrankZoosubsection GetObservationsIdentifiersParamsLrank = "zoosubsection"
)

// Defines values for GetObservationsIdentifiersParamsIconicTaxa.
const (
	GetObservationsIdentifiersParamsIconicTaxaActinopterygii GetObservationsIdentifiersParamsIconicTaxa = "Actinopterygii"
	GetObservationsIdentifiersParamsIconicTaxaAmphibia       GetObservationsIdentifiersParamsIconicTaxa = "Amphibia"
	GetObservationsIdentifiersParamsIconicTaxaAnimalia       GetObservationsIdentifiersParamsIconicTaxa = "Animalia"
	GetObservationsIdentifiersParamsIconicTaxaArachnida      GetObservationsIdentifiersParamsIconicTaxa = "Arachnida"
	GetObservationsIdentifiersParamsIconicTaxaAves           GetObservationsIdentifiersParamsIconicTaxa = "Aves"
	GetObservationsIdentifiersParamsIconicTaxaChromista      GetObservationsIdentifiersParamsIconicTaxa = "Chromista"
	GetObservationsIdentifiersParamsIconicTaxaFungi          GetObservationsIdentifiersParamsIconicTaxa = "Fungi"
	GetObservationsIdentifiersParamsIconicTaxaInsecta        GetObservationsIdentifiersParamsIconicTaxa = "Insecta"
	GetObservationsIdentifiersParamsIconicTaxaMammalia       GetObservationsIdentifiersParamsIconicTaxa = "Mammalia"
	GetObservationsIdentifiersParamsIconicTaxaMollusca       GetObservationsIdentifiersParamsIconicTaxa = "Mollusca"
	GetObservationsIdentifiersParamsIconicTaxaPlantae        GetObservationsIdentifiersParamsIconicTaxa = "Plantae"
	GetObservationsIdentifiersParamsIconicTaxaProtozoa       GetObservationsIdentifiersParamsIconicTaxa = "Protozoa"
	GetObservationsIdentifiersParamsIconicTaxaReptilia       GetObservationsIdentifiersParamsIconicTaxa = "Reptilia"
	GetObservationsIdentifiersParamsIconicTaxaUnknown        GetObservationsIdentifiersParamsIconicTaxa = "unknown"
)

// Defines values for GetObservationsIdentifiersParamsIdentifications.
const (
	GetObservationsIdentifiersParamsIdentificationsMostAgree    GetObservationsIdentifiersParamsIdentifications = "most_agree"
	GetObservationsIdentifiersParamsIdentificationsMostDisagree GetObservationsIdentifiersParamsIdentifications = "most_disagree"
	GetObservationsIdentifiersParamsIdentificationsSomeAgree    GetObservationsIdentifiersParamsIdentifications = "some_agree"
)

// Defines values for GetObservationsIdentifiersParamsSearchOn.
const (
	GetObservationsIdentifiersParamsSearchOnDescription        GetObservationsIdentifiersParamsSearchOn = "description"
	GetObservationsIdentifiersParamsSearchOnNames              GetObservationsIdentifiersParamsSearchOn = "names"
	GetObservationsIdentifiersParamsSearchOnPlace              GetObservationsIdentifiersParamsSearchOn = "place"
	GetObservationsIdentifiersParamsSearchOnTags               GetObservationsIdentifiersParamsSearchOn = "tags"
	GetObservationsIdentifiersParamsSearchOnTaxonPageObsPhotos GetObservationsIdentifiersParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetObservationsIdentifiersParamsQualityGrade.
const (
	GetObservationsIdentifiersParamsQualityGradeCasual   GetObservationsIdentifiersParamsQualityGrade = "casual"
	GetObservationsIdentifiersParamsQualityGradeNeedsId  GetObservationsIdentifiersParamsQualityGrade = "needs_id"
	GetObservationsIdentifiersParamsQualityGradeResearch GetObservationsIdentifiersParamsQualityGrade = "research"
)

// Defines values for GetObservationsIdentifiersParamsOrder.
const (
	GetObservationsIdentifiersParamsOrderAsc  GetObservationsIdentifiersParamsOrder = "asc"
	GetObservationsIdentifiersParamsOrderDesc GetObservationsIdentifiersParamsOrder = "desc"
)

// Defines values for GetObservationsIdentifiersParamsOrderBy.
const (
	GetObservationsIdentifiersParamsOrderByCreatedAt    GetObservationsIdentifiersParamsOrderBy = "created_at"
	GetObservationsIdentifiersParamsOrderByGeoScore     GetObservationsIdentifiersParamsOrderBy = "geo_score"
	GetObservationsIdentifiersParamsOrderById           GetObservationsIdentifiersParamsOrderBy = "id"
	GetObservationsIdentifiersParamsOrderByObservedOn   GetObservationsIdentifiersParamsOrderBy = "observed_on"
	GetObservationsIdentifiersParamsOrderByRandom       GetObservationsIdentifiersParamsOrderBy = "random"
	GetObservationsIdentifiersParamsOrderBySpeciesGuess GetObservationsIdentifiersParamsOrderBy = "species_guess"
	GetObservationsIdentifiersParamsOrderByUpdatedAt    GetObservationsIdentifiersParamsOrderBy = "updated_at"
	GetObservationsIdentifiersParamsOrderByVotes        GetObservationsIdentifiersParamsOrderBy = "votes"
)

// Defines values for GetObservationsObserversParamsLicense.
const (
	GetObservationsObserversParamsLicenseCc0      GetObservationsObserversParamsLicense = "cc0"
	GetObservationsObserversParamsLicenseCcBy     GetObservationsObserversParamsLicense = "cc-by"
	GetObservationsObserversParamsLicenseCcByNc   GetObservationsObserversParamsLicense = "cc-by-nc"
	GetObservationsObserversParamsLicenseCcByNcNd GetObservationsObserversParamsLicense = "cc-by-nc-nd"
	GetObservationsObserversParamsLicenseCcByNcSa GetObservationsObserversParamsLicense = "cc-by-nc-sa"
	GetObservationsObserversParamsLicenseCcByNd   GetObservationsObserversParamsLicense = "cc-by-nd"
	GetObservationsObserversParamsLicenseCcBySa   GetObservationsObserversParamsLicense = "cc-by-sa"
)

// Defines values for GetObservationsObserversParamsPhotoLicense.
const (
	GetObservationsObserversParamsPhotoLicenseCc0      GetObservationsObserversParamsPhotoLicense = "cc0"
	GetObservationsObserversParamsPhotoLicenseCcBy     GetObservationsObserversParamsPhotoLicense = "cc-by"
	GetObservationsObserversParamsPhotoLicenseCcByNc   GetObservationsObserversParamsPhotoLicense = "cc-by-nc"
	GetObservationsObserversParamsPhotoLicenseCcByNcNd GetObservationsObserversParamsPhotoLicense = "cc-by-nc-nd"
	GetObservationsObserversParamsPhotoLicenseCcByNcSa GetObservationsObserversParamsPhotoLicense = "cc-by-nc-sa"
	GetObservationsObserversParamsPhotoLicenseCcByNd   GetObservationsObserversParamsPhotoLicense = "cc-by-nd"
	GetObservationsObserversParamsPhotoLicenseCcBySa   GetObservationsObserversParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetObservationsObserversParamsRank.
const (
	GetObservationsObserversParamsRankClass         GetObservationsObserversParamsRank = "class"
	GetObservationsObserversParamsRankComplex       GetObservationsObserversParamsRank = "complex"
	GetObservationsObserversParamsRankEpifamily     GetObservationsObserversParamsRank = "epifamily"
	GetObservationsObserversParamsRankFamily        GetObservationsObserversParamsRank = "family"
	GetObservationsObserversParamsRankForm          GetObservationsObserversParamsRank = "form"
	GetObservationsObserversParamsRankGenus         GetObservationsObserversParamsRank = "genus"
	GetObservationsObserversParamsRankGenushybrid   GetObservationsObserversParamsRank = "genushybrid"
	GetObservationsObserversParamsRankHybrid        GetObservationsObserversParamsRank = "hybrid"
	GetObservationsObserversParamsRankInfraclass    GetObservationsObserversParamsRank = "infraclass"
	GetObservationsObserversParamsRankInfrahybrid   GetObservationsObserversParamsRank = "infrahybrid"
	GetObservationsObserversParamsRankInfraorder    GetObservationsObserversParamsRank = "infraorder"
	GetObservationsObserversParamsRankKingdom       GetObservationsObserversParamsRank = "kingdom"
	GetObservationsObserversParamsRankOrder         GetObservationsObserversParamsRank = "order"
	GetObservationsObserversParamsRankParvorder     GetObservationsObserversParamsRank = "parvorder"
	GetObservationsObserversParamsRankPhylum        GetObservationsObserversParamsRank = "phylum"
	GetObservationsObserversParamsRankSection       GetObservationsObserversParamsRank = "section"
	GetObservationsObserversParamsRankSpecies       GetObservationsObserversParamsRank = "species"
	GetObservationsObserversParamsRankSubclass      GetObservationsObserversParamsRank = "subclass"
	GetObservationsObserversParamsRankSubfamily     GetObservationsObserversParamsRank = "subfamily"
	GetObservationsObserversParamsRankSubgenus      GetObservationsObserversParamsRank = "subgenus"
	GetObservationsObserversParamsRankSuborder      GetObservationsObserversParamsRank = "suborder"
	GetObservationsObserversParamsRankSubphylum     GetObservationsObserversParamsRank = "subphylum"
	GetObservationsObserversParamsRankSubsection    GetObservationsObserversParamsRank = "subsection"
	GetObservationsObserversParamsRankSubspecies    GetObservationsObserversParamsRank = "subspecies"
	GetObservationsObserversParamsRankSubterclass   GetObservationsObserversParamsRank = "subterclass"
	GetObservationsObserversParamsRankSubtribe      GetObservationsObserversParamsRank = "subtribe"
	GetObservationsObserversParamsRankSuperclass    GetObservationsObserversParamsRank = "superclass"
	GetObservationsObserversParamsRankSuperfamily   GetObservationsObserversParamsRank = "superfamily"
	GetObservationsObserversParamsRankSuperorder    GetObservationsObserversParamsRank = "superorder"
	GetObservationsObserversParamsRankSupertribe    GetObservationsObserversParamsRank = "supertribe"
	GetObservationsObserversParamsRankTribe         GetObservationsObserversParamsRank = "tribe"
	GetObservationsObserversParamsRankVariety       GetObservationsObserversParamsRank = "variety"
	GetObservationsObserversParamsRankZoosection    GetObservationsObserversParamsRank = "zoosection"
	GetObservationsObserversParamsRankZoosubsection GetObservationsObserversParamsRank = "zoosubsection"
)

// Defines values for GetObservationsObserversParamsSoundLicense.
const (
	GetObservationsObserversParamsSoundLicenseCc0      GetObservationsObserversParamsSoundLicense = "cc0"
	GetObservationsObserversParamsSoundLicenseCcBy     GetObservationsObserversParamsSoundLicense = "cc-by"
	GetObservationsObserversParamsSoundLicenseCcByNc   GetObservationsObserversParamsSoundLicense = "cc-by-nc"
	GetObservationsObserversParamsSoundLicenseCcByNcNd GetObservationsObserversParamsSoundLicense = "cc-by-nc-nd"
	GetObservationsObserversParamsSoundLicenseCcByNcSa GetObservationsObserversParamsSoundLicense = "cc-by-nc-sa"
	GetObservationsObserversParamsSoundLicenseCcByNd   GetObservationsObserversParamsSoundLicense = "cc-by-nd"
	GetObservationsObserversParamsSoundLicenseCcBySa   GetObservationsObserversParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetObservationsObserversParamsCsi.
const (
	GetObservationsObserversParamsCsiCR GetObservationsObserversParamsCsi = "CR"
	GetObservationsObserversParamsCsiEN GetObservationsObserversParamsCsi = "EN"
	GetObservationsObserversParamsCsiEW GetObservationsObserversParamsCsi = "EW"
	GetObservationsObserversParamsCsiEX GetObservationsObserversParamsCsi = "EX"
	GetObservationsObserversParamsCsiLC GetObservationsObserversParamsCsi = "LC"
	GetObservationsObserversParamsCsiNT GetObservationsObserversParamsCsi = "NT"
	GetObservationsObserversParamsCsiVU GetObservationsObserversParamsCsi = "VU"
)

// Defines values for GetObservationsObserversParamsGeoprivacy.
const (
	GetObservationsObserversParamsGeoprivacyObscured        GetObservationsObserversParamsGeoprivacy = "obscured"
	GetObservationsObserversParamsGeoprivacyObscuredPrivate GetObservationsObserversParamsGeoprivacy = "obscured_private"
	GetObservationsObserversParamsGeoprivacyOpen            GetObservationsObserversParamsGeoprivacy = "open"
	GetObservationsObserversParamsGeoprivacyPrivate         GetObservationsObserversParamsGeoprivacy = "private"
)

// Defines values for GetObservationsObserversParamsTaxonGeoprivacy.
const (
	GetObservationsObserversParamsTaxonGeoprivacyObscured        GetObservationsObserversParamsTaxonGeoprivacy = "obscured"
	GetObservationsObserversParamsTaxonGeoprivacyObscuredPrivate GetObservationsObserversParamsTaxonGeoprivacy = "obscured_private"
	GetObservationsObserversParamsTaxonGeoprivacyOpen            GetObservationsObserversParamsTaxonGeoprivacy = "open"
	GetObservationsObserversParamsTaxonGeoprivacyPrivate         GetObservationsObserversParamsTaxonGeoprivacy = "private"
)

// Defines values for GetObservationsObserversParamsObscuration.
const (
	GetObservationsObserversParamsObscurationNone     GetObservationsObserversParamsObscuration = "none"
	GetObservationsObserversParamsObscurationObscured GetObservationsObserversParamsObscuration = "obscured"
	GetObservationsObserversParamsObscurationPrivate  GetObservationsObserversParamsObscuration = "private"
)

// Defines values for GetObservationsObserversParamsHrank.
const (
	GetObservationsObserversParamsHrankClass         GetObservationsObserversParamsHrank = "class"
	GetObservationsObserversParamsHrankComplex       GetObservationsObserversParamsHrank = "complex"
	GetObservationsObserversParamsHrankEpifamily     GetObservationsObserversParamsHrank = "epifamily"
	GetObservationsObserversParamsHrankFamily        GetObservationsObserversParamsHrank = "family"
	GetObservationsObserversParamsHrankForm          GetObservationsObserversParamsHrank = "form"
	GetObservationsObserversParamsHrankGenus         GetObservationsObserversParamsHrank = "genus"
	GetObservationsObserversParamsHrankGenushybrid   GetObservationsObserversParamsHrank = "genushybrid"
	GetObservationsObserversParamsHrankHybrid        GetObservationsObserversParamsHrank = "hybrid"
	GetObservationsObserversParamsHrankInfraclass    GetObservationsObserversParamsHrank = "infraclass"
	GetObservationsObserversParamsHrankInfrahybrid   GetObservationsObserversParamsHrank = "infrahybrid"
	GetObservationsObserversParamsHrankInfraorder    GetObservationsObserversParamsHrank = "infraorder"
	GetObservationsObserversParamsHrankKingdom       GetObservationsObserversParamsHrank = "kingdom"
	GetObservationsObserversParamsHrankOrder         GetObservationsObserversParamsHrank = "order"
	GetObservationsObserversParamsHrankParvorder     GetObservationsObserversParamsHrank = "parvorder"
	GetObservationsObserversParamsHrankPhylum        GetObservationsObserversParamsHrank = "phylum"
	GetObservationsObserversParamsHrankSection       GetObservationsObserversParamsHrank = "section"
	GetObservationsObserversParamsHrankSpecies       GetObservationsObserversParamsHrank = "species"
	GetObservationsObserversParamsHrankSubclass      GetObservationsObserversParamsHrank = "subclass"
	GetObservationsObserversParamsHrankSubfamily     GetObservationsObserversParamsHrank = "subfamily"
	GetObservationsObserversParamsHrankSubgenus      GetObservationsObserversParamsHrank = "subgenus"
	GetObservationsObserversParamsHrankSuborder      GetObservationsObserversParamsHrank = "suborder"
	GetObservationsObserversParamsHrankSubphylum     GetObservationsObserversParamsHrank = "subphylum"
	GetObservationsObserversParamsHrankSubsection    GetObservationsObserversParamsHrank = "subsection"
	GetObservationsObserversParamsHrankSubspecies    GetObservationsObserversParamsHrank = "subspecies"
	GetObservationsObserversParamsHrankSubterclass   GetObservationsObserversParamsHrank = "subterclass"
	GetObservationsObserversParamsHrankSubtribe      GetObservationsObserversParamsHrank = "subtribe"
	GetObservationsObserversParamsHrankSuperclass    GetObservationsObserversParamsHrank = "superclass"
	GetObservationsObserversParamsHrankSuperfamily   GetObservationsObserversParamsHrank = "superfamily"
	GetObservationsObserversParamsHrankSuperorder    GetObservationsObserversParamsHrank = "superorder"
	GetObservationsObserversParamsHrankSupertribe    GetObservationsObserversParamsHrank = "supertribe"
	GetObservationsObserversParamsHrankTribe         GetObservationsObserversParamsHrank = "tribe"
	GetObservationsObserversParamsHrankVariety       GetObservationsObserversParamsHrank = "variety"
	GetObservationsObserversParamsHrankZoosection    GetObservationsObserversParamsHrank = "zoosection"
	GetObservationsObserversParamsHrankZoosubsection GetObservationsObserversParamsHrank = "zoosubsection"
)

// Defines values for GetObservationsObserversParamsLrank.
const (
	GetObservationsObserversParamsLrankClass         GetObservationsObserversParamsLrank = "class"
	GetObservationsObserversParamsLrankComplex       GetObservationsObserversParamsLrank = "complex"
	GetObservationsObserversParamsLrankEpifamily     GetObservationsObserversParamsLrank = "epifamily"
	GetObservationsObserversParamsLrankFamily        GetObservationsObserversParamsLrank = "family"
	GetObservationsObserversParamsLrankForm          GetObservationsObserversParamsLrank = "form"
	GetObservationsObserversParamsLrankGenus         GetObservationsObserversParamsLrank = "genus"
	GetObservationsObserversParamsLrankGenushybrid   GetObservationsObserversParamsLrank = "genushybrid"
	GetObservationsObserversParamsLrankHybrid        GetObservationsObserversParamsLrank = "hybrid"
	GetObservationsObserversParamsLrankInfraclass    GetObservationsObserversParamsLrank = "infraclass"
	GetObservationsObserversParamsLrankInfrahybrid   GetObservationsObserversParamsLrank = "infrahybrid"
	GetObservationsObserversParamsLrankInfraorder    GetObservationsObserversParamsLrank = "infraorder"
	GetObservationsObserversParamsLrankKingdom       GetObservationsObserversParamsLrank = "kingdom"
	GetObservationsObserversParamsLrankOrder         GetObservationsObserversParamsLrank = "order"
	GetObservationsObserversParamsLrankParvorder     GetObservationsObserversParamsLrank = "parvorder"
	GetObservationsObserversParamsLrankPhylum        GetObservationsObserversParamsLrank = "phylum"
	GetObservationsObserversParamsLrankSection       GetObservationsObserversParamsLrank = "section"
	GetObservationsObserversParamsLrankSpecies       GetObservationsObserversParamsLrank = "species"
	GetObservationsObserversParamsLrankSubclass      GetObservationsObserversParamsLrank = "subclass"
	GetObservationsObserversParamsLrankSubfamily     GetObservationsObserversParamsLrank = "subfamily"
	GetObservationsObserversParamsLrankSubgenus      GetObservationsObserversParamsLrank = "subgenus"
	GetObservationsObserversParamsLrankSuborder      GetObservationsObserversParamsLrank = "suborder"
	GetObservationsObserversParamsLrankSubphylum     GetObservationsObserversParamsLrank = "subphylum"
	GetObservationsObserversParamsLrankSubsection    GetObservationsObserversParamsLrank = "subsection"
	GetObservationsObserversParamsLrankSubspecies    GetObservationsObserversParamsLrank = "subspecies"
	GetObservationsObserversParamsLrankSubterclass   GetObservationsObserversParamsLrank = "subterclass"
	GetObservationsObserversParamsLrankSubtribe      GetObservationsObserversParamsLrank = "subtribe"
	GetObservationsObserversParamsLrankSuperclass    GetObservationsObserversParamsLrank = "superclass"
	GetObservationsObserversParamsLrankSuperfamily   GetObservationsObserversParamsLrank = "superfamily"
	GetObservationsObserversParamsLrankSuperorder    GetObservationsObserversParamsLrank = "superorder"
	GetObservationsObserversParamsLrankSupertribe    GetObservationsObserversParamsLrank = "supertribe"
	GetObservationsObserversParamsLrankTribe         GetObservationsObserversParamsLrank = "tribe"
	GetObservationsObserversParamsLrankVariety       GetObservationsObserversParamsLrank = "variety"
	GetObservationsObserversParamsLrankZoosection    GetObservationsObserversParamsLrank = "zoosection"
	GetObservationsObserversParamsLrankZoosubsection GetObservationsObserversParamsLrank = "zoosubsection"
)

// Defines values for GetObservationsObserversParamsIconicTaxa.
const (
	GetObservationsObserversParamsIconicTaxaActinopterygii GetObservationsObserversParamsIconicTaxa = "Actinopterygii"
	GetObservationsObserversParamsIconicTaxaAmphibia       GetObservationsObserversParamsIconicTaxa = "Amphibia"
	GetObservationsObserversParamsIconicTaxaAnimalia       GetObservationsObserversParamsIconicTaxa = "Animalia"
	GetObservationsObserversParamsIconicTaxaArachnida      GetObservationsObserversParamsIconicTaxa = "Arachnida"
	GetObservationsObserversParamsIconicTaxaAves           GetObservationsObserversParamsIconicTaxa = "Aves"
	GetObservationsObserversParamsIconicTaxaChromista      GetObservationsObserversParamsIconicTaxa = "Chromista"
	GetObservationsObserversParamsIconicTaxaFungi          GetObservationsObserversParamsIconicTaxa = "Fungi"
	GetObservationsObserversParamsIconicTaxaInsecta        GetObservationsObserversParamsIconicTaxa = "Insecta"
	GetObservationsObserversParamsIconicTaxaMammalia       GetObservationsObserversParamsIconicTaxa = "Mammalia"
	GetObservationsObserversParamsIconicTaxaMollusca       GetObservationsObserversParamsIconicTaxa = "Mollusca"
	GetObservationsObserversParamsIconicTaxaPlantae        GetObservationsObserversParamsIconicTaxa = "Plantae"
	GetObservationsObserversParamsIconicTaxaProtozoa       GetObservationsObserversParamsIconicTaxa = "Protozoa"
	GetObservationsObserversParamsIconicTaxaReptilia       GetObservationsObserversParamsIconicTaxa = "Reptilia"
	GetObservationsObserversParamsIconicTaxaUnknown        GetObservationsObserversParamsIconicTaxa = "unknown"
)

// Defines values for GetObservationsObserversParamsIdentifications.
const (
	GetObservationsObserversParamsIdentificationsMostAgree    GetObservationsObserversParamsIdentifications = "most_agree"
	GetObservationsObserversParamsIdentificationsMostDisagree GetObservationsObserversParamsIdentifications = "most_disagree"
	GetObservationsObserversParamsIdentificationsSomeAgree    GetObservationsObserversParamsIdentifications = "some_agree"
)

// Defines values for GetObservationsObserversParamsSearchOn.
const (
	GetObservationsObserversParamsSearchOnDescription        GetObservationsObserversParamsSearchOn = "description"
	GetObservationsObserversParamsSearchOnNames              GetObservationsObserversParamsSearchOn = "names"
	GetObservationsObserversParamsSearchOnPlace              GetObservationsObserversParamsSearchOn = "place"
	GetObservationsObserversParamsSearchOnTags               GetObservationsObserversParamsSearchOn = "tags"
	GetObservationsObserversParamsSearchOnTaxonPageObsPhotos GetObservationsObserversParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetObservationsObserversParamsQualityGrade.
const (
	GetObservationsObserversParamsQualityGradeCasual   GetObservationsObserversParamsQualityGrade = "casual"
	GetObservationsObserversParamsQualityGradeNeedsId  GetObservationsObserversParamsQualityGrade = "needs_id"
	GetObservationsObserversParamsQualityGradeResearch GetObservationsObserversParamsQualityGrade = "research"
)

// Defines values for GetObservationsObserversParamsOrder.
const (
	GetObservationsObserversParamsOrderAsc  GetObservationsObserversParamsOrder = "asc"
	GetObservationsObserversParamsOrderDesc GetObservationsObserversParamsOrder = "desc"
)

// Defines values for GetObservationsObserversParamsOrderBy.
const (
	ObservationCount GetObservationsObserversParamsOrderBy = "observation_count"
	SpeciesCount     GetObservationsObserversParamsOrderBy = "species_count"
)

// Defines values for GetObservationsPopularFieldValuesParamsLicense.
const (
	GetObservationsPopularFieldValuesParamsLicenseCc0      GetObservationsPopularFieldValuesParamsLicense = "cc0"
	GetObservationsPopularFieldValuesParamsLicenseCcBy     GetObservationsPopularFieldValuesParamsLicense = "cc-by"
	GetObservationsPopularFieldValuesParamsLicenseCcByNc   GetObservationsPopularFieldValuesParamsLicense = "cc-by-nc"
	GetObservationsPopularFieldValuesParamsLicenseCcByNcNd GetObservationsPopularFieldValuesParamsLicense = "cc-by-nc-nd"
	GetObservationsPopularFieldValuesParamsLicenseCcByNcSa GetObservationsPopularFieldValuesParamsLicense = "cc-by-nc-sa"
	GetObservationsPopularFieldValuesParamsLicenseCcByNd   GetObservationsPopularFieldValuesParamsLicense = "cc-by-nd"
	GetObservationsPopularFieldValuesParamsLicenseCcBySa   GetObservationsPopularFieldValuesParamsLicense = "cc-by-sa"
)

// Defines values for GetObservationsPopularFieldValuesParamsPhotoLicense.
const (
	GetObservationsPopularFieldValuesParamsPhotoLicenseCc0      GetObservationsPopularFieldValuesParamsPhotoLicense = "cc0"
	GetObservationsPopularFieldValuesParamsPhotoLicenseCcBy     GetObservationsPopularFieldValuesParamsPhotoLicense = "cc-by"
	GetObservationsPopularFieldValuesParamsPhotoLicenseCcByNc   GetObservationsPopularFieldValuesParamsPhotoLicense = "cc-by-nc"
	GetObservationsPopularFieldValuesParamsPhotoLicenseCcByNcNd GetObservationsPopularFieldValuesParamsPhotoLicense = "cc-by-nc-nd"
	GetObservationsPopularFieldValuesParamsPhotoLicenseCcByNcSa GetObservationsPopularFieldValuesParamsPhotoLicense = "cc-by-nc-sa"
	GetObservationsPopularFieldValuesParamsPhotoLicenseCcByNd   GetObservationsPopularFieldValuesParamsPhotoLicense = "cc-by-nd"
	GetObservationsPopularFieldValuesParamsPhotoLicenseCcBySa   GetObservationsPopularFieldValuesParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetObservationsPopularFieldValuesParamsRank.
const (
	GetObservationsPopularFieldValuesParamsRankClass         GetObservationsPopularFieldValuesParamsRank = "class"
	GetObservationsPopularFieldValuesParamsRankComplex       GetObservationsPopularFieldValuesParamsRank = "complex"
	GetObservationsPopularFieldValuesParamsRankEpifamily     GetObservationsPopularFieldValuesParamsRank = "epifamily"
	GetObservationsPopularFieldValuesParamsRankFamily        GetObservationsPopularFieldValuesParamsRank = "family"
	GetObservationsPopularFieldValuesParamsRankForm          GetObservationsPopularFieldValuesParamsRank = "form"
	GetObservationsPopularFieldValuesParamsRankGenus         GetObservationsPopularFieldValuesParamsRank = "genus"
	GetObservationsPopularFieldValuesParamsRankGenushybrid   GetObservationsPopularFieldValuesParamsRank = "genushybrid"
	GetObservationsPopularFieldValuesParamsRankHybrid        GetObservationsPopularFieldValuesParamsRank = "hybrid"
	GetObservationsPopularFieldValuesParamsRankInfraclass    GetObservationsPopularFieldValuesParamsRank = "infraclass"
	GetObservationsPopularFieldValuesParamsRankInfrahybrid   GetObservationsPopularFieldValuesParamsRank = "infrahybrid"
	GetObservationsPopularFieldValuesParamsRankInfraorder    GetObservationsPopularFieldValuesParamsRank = "infraorder"
	GetObservationsPopularFieldValuesParamsRankKingdom       GetObservationsPopularFieldValuesParamsRank = "kingdom"
	GetObservationsPopularFieldValuesParamsRankOrder         GetObservationsPopularFieldValuesParamsRank = "order"
	GetObservationsPopularFieldValuesParamsRankParvorder     GetObservationsPopularFieldValuesParamsRank = "parvorder"
	GetObservationsPopularFieldValuesParamsRankPhylum        GetObservationsPopularFieldValuesParamsRank = "phylum"
	GetObservationsPopularFieldValuesParamsRankSection       GetObservationsPopularFieldValuesParamsRank = "section"
	GetObservationsPopularFieldValuesParamsRankSpecies       GetObservationsPopularFieldValuesParamsRank = "species"
	GetObservationsPopularFieldValuesParamsRankSubclass      GetObservationsPopularFieldValuesParamsRank = "subclass"
	GetObservationsPopularFieldValuesParamsRankSubfamily     GetObservationsPopularFieldValuesParamsRank = "subfamily"
	GetObservationsPopularFieldValuesParamsRankSubgenus      GetObservationsPopularFieldValuesParamsRank = "subgenus"
	GetObservationsPopularFieldValuesParamsRankSuborder      GetObservationsPopularFieldValuesParamsRank = "suborder"
	GetObservationsPopularFieldValuesParamsRankSubphylum     GetObservationsPopularFieldValuesParamsRank = "subphylum"
	GetObservationsPopularFieldValuesParamsRankSubsection    GetObservationsPopularFieldValuesParamsRank = "subsection"
	GetObservationsPopularFieldValuesParamsRankSubspecies    GetObservationsPopularFieldValuesParamsRank = "subspecies"
	GetObservationsPopularFieldValuesParamsRankSubterclass   GetObservationsPopularFieldValuesParamsRank = "subterclass"
	GetObservationsPopularFieldValuesParamsRankSubtribe      GetObservationsPopularFieldValuesParamsRank = "subtribe"
	GetObservationsPopularFieldValuesParamsRankSuperclass    GetObservationsPopularFieldValuesParamsRank = "superclass"
	GetObservationsPopularFieldValuesParamsRankSuperfamily   GetObservationsPopularFieldValuesParamsRank = "superfamily"
	GetObservationsPopularFieldValuesParamsRankSuperorder    GetObservationsPopularFieldValuesParamsRank = "superorder"
	GetObservationsPopularFieldValuesParamsRankSupertribe    GetObservationsPopularFieldValuesParamsRank = "supertribe"
	GetObservationsPopularFieldValuesParamsRankTribe         GetObservationsPopularFieldValuesParamsRank = "tribe"
	GetObservationsPopularFieldValuesParamsRankVariety       GetObservationsPopularFieldValuesParamsRank = "variety"
	GetObservationsPopularFieldValuesParamsRankZoosection    GetObservationsPopularFieldValuesParamsRank = "zoosection"
	GetObservationsPopularFieldValuesParamsRankZoosubsection GetObservationsPopularFieldValuesParamsRank = "zoosubsection"
)

// Defines values for GetObservationsPopularFieldValuesParamsSoundLicense.
const (
	GetObservationsPopularFieldValuesParamsSoundLicenseCc0      GetObservationsPopularFieldValuesParamsSoundLicense = "cc0"
	GetObservationsPopularFieldValuesParamsSoundLicenseCcBy     GetObservationsPopularFieldValuesParamsSoundLicense = "cc-by"
	GetObservationsPopularFieldValuesParamsSoundLicenseCcByNc   GetObservationsPopularFieldValuesParamsSoundLicense = "cc-by-nc"
	GetObservationsPopularFieldValuesParamsSoundLicenseCcByNcNd GetObservationsPopularFieldValuesParamsSoundLicense = "cc-by-nc-nd"
	GetObservationsPopularFieldValuesParamsSoundLicenseCcByNcSa GetObservationsPopularFieldValuesParamsSoundLicense = "cc-by-nc-sa"
	GetObservationsPopularFieldValuesParamsSoundLicenseCcByNd   GetObservationsPopularFieldValuesParamsSoundLicense = "cc-by-nd"
	GetObservationsPopularFieldValuesParamsSoundLicenseCcBySa   GetObservationsPopularFieldValuesParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetObservationsPopularFieldValuesParamsCsi.
const (
	GetObservationsPopularFieldValuesParamsCsiCR GetObservationsPopularFieldValuesParamsCsi = "CR"
	GetObservationsPopularFieldValuesParamsCsiEN GetObservationsPopularFieldValuesParamsCsi = "EN"
	GetObservationsPopularFieldValuesParamsCsiEW GetObservationsPopularFieldValuesParamsCsi = "EW"
	GetObservationsPopularFieldValuesParamsCsiEX GetObservationsPopularFieldValuesParamsCsi = "EX"
	GetObservationsPopularFieldValuesParamsCsiLC GetObservationsPopularFieldValuesParamsCsi = "LC"
	GetObservationsPopularFieldValuesParamsCsiNT GetObservationsPopularFieldValuesParamsCsi = "NT"
	GetObservationsPopularFieldValuesParamsCsiVU GetObservationsPopularFieldValuesParamsCsi = "VU"
)

// Defines values for GetObservationsPopularFieldValuesParamsGeoprivacy.
const (
	GetObservationsPopularFieldValuesParamsGeoprivacyObscured        GetObservationsPopularFieldValuesParamsGeoprivacy = "obscured"
	GetObservationsPopularFieldValuesParamsGeoprivacyObscuredPrivate GetObservationsPopularFieldValuesParamsGeoprivacy = "obscured_private"
	GetObservationsPopularFieldValuesParamsGeoprivacyOpen            GetObservationsPopularFieldValuesParamsGeoprivacy = "open"
	GetObservationsPopularFieldValuesParamsGeoprivacyPrivate         GetObservationsPopularFieldValuesParamsGeoprivacy = "private"
)

// Defines values for GetObservationsPopularFieldValuesParamsTaxonGeoprivacy.
const (
	GetObservationsPopularFieldValuesParamsTaxonGeoprivacyObscured        GetObservationsPopularFieldValuesParamsTaxonGeoprivacy = "obscured"
	GetObservationsPopularFieldValuesParamsTaxonGeoprivacyObscuredPrivate GetObservationsPopularFieldValuesParamsTaxonGeoprivacy = "obscured_private"
	GetObservationsPopularFieldValuesParamsTaxonGeoprivacyOpen            GetObservationsPopularFieldValuesParamsTaxonGeoprivacy = "open"
	GetObservationsPopularFieldValuesParamsTaxonGeoprivacyPrivate         GetObservationsPopularFieldValuesParamsTaxonGeoprivacy = "private"
)

// Defines values for GetObservationsPopularFieldValuesParamsObscuration.
const (
	GetObservationsPopularFieldValuesParamsObscurationNone     GetObservationsPopularFieldValuesParamsObscuration = "none"
	GetObservationsPopularFieldValuesParamsObscurationObscured GetObservationsPopularFieldValuesParamsObscuration = "obscured"
	GetObservationsPopularFieldValuesParamsObscurationPrivate  GetObservationsPopularFieldValuesParamsObscuration = "private"
)

// Defines values for GetObservationsPopularFieldValuesParamsHrank.
const (
	GetObservationsPopularFieldValuesParamsHrankClass         GetObservationsPopularFieldValuesParamsHrank = "class"
	GetObservationsPopularFieldValuesParamsHrankComplex       GetObservationsPopularFieldValuesParamsHrank = "complex"
	GetObservationsPopularFieldValuesParamsHrankEpifamily     GetObservationsPopularFieldValuesParamsHrank = "epifamily"
	GetObservationsPopularFieldValuesParamsHrankFamily        GetObservationsPopularFieldValuesParamsHrank = "family"
	GetObservationsPopularFieldValuesParamsHrankForm          GetObservationsPopularFieldValuesParamsHrank = "form"
	GetObservationsPopularFieldValuesParamsHrankGenus         GetObservationsPopularFieldValuesParamsHrank = "genus"
	GetObservationsPopularFieldValuesParamsHrankGenushybrid   GetObservationsPopularFieldValuesParamsHrank = "genushybrid"
	GetObservationsPopularFieldValuesParamsHrankHybrid        GetObservationsPopularFieldValuesParamsHrank = "hybrid"
	GetObservationsPopularFieldValuesParamsHrankInfraclass    GetObservationsPopularFieldValuesParamsHrank = "infraclass"
	GetObservationsPopularFieldValuesParamsHrankInfrahybrid   GetObservationsPopularFieldValuesParamsHrank = "infrahybrid"
	GetObservationsPopularFieldValuesParamsHrankInfraorder    GetObservationsPopularFieldValuesParamsHrank = "infraorder"
	GetObservationsPopularFieldValuesParamsHrankKingdom       GetObservationsPopularFieldValuesParamsHrank = "kingdom"
	GetObservationsPopularFieldValuesParamsHrankOrder         GetObservationsPopularFieldValuesParamsHrank = "order"
	GetObservationsPopularFieldValuesParamsHrankParvorder     GetObservationsPopularFieldValuesParamsHrank = "parvorder"
	GetObservationsPopularFieldValuesParamsHrankPhylum        GetObservationsPopularFieldValuesParamsHrank = "phylum"
	GetObservationsPopularFieldValuesParamsHrankSection       GetObservationsPopularFieldValuesParamsHrank = "section"
	GetObservationsPopularFieldValuesParamsHrankSpecies       GetObservationsPopularFieldValuesParamsHrank = "species"
	GetObservationsPopularFieldValuesParamsHrankSubclass      GetObservationsPopularFieldValuesParamsHrank = "subclass"
	GetObservationsPopularFieldValuesParamsHrankSubfamily     GetObservationsPopularFieldValuesParamsHrank = "subfamily"
	GetObservationsPopularFieldValuesParamsHrankSubgenus      GetObservationsPopularFieldValuesParamsHrank = "subgenus"
	GetObservationsPopularFieldValuesParamsHrankSuborder      GetObservationsPopularFieldValuesParamsHrank = "suborder"
	GetObservationsPopularFieldValuesParamsHrankSubphylum     GetObservationsPopularFieldValuesParamsHrank = "subphylum"
	GetObservationsPopularFieldValuesParamsHrankSubsection    GetObservationsPopularFieldValuesParamsHrank = "subsection"
	GetObservationsPopularFieldValuesParamsHrankSubspecies    GetObservationsPopularFieldValuesParamsHrank = "subspecies"
	GetObservationsPopularFieldValuesParamsHrankSubterclass   GetObservationsPopularFieldValuesParamsHrank = "subterclass"
	GetObservationsPopularFieldValuesParamsHrankSubtribe      GetObservationsPopularFieldValuesParamsHrank = "subtribe"
	GetObservationsPopularFieldValuesParamsHrankSuperclass    GetObservationsPopularFieldValuesParamsHrank = "superclass"
	GetObservationsPopularFieldValuesParamsHrankSuperfamily   GetObservationsPopularFieldValuesParamsHrank = "superfamily"
	GetObservationsPopularFieldValuesParamsHrankSuperorder    GetObservationsPopularFieldValuesParamsHrank = "superorder"
	GetObservationsPopularFieldValuesParamsHrankSupertribe    GetObservationsPopularFieldValuesParamsHrank = "supertribe"
	GetObservationsPopularFieldValuesParamsHrankTribe         GetObservationsPopularFieldValuesParamsHrank = "tribe"
	GetObservationsPopularFieldValuesParamsHrankVariety       GetObservationsPopularFieldValuesParamsHrank = "variety"
	GetObservationsPopularFieldValuesParamsHrankZoosection    GetObservationsPopularFieldValuesParamsHrank = "zoosection"
	GetObservationsPopularFieldValuesParamsHrankZoosubsection GetObservationsPopularFieldValuesParamsHrank = "zoosubsection"
)

// Defines values for GetObservationsPopularFieldValuesParamsLrank.
const (
	GetObservationsPopularFieldValuesParamsLrankClass         GetObservationsPopularFieldValuesParamsLrank = "class"
	GetObservationsPopularFieldValuesParamsLrankComplex       GetObservationsPopularFieldValuesParamsLrank = "complex"
	GetObservationsPopularFieldValuesParamsLrankEpifamily     GetObservationsPopularFieldValuesParamsLrank = "epifamily"
	GetObservationsPopularFieldValuesParamsLrankFamily        GetObservationsPopularFieldValuesParamsLrank = "family"
	GetObservationsPopularFieldValuesParamsLrankForm          GetObservationsPopularFieldValuesParamsLrank = "form"
	GetObservationsPopularFieldValuesParamsLrankGenus         GetObservationsPopularFieldValuesParamsLrank = "genus"
	GetObservationsPopularFieldValuesParamsLrankGenushybrid   GetObservationsPopularFieldValuesParamsLrank = "genushybrid"
	GetObservationsPopularFieldValuesParamsLrankHybrid        GetObservationsPopularFieldValuesParamsLrank = "hybrid"
	GetObservationsPopularFieldValuesParamsLrankInfraclass    GetObservationsPopularFieldValuesParamsLrank = "infraclass"
	GetObservationsPopularFieldValuesParamsLrankInfrahybrid   GetObservationsPopularFieldValuesParamsLrank = "infrahybrid"
	GetObservationsPopularFieldValuesParamsLrankInfraorder    GetObservationsPopularFieldValuesParamsLrank = "infraorder"
	GetObservationsPopularFieldValuesParamsLrankKingdom       GetObservationsPopularFieldValuesParamsLrank = "kingdom"
	GetObservationsPopularFieldValuesParamsLrankOrder         GetObservationsPopularFieldValuesParamsLrank = "order"
	GetObservationsPopularFieldValuesParamsLrankParvorder     GetObservationsPopularFieldValuesParamsLrank = "parvorder"
	GetObservationsPopularFieldValuesParamsLrankPhylum        GetObservationsPopularFieldValuesParamsLrank = "phylum"
	GetObservationsPopularFieldValuesParamsLrankSection       GetObservationsPopularFieldValuesParamsLrank = "section"
	GetObservationsPopularFieldValuesParamsLrankSpecies       GetObservationsPopularFieldValuesParamsLrank = "species"
	GetObservationsPopularFieldValuesParamsLrankSubclass      GetObservationsPopularFieldValuesParamsLrank = "subclass"
	GetObservationsPopularFieldValuesParamsLrankSubfamily     GetObservationsPopularFieldValuesParamsLrank = "subfamily"
	GetObservationsPopularFieldValuesParamsLrankSubgenus      GetObservationsPopularFieldValuesParamsLrank = "subgenus"
	GetObservationsPopularFieldValuesParamsLrankSuborder      GetObservationsPopularFieldValuesParamsLrank = "suborder"
	GetObservationsPopularFieldValuesParamsLrankSubphylum     GetObservationsPopularFieldValuesParamsLrank = "subphylum"
	GetObservationsPopularFieldValuesParamsLrankSubsection    GetObservationsPopularFieldValuesParamsLrank = "subsection"
	GetObservationsPopularFieldValuesParamsLrankSubspecies    GetObservationsPopularFieldValuesParamsLrank = "subspecies"
	GetObservationsPopularFieldValuesParamsLrankSubterclass   GetObservationsPopularFieldValuesParamsLrank = "subterclass"
	GetObservationsPopularFieldValuesParamsLrankSubtribe      GetObservationsPopularFieldValuesParamsLrank = "subtribe"
	GetObservationsPopularFieldValuesParamsLrankSuperclass    GetObservationsPopularFieldValuesParamsLrank = "superclass"
	GetObservationsPopularFieldValuesParamsLrankSuperfamily   GetObservationsPopularFieldValuesParamsLrank = "superfamily"
	GetObservationsPopularFieldValuesParamsLrankSuperorder    GetObservationsPopularFieldValuesParamsLrank = "superorder"
	GetObservationsPopularFieldValuesParamsLrankSupertribe    GetObservationsPopularFieldValuesParamsLrank = "supertribe"
	GetObservationsPopularFieldValuesParamsLrankTribe         GetObservationsPopularFieldValuesParamsLrank = "tribe"
	GetObservationsPopularFieldValuesParamsLrankVariety       GetObservationsPopularFieldValuesParamsLrank = "variety"
	GetObservationsPopularFieldValuesParamsLrankZoosection    GetObservationsPopularFieldValuesParamsLrank = "zoosection"
	GetObservationsPopularFieldValuesParamsLrankZoosubsection GetObservationsPopularFieldValuesParamsLrank = "zoosubsection"
)

// Defines values for GetObservationsPopularFieldValuesParamsIconicTaxa.
const (
	GetObservationsPopularFieldValuesParamsIconicTaxaActinopterygii GetObservationsPopularFieldValuesParamsIconicTaxa = "Actinopterygii"
	GetObservationsPopularFieldValuesParamsIconicTaxaAmphibia       GetObservationsPopularFieldValuesParamsIconicTaxa = "Amphibia"
	GetObservationsPopularFieldValuesParamsIconicTaxaAnimalia       GetObservationsPopularFieldValuesParamsIconicTaxa = "Animalia"
	GetObservationsPopularFieldValuesParamsIconicTaxaArachnida      GetObservationsPopularFieldValuesParamsIconicTaxa = "Arachnida"
	GetObservationsPopularFieldValuesParamsIconicTaxaAves           GetObservationsPopularFieldValuesParamsIconicTaxa = "Aves"
	GetObservationsPopularFieldValuesParamsIconicTaxaChromista      GetObservationsPopularFieldValuesParamsIconicTaxa = "Chromista"
	GetObservationsPopularFieldValuesParamsIconicTaxaFungi          GetObservationsPopularFieldValuesParamsIconicTaxa = "Fungi"
	GetObservationsPopularFieldValuesParamsIconicTaxaInsecta        GetObservationsPopularFieldValuesParamsIconicTaxa = "Insecta"
	GetObservationsPopularFieldValuesParamsIconicTaxaMammalia       GetObservationsPopularFieldValuesParamsIconicTaxa = "Mammalia"
	GetObservationsPopularFieldValuesParamsIconicTaxaMollusca       GetObservationsPopularFieldValuesParamsIconicTaxa = "Mollusca"
	GetObservationsPopularFieldValuesParamsIconicTaxaPlantae        GetObservationsPopularFieldValuesParamsIconicTaxa = "Plantae"
	GetObservationsPopularFieldValuesParamsIconicTaxaProtozoa       GetObservationsPopularFieldValuesParamsIconicTaxa = "Protozoa"
	GetObservationsPopularFieldValuesParamsIconicTaxaReptilia       GetObservationsPopularFieldValuesParamsIconicTaxa = "Reptilia"
	GetObservationsPopularFieldValuesParamsIconicTaxaUnknown        GetObservationsPopularFieldValuesParamsIconicTaxa = "unknown"
)

// Defines values for GetObservationsPopularFieldValuesParamsIdentifications.
const (
	GetObservationsPopularFieldValuesParamsIdentificationsMostAgree    GetObservationsPopularFieldValuesParamsIdentifications = "most_agree"
	GetObservationsPopularFieldValuesParamsIdentificationsMostDisagree GetObservationsPopularFieldValuesParamsIdentifications = "most_disagree"
	GetObservationsPopularFieldValuesParamsIdentificationsSomeAgree    GetObservationsPopularFieldValuesParamsIdentifications = "some_agree"
)

// Defines values for GetObservationsPopularFieldValuesParamsSearchOn.
const (
	GetObservationsPopularFieldValuesParamsSearchOnDescription        GetObservationsPopularFieldValuesParamsSearchOn = "description"
	GetObservationsPopularFieldValuesParamsSearchOnNames              GetObservationsPopularFieldValuesParamsSearchOn = "names"
	GetObservationsPopularFieldValuesParamsSearchOnPlace              GetObservationsPopularFieldValuesParamsSearchOn = "place"
	GetObservationsPopularFieldValuesParamsSearchOnTags               GetObservationsPopularFieldValuesParamsSearchOn = "tags"
	GetObservationsPopularFieldValuesParamsSearchOnTaxonPageObsPhotos GetObservationsPopularFieldValuesParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetObservationsPopularFieldValuesParamsQualityGrade.
const (
	GetObservationsPopularFieldValuesParamsQualityGradeCasual   GetObservationsPopularFieldValuesParamsQualityGrade = "casual"
	GetObservationsPopularFieldValuesParamsQualityGradeNeedsId  GetObservationsPopularFieldValuesParamsQualityGrade = "needs_id"
	GetObservationsPopularFieldValuesParamsQualityGradeResearch GetObservationsPopularFieldValuesParamsQualityGrade = "research"
)

// Defines values for GetObservationsPopularFieldValuesParamsOrder.
const (
	GetObservationsPopularFieldValuesParamsOrderAsc  GetObservationsPopularFieldValuesParamsOrder = "asc"
	GetObservationsPopularFieldValuesParamsOrderDesc GetObservationsPopularFieldValuesParamsOrder = "desc"
)

// Defines values for GetObservationsPopularFieldValuesParamsOrderBy.
const (
	GetObservationsPopularFieldValuesParamsOrderByCreatedAt    GetObservationsPopularFieldValuesParamsOrderBy = "created_at"
	GetObservationsPopularFieldValuesParamsOrderByGeoScore     GetObservationsPopularFieldValuesParamsOrderBy = "geo_score"
	GetObservationsPopularFieldValuesParamsOrderById           GetObservationsPopularFieldValuesParamsOrderBy = "id"
	GetObservationsPopularFieldValuesParamsOrderByObservedOn   GetObservationsPopularFieldValuesParamsOrderBy = "observed_on"
	GetObservationsPopularFieldValuesParamsOrderByRandom       GetObservationsPopularFieldValuesParamsOrderBy = "random"
	GetObservationsPopularFieldValuesParamsOrderBySpeciesGuess GetObservationsPopularFieldValuesParamsOrderBy = "species_guess"
	GetObservationsPopularFieldValuesParamsOrderByUpdatedAt    GetObservationsPopularFieldValuesParamsOrderBy = "updated_at"
	GetObservationsPopularFieldValuesParamsOrderByVotes        GetObservationsPopularFieldValuesParamsOrderBy = "votes"
)

// Defines values for GetObservationsPopularFieldValuesParamsDateField.
const (
	GetObservationsPopularFieldValuesParamsDateFieldCreated  GetObservationsPopularFieldValuesParamsDateField = "created"
	GetObservationsPopularFieldValuesParamsDateFieldObserved GetObservationsPopularFieldValuesParamsDateField = "observed"
)

// Defines values for GetObservationsPopularFieldValuesParamsInterval.
const (
	GetObservationsPopularFieldValuesParamsIntervalMonthOfYear GetObservationsPopularFieldValuesParamsInterval = "month_of_year"
	GetObservationsPopularFieldValuesParamsIntervalWeekOfYear  GetObservationsPopularFieldValuesParamsInterval = "week_of_year"
)

// Defines values for GetObservationsSpeciesCountsParamsLicense.
const (
	GetObservationsSpeciesCountsParamsLicenseCc0      GetObservationsSpeciesCountsParamsLicense = "cc0"
	GetObservationsSpeciesCountsParamsLicenseCcBy     GetObservationsSpeciesCountsParamsLicense = "cc-by"
	GetObservationsSpeciesCountsParamsLicenseCcByNc   GetObservationsSpeciesCountsParamsLicense = "cc-by-nc"
	GetObservationsSpeciesCountsParamsLicenseCcByNcNd GetObservationsSpeciesCountsParamsLicense = "cc-by-nc-nd"
	GetObservationsSpeciesCountsParamsLicenseCcByNcSa GetObservationsSpeciesCountsParamsLicense = "cc-by-nc-sa"
	GetObservationsSpeciesCountsParamsLicenseCcByNd   GetObservationsSpeciesCountsParamsLicense = "cc-by-nd"
	GetObservationsSpeciesCountsParamsLicenseCcBySa   GetObservationsSpeciesCountsParamsLicense = "cc-by-sa"
)

// Defines values for GetObservationsSpeciesCountsParamsPhotoLicense.
const (
	GetObservationsSpeciesCountsParamsPhotoLicenseCc0      GetObservationsSpeciesCountsParamsPhotoLicense = "cc0"
	GetObservationsSpeciesCountsParamsPhotoLicenseCcBy     GetObservationsSpeciesCountsParamsPhotoLicense = "cc-by"
	GetObservationsSpeciesCountsParamsPhotoLicenseCcByNc   GetObservationsSpeciesCountsParamsPhotoLicense = "cc-by-nc"
	GetObservationsSpeciesCountsParamsPhotoLicenseCcByNcNd GetObservationsSpeciesCountsParamsPhotoLicense = "cc-by-nc-nd"
	GetObservationsSpeciesCountsParamsPhotoLicenseCcByNcSa GetObservationsSpeciesCountsParamsPhotoLicense = "cc-by-nc-sa"
	GetObservationsSpeciesCountsParamsPhotoLicenseCcByNd   GetObservationsSpeciesCountsParamsPhotoLicense = "cc-by-nd"
	GetObservationsSpeciesCountsParamsPhotoLicenseCcBySa   GetObservationsSpeciesCountsParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetObservationsSpeciesCountsParamsRank.
const (
	GetObservationsSpeciesCountsParamsRankClass         GetObservationsSpeciesCountsParamsRank = "class"
	GetObservationsSpeciesCountsParamsRankComplex       GetObservationsSpeciesCountsParamsRank = "complex"
	GetObservationsSpeciesCountsParamsRankEpifamily     GetObservationsSpeciesCountsParamsRank = "epifamily"
	GetObservationsSpeciesCountsParamsRankFamily        GetObservationsSpeciesCountsParamsRank = "family"
	GetObservationsSpeciesCountsParamsRankForm          GetObservationsSpeciesCountsParamsRank = "form"
	GetObservationsSpeciesCountsParamsRankGenus         GetObservationsSpeciesCountsParamsRank = "genus"
	GetObservationsSpeciesCountsParamsRankGenushybrid   GetObservationsSpeciesCountsParamsRank = "genushybrid"
	GetObservationsSpeciesCountsParamsRankHybrid        GetObservationsSpeciesCountsParamsRank = "hybrid"
	GetObservationsSpeciesCountsParamsRankInfraclass    GetObservationsSpeciesCountsParamsRank = "infraclass"
	GetObservationsSpeciesCountsParamsRankInfrahybrid   GetObservationsSpeciesCountsParamsRank = "infrahybrid"
	GetObservationsSpeciesCountsParamsRankInfraorder    GetObservationsSpeciesCountsParamsRank = "infraorder"
	GetObservationsSpeciesCountsParamsRankKingdom       GetObservationsSpeciesCountsParamsRank = "kingdom"
	GetObservationsSpeciesCountsParamsRankOrder         GetObservationsSpeciesCountsParamsRank = "order"
	GetObservationsSpeciesCountsParamsRankParvorder     GetObservationsSpeciesCountsParamsRank = "parvorder"
	GetObservationsSpeciesCountsParamsRankPhylum        GetObservationsSpeciesCountsParamsRank = "phylum"
	GetObservationsSpeciesCountsParamsRankSection       GetObservationsSpeciesCountsParamsRank = "section"
	GetObservationsSpeciesCountsParamsRankSpecies       GetObservationsSpeciesCountsParamsRank = "species"
	GetObservationsSpeciesCountsParamsRankSubclass      GetObservationsSpeciesCountsParamsRank = "subclass"
	GetObservationsSpeciesCountsParamsRankSubfamily     GetObservationsSpeciesCountsParamsRank = "subfamily"
	GetObservationsSpeciesCountsParamsRankSubgenus      GetObservationsSpeciesCountsParamsRank = "subgenus"
	GetObservationsSpeciesCountsParamsRankSuborder      GetObservationsSpeciesCountsParamsRank = "suborder"
	GetObservationsSpeciesCountsParamsRankSubphylum     GetObservationsSpeciesCountsParamsRank = "subphylum"
	GetObservationsSpeciesCountsParamsRankSubsection    GetObservationsSpeciesCountsParamsRank = "subsection"
	GetObservationsSpeciesCountsParamsRankSubspecies    GetObservationsSpeciesCountsParamsRank = "subspecies"
	GetObservationsSpeciesCountsParamsRankSubterclass   GetObservationsSpeciesCountsParamsRank = "subterclass"
	GetObservationsSpeciesCountsParamsRankSubtribe      GetObservationsSpeciesCountsParamsRank = "subtribe"
	GetObservationsSpeciesCountsParamsRankSuperclass    GetObservationsSpeciesCountsParamsRank = "superclass"
	GetObservationsSpeciesCountsParamsRankSuperfamily   GetObservationsSpeciesCountsParamsRank = "superfamily"
	GetObservationsSpeciesCountsParamsRankSuperorder    GetObservationsSpeciesCountsParamsRank = "superorder"
	GetObservationsSpeciesCountsParamsRankSupertribe    GetObservationsSpeciesCountsParamsRank = "supertribe"
	GetObservationsSpeciesCountsParamsRankTribe         GetObservationsSpeciesCountsParamsRank = "tribe"
	GetObservationsSpeciesCountsParamsRankVariety       GetObservationsSpeciesCountsParamsRank = "variety"
	GetObservationsSpeciesCountsParamsRankZoosection    GetObservationsSpeciesCountsParamsRank = "zoosection"
	GetObservationsSpeciesCountsParamsRankZoosubsection GetObservationsSpeciesCountsParamsRank = "zoosubsection"
)

// Defines values for GetObservationsSpeciesCountsParamsSoundLicense.
const (
	GetObservationsSpeciesCountsParamsSoundLicenseCc0      GetObservationsSpeciesCountsParamsSoundLicense = "cc0"
	GetObservationsSpeciesCountsParamsSoundLicenseCcBy     GetObservationsSpeciesCountsParamsSoundLicense = "cc-by"
	GetObservationsSpeciesCountsParamsSoundLicenseCcByNc   GetObservationsSpeciesCountsParamsSoundLicense = "cc-by-nc"
	GetObservationsSpeciesCountsParamsSoundLicenseCcByNcNd GetObservationsSpeciesCountsParamsSoundLicense = "cc-by-nc-nd"
	GetObservationsSpeciesCountsParamsSoundLicenseCcByNcSa GetObservationsSpeciesCountsParamsSoundLicense = "cc-by-nc-sa"
	GetObservationsSpeciesCountsParamsSoundLicenseCcByNd   GetObservationsSpeciesCountsParamsSoundLicense = "cc-by-nd"
	GetObservationsSpeciesCountsParamsSoundLicenseCcBySa   GetObservationsSpeciesCountsParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetObservationsSpeciesCountsParamsCsi.
const (
	GetObservationsSpeciesCountsParamsCsiCR GetObservationsSpeciesCountsParamsCsi = "CR"
	GetObservationsSpeciesCountsParamsCsiEN GetObservationsSpeciesCountsParamsCsi = "EN"
	GetObservationsSpeciesCountsParamsCsiEW GetObservationsSpeciesCountsParamsCsi = "EW"
	GetObservationsSpeciesCountsParamsCsiEX GetObservationsSpeciesCountsParamsCsi = "EX"
	GetObservationsSpeciesCountsParamsCsiLC GetObservationsSpeciesCountsParamsCsi = "LC"
	GetObservationsSpeciesCountsParamsCsiNT GetObservationsSpeciesCountsParamsCsi = "NT"
	GetObservationsSpeciesCountsParamsCsiVU GetObservationsSpeciesCountsParamsCsi = "VU"
)

// Defines values for GetObservationsSpeciesCountsParamsGeoprivacy.
const (
	GetObservationsSpeciesCountsParamsGeoprivacyObscured        GetObservationsSpeciesCountsParamsGeoprivacy = "obscured"
	GetObservationsSpeciesCountsParamsGeoprivacyObscuredPrivate GetObservationsSpeciesCountsParamsGeoprivacy = "obscured_private"
	GetObservationsSpeciesCountsParamsGeoprivacyOpen            GetObservationsSpeciesCountsParamsGeoprivacy = "open"
	GetObservationsSpeciesCountsParamsGeoprivacyPrivate         GetObservationsSpeciesCountsParamsGeoprivacy = "private"
)

// Defines values for GetObservationsSpeciesCountsParamsTaxonGeoprivacy.
const (
	GetObservationsSpeciesCountsParamsTaxonGeoprivacyObscured        GetObservationsSpeciesCountsParamsTaxonGeoprivacy = "obscured"
	GetObservationsSpeciesCountsParamsTaxonGeoprivacyObscuredPrivate GetObservationsSpeciesCountsParamsTaxonGeoprivacy = "obscured_private"
	GetObservationsSpeciesCountsParamsTaxonGeoprivacyOpen            GetObservationsSpeciesCountsParamsTaxonGeoprivacy = "open"
	GetObservationsSpeciesCountsParamsTaxonGeoprivacyPrivate         GetObservationsSpeciesCountsParamsTaxonGeoprivacy = "private"
)

// Defines values for GetObservationsSpeciesCountsParamsObscuration.
const (
	GetObservationsSpeciesCountsParamsObscurationNone     GetObservationsSpeciesCountsParamsObscuration = "none"
	GetObservationsSpeciesCountsParamsObscurationObscured GetObservationsSpeciesCountsParamsObscuration = "obscured"
	GetObservationsSpeciesCountsParamsObscurationPrivate  GetObservationsSpeciesCountsParamsObscuration = "private"
)

// Defines values for GetObservationsSpeciesCountsParamsHrank.
const (
	GetObservationsSpeciesCountsParamsHrankClass         GetObservationsSpeciesCountsParamsHrank = "class"
	GetObservationsSpeciesCountsParamsHrankComplex       GetObservationsSpeciesCountsParamsHrank = "complex"
	GetObservationsSpeciesCountsParamsHrankEpifamily     GetObservationsSpeciesCountsParamsHrank = "epifamily"
	GetObservationsSpeciesCountsParamsHrankFamily        GetObservationsSpeciesCountsParamsHrank = "family"
	GetObservationsSpeciesCountsParamsHrankForm          GetObservationsSpeciesCountsParamsHrank = "form"
	GetObservationsSpeciesCountsParamsHrankGenus         GetObservationsSpeciesCountsParamsHrank = "genus"
	GetObservationsSpeciesCountsParamsHrankGenushybrid   GetObservationsSpeciesCountsParamsHrank = "genushybrid"
	GetObservationsSpeciesCountsParamsHrankHybrid        GetObservationsSpeciesCountsParamsHrank = "hybrid"
	GetObservationsSpeciesCountsParamsHrankInfraclass    GetObservationsSpeciesCountsParamsHrank = "infraclass"
	GetObservationsSpeciesCountsParamsHrankInfrahybrid   GetObservationsSpeciesCountsParamsHrank = "infrahybrid"
	GetObservationsSpeciesCountsParamsHrankInfraorder    GetObservationsSpeciesCountsParamsHrank = "infraorder"
	GetObservationsSpeciesCountsParamsHrankKingdom       GetObservationsSpeciesCountsParamsHrank = "kingdom"
	GetObservationsSpeciesCountsParamsHrankOrder         GetObservationsSpeciesCountsParamsHrank = "order"
	GetObservationsSpeciesCountsParamsHrankParvorder     GetObservationsSpeciesCountsParamsHrank = "parvorder"
	GetObservationsSpeciesCountsParamsHrankPhylum        GetObservationsSpeciesCountsParamsHrank = "phylum"
	GetObservationsSpeciesCountsParamsHrankSection       GetObservationsSpeciesCountsParamsHrank = "section"
	GetObservationsSpeciesCountsParamsHrankSpecies       GetObservationsSpeciesCountsParamsHrank = "species"
	GetObservationsSpeciesCountsParamsHrankSubclass      GetObservationsSpeciesCountsParamsHrank = "subclass"
	GetObservationsSpeciesCountsParamsHrankSubfamily     GetObservationsSpeciesCountsParamsHrank = "subfamily"
	GetObservationsSpeciesCountsParamsHrankSubgenus      GetObservationsSpeciesCountsParamsHrank = "subgenus"
	GetObservationsSpeciesCountsParamsHrankSuborder      GetObservationsSpeciesCountsParamsHrank = "suborder"
	GetObservationsSpeciesCountsParamsHrankSubphylum     GetObservationsSpeciesCountsParamsHrank = "subphylum"
	GetObservationsSpeciesCountsParamsHrankSubsection    GetObservationsSpeciesCountsParamsHrank = "subsection"
	GetObservationsSpeciesCountsParamsHrankSubspecies    GetObservationsSpeciesCountsParamsHrank = "subspecies"
	GetObservationsSpeciesCountsParamsHrankSubterclass   GetObservationsSpeciesCountsParamsHrank = "subterclass"
	GetObservationsSpeciesCountsParamsHrankSubtribe      GetObservationsSpeciesCountsParamsHrank = "subtribe"
	GetObservationsSpeciesCountsParamsHrankSuperclass    GetObservationsSpeciesCountsParamsHrank = "superclass"
	GetObservationsSpeciesCountsParamsHrankSuperfamily   GetObservationsSpeciesCountsParamsHrank = "superfamily"
	GetObservationsSpeciesCountsParamsHrankSuperorder    GetObservationsSpeciesCountsParamsHrank = "superorder"
	GetObservationsSpeciesCountsParamsHrankSupertribe    GetObservationsSpeciesCountsParamsHrank = "supertribe"
	GetObservationsSpeciesCountsParamsHrankTribe         GetObservationsSpeciesCountsParamsHrank = "tribe"
	GetObservationsSpeciesCountsParamsHrankVariety       GetObservationsSpeciesCountsParamsHrank = "variety"
	GetObservationsSpeciesCountsParamsHrankZoosection    GetObservationsSpeciesCountsParamsHrank = "zoosection"
	GetObservationsSpeciesCountsParamsHrankZoosubsection GetObservationsSpeciesCountsParamsHrank = "zoosubsection"
)

// Defines values for GetObservationsSpeciesCountsParamsLrank.
const (
	GetObservationsSpeciesCountsParamsLrankClass         GetObservationsSpeciesCountsParamsLrank = "class"
	GetObservationsSpeciesCountsParamsLrankComplex       GetObservationsSpeciesCountsParamsLrank = "complex"
	GetObservationsSpeciesCountsParamsLrankEpifamily     GetObservationsSpeciesCountsParamsLrank = "epifamily"
	GetObservationsSpeciesCountsParamsLrankFamily        GetObservationsSpeciesCountsParamsLrank = "family"
	GetObservationsSpeciesCountsParamsLrankForm          GetObservationsSpeciesCountsParamsLrank = "form"
	GetObservationsSpeciesCountsParamsLrankGenus         GetObservationsSpeciesCountsParamsLrank = "genus"
	GetObservationsSpeciesCountsParamsLrankGenushybrid   GetObservationsSpeciesCountsParamsLrank = "genushybrid"
	GetObservationsSpeciesCountsParamsLrankHybrid        GetObservationsSpeciesCountsParamsLrank = "hybrid"
	GetObservationsSpeciesCountsParamsLrankInfraclass    GetObservationsSpeciesCountsParamsLrank = "infraclass"
	GetObservationsSpeciesCountsParamsLrankInfrahybrid   GetObservationsSpeciesCountsParamsLrank = "infrahybrid"
	GetObservationsSpeciesCountsParamsLrankInfraorder    GetObservationsSpeciesCountsParamsLrank = "infraorder"
	GetObservationsSpeciesCountsParamsLrankKingdom       GetObservationsSpeciesCountsParamsLrank = "kingdom"
	GetObservationsSpeciesCountsParamsLrankOrder         GetObservationsSpeciesCountsParamsLrank = "order"
	GetObservationsSpeciesCountsParamsLrankParvorder     GetObservationsSpeciesCountsParamsLrank = "parvorder"
	GetObservationsSpeciesCountsParamsLrankPhylum        GetObservationsSpeciesCountsParamsLrank = "phylum"
	GetObservationsSpeciesCountsParamsLrankSection       GetObservationsSpeciesCountsParamsLrank = "section"
	GetObservationsSpeciesCountsParamsLrankSpecies       GetObservationsSpeciesCountsParamsLrank = "species"
	GetObservationsSpeciesCountsParamsLrankSubclass      GetObservationsSpeciesCountsParamsLrank = "subclass"
	GetObservationsSpeciesCountsParamsLrankSubfamily     GetObservationsSpeciesCountsParamsLrank = "subfamily"
	GetObservationsSpeciesCountsParamsLrankSubgenus      GetObservationsSpeciesCountsParamsLrank = "subgenus"
	GetObservationsSpeciesCountsParamsLrankSuborder      GetObservationsSpeciesCountsParamsLrank = "suborder"
	GetObservationsSpeciesCountsParamsLrankSubphylum     GetObservationsSpeciesCountsParamsLrank = "subphylum"
	GetObservationsSpeciesCountsParamsLrankSubsection    GetObservationsSpeciesCountsParamsLrank = "subsection"
	GetObservationsSpeciesCountsParamsLrankSubspecies    GetObservationsSpeciesCountsParamsLrank = "subspecies"
	GetObservationsSpeciesCountsParamsLrankSubterclass   GetObservationsSpeciesCountsParamsLrank = "subterclass"
	GetObservationsSpeciesCountsParamsLrankSubtribe      GetObservationsSpeciesCountsParamsLrank = "subtribe"
	GetObservationsSpeciesCountsParamsLrankSuperclass    GetObservationsSpeciesCountsParamsLrank = "superclass"
	GetObservationsSpeciesCountsParamsLrankSuperfamily   GetObservationsSpeciesCountsParamsLrank = "superfamily"
	GetObservationsSpeciesCountsParamsLrankSuperorder    GetObservationsSpeciesCountsParamsLrank = "superorder"
	GetObservationsSpeciesCountsParamsLrankSupertribe    GetObservationsSpeciesCountsParamsLrank = "supertribe"
	GetObservationsSpeciesCountsParamsLrankTribe         GetObservationsSpeciesCountsParamsLrank = "tribe"
	GetObservationsSpeciesCountsParamsLrankVariety       GetObservationsSpeciesCountsParamsLrank = "variety"
	GetObservationsSpeciesCountsParamsLrankZoosection    GetObservationsSpeciesCountsParamsLrank = "zoosection"
	GetObservationsSpeciesCountsParamsLrankZoosubsection GetObservationsSpeciesCountsParamsLrank = "zoosubsection"
)

// Defines values for GetObservationsSpeciesCountsParamsIconicTaxa.
const (
	GetObservationsSpeciesCountsParamsIconicTaxaActinopterygii GetObservationsSpeciesCountsParamsIconicTaxa = "Actinopterygii"
	GetObservationsSpeciesCountsParamsIconicTaxaAmphibia       GetObservationsSpeciesCountsParamsIconicTaxa = "Amphibia"
	GetObservationsSpeciesCountsParamsIconicTaxaAnimalia       GetObservationsSpeciesCountsParamsIconicTaxa = "Animalia"
	GetObservationsSpeciesCountsParamsIconicTaxaArachnida      GetObservationsSpeciesCountsParamsIconicTaxa = "Arachnida"
	GetObservationsSpeciesCountsParamsIconicTaxaAves           GetObservationsSpeciesCountsParamsIconicTaxa = "Aves"
	GetObservationsSpeciesCountsParamsIconicTaxaChromista      GetObservationsSpeciesCountsParamsIconicTaxa = "Chromista"
	GetObservationsSpeciesCountsParamsIconicTaxaFungi          GetObservationsSpeciesCountsParamsIconicTaxa = "Fungi"
	GetObservationsSpeciesCountsParamsIconicTaxaInsecta        GetObservationsSpeciesCountsParamsIconicTaxa = "Insecta"
	GetObservationsSpeciesCountsParamsIconicTaxaMammalia       GetObservationsSpeciesCountsParamsIconicTaxa = "Mammalia"
	GetObservationsSpeciesCountsParamsIconicTaxaMollusca       GetObservationsSpeciesCountsParamsIconicTaxa = "Mollusca"
	GetObservationsSpeciesCountsParamsIconicTaxaPlantae        GetObservationsSpeciesCountsParamsIconicTaxa = "Plantae"
	GetObservationsSpeciesCountsParamsIconicTaxaProtozoa       GetObservationsSpeciesCountsParamsIconicTaxa = "Protozoa"
	GetObservationsSpeciesCountsParamsIconicTaxaReptilia       GetObservationsSpeciesCountsParamsIconicTaxa = "Reptilia"
	GetObservationsSpeciesCountsParamsIconicTaxaUnknown        GetObservationsSpeciesCountsParamsIconicTaxa = "unknown"
)

// Defines values for GetObservationsSpeciesCountsParamsIdentifications.
const (
	GetObservationsSpeciesCountsParamsIdentificationsMostAgree    GetObservationsSpeciesCountsParamsIdentifications = "most_agree"
	GetObservationsSpeciesCountsParamsIdentificationsMostDisagree GetObservationsSpeciesCountsParamsIdentifications = "most_disagree"
	GetObservationsSpeciesCountsParamsIdentificationsSomeAgree    GetObservationsSpeciesCountsParamsIdentifications = "some_agree"
)

// Defines values for GetObservationsSpeciesCountsParamsSearchOn.
const (
	GetObservationsSpeciesCountsParamsSearchOnDescription        GetObservationsSpeciesCountsParamsSearchOn = "description"
	GetObservationsSpeciesCountsParamsSearchOnNames              GetObservationsSpeciesCountsParamsSearchOn = "names"
	GetObservationsSpeciesCountsParamsSearchOnPlace              GetObservationsSpeciesCountsParamsSearchOn = "place"
	GetObservationsSpeciesCountsParamsSearchOnTags               GetObservationsSpeciesCountsParamsSearchOn = "tags"
	GetObservationsSpeciesCountsParamsSearchOnTaxonPageObsPhotos GetObservationsSpeciesCountsParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetObservationsSpeciesCountsParamsQualityGrade.
const (
	GetObservationsSpeciesCountsParamsQualityGradeCasual   GetObservationsSpeciesCountsParamsQualityGrade = "casual"
	GetObservationsSpeciesCountsParamsQualityGradeNeedsId  GetObservationsSpeciesCountsParamsQualityGrade = "needs_id"
	GetObservationsSpeciesCountsParamsQualityGradeResearch GetObservationsSpeciesCountsParamsQualityGrade = "research"
)

// Defines values for GetObservationsSpeciesCountsParamsOrder.
const (
	GetObservationsSpeciesCountsParamsOrderAsc  GetObservationsSpeciesCountsParamsOrder = "asc"
	GetObservationsSpeciesCountsParamsOrderDesc GetObservationsSpeciesCountsParamsOrder = "desc"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsLicense.
const (
	GetObservationsUmbrellaProjectStatsParamsLicenseCc0      GetObservationsUmbrellaProjectStatsParamsLicense = "cc0"
	GetObservationsUmbrellaProjectStatsParamsLicenseCcBy     GetObservationsUmbrellaProjectStatsParamsLicense = "cc-by"
	GetObservationsUmbrellaProjectStatsParamsLicenseCcByNc   GetObservationsUmbrellaProjectStatsParamsLicense = "cc-by-nc"
	GetObservationsUmbrellaProjectStatsParamsLicenseCcByNcNd GetObservationsUmbrellaProjectStatsParamsLicense = "cc-by-nc-nd"
	GetObservationsUmbrellaProjectStatsParamsLicenseCcByNcSa GetObservationsUmbrellaProjectStatsParamsLicense = "cc-by-nc-sa"
	GetObservationsUmbrellaProjectStatsParamsLicenseCcByNd   GetObservationsUmbrellaProjectStatsParamsLicense = "cc-by-nd"
	GetObservationsUmbrellaProjectStatsParamsLicenseCcBySa   GetObservationsUmbrellaProjectStatsParamsLicense = "cc-by-sa"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsPhotoLicense.
const (
	GetObservationsUmbrellaProjectStatsParamsPhotoLicenseCc0      GetObservationsUmbrellaProjectStatsParamsPhotoLicense = "cc0"
	GetObservationsUmbrellaProjectStatsParamsPhotoLicenseCcBy     GetObservationsUmbrellaProjectStatsParamsPhotoLicense = "cc-by"
	GetObservationsUmbrellaProjectStatsParamsPhotoLicenseCcByNc   GetObservationsUmbrellaProjectStatsParamsPhotoLicense = "cc-by-nc"
	GetObservationsUmbrellaProjectStatsParamsPhotoLicenseCcByNcNd GetObservationsUmbrellaProjectStatsParamsPhotoLicense = "cc-by-nc-nd"
	GetObservationsUmbrellaProjectStatsParamsPhotoLicenseCcByNcSa GetObservationsUmbrellaProjectStatsParamsPhotoLicense = "cc-by-nc-sa"
	GetObservationsUmbrellaProjectStatsParamsPhotoLicenseCcByNd   GetObservationsUmbrellaProjectStatsParamsPhotoLicense = "cc-by-nd"
	GetObservationsUmbrellaProjectStatsParamsPhotoLicenseCcBySa   GetObservationsUmbrellaProjectStatsParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsRank.
const (
	GetObservationsUmbrellaProjectStatsParamsRankClass         GetObservationsUmbrellaProjectStatsParamsRank = "class"
	GetObservationsUmbrellaProjectStatsParamsRankComplex       GetObservationsUmbrellaProjectStatsParamsRank = "complex"
	GetObservationsUmbrellaProjectStatsParamsRankEpifamily     GetObservationsUmbrellaProjectStatsParamsRank = "epifamily"
	GetObservationsUmbrellaProjectStatsParamsRankFamily        GetObservationsUmbrellaProjectStatsParamsRank = "family"
	GetObservationsUmbrellaProjectStatsParamsRankForm          GetObservationsUmbrellaProjectStatsParamsRank = "form"
	GetObservationsUmbrellaProjectStatsParamsRankGenus         GetObservationsUmbrellaProjectStatsParamsRank = "genus"
	GetObservationsUmbrellaProjectStatsParamsRankGenushybrid   GetObservationsUmbrellaProjectStatsParamsRank = "genushybrid"
	GetObservationsUmbrellaProjectStatsParamsRankHybrid        GetObservationsUmbrellaProjectStatsParamsRank = "hybrid"
	GetObservationsUmbrellaProjectStatsParamsRankInfraclass    GetObservationsUmbrellaProjectStatsParamsRank = "infraclass"
	GetObservationsUmbrellaProjectStatsParamsRankInfrahybrid   GetObservationsUmbrellaProjectStatsParamsRank = "infrahybrid"
	GetObservationsUmbrellaProjectStatsParamsRankInfraorder    GetObservationsUmbrellaProjectStatsParamsRank = "infraorder"
	GetObservationsUmbrellaProjectStatsParamsRankKingdom       GetObservationsUmbrellaProjectStatsParamsRank = "kingdom"
	GetObservationsUmbrellaProjectStatsParamsRankOrder         GetObservationsUmbrellaProjectStatsParamsRank = "order"
	GetObservationsUmbrellaProjectStatsParamsRankParvorder     GetObservationsUmbrellaProjectStatsParamsRank = "parvorder"
	GetObservationsUmbrellaProjectStatsParamsRankPhylum        GetObservationsUmbrellaProjectStatsParamsRank = "phylum"
	GetObservationsUmbrellaProjectStatsParamsRankSection       GetObservationsUmbrellaProjectStatsParamsRank = "section"
	GetObservationsUmbrellaProjectStatsParamsRankSpecies       GetObservationsUmbrellaProjectStatsParamsRank = "species"
	GetObservationsUmbrellaProjectStatsParamsRankSubclass      GetObservationsUmbrellaProjectStatsParamsRank = "subclass"
	GetObservationsUmbrellaProjectStatsParamsRankSubfamily     GetObservationsUmbrellaProjectStatsParamsRank = "subfamily"
	GetObservationsUmbrellaProjectStatsParamsRankSubgenus      GetObservationsUmbrellaProjectStatsParamsRank = "subgenus"
	GetObservationsUmbrellaProjectStatsParamsRankSuborder      GetObservationsUmbrellaProjectStatsParamsRank = "suborder"
	GetObservationsUmbrellaProjectStatsParamsRankSubphylum     GetObservationsUmbrellaProjectStatsParamsRank = "subphylum"
	GetObservationsUmbrellaProjectStatsParamsRankSubsection    GetObservationsUmbrellaProjectStatsParamsRank = "subsection"
	GetObservationsUmbrellaProjectStatsParamsRankSubspecies    GetObservationsUmbrellaProjectStatsParamsRank = "subspecies"
	GetObservationsUmbrellaProjectStatsParamsRankSubterclass   GetObservationsUmbrellaProjectStatsParamsRank = "subterclass"
	GetObservationsUmbrellaProjectStatsParamsRankSubtribe      GetObservationsUmbrellaProjectStatsParamsRank = "subtribe"
	GetObservationsUmbrellaProjectStatsParamsRankSuperclass    GetObservationsUmbrellaProjectStatsParamsRank = "superclass"
	GetObservationsUmbrellaProjectStatsParamsRankSuperfamily   GetObservationsUmbrellaProjectStatsParamsRank = "superfamily"
	GetObservationsUmbrellaProjectStatsParamsRankSuperorder    GetObservationsUmbrellaProjectStatsParamsRank = "superorder"
	GetObservationsUmbrellaProjectStatsParamsRankSupertribe    GetObservationsUmbrellaProjectStatsParamsRank = "supertribe"
	GetObservationsUmbrellaProjectStatsParamsRankTribe         GetObservationsUmbrellaProjectStatsParamsRank = "tribe"
	GetObservationsUmbrellaProjectStatsParamsRankVariety       GetObservationsUmbrellaProjectStatsParamsRank = "variety"
	GetObservationsUmbrellaProjectStatsParamsRankZoosection    GetObservationsUmbrellaProjectStatsParamsRank = "zoosection"
	GetObservationsUmbrellaProjectStatsParamsRankZoosubsection GetObservationsUmbrellaProjectStatsParamsRank = "zoosubsection"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsSoundLicense.
const (
	GetObservationsUmbrellaProjectStatsParamsSoundLicenseCc0      GetObservationsUmbrellaProjectStatsParamsSoundLicense = "cc0"
	GetObservationsUmbrellaProjectStatsParamsSoundLicenseCcBy     GetObservationsUmbrellaProjectStatsParamsSoundLicense = "cc-by"
	GetObservationsUmbrellaProjectStatsParamsSoundLicenseCcByNc   GetObservationsUmbrellaProjectStatsParamsSoundLicense = "cc-by-nc"
	GetObservationsUmbrellaProjectStatsParamsSoundLicenseCcByNcNd GetObservationsUmbrellaProjectStatsParamsSoundLicense = "cc-by-nc-nd"
	GetObservationsUmbrellaProjectStatsParamsSoundLicenseCcByNcSa GetObservationsUmbrellaProjectStatsParamsSoundLicense = "cc-by-nc-sa"
	GetObservationsUmbrellaProjectStatsParamsSoundLicenseCcByNd   GetObservationsUmbrellaProjectStatsParamsSoundLicense = "cc-by-nd"
	GetObservationsUmbrellaProjectStatsParamsSoundLicenseCcBySa   GetObservationsUmbrellaProjectStatsParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsCsi.
const (
	GetObservationsUmbrellaProjectStatsParamsCsiCR GetObservationsUmbrellaProjectStatsParamsCsi = "CR"
	GetObservationsUmbrellaProjectStatsParamsCsiEN GetObservationsUmbrellaProjectStatsParamsCsi = "EN"
	GetObservationsUmbrellaProjectStatsParamsCsiEW GetObservationsUmbrellaProjectStatsParamsCsi = "EW"
	GetObservationsUmbrellaProjectStatsParamsCsiEX GetObservationsUmbrellaProjectStatsParamsCsi = "EX"
	GetObservationsUmbrellaProjectStatsParamsCsiLC GetObservationsUmbrellaProjectStatsParamsCsi = "LC"
	GetObservationsUmbrellaProjectStatsParamsCsiNT GetObservationsUmbrellaProjectStatsParamsCsi = "NT"
	GetObservationsUmbrellaProjectStatsParamsCsiVU GetObservationsUmbrellaProjectStatsParamsCsi = "VU"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsGeoprivacy.
const (
	GetObservationsUmbrellaProjectStatsParamsGeoprivacyObscured        GetObservationsUmbrellaProjectStatsParamsGeoprivacy = "obscured"
	GetObservationsUmbrellaProjectStatsParamsGeoprivacyObscuredPrivate GetObservationsUmbrellaProjectStatsParamsGeoprivacy = "obscured_private"
	GetObservationsUmbrellaProjectStatsParamsGeoprivacyOpen            GetObservationsUmbrellaProjectStatsParamsGeoprivacy = "open"
	GetObservationsUmbrellaProjectStatsParamsGeoprivacyPrivate         GetObservationsUmbrellaProjectStatsParamsGeoprivacy = "private"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacy.
const (
	GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacyObscured        GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacy = "obscured"
	GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacyObscuredPrivate GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacy = "obscured_private"
	GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacyOpen            GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacy = "open"
	GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacyPrivate         GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacy = "private"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsObscuration.
const (
	GetObservationsUmbrellaProjectStatsParamsObscurationNone     GetObservationsUmbrellaProjectStatsParamsObscuration = "none"
	GetObservationsUmbrellaProjectStatsParamsObscurationObscured GetObservationsUmbrellaProjectStatsParamsObscuration = "obscured"
	GetObservationsUmbrellaProjectStatsParamsObscurationPrivate  GetObservationsUmbrellaProjectStatsParamsObscuration = "private"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsHrank.
const (
	GetObservationsUmbrellaProjectStatsParamsHrankClass         GetObservationsUmbrellaProjectStatsParamsHrank = "class"
	GetObservationsUmbrellaProjectStatsParamsHrankComplex       GetObservationsUmbrellaProjectStatsParamsHrank = "complex"
	GetObservationsUmbrellaProjectStatsParamsHrankEpifamily     GetObservationsUmbrellaProjectStatsParamsHrank = "epifamily"
	GetObservationsUmbrellaProjectStatsParamsHrankFamily        GetObservationsUmbrellaProjectStatsParamsHrank = "family"
	GetObservationsUmbrellaProjectStatsParamsHrankForm          GetObservationsUmbrellaProjectStatsParamsHrank = "form"
	GetObservationsUmbrellaProjectStatsParamsHrankGenus         GetObservationsUmbrellaProjectStatsParamsHrank = "genus"
	GetObservationsUmbrellaProjectStatsParamsHrankGenushybrid   GetObservationsUmbrellaProjectStatsParamsHrank = "genushybrid"
	GetObservationsUmbrellaProjectStatsParamsHrankHybrid        GetObservationsUmbrellaProjectStatsParamsHrank = "hybrid"
	GetObservationsUmbrellaProjectStatsParamsHrankInfraclass    GetObservationsUmbrellaProjectStatsParamsHrank = "infraclass"
	GetObservationsUmbrellaProjectStatsParamsHrankInfrahybrid   GetObservationsUmbrellaProjectStatsParamsHrank = "infrahybrid"
	GetObservationsUmbrellaProjectStatsParamsHrankInfraorder    GetObservationsUmbrellaProjectStatsParamsHrank = "infraorder"
	GetObservationsUmbrellaProjectStatsParamsHrankKingdom       GetObservationsUmbrellaProjectStatsParamsHrank = "kingdom"
	GetObservationsUmbrellaProjectStatsParamsHrankOrder         GetObservationsUmbrellaProjectStatsParamsHrank = "order"
	GetObservationsUmbrellaProjectStatsParamsHrankParvorder     GetObservationsUmbrellaProjectStatsParamsHrank = "parvorder"
	GetObservationsUmbrellaProjectStatsParamsHrankPhylum        GetObservationsUmbrellaProjectStatsParamsHrank = "phylum"
	GetObservationsUmbrellaProjectStatsParamsHrankSection       GetObservationsUmbrellaProjectStatsParamsHrank = "section"
	GetObservationsUmbrellaProjectStatsParamsHrankSpecies       GetObservationsUmbrellaProjectStatsParamsHrank = "species"
	GetObservationsUmbrellaProjectStatsParamsHrankSubclass      GetObservationsUmbrellaProjectStatsParamsHrank = "subclass"
	GetObservationsUmbrellaProjectStatsParamsHrankSubfamily     GetObservationsUmbrellaProjectStatsParamsHrank = "subfamily"
	GetObservationsUmbrellaProjectStatsParamsHrankSubgenus      GetObservationsUmbrellaProjectStatsParamsHrank = "subgenus"
	GetObservationsUmbrellaProjectStatsParamsHrankSuborder      GetObservationsUmbrellaProjectStatsParamsHrank = "suborder"
	GetObservationsUmbrellaProjectStatsParamsHrankSubphylum     GetObservationsUmbrellaProjectStatsParamsHrank = "subphylum"
	GetObservationsUmbrellaProjectStatsParamsHrankSubsection    GetObservationsUmbrellaProjectStatsParamsHrank = "subsection"
	GetObservationsUmbrellaProjectStatsParamsHrankSubspecies    GetObservationsUmbrellaProjectStatsParamsHrank = "subspecies"
	GetObservationsUmbrellaProjectStatsParamsHrankSubterclass   GetObservationsUmbrellaProjectStatsParamsHrank = "subterclass"
	GetObservationsUmbrellaProjectStatsParamsHrankSubtribe      GetObservationsUmbrellaProjectStatsParamsHrank = "subtribe"
	GetObservationsUmbrellaProjectStatsParamsHrankSuperclass    GetObservationsUmbrellaProjectStatsParamsHrank = "superclass"
	GetObservationsUmbrellaProjectStatsParamsHrankSuperfamily   GetObservationsUmbrellaProjectStatsParamsHrank = "superfamily"
	GetObservationsUmbrellaProjectStatsParamsHrankSuperorder    GetObservationsUmbrellaProjectStatsParamsHrank = "superorder"
	GetObservationsUmbrellaProjectStatsParamsHrankSupertribe    GetObservationsUmbrellaProjectStatsParamsHrank = "supertribe"
	GetObservationsUmbrellaProjectStatsParamsHrankTribe         GetObservationsUmbrellaProjectStatsParamsHrank = "tribe"
	GetObservationsUmbrellaProjectStatsParamsHrankVariety       GetObservationsUmbrellaProjectStatsParamsHrank = "variety"
	GetObservationsUmbrellaProjectStatsParamsHrankZoosection    GetObservationsUmbrellaProjectStatsParamsHrank = "zoosection"
	GetObservationsUmbrellaProjectStatsParamsHrankZoosubsection GetObservationsUmbrellaProjectStatsParamsHrank = "zoosubsection"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsLrank.
const (
	GetObservationsUmbrellaProjectStatsParamsLrankClass         GetObservationsUmbrellaProjectStatsParamsLrank = "class"
	GetObservationsUmbrellaProjectStatsParamsLrankComplex       GetObservationsUmbrellaProjectStatsParamsLrank = "complex"
	GetObservationsUmbrellaProjectStatsParamsLrankEpifamily     GetObservationsUmbrellaProjectStatsParamsLrank = "epifamily"
	GetObservationsUmbrellaProjectStatsParamsLrankFamily        GetObservationsUmbrellaProjectStatsParamsLrank = "family"
	GetObservationsUmbrellaProjectStatsParamsLrankForm          GetObservationsUmbrellaProjectStatsParamsLrank = "form"
	GetObservationsUmbrellaProjectStatsParamsLrankGenus         GetObservationsUmbrellaProjectStatsParamsLrank = "genus"
	GetObservationsUmbrellaProjectStatsParamsLrankGenushybrid   GetObservationsUmbrellaProjectStatsParamsLrank = "genushybrid"
	GetObservationsUmbrellaProjectStatsParamsLrankHybrid        GetObservationsUmbrellaProjectStatsParamsLrank = "hybrid"
	GetObservationsUmbrellaProjectStatsParamsLrankInfraclass    GetObservationsUmbrellaProjectStatsParamsLrank = "infraclass"
	GetObservationsUmbrellaProjectStatsParamsLrankInfrahybrid   GetObservationsUmbrellaProjectStatsParamsLrank = "infrahybrid"
	GetObservationsUmbrellaProjectStatsParamsLrankInfraorder    GetObservationsUmbrellaProjectStatsParamsLrank = "infraorder"
	GetObservationsUmbrellaProjectStatsParamsLrankKingdom       GetObservationsUmbrellaProjectStatsParamsLrank = "kingdom"
	GetObservationsUmbrellaProjectStatsParamsLrankOrder         GetObservationsUmbrellaProjectStatsParamsLrank = "order"
	GetObservationsUmbrellaProjectStatsParamsLrankParvorder     GetObservationsUmbrellaProjectStatsParamsLrank = "parvorder"
	GetObservationsUmbrellaProjectStatsParamsLrankPhylum        GetObservationsUmbrellaProjectStatsParamsLrank = "phylum"
	GetObservationsUmbrellaProjectStatsParamsLrankSection       GetObservationsUmbrellaProjectStatsParamsLrank = "section"
	GetObservationsUmbrellaProjectStatsParamsLrankSpecies       GetObservationsUmbrellaProjectStatsParamsLrank = "species"
	GetObservationsUmbrellaProjectStatsParamsLrankSubclass      GetObservationsUmbrellaProjectStatsParamsLrank = "subclass"
	GetObservationsUmbrellaProjectStatsParamsLrankSubfamily     GetObservationsUmbrellaProjectStatsParamsLrank = "subfamily"
	GetObservationsUmbrellaProjectStatsParamsLrankSubgenus      GetObservationsUmbrellaProjectStatsParamsLrank = "subgenus"
	GetObservationsUmbrellaProjectStatsParamsLrankSuborder      GetObservationsUmbrellaProjectStatsParamsLrank = "suborder"
	GetObservationsUmbrellaProjectStatsParamsLrankSubphylum     GetObservationsUmbrellaProjectStatsParamsLrank = "subphylum"
	GetObservationsUmbrellaProjectStatsParamsLrankSubsection    GetObservationsUmbrellaProjectStatsParamsLrank = "subsection"
	GetObservationsUmbrellaProjectStatsParamsLrankSubspecies    GetObservationsUmbrellaProjectStatsParamsLrank = "subspecies"
	GetObservationsUmbrellaProjectStatsParamsLrankSubterclass   GetObservationsUmbrellaProjectStatsParamsLrank = "subterclass"
	GetObservationsUmbrellaProjectStatsParamsLrankSubtribe      GetObservationsUmbrellaProjectStatsParamsLrank = "subtribe"
	GetObservationsUmbrellaProjectStatsParamsLrankSuperclass    GetObservationsUmbrellaProjectStatsParamsLrank = "superclass"
	GetObservationsUmbrellaProjectStatsParamsLrankSuperfamily   GetObservationsUmbrellaProjectStatsParamsLrank = "superfamily"
	GetObservationsUmbrellaProjectStatsParamsLrankSuperorder    GetObservationsUmbrellaProjectStatsParamsLrank = "superorder"
	GetObservationsUmbrellaProjectStatsParamsLrankSupertribe    GetObservationsUmbrellaProjectStatsParamsLrank = "supertribe"
	GetObservationsUmbrellaProjectStatsParamsLrankTribe         GetObservationsUmbrellaProjectStatsParamsLrank = "tribe"
	GetObservationsUmbrellaProjectStatsParamsLrankVariety       GetObservationsUmbrellaProjectStatsParamsLrank = "variety"
	GetObservationsUmbrellaProjectStatsParamsLrankZoosection    GetObservationsUmbrellaProjectStatsParamsLrank = "zoosection"
	GetObservationsUmbrellaProjectStatsParamsLrankZoosubsection GetObservationsUmbrellaProjectStatsParamsLrank = "zoosubsection"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsIconicTaxa.
const (
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaActinopterygii GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Actinopterygii"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaAmphibia       GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Amphibia"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaAnimalia       GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Animalia"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaArachnida      GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Arachnida"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaAves           GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Aves"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaChromista      GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Chromista"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaFungi          GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Fungi"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaInsecta        GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Insecta"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaMammalia       GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Mammalia"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaMollusca       GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Mollusca"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaPlantae        GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Plantae"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaProtozoa       GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Protozoa"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaReptilia       GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "Reptilia"
	GetObservationsUmbrellaProjectStatsParamsIconicTaxaUnknown        GetObservationsUmbrellaProjectStatsParamsIconicTaxa = "unknown"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsIdentifications.
const (
	GetObservationsUmbrellaProjectStatsParamsIdentificationsMostAgree    GetObservationsUmbrellaProjectStatsParamsIdentifications = "most_agree"
	GetObservationsUmbrellaProjectStatsParamsIdentificationsMostDisagree GetObservationsUmbrellaProjectStatsParamsIdentifications = "most_disagree"
	GetObservationsUmbrellaProjectStatsParamsIdentificationsSomeAgree    GetObservationsUmbrellaProjectStatsParamsIdentifications = "some_agree"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsSearchOn.
const (
	GetObservationsUmbrellaProjectStatsParamsSearchOnDescription        GetObservationsUmbrellaProjectStatsParamsSearchOn = "description"
	GetObservationsUmbrellaProjectStatsParamsSearchOnNames              GetObservationsUmbrellaProjectStatsParamsSearchOn = "names"
	GetObservationsUmbrellaProjectStatsParamsSearchOnPlace              GetObservationsUmbrellaProjectStatsParamsSearchOn = "place"
	GetObservationsUmbrellaProjectStatsParamsSearchOnTags               GetObservationsUmbrellaProjectStatsParamsSearchOn = "tags"
	GetObservationsUmbrellaProjectStatsParamsSearchOnTaxonPageObsPhotos GetObservationsUmbrellaProjectStatsParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsQualityGrade.
const (
	GetObservationsUmbrellaProjectStatsParamsQualityGradeCasual   GetObservationsUmbrellaProjectStatsParamsQualityGrade = "casual"
	GetObservationsUmbrellaProjectStatsParamsQualityGradeNeedsId  GetObservationsUmbrellaProjectStatsParamsQualityGrade = "needs_id"
	GetObservationsUmbrellaProjectStatsParamsQualityGradeResearch GetObservationsUmbrellaProjectStatsParamsQualityGrade = "research"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsOrder.
const (
	GetObservationsUmbrellaProjectStatsParamsOrderAsc  GetObservationsUmbrellaProjectStatsParamsOrder = "asc"
	GetObservationsUmbrellaProjectStatsParamsOrderDesc GetObservationsUmbrellaProjectStatsParamsOrder = "desc"
)

// Defines values for GetObservationsUmbrellaProjectStatsParamsOrderBy.
const (
	GetObservationsUmbrellaProjectStatsParamsOrderByCreatedAt    GetObservationsUmbrellaProjectStatsParamsOrderBy = "created_at"
	GetObservationsUmbrellaProjectStatsParamsOrderByGeoScore     GetObservationsUmbrellaProjectStatsParamsOrderBy = "geo_score"
	GetObservationsUmbrellaProjectStatsParamsOrderById           GetObservationsUmbrellaProjectStatsParamsOrderBy = "id"
	GetObservationsUmbrellaProjectStatsParamsOrderByObservedOn   GetObservationsUmbrellaProjectStatsParamsOrderBy = "observed_on"
	GetObservationsUmbrellaProjectStatsParamsOrderByRandom       GetObservationsUmbrellaProjectStatsParamsOrderBy = "random"
	GetObservationsUmbrellaProjectStatsParamsOrderBySpeciesGuess GetObservationsUmbrellaProjectStatsParamsOrderBy = "species_guess"
	GetObservationsUmbrellaProjectStatsParamsOrderByUpdatedAt    GetObservationsUmbrellaProjectStatsParamsOrderBy = "updated_at"
	GetObservationsUmbrellaProjectStatsParamsOrderByVotes        GetObservationsUmbrellaProjectStatsParamsOrderBy = "votes"
)

// Defines values for GetObservationsUpdatesParamsObservationsBy.
const (
	Following GetObservationsUpdatesParamsObservationsBy = "following"
	Owner     GetObservationsUpdatesParamsObservationsBy = "owner"
)

// Defines values for DeleteObservationsUuidQualityMetricParamsMetric.
const (
	DeleteObservationsUuidQualityMetricParamsMetricDate     DeleteObservationsUuidQualityMetricParamsMetric = "date"
	DeleteObservationsUuidQualityMetricParamsMetricEvidence DeleteObservationsUuidQualityMetricParamsMetric = "evidence"
	DeleteObservationsUuidQualityMetricParamsMetricLocation DeleteObservationsUuidQualityMetricParamsMetric = "location"
	DeleteObservationsUuidQualityMetricParamsMetricNeedsId  DeleteObservationsUuidQualityMetricParamsMetric = "needs_id"
	DeleteObservationsUuidQualityMetricParamsMetricRecent   DeleteObservationsUuidQualityMetricParamsMetric = "recent"
	DeleteObservationsUuidQualityMetricParamsMetricSubject  DeleteObservationsUuidQualityMetricParamsMetric = "subject"
	DeleteObservationsUuidQualityMetricParamsMetricWild     DeleteObservationsUuidQualityMetricParamsMetric = "wild"
)

// Defines values for PostObservationsUuidQualityMetricParamsMetric.
const (
	PostObservationsUuidQualityMetricParamsMetricDate     PostObservationsUuidQualityMetricParamsMetric = "date"
	PostObservationsUuidQualityMetricParamsMetricEvidence PostObservationsUuidQualityMetricParamsMetric = "evidence"
	PostObservationsUuidQualityMetricParamsMetricLocation PostObservationsUuidQualityMetricParamsMetric = "location"
	PostObservationsUuidQualityMetricParamsMetricNeedsId  PostObservationsUuidQualityMetricParamsMetric = "needs_id"
	PostObservationsUuidQualityMetricParamsMetricRecent   PostObservationsUuidQualityMetricParamsMetric = "recent"
	PostObservationsUuidQualityMetricParamsMetricSubject  PostObservationsUuidQualityMetricParamsMetric = "subject"
	PostObservationsUuidQualityMetricParamsMetricWild     PostObservationsUuidQualityMetricParamsMetric = "wild"
)

// Defines values for GetPlacesParamsOrderBy.
const (
	Area GetPlacesParamsOrderBy = "area"
)

// Defines values for GetPlacesNearbyParamsLicense.
const (
	GetPlacesNearbyParamsLicenseCc0      GetPlacesNearbyParamsLicense = "cc0"
	GetPlacesNearbyParamsLicenseCcBy     GetPlacesNearbyParamsLicense = "cc-by"
	GetPlacesNearbyParamsLicenseCcByNc   GetPlacesNearbyParamsLicense = "cc-by-nc"
	GetPlacesNearbyParamsLicenseCcByNcNd GetPlacesNearbyParamsLicense = "cc-by-nc-nd"
	GetPlacesNearbyParamsLicenseCcByNcSa GetPlacesNearbyParamsLicense = "cc-by-nc-sa"
	GetPlacesNearbyParamsLicenseCcByNd   GetPlacesNearbyParamsLicense = "cc-by-nd"
	GetPlacesNearbyParamsLicenseCcBySa   GetPlacesNearbyParamsLicense = "cc-by-sa"
)

// Defines values for GetPlacesNearbyParamsPhotoLicense.
const (
	GetPlacesNearbyParamsPhotoLicenseCc0      GetPlacesNearbyParamsPhotoLicense = "cc0"
	GetPlacesNearbyParamsPhotoLicenseCcBy     GetPlacesNearbyParamsPhotoLicense = "cc-by"
	GetPlacesNearbyParamsPhotoLicenseCcByNc   GetPlacesNearbyParamsPhotoLicense = "cc-by-nc"
	GetPlacesNearbyParamsPhotoLicenseCcByNcNd GetPlacesNearbyParamsPhotoLicense = "cc-by-nc-nd"
	GetPlacesNearbyParamsPhotoLicenseCcByNcSa GetPlacesNearbyParamsPhotoLicense = "cc-by-nc-sa"
	GetPlacesNearbyParamsPhotoLicenseCcByNd   GetPlacesNearbyParamsPhotoLicense = "cc-by-nd"
	GetPlacesNearbyParamsPhotoLicenseCcBySa   GetPlacesNearbyParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetPlacesNearbyParamsRank.
const (
	GetPlacesNearbyParamsRankClass         GetPlacesNearbyParamsRank = "class"
	GetPlacesNearbyParamsRankComplex       GetPlacesNearbyParamsRank = "complex"
	GetPlacesNearbyParamsRankEpifamily     GetPlacesNearbyParamsRank = "epifamily"
	GetPlacesNearbyParamsRankFamily        GetPlacesNearbyParamsRank = "family"
	GetPlacesNearbyParamsRankForm          GetPlacesNearbyParamsRank = "form"
	GetPlacesNearbyParamsRankGenus         GetPlacesNearbyParamsRank = "genus"
	GetPlacesNearbyParamsRankGenushybrid   GetPlacesNearbyParamsRank = "genushybrid"
	GetPlacesNearbyParamsRankHybrid        GetPlacesNearbyParamsRank = "hybrid"
	GetPlacesNearbyParamsRankInfraclass    GetPlacesNearbyParamsRank = "infraclass"
	GetPlacesNearbyParamsRankInfrahybrid   GetPlacesNearbyParamsRank = "infrahybrid"
	GetPlacesNearbyParamsRankInfraorder    GetPlacesNearbyParamsRank = "infraorder"
	GetPlacesNearbyParamsRankKingdom       GetPlacesNearbyParamsRank = "kingdom"
	GetPlacesNearbyParamsRankOrder         GetPlacesNearbyParamsRank = "order"
	GetPlacesNearbyParamsRankParvorder     GetPlacesNearbyParamsRank = "parvorder"
	GetPlacesNearbyParamsRankPhylum        GetPlacesNearbyParamsRank = "phylum"
	GetPlacesNearbyParamsRankSection       GetPlacesNearbyParamsRank = "section"
	GetPlacesNearbyParamsRankSpecies       GetPlacesNearbyParamsRank = "species"
	GetPlacesNearbyParamsRankSubclass      GetPlacesNearbyParamsRank = "subclass"
	GetPlacesNearbyParamsRankSubfamily     GetPlacesNearbyParamsRank = "subfamily"
	GetPlacesNearbyParamsRankSubgenus      GetPlacesNearbyParamsRank = "subgenus"
	GetPlacesNearbyParamsRankSuborder      GetPlacesNearbyParamsRank = "suborder"
	GetPlacesNearbyParamsRankSubphylum     GetPlacesNearbyParamsRank = "subphylum"
	GetPlacesNearbyParamsRankSubsection    GetPlacesNearbyParamsRank = "subsection"
	GetPlacesNearbyParamsRankSubspecies    GetPlacesNearbyParamsRank = "subspecies"
	GetPlacesNearbyParamsRankSubterclass   GetPlacesNearbyParamsRank = "subterclass"
	GetPlacesNearbyParamsRankSubtribe      GetPlacesNearbyParamsRank = "subtribe"
	GetPlacesNearbyParamsRankSuperclass    GetPlacesNearbyParamsRank = "superclass"
	GetPlacesNearbyParamsRankSuperfamily   GetPlacesNearbyParamsRank = "superfamily"
	GetPlacesNearbyParamsRankSuperorder    GetPlacesNearbyParamsRank = "superorder"
	GetPlacesNearbyParamsRankSupertribe    GetPlacesNearbyParamsRank = "supertribe"
	GetPlacesNearbyParamsRankTribe         GetPlacesNearbyParamsRank = "tribe"
	GetPlacesNearbyParamsRankVariety       GetPlacesNearbyParamsRank = "variety"
	GetPlacesNearbyParamsRankZoosection    GetPlacesNearbyParamsRank = "zoosection"
	GetPlacesNearbyParamsRankZoosubsection GetPlacesNearbyParamsRank = "zoosubsection"
)

// Defines values for GetPlacesNearbyParamsSoundLicense.
const (
	GetPlacesNearbyParamsSoundLicenseCc0      GetPlacesNearbyParamsSoundLicense = "cc0"
	GetPlacesNearbyParamsSoundLicenseCcBy     GetPlacesNearbyParamsSoundLicense = "cc-by"
	GetPlacesNearbyParamsSoundLicenseCcByNc   GetPlacesNearbyParamsSoundLicense = "cc-by-nc"
	GetPlacesNearbyParamsSoundLicenseCcByNcNd GetPlacesNearbyParamsSoundLicense = "cc-by-nc-nd"
	GetPlacesNearbyParamsSoundLicenseCcByNcSa GetPlacesNearbyParamsSoundLicense = "cc-by-nc-sa"
	GetPlacesNearbyParamsSoundLicenseCcByNd   GetPlacesNearbyParamsSoundLicense = "cc-by-nd"
	GetPlacesNearbyParamsSoundLicenseCcBySa   GetPlacesNearbyParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetPlacesNearbyParamsCsi.
const (
	GetPlacesNearbyParamsCsiCR GetPlacesNearbyParamsCsi = "CR"
	GetPlacesNearbyParamsCsiEN GetPlacesNearbyParamsCsi = "EN"
	GetPlacesNearbyParamsCsiEW GetPlacesNearbyParamsCsi = "EW"
	GetPlacesNearbyParamsCsiEX GetPlacesNearbyParamsCsi = "EX"
	GetPlacesNearbyParamsCsiLC GetPlacesNearbyParamsCsi = "LC"
	GetPlacesNearbyParamsCsiNT GetPlacesNearbyParamsCsi = "NT"
	GetPlacesNearbyParamsCsiVU GetPlacesNearbyParamsCsi = "VU"
)

// Defines values for GetPlacesNearbyParamsGeoprivacy.
const (
	GetPlacesNearbyParamsGeoprivacyObscured        GetPlacesNearbyParamsGeoprivacy = "obscured"
	GetPlacesNearbyParamsGeoprivacyObscuredPrivate GetPlacesNearbyParamsGeoprivacy = "obscured_private"
	GetPlacesNearbyParamsGeoprivacyOpen            GetPlacesNearbyParamsGeoprivacy = "open"
	GetPlacesNearbyParamsGeoprivacyPrivate         GetPlacesNearbyParamsGeoprivacy = "private"
)

// Defines values for GetPlacesNearbyParamsTaxonGeoprivacy.
const (
	GetPlacesNearbyParamsTaxonGeoprivacyObscured        GetPlacesNearbyParamsTaxonGeoprivacy = "obscured"
	GetPlacesNearbyParamsTaxonGeoprivacyObscuredPrivate GetPlacesNearbyParamsTaxonGeoprivacy = "obscured_private"
	GetPlacesNearbyParamsTaxonGeoprivacyOpen            GetPlacesNearbyParamsTaxonGeoprivacy = "open"
	GetPlacesNearbyParamsTaxonGeoprivacyPrivate         GetPlacesNearbyParamsTaxonGeoprivacy = "private"
)

// Defines values for GetPlacesNearbyParamsObscuration.
const (
	GetPlacesNearbyParamsObscurationNone     GetPlacesNearbyParamsObscuration = "none"
	GetPlacesNearbyParamsObscurationObscured GetPlacesNearbyParamsObscuration = "obscured"
	GetPlacesNearbyParamsObscurationPrivate  GetPlacesNearbyParamsObscuration = "private"
)

// Defines values for GetPlacesNearbyParamsHrank.
const (
	GetPlacesNearbyParamsHrankClass         GetPlacesNearbyParamsHrank = "class"
	GetPlacesNearbyParamsHrankComplex       GetPlacesNearbyParamsHrank = "complex"
	GetPlacesNearbyParamsHrankEpifamily     GetPlacesNearbyParamsHrank = "epifamily"
	GetPlacesNearbyParamsHrankFamily        GetPlacesNearbyParamsHrank = "family"
	GetPlacesNearbyParamsHrankForm          GetPlacesNearbyParamsHrank = "form"
	GetPlacesNearbyParamsHrankGenus         GetPlacesNearbyParamsHrank = "genus"
	GetPlacesNearbyParamsHrankGenushybrid   GetPlacesNearbyParamsHrank = "genushybrid"
	GetPlacesNearbyParamsHrankHybrid        GetPlacesNearbyParamsHrank = "hybrid"
	GetPlacesNearbyParamsHrankInfraclass    GetPlacesNearbyParamsHrank = "infraclass"
	GetPlacesNearbyParamsHrankInfrahybrid   GetPlacesNearbyParamsHrank = "infrahybrid"
	GetPlacesNearbyParamsHrankInfraorder    GetPlacesNearbyParamsHrank = "infraorder"
	GetPlacesNearbyParamsHrankKingdom       GetPlacesNearbyParamsHrank = "kingdom"
	GetPlacesNearbyParamsHrankOrder         GetPlacesNearbyParamsHrank = "order"
	GetPlacesNearbyParamsHrankParvorder     GetPlacesNearbyParamsHrank = "parvorder"
	GetPlacesNearbyParamsHrankPhylum        GetPlacesNearbyParamsHrank = "phylum"
	GetPlacesNearbyParamsHrankSection       GetPlacesNearbyParamsHrank = "section"
	GetPlacesNearbyParamsHrankSpecies       GetPlacesNearbyParamsHrank = "species"
	GetPlacesNearbyParamsHrankSubclass      GetPlacesNearbyParamsHrank = "subclass"
	GetPlacesNearbyParamsHrankSubfamily     GetPlacesNearbyParamsHrank = "subfamily"
	GetPlacesNearbyParamsHrankSubgenus      GetPlacesNearbyParamsHrank = "subgenus"
	GetPlacesNearbyParamsHrankSuborder      GetPlacesNearbyParamsHrank = "suborder"
	GetPlacesNearbyParamsHrankSubphylum     GetPlacesNearbyParamsHrank = "subphylum"
	GetPlacesNearbyParamsHrankSubsection    GetPlacesNearbyParamsHrank = "subsection"
	GetPlacesNearbyParamsHrankSubspecies    GetPlacesNearbyParamsHrank = "subspecies"
	GetPlacesNearbyParamsHrankSubterclass   GetPlacesNearbyParamsHrank = "subterclass"
	GetPlacesNearbyParamsHrankSubtribe      GetPlacesNearbyParamsHrank = "subtribe"
	GetPlacesNearbyParamsHrankSuperclass    GetPlacesNearbyParamsHrank = "superclass"
	GetPlacesNearbyParamsHrankSuperfamily   GetPlacesNearbyParamsHrank = "superfamily"
	GetPlacesNearbyParamsHrankSuperorder    GetPlacesNearbyParamsHrank = "superorder"
	GetPlacesNearbyParamsHrankSupertribe    GetPlacesNearbyParamsHrank = "supertribe"
	GetPlacesNearbyParamsHrankTribe         GetPlacesNearbyParamsHrank = "tribe"
	GetPlacesNearbyParamsHrankVariety       GetPlacesNearbyParamsHrank = "variety"
	GetPlacesNearbyParamsHrankZoosection    GetPlacesNearbyParamsHrank = "zoosection"
	GetPlacesNearbyParamsHrankZoosubsection GetPlacesNearbyParamsHrank = "zoosubsection"
)

// Defines values for GetPlacesNearbyParamsLrank.
const (
	GetPlacesNearbyParamsLrankClass         GetPlacesNearbyParamsLrank = "class"
	GetPlacesNearbyParamsLrankComplex       GetPlacesNearbyParamsLrank = "complex"
	GetPlacesNearbyParamsLrankEpifamily     GetPlacesNearbyParamsLrank = "epifamily"
	GetPlacesNearbyParamsLrankFamily        GetPlacesNearbyParamsLrank = "family"
	GetPlacesNearbyParamsLrankForm          GetPlacesNearbyParamsLrank = "form"
	GetPlacesNearbyParamsLrankGenus         GetPlacesNearbyParamsLrank = "genus"
	GetPlacesNearbyParamsLrankGenushybrid   GetPlacesNearbyParamsLrank = "genushybrid"
	GetPlacesNearbyParamsLrankHybrid        GetPlacesNearbyParamsLrank = "hybrid"
	GetPlacesNearbyParamsLrankInfraclass    GetPlacesNearbyParamsLrank = "infraclass"
	GetPlacesNearbyParamsLrankInfrahybrid   GetPlacesNearbyParamsLrank = "infrahybrid"
	GetPlacesNearbyParamsLrankInfraorder    GetPlacesNearbyParamsLrank = "infraorder"
	GetPlacesNearbyParamsLrankKingdom       GetPlacesNearbyParamsLrank = "kingdom"
	GetPlacesNearbyParamsLrankOrder         GetPlacesNearbyParamsLrank = "order"
	GetPlacesNearbyParamsLrankParvorder     GetPlacesNearbyParamsLrank = "parvorder"
	GetPlacesNearbyParamsLrankPhylum        GetPlacesNearbyParamsLrank = "phylum"
	GetPlacesNearbyParamsLrankSection       GetPlacesNearbyParamsLrank = "section"
	GetPlacesNearbyParamsLrankSpecies       GetPlacesNearbyParamsLrank = "species"
	GetPlacesNearbyParamsLrankSubclass      GetPlacesNearbyParamsLrank = "subclass"
	GetPlacesNearbyParamsLrankSubfamily     GetPlacesNearbyParamsLrank = "subfamily"
	GetPlacesNearbyParamsLrankSubgenus      GetPlacesNearbyParamsLrank = "subgenus"
	GetPlacesNearbyParamsLrankSuborder      GetPlacesNearbyParamsLrank = "suborder"
	GetPlacesNearbyParamsLrankSubphylum     GetPlacesNearbyParamsLrank = "subphylum"
	GetPlacesNearbyParamsLrankSubsection    GetPlacesNearbyParamsLrank = "subsection"
	GetPlacesNearbyParamsLrankSubspecies    GetPlacesNearbyParamsLrank = "subspecies"
	GetPlacesNearbyParamsLrankSubterclass   GetPlacesNearbyParamsLrank = "subterclass"
	GetPlacesNearbyParamsLrankSubtribe      GetPlacesNearbyParamsLrank = "subtribe"
	GetPlacesNearbyParamsLrankSuperclass    GetPlacesNearbyParamsLrank = "superclass"
	GetPlacesNearbyParamsLrankSuperfamily   GetPlacesNearbyParamsLrank = "superfamily"
	GetPlacesNearbyParamsLrankSuperorder    GetPlacesNearbyParamsLrank = "superorder"
	GetPlacesNearbyParamsLrankSupertribe    GetPlacesNearbyParamsLrank = "supertribe"
	GetPlacesNearbyParamsLrankTribe         GetPlacesNearbyParamsLrank = "tribe"
	GetPlacesNearbyParamsLrankVariety       GetPlacesNearbyParamsLrank = "variety"
	GetPlacesNearbyParamsLrankZoosection    GetPlacesNearbyParamsLrank = "zoosection"
	GetPlacesNearbyParamsLrankZoosubsection GetPlacesNearbyParamsLrank = "zoosubsection"
)

// Defines values for GetPlacesNearbyParamsIconicTaxa.
const (
	GetPlacesNearbyParamsIconicTaxaActinopterygii GetPlacesNearbyParamsIconicTaxa = "Actinopterygii"
	GetPlacesNearbyParamsIconicTaxaAmphibia       GetPlacesNearbyParamsIconicTaxa = "Amphibia"
	GetPlacesNearbyParamsIconicTaxaAnimalia       GetPlacesNearbyParamsIconicTaxa = "Animalia"
	GetPlacesNearbyParamsIconicTaxaArachnida      GetPlacesNearbyParamsIconicTaxa = "Arachnida"
	GetPlacesNearbyParamsIconicTaxaAves           GetPlacesNearbyParamsIconicTaxa = "Aves"
	GetPlacesNearbyParamsIconicTaxaChromista      GetPlacesNearbyParamsIconicTaxa = "Chromista"
	GetPlacesNearbyParamsIconicTaxaFungi          GetPlacesNearbyParamsIconicTaxa = "Fungi"
	GetPlacesNearbyParamsIconicTaxaInsecta        GetPlacesNearbyParamsIconicTaxa = "Insecta"
	GetPlacesNearbyParamsIconicTaxaMammalia       GetPlacesNearbyParamsIconicTaxa = "Mammalia"
	GetPlacesNearbyParamsIconicTaxaMollusca       GetPlacesNearbyParamsIconicTaxa = "Mollusca"
	GetPlacesNearbyParamsIconicTaxaPlantae        GetPlacesNearbyParamsIconicTaxa = "Plantae"
	GetPlacesNearbyParamsIconicTaxaProtozoa       GetPlacesNearbyParamsIconicTaxa = "Protozoa"
	GetPlacesNearbyParamsIconicTaxaReptilia       GetPlacesNearbyParamsIconicTaxa = "Reptilia"
	GetPlacesNearbyParamsIconicTaxaUnknown        GetPlacesNearbyParamsIconicTaxa = "unknown"
)

// Defines values for GetPlacesNearbyParamsIdentifications.
const (
	GetPlacesNearbyParamsIdentificationsMostAgree    GetPlacesNearbyParamsIdentifications = "most_agree"
	GetPlacesNearbyParamsIdentificationsMostDisagree GetPlacesNearbyParamsIdentifications = "most_disagree"
	GetPlacesNearbyParamsIdentificationsSomeAgree    GetPlacesNearbyParamsIdentifications = "some_agree"
)

// Defines values for GetPlacesNearbyParamsSearchOn.
const (
	GetPlacesNearbyParamsSearchOnDescription        GetPlacesNearbyParamsSearchOn = "description"
	GetPlacesNearbyParamsSearchOnNames              GetPlacesNearbyParamsSearchOn = "names"
	GetPlacesNearbyParamsSearchOnPlace              GetPlacesNearbyParamsSearchOn = "place"
	GetPlacesNearbyParamsSearchOnTags               GetPlacesNearbyParamsSearchOn = "tags"
	GetPlacesNearbyParamsSearchOnTaxonPageObsPhotos GetPlacesNearbyParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetPlacesNearbyParamsQualityGrade.
const (
	GetPlacesNearbyParamsQualityGradeCasual   GetPlacesNearbyParamsQualityGrade = "casual"
	GetPlacesNearbyParamsQualityGradeNeedsId  GetPlacesNearbyParamsQualityGrade = "needs_id"
	GetPlacesNearbyParamsQualityGradeResearch GetPlacesNearbyParamsQualityGrade = "research"
)

// Defines values for GetPlacesNearbyParamsOrder.
const (
	GetPlacesNearbyParamsOrderAsc  GetPlacesNearbyParamsOrder = "asc"
	GetPlacesNearbyParamsOrderDesc GetPlacesNearbyParamsOrder = "desc"
)

// Defines values for GetPlacesNearbyParamsOrderBy.
const (
	GetPlacesNearbyParamsOrderByCreatedAt    GetPlacesNearbyParamsOrderBy = "created_at"
	GetPlacesNearbyParamsOrderByGeoScore     GetPlacesNearbyParamsOrderBy = "geo_score"
	GetPlacesNearbyParamsOrderById           GetPlacesNearbyParamsOrderBy = "id"
	GetPlacesNearbyParamsOrderByObservedOn   GetPlacesNearbyParamsOrderBy = "observed_on"
	GetPlacesNearbyParamsOrderByRandom       GetPlacesNearbyParamsOrderBy = "random"
	GetPlacesNearbyParamsOrderBySpeciesGuess GetPlacesNearbyParamsOrderBy = "species_guess"
	GetPlacesNearbyParamsOrderByUpdatedAt    GetPlacesNearbyParamsOrderBy = "updated_at"
	GetPlacesNearbyParamsOrderByVotes        GetPlacesNearbyParamsOrderBy = "votes"
)

// Defines values for GetPlacesNearbyParamsDateField.
const (
	GetPlacesNearbyParamsDateFieldCreated  GetPlacesNearbyParamsDateField = "created"
	GetPlacesNearbyParamsDateFieldObserved GetPlacesNearbyParamsDateField = "observed"
)

// Defines values for GetPlacesNearbyParamsInterval.
const (
	Day         GetPlacesNearbyParamsInterval = "day"
	Hour        GetPlacesNearbyParamsInterval = "hour"
	Month       GetPlacesNearbyParamsInterval = "month"
	MonthOfYear GetPlacesNearbyParamsInterval = "month_of_year"
	Week        GetPlacesNearbyParamsInterval = "week"
	WeekOfYear  GetPlacesNearbyParamsInterval = "week_of_year"
	Year        GetPlacesNearbyParamsInterval = "year"
)

// Defines values for GetPlacesIdZoomXYPngParamsTileSize.
const (
	GetPlacesIdZoomXYPngParamsTileSizeN256 GetPlacesIdZoomXYPngParamsTileSize = 256
	GetPlacesIdZoomXYPngParamsTileSizeN512 GetPlacesIdZoomXYPngParamsTileSize = 512
)

// Defines values for GetPlacesIdZoomXYPngParamsLicense.
const (
	GetPlacesIdZoomXYPngParamsLicenseCc0      GetPlacesIdZoomXYPngParamsLicense = "cc0"
	GetPlacesIdZoomXYPngParamsLicenseCcBy     GetPlacesIdZoomXYPngParamsLicense = "cc-by"
	GetPlacesIdZoomXYPngParamsLicenseCcByNc   GetPlacesIdZoomXYPngParamsLicense = "cc-by-nc"
	GetPlacesIdZoomXYPngParamsLicenseCcByNcNd GetPlacesIdZoomXYPngParamsLicense = "cc-by-nc-nd"
	GetPlacesIdZoomXYPngParamsLicenseCcByNcSa GetPlacesIdZoomXYPngParamsLicense = "cc-by-nc-sa"
	GetPlacesIdZoomXYPngParamsLicenseCcByNd   GetPlacesIdZoomXYPngParamsLicense = "cc-by-nd"
	GetPlacesIdZoomXYPngParamsLicenseCcBySa   GetPlacesIdZoomXYPngParamsLicense = "cc-by-sa"
)

// Defines values for GetPlacesIdZoomXYPngParamsPhotoLicense.
const (
	GetPlacesIdZoomXYPngParamsPhotoLicenseCc0      GetPlacesIdZoomXYPngParamsPhotoLicense = "cc0"
	GetPlacesIdZoomXYPngParamsPhotoLicenseCcBy     GetPlacesIdZoomXYPngParamsPhotoLicense = "cc-by"
	GetPlacesIdZoomXYPngParamsPhotoLicenseCcByNc   GetPlacesIdZoomXYPngParamsPhotoLicense = "cc-by-nc"
	GetPlacesIdZoomXYPngParamsPhotoLicenseCcByNcNd GetPlacesIdZoomXYPngParamsPhotoLicense = "cc-by-nc-nd"
	GetPlacesIdZoomXYPngParamsPhotoLicenseCcByNcSa GetPlacesIdZoomXYPngParamsPhotoLicense = "cc-by-nc-sa"
	GetPlacesIdZoomXYPngParamsPhotoLicenseCcByNd   GetPlacesIdZoomXYPngParamsPhotoLicense = "cc-by-nd"
	GetPlacesIdZoomXYPngParamsPhotoLicenseCcBySa   GetPlacesIdZoomXYPngParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetPlacesIdZoomXYPngParamsRank.
const (
	GetPlacesIdZoomXYPngParamsRankClass         GetPlacesIdZoomXYPngParamsRank = "class"
	GetPlacesIdZoomXYPngParamsRankComplex       GetPlacesIdZoomXYPngParamsRank = "complex"
	GetPlacesIdZoomXYPngParamsRankEpifamily     GetPlacesIdZoomXYPngParamsRank = "epifamily"
	GetPlacesIdZoomXYPngParamsRankFamily        GetPlacesIdZoomXYPngParamsRank = "family"
	GetPlacesIdZoomXYPngParamsRankForm          GetPlacesIdZoomXYPngParamsRank = "form"
	GetPlacesIdZoomXYPngParamsRankGenus         GetPlacesIdZoomXYPngParamsRank = "genus"
	GetPlacesIdZoomXYPngParamsRankGenushybrid   GetPlacesIdZoomXYPngParamsRank = "genushybrid"
	GetPlacesIdZoomXYPngParamsRankHybrid        GetPlacesIdZoomXYPngParamsRank = "hybrid"
	GetPlacesIdZoomXYPngParamsRankInfraclass    GetPlacesIdZoomXYPngParamsRank = "infraclass"
	GetPlacesIdZoomXYPngParamsRankInfrahybrid   GetPlacesIdZoomXYPngParamsRank = "infrahybrid"
	GetPlacesIdZoomXYPngParamsRankInfraorder    GetPlacesIdZoomXYPngParamsRank = "infraorder"
	GetPlacesIdZoomXYPngParamsRankKingdom       GetPlacesIdZoomXYPngParamsRank = "kingdom"
	GetPlacesIdZoomXYPngParamsRankOrder         GetPlacesIdZoomXYPngParamsRank = "order"
	GetPlacesIdZoomXYPngParamsRankParvorder     GetPlacesIdZoomXYPngParamsRank = "parvorder"
	GetPlacesIdZoomXYPngParamsRankPhylum        GetPlacesIdZoomXYPngParamsRank = "phylum"
	GetPlacesIdZoomXYPngParamsRankSection       GetPlacesIdZoomXYPngParamsRank = "section"
	GetPlacesIdZoomXYPngParamsRankSpecies       GetPlacesIdZoomXYPngParamsRank = "species"
	GetPlacesIdZoomXYPngParamsRankSubclass      GetPlacesIdZoomXYPngParamsRank = "subclass"
	GetPlacesIdZoomXYPngParamsRankSubfamily     GetPlacesIdZoomXYPngParamsRank = "subfamily"
	GetPlacesIdZoomXYPngParamsRankSubgenus      GetPlacesIdZoomXYPngParamsRank = "subgenus"
	GetPlacesIdZoomXYPngParamsRankSuborder      GetPlacesIdZoomXYPngParamsRank = "suborder"
	GetPlacesIdZoomXYPngParamsRankSubphylum     GetPlacesIdZoomXYPngParamsRank = "subphylum"
	GetPlacesIdZoomXYPngParamsRankSubsection    GetPlacesIdZoomXYPngParamsRank = "subsection"
	GetPlacesIdZoomXYPngParamsRankSubspecies    GetPlacesIdZoomXYPngParamsRank = "subspecies"
	GetPlacesIdZoomXYPngParamsRankSubterclass   GetPlacesIdZoomXYPngParamsRank = "subterclass"
	GetPlacesIdZoomXYPngParamsRankSubtribe      GetPlacesIdZoomXYPngParamsRank = "subtribe"
	GetPlacesIdZoomXYPngParamsRankSuperclass    GetPlacesIdZoomXYPngParamsRank = "superclass"
	GetPlacesIdZoomXYPngParamsRankSuperfamily   GetPlacesIdZoomXYPngParamsRank = "superfamily"
	GetPlacesIdZoomXYPngParamsRankSuperorder    GetPlacesIdZoomXYPngParamsRank = "superorder"
	GetPlacesIdZoomXYPngParamsRankSupertribe    GetPlacesIdZoomXYPngParamsRank = "supertribe"
	GetPlacesIdZoomXYPngParamsRankTribe         GetPlacesIdZoomXYPngParamsRank = "tribe"
	GetPlacesIdZoomXYPngParamsRankVariety       GetPlacesIdZoomXYPngParamsRank = "variety"
	GetPlacesIdZoomXYPngParamsRankZoosection    GetPlacesIdZoomXYPngParamsRank = "zoosection"
	GetPlacesIdZoomXYPngParamsRankZoosubsection GetPlacesIdZoomXYPngParamsRank = "zoosubsection"
)

// Defines values for GetPlacesIdZoomXYPngParamsSoundLicense.
const (
	GetPlacesIdZoomXYPngParamsSoundLicenseCc0      GetPlacesIdZoomXYPngParamsSoundLicense = "cc0"
	GetPlacesIdZoomXYPngParamsSoundLicenseCcBy     GetPlacesIdZoomXYPngParamsSoundLicense = "cc-by"
	GetPlacesIdZoomXYPngParamsSoundLicenseCcByNc   GetPlacesIdZoomXYPngParamsSoundLicense = "cc-by-nc"
	GetPlacesIdZoomXYPngParamsSoundLicenseCcByNcNd GetPlacesIdZoomXYPngParamsSoundLicense = "cc-by-nc-nd"
	GetPlacesIdZoomXYPngParamsSoundLicenseCcByNcSa GetPlacesIdZoomXYPngParamsSoundLicense = "cc-by-nc-sa"
	GetPlacesIdZoomXYPngParamsSoundLicenseCcByNd   GetPlacesIdZoomXYPngParamsSoundLicense = "cc-by-nd"
	GetPlacesIdZoomXYPngParamsSoundLicenseCcBySa   GetPlacesIdZoomXYPngParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetPlacesIdZoomXYPngParamsCsi.
const (
	GetPlacesIdZoomXYPngParamsCsiCR GetPlacesIdZoomXYPngParamsCsi = "CR"
	GetPlacesIdZoomXYPngParamsCsiEN GetPlacesIdZoomXYPngParamsCsi = "EN"
	GetPlacesIdZoomXYPngParamsCsiEW GetPlacesIdZoomXYPngParamsCsi = "EW"
	GetPlacesIdZoomXYPngParamsCsiEX GetPlacesIdZoomXYPngParamsCsi = "EX"
	GetPlacesIdZoomXYPngParamsCsiLC GetPlacesIdZoomXYPngParamsCsi = "LC"
	GetPlacesIdZoomXYPngParamsCsiNT GetPlacesIdZoomXYPngParamsCsi = "NT"
	GetPlacesIdZoomXYPngParamsCsiVU GetPlacesIdZoomXYPngParamsCsi = "VU"
)

// Defines values for GetPlacesIdZoomXYPngParamsGeoprivacy.
const (
	GetPlacesIdZoomXYPngParamsGeoprivacyObscured        GetPlacesIdZoomXYPngParamsGeoprivacy = "obscured"
	GetPlacesIdZoomXYPngParamsGeoprivacyObscuredPrivate GetPlacesIdZoomXYPngParamsGeoprivacy = "obscured_private"
	GetPlacesIdZoomXYPngParamsGeoprivacyOpen            GetPlacesIdZoomXYPngParamsGeoprivacy = "open"
	GetPlacesIdZoomXYPngParamsGeoprivacyPrivate         GetPlacesIdZoomXYPngParamsGeoprivacy = "private"
)

// Defines values for GetPlacesIdZoomXYPngParamsTaxonGeoprivacy.
const (
	GetPlacesIdZoomXYPngParamsTaxonGeoprivacyObscured        GetPlacesIdZoomXYPngParamsTaxonGeoprivacy = "obscured"
	GetPlacesIdZoomXYPngParamsTaxonGeoprivacyObscuredPrivate GetPlacesIdZoomXYPngParamsTaxonGeoprivacy = "obscured_private"
	GetPlacesIdZoomXYPngParamsTaxonGeoprivacyOpen            GetPlacesIdZoomXYPngParamsTaxonGeoprivacy = "open"
	GetPlacesIdZoomXYPngParamsTaxonGeoprivacyPrivate         GetPlacesIdZoomXYPngParamsTaxonGeoprivacy = "private"
)

// Defines values for GetPlacesIdZoomXYPngParamsObscuration.
const (
	GetPlacesIdZoomXYPngParamsObscurationNone     GetPlacesIdZoomXYPngParamsObscuration = "none"
	GetPlacesIdZoomXYPngParamsObscurationObscured GetPlacesIdZoomXYPngParamsObscuration = "obscured"
	GetPlacesIdZoomXYPngParamsObscurationPrivate  GetPlacesIdZoomXYPngParamsObscuration = "private"
)

// Defines values for GetPlacesIdZoomXYPngParamsHrank.
const (
	GetPlacesIdZoomXYPngParamsHrankClass         GetPlacesIdZoomXYPngParamsHrank = "class"
	GetPlacesIdZoomXYPngParamsHrankComplex       GetPlacesIdZoomXYPngParamsHrank = "complex"
	GetPlacesIdZoomXYPngParamsHrankEpifamily     GetPlacesIdZoomXYPngParamsHrank = "epifamily"
	GetPlacesIdZoomXYPngParamsHrankFamily        GetPlacesIdZoomXYPngParamsHrank = "family"
	GetPlacesIdZoomXYPngParamsHrankForm          GetPlacesIdZoomXYPngParamsHrank = "form"
	GetPlacesIdZoomXYPngParamsHrankGenus         GetPlacesIdZoomXYPngParamsHrank = "genus"
	GetPlacesIdZoomXYPngParamsHrankGenushybrid   GetPlacesIdZoomXYPngParamsHrank = "genushybrid"
	GetPlacesIdZoomXYPngParamsHrankHybrid        GetPlacesIdZoomXYPngParamsHrank = "hybrid"
	GetPlacesIdZoomXYPngParamsHrankInfraclass    GetPlacesIdZoomXYPngParamsHrank = "infraclass"
	GetPlacesIdZoomXYPngParamsHrankInfrahybrid   GetPlacesIdZoomXYPngParamsHrank = "infrahybrid"
	GetPlacesIdZoomXYPngParamsHrankInfraorder    GetPlacesIdZoomXYPngParamsHrank = "infraorder"
	GetPlacesIdZoomXYPngParamsHrankKingdom       GetPlacesIdZoomXYPngParamsHrank = "kingdom"
	GetPlacesIdZoomXYPngParamsHrankOrder         GetPlacesIdZoomXYPngParamsHrank = "order"
	GetPlacesIdZoomXYPngParamsHrankParvorder     GetPlacesIdZoomXYPngParamsHrank = "parvorder"
	GetPlacesIdZoomXYPngParamsHrankPhylum        GetPlacesIdZoomXYPngParamsHrank = "phylum"
	GetPlacesIdZoomXYPngParamsHrankSection       GetPlacesIdZoomXYPngParamsHrank = "section"
	GetPlacesIdZoomXYPngParamsHrankSpecies       GetPlacesIdZoomXYPngParamsHrank = "species"
	GetPlacesIdZoomXYPngParamsHrankSubclass      GetPlacesIdZoomXYPngParamsHrank = "subclass"
	GetPlacesIdZoomXYPngParamsHrankSubfamily     GetPlacesIdZoomXYPngParamsHrank = "subfamily"
	GetPlacesIdZoomXYPngParamsHrankSubgenus      GetPlacesIdZoomXYPngParamsHrank = "subgenus"
	GetPlacesIdZoomXYPngParamsHrankSuborder      GetPlacesIdZoomXYPngParamsHrank = "suborder"
	GetPlacesIdZoomXYPngParamsHrankSubphylum     GetPlacesIdZoomXYPngParamsHrank = "subphylum"
	GetPlacesIdZoomXYPngParamsHrankSubsection    GetPlacesIdZoomXYPngParamsHrank = "subsection"
	GetPlacesIdZoomXYPngParamsHrankSubspecies    GetPlacesIdZoomXYPngParamsHrank = "subspecies"
	GetPlacesIdZoomXYPngParamsHrankSubterclass   GetPlacesIdZoomXYPngParamsHrank = "subterclass"
	GetPlacesIdZoomXYPngParamsHrankSubtribe      GetPlacesIdZoomXYPngParamsHrank = "subtribe"
	GetPlacesIdZoomXYPngParamsHrankSuperclass    GetPlacesIdZoomXYPngParamsHrank = "superclass"
	GetPlacesIdZoomXYPngParamsHrankSuperfamily   GetPlacesIdZoomXYPngParamsHrank = "superfamily"
	GetPlacesIdZoomXYPngParamsHrankSuperorder    GetPlacesIdZoomXYPngParamsHrank = "superorder"
	GetPlacesIdZoomXYPngParamsHrankSupertribe    GetPlacesIdZoomXYPngParamsHrank = "supertribe"
	GetPlacesIdZoomXYPngParamsHrankTribe         GetPlacesIdZoomXYPngParamsHrank = "tribe"
	GetPlacesIdZoomXYPngParamsHrankVariety       GetPlacesIdZoomXYPngParamsHrank = "variety"
	GetPlacesIdZoomXYPngParamsHrankZoosection    GetPlacesIdZoomXYPngParamsHrank = "zoosection"
	GetPlacesIdZoomXYPngParamsHrankZoosubsection GetPlacesIdZoomXYPngParamsHrank = "zoosubsection"
)

// Defines values for GetPlacesIdZoomXYPngParamsLrank.
const (
	GetPlacesIdZoomXYPngParamsLrankClass         GetPlacesIdZoomXYPngParamsLrank = "class"
	GetPlacesIdZoomXYPngParamsLrankComplex       GetPlacesIdZoomXYPngParamsLrank = "complex"
	GetPlacesIdZoomXYPngParamsLrankEpifamily     GetPlacesIdZoomXYPngParamsLrank = "epifamily"
	GetPlacesIdZoomXYPngParamsLrankFamily        GetPlacesIdZoomXYPngParamsLrank = "family"
	GetPlacesIdZoomXYPngParamsLrankForm          GetPlacesIdZoomXYPngParamsLrank = "form"
	GetPlacesIdZoomXYPngParamsLrankGenus         GetPlacesIdZoomXYPngParamsLrank = "genus"
	GetPlacesIdZoomXYPngParamsLrankGenushybrid   GetPlacesIdZoomXYPngParamsLrank = "genushybrid"
	GetPlacesIdZoomXYPngParamsLrankHybrid        GetPlacesIdZoomXYPngParamsLrank = "hybrid"
	GetPlacesIdZoomXYPngParamsLrankInfraclass    GetPlacesIdZoomXYPngParamsLrank = "infraclass"
	GetPlacesIdZoomXYPngParamsLrankInfrahybrid   GetPlacesIdZoomXYPngParamsLrank = "infrahybrid"
	GetPlacesIdZoomXYPngParamsLrankInfraorder    GetPlacesIdZoomXYPngParamsLrank = "infraorder"
	GetPlacesIdZoomXYPngParamsLrankKingdom       GetPlacesIdZoomXYPngParamsLrank = "kingdom"
	GetPlacesIdZoomXYPngParamsLrankOrder         GetPlacesIdZoomXYPngParamsLrank = "order"
	GetPlacesIdZoomXYPngParamsLrankParvorder     GetPlacesIdZoomXYPngParamsLrank = "parvorder"
	GetPlacesIdZoomXYPngParamsLrankPhylum        GetPlacesIdZoomXYPngParamsLrank = "phylum"
	GetPlacesIdZoomXYPngParamsLrankSection       GetPlacesIdZoomXYPngParamsLrank = "section"
	GetPlacesIdZoomXYPngParamsLrankSpecies       GetPlacesIdZoomXYPngParamsLrank = "species"
	GetPlacesIdZoomXYPngParamsLrankSubclass      GetPlacesIdZoomXYPngParamsLrank = "subclass"
	GetPlacesIdZoomXYPngParamsLrankSubfamily     GetPlacesIdZoomXYPngParamsLrank = "subfamily"
	GetPlacesIdZoomXYPngParamsLrankSubgenus      GetPlacesIdZoomXYPngParamsLrank = "subgenus"
	GetPlacesIdZoomXYPngParamsLrankSuborder      GetPlacesIdZoomXYPngParamsLrank = "suborder"
	GetPlacesIdZoomXYPngParamsLrankSubphylum     GetPlacesIdZoomXYPngParamsLrank = "subphylum"
	GetPlacesIdZoomXYPngParamsLrankSubsection    GetPlacesIdZoomXYPngParamsLrank = "subsection"
	GetPlacesIdZoomXYPngParamsLrankSubspecies    GetPlacesIdZoomXYPngParamsLrank = "subspecies"
	GetPlacesIdZoomXYPngParamsLrankSubterclass   GetPlacesIdZoomXYPngParamsLrank = "subterclass"
	GetPlacesIdZoomXYPngParamsLrankSubtribe      GetPlacesIdZoomXYPngParamsLrank = "subtribe"
	GetPlacesIdZoomXYPngParamsLrankSuperclass    GetPlacesIdZoomXYPngParamsLrank = "superclass"
	GetPlacesIdZoomXYPngParamsLrankSuperfamily   GetPlacesIdZoomXYPngParamsLrank = "superfamily"
	GetPlacesIdZoomXYPngParamsLrankSuperorder    GetPlacesIdZoomXYPngParamsLrank = "superorder"
	GetPlacesIdZoomXYPngParamsLrankSupertribe    GetPlacesIdZoomXYPngParamsLrank = "supertribe"
	GetPlacesIdZoomXYPngParamsLrankTribe         GetPlacesIdZoomXYPngParamsLrank = "tribe"
	GetPlacesIdZoomXYPngParamsLrankVariety       GetPlacesIdZoomXYPngParamsLrank = "variety"
	GetPlacesIdZoomXYPngParamsLrankZoosection    GetPlacesIdZoomXYPngParamsLrank = "zoosection"
	GetPlacesIdZoomXYPngParamsLrankZoosubsection GetPlacesIdZoomXYPngParamsLrank = "zoosubsection"
)

// Defines values for GetPlacesIdZoomXYPngParamsIconicTaxa.
const (
	GetPlacesIdZoomXYPngParamsIconicTaxaActinopterygii GetPlacesIdZoomXYPngParamsIconicTaxa = "Actinopterygii"
	GetPlacesIdZoomXYPngParamsIconicTaxaAmphibia       GetPlacesIdZoomXYPngParamsIconicTaxa = "Amphibia"
	GetPlacesIdZoomXYPngParamsIconicTaxaAnimalia       GetPlacesIdZoomXYPngParamsIconicTaxa = "Animalia"
	GetPlacesIdZoomXYPngParamsIconicTaxaArachnida      GetPlacesIdZoomXYPngParamsIconicTaxa = "Arachnida"
	GetPlacesIdZoomXYPngParamsIconicTaxaAves           GetPlacesIdZoomXYPngParamsIconicTaxa = "Aves"
	GetPlacesIdZoomXYPngParamsIconicTaxaChromista      GetPlacesIdZoomXYPngParamsIconicTaxa = "Chromista"
	GetPlacesIdZoomXYPngParamsIconicTaxaFungi          GetPlacesIdZoomXYPngParamsIconicTaxa = "Fungi"
	GetPlacesIdZoomXYPngParamsIconicTaxaInsecta        GetPlacesIdZoomXYPngParamsIconicTaxa = "Insecta"
	GetPlacesIdZoomXYPngParamsIconicTaxaMammalia       GetPlacesIdZoomXYPngParamsIconicTaxa = "Mammalia"
	GetPlacesIdZoomXYPngParamsIconicTaxaMollusca       GetPlacesIdZoomXYPngParamsIconicTaxa = "Mollusca"
	GetPlacesIdZoomXYPngParamsIconicTaxaPlantae        GetPlacesIdZoomXYPngParamsIconicTaxa = "Plantae"
	GetPlacesIdZoomXYPngParamsIconicTaxaProtozoa       GetPlacesIdZoomXYPngParamsIconicTaxa = "Protozoa"
	GetPlacesIdZoomXYPngParamsIconicTaxaReptilia       GetPlacesIdZoomXYPngParamsIconicTaxa = "Reptilia"
	GetPlacesIdZoomXYPngParamsIconicTaxaUnknown        GetPlacesIdZoomXYPngParamsIconicTaxa = "unknown"
)

// Defines values for GetPlacesIdZoomXYPngParamsIdentifications.
const (
	GetPlacesIdZoomXYPngParamsIdentificationsMostAgree    GetPlacesIdZoomXYPngParamsIdentifications = "most_agree"
	GetPlacesIdZoomXYPngParamsIdentificationsMostDisagree GetPlacesIdZoomXYPngParamsIdentifications = "most_disagree"
	GetPlacesIdZoomXYPngParamsIdentificationsSomeAgree    GetPlacesIdZoomXYPngParamsIdentifications = "some_agree"
)

// Defines values for GetPlacesIdZoomXYPngParamsSearchOn.
const (
	GetPlacesIdZoomXYPngParamsSearchOnDescription        GetPlacesIdZoomXYPngParamsSearchOn = "description"
	GetPlacesIdZoomXYPngParamsSearchOnNames              GetPlacesIdZoomXYPngParamsSearchOn = "names"
	GetPlacesIdZoomXYPngParamsSearchOnPlace              GetPlacesIdZoomXYPngParamsSearchOn = "place"
	GetPlacesIdZoomXYPngParamsSearchOnTags               GetPlacesIdZoomXYPngParamsSearchOn = "tags"
	GetPlacesIdZoomXYPngParamsSearchOnTaxonPageObsPhotos GetPlacesIdZoomXYPngParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetPlacesIdZoomXYPngParamsQualityGrade.
const (
	GetPlacesIdZoomXYPngParamsQualityGradeCasual   GetPlacesIdZoomXYPngParamsQualityGrade = "casual"
	GetPlacesIdZoomXYPngParamsQualityGradeNeedsId  GetPlacesIdZoomXYPngParamsQualityGrade = "needs_id"
	GetPlacesIdZoomXYPngParamsQualityGradeResearch GetPlacesIdZoomXYPngParamsQualityGrade = "research"
)

// Defines values for GetPlacesIdZoomXYPngParamsOrder.
const (
	GetPlacesIdZoomXYPngParamsOrderAsc  GetPlacesIdZoomXYPngParamsOrder = "asc"
	GetPlacesIdZoomXYPngParamsOrderDesc GetPlacesIdZoomXYPngParamsOrder = "desc"
)

// Defines values for GetPlacesIdZoomXYPngParamsOrderBy.
const (
	GetPlacesIdZoomXYPngParamsOrderByCreatedAt    GetPlacesIdZoomXYPngParamsOrderBy = "created_at"
	GetPlacesIdZoomXYPngParamsOrderByGeoScore     GetPlacesIdZoomXYPngParamsOrderBy = "geo_score"
	GetPlacesIdZoomXYPngParamsOrderById           GetPlacesIdZoomXYPngParamsOrderBy = "id"
	GetPlacesIdZoomXYPngParamsOrderByObservedOn   GetPlacesIdZoomXYPngParamsOrderBy = "observed_on"
	GetPlacesIdZoomXYPngParamsOrderByRandom       GetPlacesIdZoomXYPngParamsOrderBy = "random"
	GetPlacesIdZoomXYPngParamsOrderBySpeciesGuess GetPlacesIdZoomXYPngParamsOrderBy = "species_guess"
	GetPlacesIdZoomXYPngParamsOrderByUpdatedAt    GetPlacesIdZoomXYPngParamsOrderBy = "updated_at"
	GetPlacesIdZoomXYPngParamsOrderByVotes        GetPlacesIdZoomXYPngParamsOrderBy = "votes"
)

// Defines values for GetPlacesUuidParamsOrderBy.
const (
	AdminAndDistance GetPlacesUuidParamsOrderBy = "admin_and_distance"
)

// Defines values for GetPointsZoomXYGridJsonParamsTileSize.
const (
	GetPointsZoomXYGridJsonParamsTileSizeN256 GetPointsZoomXYGridJsonParamsTileSize = 256
	GetPointsZoomXYGridJsonParamsTileSizeN512 GetPointsZoomXYGridJsonParamsTileSize = 512
)

// Defines values for GetPointsZoomXYGridJsonParamsLicense.
const (
	GetPointsZoomXYGridJsonParamsLicenseCc0      GetPointsZoomXYGridJsonParamsLicense = "cc0"
	GetPointsZoomXYGridJsonParamsLicenseCcBy     GetPointsZoomXYGridJsonParamsLicense = "cc-by"
	GetPointsZoomXYGridJsonParamsLicenseCcByNc   GetPointsZoomXYGridJsonParamsLicense = "cc-by-nc"
	GetPointsZoomXYGridJsonParamsLicenseCcByNcNd GetPointsZoomXYGridJsonParamsLicense = "cc-by-nc-nd"
	GetPointsZoomXYGridJsonParamsLicenseCcByNcSa GetPointsZoomXYGridJsonParamsLicense = "cc-by-nc-sa"
	GetPointsZoomXYGridJsonParamsLicenseCcByNd   GetPointsZoomXYGridJsonParamsLicense = "cc-by-nd"
	GetPointsZoomXYGridJsonParamsLicenseCcBySa   GetPointsZoomXYGridJsonParamsLicense = "cc-by-sa"
)

// Defines values for GetPointsZoomXYGridJsonParamsPhotoLicense.
const (
	GetPointsZoomXYGridJsonParamsPhotoLicenseCc0      GetPointsZoomXYGridJsonParamsPhotoLicense = "cc0"
	GetPointsZoomXYGridJsonParamsPhotoLicenseCcBy     GetPointsZoomXYGridJsonParamsPhotoLicense = "cc-by"
	GetPointsZoomXYGridJsonParamsPhotoLicenseCcByNc   GetPointsZoomXYGridJsonParamsPhotoLicense = "cc-by-nc"
	GetPointsZoomXYGridJsonParamsPhotoLicenseCcByNcNd GetPointsZoomXYGridJsonParamsPhotoLicense = "cc-by-nc-nd"
	GetPointsZoomXYGridJsonParamsPhotoLicenseCcByNcSa GetPointsZoomXYGridJsonParamsPhotoLicense = "cc-by-nc-sa"
	GetPointsZoomXYGridJsonParamsPhotoLicenseCcByNd   GetPointsZoomXYGridJsonParamsPhotoLicense = "cc-by-nd"
	GetPointsZoomXYGridJsonParamsPhotoLicenseCcBySa   GetPointsZoomXYGridJsonParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetPointsZoomXYGridJsonParamsRank.
const (
	GetPointsZoomXYGridJsonParamsRankClass         GetPointsZoomXYGridJsonParamsRank = "class"
	GetPointsZoomXYGridJsonParamsRankComplex       GetPointsZoomXYGridJsonParamsRank = "complex"
	GetPointsZoomXYGridJsonParamsRankEpifamily     GetPointsZoomXYGridJsonParamsRank = "epifamily"
	GetPointsZoomXYGridJsonParamsRankFamily        GetPointsZoomXYGridJsonParamsRank = "family"
	GetPointsZoomXYGridJsonParamsRankForm          GetPointsZoomXYGridJsonParamsRank = "form"
	GetPointsZoomXYGridJsonParamsRankGenus         GetPointsZoomXYGridJsonParamsRank = "genus"
	GetPointsZoomXYGridJsonParamsRankGenushybrid   GetPointsZoomXYGridJsonParamsRank = "genushybrid"
	GetPointsZoomXYGridJsonParamsRankHybrid        GetPointsZoomXYGridJsonParamsRank = "hybrid"
	GetPointsZoomXYGridJsonParamsRankInfraclass    GetPointsZoomXYGridJsonParamsRank = "infraclass"
	GetPointsZoomXYGridJsonParamsRankInfrahybrid   GetPointsZoomXYGridJsonParamsRank = "infrahybrid"
	GetPointsZoomXYGridJsonParamsRankInfraorder    GetPointsZoomXYGridJsonParamsRank = "infraorder"
	GetPointsZoomXYGridJsonParamsRankKingdom       GetPointsZoomXYGridJsonParamsRank = "kingdom"
	GetPointsZoomXYGridJsonParamsRankOrder         GetPointsZoomXYGridJsonParamsRank = "order"
	GetPointsZoomXYGridJsonParamsRankParvorder     GetPointsZoomXYGridJsonParamsRank = "parvorder"
	GetPointsZoomXYGridJsonParamsRankPhylum        GetPointsZoomXYGridJsonParamsRank = "phylum"
	GetPointsZoomXYGridJsonParamsRankSection       GetPointsZoomXYGridJsonParamsRank = "section"
	GetPointsZoomXYGridJsonParamsRankSpecies       GetPointsZoomXYGridJsonParamsRank = "species"
	GetPointsZoomXYGridJsonParamsRankSubclass      GetPointsZoomXYGridJsonParamsRank = "subclass"
	GetPointsZoomXYGridJsonParamsRankSubfamily     GetPointsZoomXYGridJsonParamsRank = "subfamily"
	GetPointsZoomXYGridJsonParamsRankSubgenus      GetPointsZoomXYGridJsonParamsRank = "subgenus"
	GetPointsZoomXYGridJsonParamsRankSuborder      GetPointsZoomXYGridJsonParamsRank = "suborder"
	GetPointsZoomXYGridJsonParamsRankSubphylum     GetPointsZoomXYGridJsonParamsRank = "subphylum"
	GetPointsZoomXYGridJsonParamsRankSubsection    GetPointsZoomXYGridJsonParamsRank = "subsection"
	GetPointsZoomXYGridJsonParamsRankSubspecies    GetPointsZoomXYGridJsonParamsRank = "subspecies"
	GetPointsZoomXYGridJsonParamsRankSubterclass   GetPointsZoomXYGridJsonParamsRank = "subterclass"
	GetPointsZoomXYGridJsonParamsRankSubtribe      GetPointsZoomXYGridJsonParamsRank = "subtribe"
	GetPointsZoomXYGridJsonParamsRankSuperclass    GetPointsZoomXYGridJsonParamsRank = "superclass"
	GetPointsZoomXYGridJsonParamsRankSuperfamily   GetPointsZoomXYGridJsonParamsRank = "superfamily"
	GetPointsZoomXYGridJsonParamsRankSuperorder    GetPointsZoomXYGridJsonParamsRank = "superorder"
	GetPointsZoomXYGridJsonParamsRankSupertribe    GetPointsZoomXYGridJsonParamsRank = "supertribe"
	GetPointsZoomXYGridJsonParamsRankTribe         GetPointsZoomXYGridJsonParamsRank = "tribe"
	GetPointsZoomXYGridJsonParamsRankVariety       GetPointsZoomXYGridJsonParamsRank = "variety"
	GetPointsZoomXYGridJsonParamsRankZoosection    GetPointsZoomXYGridJsonParamsRank = "zoosection"
	GetPointsZoomXYGridJsonParamsRankZoosubsection GetPointsZoomXYGridJsonParamsRank = "zoosubsection"
)

// Defines values for GetPointsZoomXYGridJsonParamsSoundLicense.
const (
	GetPointsZoomXYGridJsonParamsSoundLicenseCc0      GetPointsZoomXYGridJsonParamsSoundLicense = "cc0"
	GetPointsZoomXYGridJsonParamsSoundLicenseCcBy     GetPointsZoomXYGridJsonParamsSoundLicense = "cc-by"
	GetPointsZoomXYGridJsonParamsSoundLicenseCcByNc   GetPointsZoomXYGridJsonParamsSoundLicense = "cc-by-nc"
	GetPointsZoomXYGridJsonParamsSoundLicenseCcByNcNd GetPointsZoomXYGridJsonParamsSoundLicense = "cc-by-nc-nd"
	GetPointsZoomXYGridJsonParamsSoundLicenseCcByNcSa GetPointsZoomXYGridJsonParamsSoundLicense = "cc-by-nc-sa"
	GetPointsZoomXYGridJsonParamsSoundLicenseCcByNd   GetPointsZoomXYGridJsonParamsSoundLicense = "cc-by-nd"
	GetPointsZoomXYGridJsonParamsSoundLicenseCcBySa   GetPointsZoomXYGridJsonParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetPointsZoomXYGridJsonParamsCsi.
const (
	GetPointsZoomXYGridJsonParamsCsiCR GetPointsZoomXYGridJsonParamsCsi = "CR"
	GetPointsZoomXYGridJsonParamsCsiEN GetPointsZoomXYGridJsonParamsCsi = "EN"
	GetPointsZoomXYGridJsonParamsCsiEW GetPointsZoomXYGridJsonParamsCsi = "EW"
	GetPointsZoomXYGridJsonParamsCsiEX GetPointsZoomXYGridJsonParamsCsi = "EX"
	GetPointsZoomXYGridJsonParamsCsiLC GetPointsZoomXYGridJsonParamsCsi = "LC"
	GetPointsZoomXYGridJsonParamsCsiNT GetPointsZoomXYGridJsonParamsCsi = "NT"
	GetPointsZoomXYGridJsonParamsCsiVU GetPointsZoomXYGridJsonParamsCsi = "VU"
)

// Defines values for GetPointsZoomXYGridJsonParamsGeoprivacy.
const (
	GetPointsZoomXYGridJsonParamsGeoprivacyObscured        GetPointsZoomXYGridJsonParamsGeoprivacy = "obscured"
	GetPointsZoomXYGridJsonParamsGeoprivacyObscuredPrivate GetPointsZoomXYGridJsonParamsGeoprivacy = "obscured_private"
	GetPointsZoomXYGridJsonParamsGeoprivacyOpen            GetPointsZoomXYGridJsonParamsGeoprivacy = "open"
	GetPointsZoomXYGridJsonParamsGeoprivacyPrivate         GetPointsZoomXYGridJsonParamsGeoprivacy = "private"
)

// Defines values for GetPointsZoomXYGridJsonParamsTaxonGeoprivacy.
const (
	GetPointsZoomXYGridJsonParamsTaxonGeoprivacyObscured        GetPointsZoomXYGridJsonParamsTaxonGeoprivacy = "obscured"
	GetPointsZoomXYGridJsonParamsTaxonGeoprivacyObscuredPrivate GetPointsZoomXYGridJsonParamsTaxonGeoprivacy = "obscured_private"
	GetPointsZoomXYGridJsonParamsTaxonGeoprivacyOpen            GetPointsZoomXYGridJsonParamsTaxonGeoprivacy = "open"
	GetPointsZoomXYGridJsonParamsTaxonGeoprivacyPrivate         GetPointsZoomXYGridJsonParamsTaxonGeoprivacy = "private"
)

// Defines values for GetPointsZoomXYGridJsonParamsObscuration.
const (
	GetPointsZoomXYGridJsonParamsObscurationNone     GetPointsZoomXYGridJsonParamsObscuration = "none"
	GetPointsZoomXYGridJsonParamsObscurationObscured GetPointsZoomXYGridJsonParamsObscuration = "obscured"
	GetPointsZoomXYGridJsonParamsObscurationPrivate  GetPointsZoomXYGridJsonParamsObscuration = "private"
)

// Defines values for GetPointsZoomXYGridJsonParamsHrank.
const (
	GetPointsZoomXYGridJsonParamsHrankClass         GetPointsZoomXYGridJsonParamsHrank = "class"
	GetPointsZoomXYGridJsonParamsHrankComplex       GetPointsZoomXYGridJsonParamsHrank = "complex"
	GetPointsZoomXYGridJsonParamsHrankEpifamily     GetPointsZoomXYGridJsonParamsHrank = "epifamily"
	GetPointsZoomXYGridJsonParamsHrankFamily        GetPointsZoomXYGridJsonParamsHrank = "family"
	GetPointsZoomXYGridJsonParamsHrankForm          GetPointsZoomXYGridJsonParamsHrank = "form"
	GetPointsZoomXYGridJsonParamsHrankGenus         GetPointsZoomXYGridJsonParamsHrank = "genus"
	GetPointsZoomXYGridJsonParamsHrankGenushybrid   GetPointsZoomXYGridJsonParamsHrank = "genushybrid"
	GetPointsZoomXYGridJsonParamsHrankHybrid        GetPointsZoomXYGridJsonParamsHrank = "hybrid"
	GetPointsZoomXYGridJsonParamsHrankInfraclass    GetPointsZoomXYGridJsonParamsHrank = "infraclass"
	GetPointsZoomXYGridJsonParamsHrankInfrahybrid   GetPointsZoomXYGridJsonParamsHrank = "infrahybrid"
	GetPointsZoomXYGridJsonParamsHrankInfraorder    GetPointsZoomXYGridJsonParamsHrank = "infraorder"
	GetPointsZoomXYGridJsonParamsHrankKingdom       GetPointsZoomXYGridJsonParamsHrank = "kingdom"
	GetPointsZoomXYGridJsonParamsHrankOrder         GetPointsZoomXYGridJsonParamsHrank = "order"
	GetPointsZoomXYGridJsonParamsHrankParvorder     GetPointsZoomXYGridJsonParamsHrank = "parvorder"
	GetPointsZoomXYGridJsonParamsHrankPhylum        GetPointsZoomXYGridJsonParamsHrank = "phylum"
	GetPointsZoomXYGridJsonParamsHrankSection       GetPointsZoomXYGridJsonParamsHrank = "section"
	GetPointsZoomXYGridJsonParamsHrankSpecies       GetPointsZoomXYGridJsonParamsHrank = "species"
	GetPointsZoomXYGridJsonParamsHrankSubclass      GetPointsZoomXYGridJsonParamsHrank = "subclass"
	GetPointsZoomXYGridJsonParamsHrankSubfamily     GetPointsZoomXYGridJsonParamsHrank = "subfamily"
	GetPointsZoomXYGridJsonParamsHrankSubgenus      GetPointsZoomXYGridJsonParamsHrank = "subgenus"
	GetPointsZoomXYGridJsonParamsHrankSuborder      GetPointsZoomXYGridJsonParamsHrank = "suborder"
	GetPointsZoomXYGridJsonParamsHrankSubphylum     GetPointsZoomXYGridJsonParamsHrank = "subphylum"
	GetPointsZoomXYGridJsonParamsHrankSubsection    GetPointsZoomXYGridJsonParamsHrank = "subsection"
	GetPointsZoomXYGridJsonParamsHrankSubspecies    GetPointsZoomXYGridJsonParamsHrank = "subspecies"
	GetPointsZoomXYGridJsonParamsHrankSubterclass   GetPointsZoomXYGridJsonParamsHrank = "subterclass"
	GetPointsZoomXYGridJsonParamsHrankSubtribe      GetPointsZoomXYGridJsonParamsHrank = "subtribe"
	GetPointsZoomXYGridJsonParamsHrankSuperclass    GetPointsZoomXYGridJsonParamsHrank = "superclass"
	GetPointsZoomXYGridJsonParamsHrankSuperfamily   GetPointsZoomXYGridJsonParamsHrank = "superfamily"
	GetPointsZoomXYGridJsonParamsHrankSuperorder    GetPointsZoomXYGridJsonParamsHrank = "superorder"
	GetPointsZoomXYGridJsonParamsHrankSupertribe    GetPointsZoomXYGridJsonParamsHrank = "supertribe"
	GetPointsZoomXYGridJsonParamsHrankTribe         GetPointsZoomXYGridJsonParamsHrank = "tribe"
	GetPointsZoomXYGridJsonParamsHrankVariety       GetPointsZoomXYGridJsonParamsHrank = "variety"
	GetPointsZoomXYGridJsonParamsHrankZoosection    GetPointsZoomXYGridJsonParamsHrank = "zoosection"
	GetPointsZoomXYGridJsonParamsHrankZoosubsection GetPointsZoomXYGridJsonParamsHrank = "zoosubsection"
)

// Defines values for GetPointsZoomXYGridJsonParamsLrank.
const (
	GetPointsZoomXYGridJsonParamsLrankClass         GetPointsZoomXYGridJsonParamsLrank = "class"
	GetPointsZoomXYGridJsonParamsLrankComplex       GetPointsZoomXYGridJsonParamsLrank = "complex"
	GetPointsZoomXYGridJsonParamsLrankEpifamily     GetPointsZoomXYGridJsonParamsLrank = "epifamily"
	GetPointsZoomXYGridJsonParamsLrankFamily        GetPointsZoomXYGridJsonParamsLrank = "family"
	GetPointsZoomXYGridJsonParamsLrankForm          GetPointsZoomXYGridJsonParamsLrank = "form"
	GetPointsZoomXYGridJsonParamsLrankGenus         GetPointsZoomXYGridJsonParamsLrank = "genus"
	GetPointsZoomXYGridJsonParamsLrankGenushybrid   GetPointsZoomXYGridJsonParamsLrank = "genushybrid"
	GetPointsZoomXYGridJsonParamsLrankHybrid        GetPointsZoomXYGridJsonParamsLrank = "hybrid"
	GetPointsZoomXYGridJsonParamsLrankInfraclass    GetPointsZoomXYGridJsonParamsLrank = "infraclass"
	GetPointsZoomXYGridJsonParamsLrankInfrahybrid   GetPointsZoomXYGridJsonParamsLrank = "infrahybrid"
	GetPointsZoomXYGridJsonParamsLrankInfraorder    GetPointsZoomXYGridJsonParamsLrank = "infraorder"
	GetPointsZoomXYGridJsonParamsLrankKingdom       GetPointsZoomXYGridJsonParamsLrank = "kingdom"
	GetPointsZoomXYGridJsonParamsLrankOrder         GetPointsZoomXYGridJsonParamsLrank = "order"
	GetPointsZoomXYGridJsonParamsLrankParvorder     GetPointsZoomXYGridJsonParamsLrank = "parvorder"
	GetPointsZoomXYGridJsonParamsLrankPhylum        GetPointsZoomXYGridJsonParamsLrank = "phylum"
	GetPointsZoomXYGridJsonParamsLrankSection       GetPointsZoomXYGridJsonParamsLrank = "section"
	GetPointsZoomXYGridJsonParamsLrankSpecies       GetPointsZoomXYGridJsonParamsLrank = "species"
	GetPointsZoomXYGridJsonParamsLrankSubclass      GetPointsZoomXYGridJsonParamsLrank = "subclass"
	GetPointsZoomXYGridJsonParamsLrankSubfamily     GetPointsZoomXYGridJsonParamsLrank = "subfamily"
	GetPointsZoomXYGridJsonParamsLrankSubgenus      GetPointsZoomXYGridJsonParamsLrank = "subgenus"
	GetPointsZoomXYGridJsonParamsLrankSuborder      GetPointsZoomXYGridJsonParamsLrank = "suborder"
	GetPointsZoomXYGridJsonParamsLrankSubphylum     GetPointsZoomXYGridJsonParamsLrank = "subphylum"
	GetPointsZoomXYGridJsonParamsLrankSubsection    GetPointsZoomXYGridJsonParamsLrank = "subsection"
	GetPointsZoomXYGridJsonParamsLrankSubspecies    GetPointsZoomXYGridJsonParamsLrank = "subspecies"
	GetPointsZoomXYGridJsonParamsLrankSubterclass   GetPointsZoomXYGridJsonParamsLrank = "subterclass"
	GetPointsZoomXYGridJsonParamsLrankSubtribe      GetPointsZoomXYGridJsonParamsLrank = "subtribe"
	GetPointsZoomXYGridJsonParamsLrankSuperclass    GetPointsZoomXYGridJsonParamsLrank = "superclass"
	GetPointsZoomXYGridJsonParamsLrankSuperfamily   GetPointsZoomXYGridJsonParamsLrank = "superfamily"
	GetPointsZoomXYGridJsonParamsLrankSuperorder    GetPointsZoomXYGridJsonParamsLrank = "superorder"
	GetPointsZoomXYGridJsonParamsLrankSupertribe    GetPointsZoomXYGridJsonParamsLrank = "supertribe"
	GetPointsZoomXYGridJsonParamsLrankTribe         GetPointsZoomXYGridJsonParamsLrank = "tribe"
	GetPointsZoomXYGridJsonParamsLrankVariety       GetPointsZoomXYGridJsonParamsLrank = "variety"
	GetPointsZoomXYGridJsonParamsLrankZoosection    GetPointsZoomXYGridJsonParamsLrank = "zoosection"
	GetPointsZoomXYGridJsonParamsLrankZoosubsection GetPointsZoomXYGridJsonParamsLrank = "zoosubsection"
)

// Defines values for GetPointsZoomXYGridJsonParamsIconicTaxa.
const (
	GetPointsZoomXYGridJsonParamsIconicTaxaActinopterygii GetPointsZoomXYGridJsonParamsIconicTaxa = "Actinopterygii"
	GetPointsZoomXYGridJsonParamsIconicTaxaAmphibia       GetPointsZoomXYGridJsonParamsIconicTaxa = "Amphibia"
	GetPointsZoomXYGridJsonParamsIconicTaxaAnimalia       GetPointsZoomXYGridJsonParamsIconicTaxa = "Animalia"
	GetPointsZoomXYGridJsonParamsIconicTaxaArachnida      GetPointsZoomXYGridJsonParamsIconicTaxa = "Arachnida"
	GetPointsZoomXYGridJsonParamsIconicTaxaAves           GetPointsZoomXYGridJsonParamsIconicTaxa = "Aves"
	GetPointsZoomXYGridJsonParamsIconicTaxaChromista      GetPointsZoomXYGridJsonParamsIconicTaxa = "Chromista"
	GetPointsZoomXYGridJsonParamsIconicTaxaFungi          GetPointsZoomXYGridJsonParamsIconicTaxa = "Fungi"
	GetPointsZoomXYGridJsonParamsIconicTaxaInsecta        GetPointsZoomXYGridJsonParamsIconicTaxa = "Insecta"
	GetPointsZoomXYGridJsonParamsIconicTaxaMammalia       GetPointsZoomXYGridJsonParamsIconicTaxa = "Mammalia"
	GetPointsZoomXYGridJsonParamsIconicTaxaMollusca       GetPointsZoomXYGridJsonParamsIconicTaxa = "Mollusca"
	GetPointsZoomXYGridJsonParamsIconicTaxaPlantae        GetPointsZoomXYGridJsonParamsIconicTaxa = "Plantae"
	GetPointsZoomXYGridJsonParamsIconicTaxaProtozoa       GetPointsZoomXYGridJsonParamsIconicTaxa = "Protozoa"
	GetPointsZoomXYGridJsonParamsIconicTaxaReptilia       GetPointsZoomXYGridJsonParamsIconicTaxa = "Reptilia"
	GetPointsZoomXYGridJsonParamsIconicTaxaUnknown        GetPointsZoomXYGridJsonParamsIconicTaxa = "unknown"
)

// Defines values for GetPointsZoomXYGridJsonParamsIdentifications.
const (
	GetPointsZoomXYGridJsonParamsIdentificationsMostAgree    GetPointsZoomXYGridJsonParamsIdentifications = "most_agree"
	GetPointsZoomXYGridJsonParamsIdentificationsMostDisagree GetPointsZoomXYGridJsonParamsIdentifications = "most_disagree"
	GetPointsZoomXYGridJsonParamsIdentificationsSomeAgree    GetPointsZoomXYGridJsonParamsIdentifications = "some_agree"
)

// Defines values for GetPointsZoomXYGridJsonParamsSearchOn.
const (
	GetPointsZoomXYGridJsonParamsSearchOnDescription        GetPointsZoomXYGridJsonParamsSearchOn = "description"
	GetPointsZoomXYGridJsonParamsSearchOnNames              GetPointsZoomXYGridJsonParamsSearchOn = "names"
	GetPointsZoomXYGridJsonParamsSearchOnPlace              GetPointsZoomXYGridJsonParamsSearchOn = "place"
	GetPointsZoomXYGridJsonParamsSearchOnTags               GetPointsZoomXYGridJsonParamsSearchOn = "tags"
	GetPointsZoomXYGridJsonParamsSearchOnTaxonPageObsPhotos GetPointsZoomXYGridJsonParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetPointsZoomXYGridJsonParamsQualityGrade.
const (
	GetPointsZoomXYGridJsonParamsQualityGradeCasual   GetPointsZoomXYGridJsonParamsQualityGrade = "casual"
	GetPointsZoomXYGridJsonParamsQualityGradeNeedsId  GetPointsZoomXYGridJsonParamsQualityGrade = "needs_id"
	GetPointsZoomXYGridJsonParamsQualityGradeResearch GetPointsZoomXYGridJsonParamsQualityGrade = "research"
)

// Defines values for GetPointsZoomXYGridJsonParamsOrder.
const (
	GetPointsZoomXYGridJsonParamsOrderAsc  GetPointsZoomXYGridJsonParamsOrder = "asc"
	GetPointsZoomXYGridJsonParamsOrderDesc GetPointsZoomXYGridJsonParamsOrder = "desc"
)

// Defines values for GetPointsZoomXYGridJsonParamsOrderBy.
const (
	GetPointsZoomXYGridJsonParamsOrderByCreatedAt    GetPointsZoomXYGridJsonParamsOrderBy = "created_at"
	GetPointsZoomXYGridJsonParamsOrderByGeoScore     GetPointsZoomXYGridJsonParamsOrderBy = "geo_score"
	GetPointsZoomXYGridJsonParamsOrderById           GetPointsZoomXYGridJsonParamsOrderBy = "id"
	GetPointsZoomXYGridJsonParamsOrderByObservedOn   GetPointsZoomXYGridJsonParamsOrderBy = "observed_on"
	GetPointsZoomXYGridJsonParamsOrderByRandom       GetPointsZoomXYGridJsonParamsOrderBy = "random"
	GetPointsZoomXYGridJsonParamsOrderBySpeciesGuess GetPointsZoomXYGridJsonParamsOrderBy = "species_guess"
	GetPointsZoomXYGridJsonParamsOrderByUpdatedAt    GetPointsZoomXYGridJsonParamsOrderBy = "updated_at"
	GetPointsZoomXYGridJsonParamsOrderByVotes        GetPointsZoomXYGridJsonParamsOrderBy = "votes"
)

// Defines values for GetPointsZoomXYPngParamsTileSize.
const (
	GetPointsZoomXYPngParamsTileSizeN256 GetPointsZoomXYPngParamsTileSize = 256
	GetPointsZoomXYPngParamsTileSizeN512 GetPointsZoomXYPngParamsTileSize = 512
)

// Defines values for GetPointsZoomXYPngParamsLicense.
const (
	GetPointsZoomXYPngParamsLicenseCc0      GetPointsZoomXYPngParamsLicense = "cc0"
	GetPointsZoomXYPngParamsLicenseCcBy     GetPointsZoomXYPngParamsLicense = "cc-by"
	GetPointsZoomXYPngParamsLicenseCcByNc   GetPointsZoomXYPngParamsLicense = "cc-by-nc"
	GetPointsZoomXYPngParamsLicenseCcByNcNd GetPointsZoomXYPngParamsLicense = "cc-by-nc-nd"
	GetPointsZoomXYPngParamsLicenseCcByNcSa GetPointsZoomXYPngParamsLicense = "cc-by-nc-sa"
	GetPointsZoomXYPngParamsLicenseCcByNd   GetPointsZoomXYPngParamsLicense = "cc-by-nd"
	GetPointsZoomXYPngParamsLicenseCcBySa   GetPointsZoomXYPngParamsLicense = "cc-by-sa"
)

// Defines values for GetPointsZoomXYPngParamsPhotoLicense.
const (
	GetPointsZoomXYPngParamsPhotoLicenseCc0      GetPointsZoomXYPngParamsPhotoLicense = "cc0"
	GetPointsZoomXYPngParamsPhotoLicenseCcBy     GetPointsZoomXYPngParamsPhotoLicense = "cc-by"
	GetPointsZoomXYPngParamsPhotoLicenseCcByNc   GetPointsZoomXYPngParamsPhotoLicense = "cc-by-nc"
	GetPointsZoomXYPngParamsPhotoLicenseCcByNcNd GetPointsZoomXYPngParamsPhotoLicense = "cc-by-nc-nd"
	GetPointsZoomXYPngParamsPhotoLicenseCcByNcSa GetPointsZoomXYPngParamsPhotoLicense = "cc-by-nc-sa"
	GetPointsZoomXYPngParamsPhotoLicenseCcByNd   GetPointsZoomXYPngParamsPhotoLicense = "cc-by-nd"
	GetPointsZoomXYPngParamsPhotoLicenseCcBySa   GetPointsZoomXYPngParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetPointsZoomXYPngParamsRank.
const (
	GetPointsZoomXYPngParamsRankClass         GetPointsZoomXYPngParamsRank = "class"
	GetPointsZoomXYPngParamsRankComplex       GetPointsZoomXYPngParamsRank = "complex"
	GetPointsZoomXYPngParamsRankEpifamily     GetPointsZoomXYPngParamsRank = "epifamily"
	GetPointsZoomXYPngParamsRankFamily        GetPointsZoomXYPngParamsRank = "family"
	GetPointsZoomXYPngParamsRankForm          GetPointsZoomXYPngParamsRank = "form"
	GetPointsZoomXYPngParamsRankGenus         GetPointsZoomXYPngParamsRank = "genus"
	GetPointsZoomXYPngParamsRankGenushybrid   GetPointsZoomXYPngParamsRank = "genushybrid"
	GetPointsZoomXYPngParamsRankHybrid        GetPointsZoomXYPngParamsRank = "hybrid"
	GetPointsZoomXYPngParamsRankInfraclass    GetPointsZoomXYPngParamsRank = "infraclass"
	GetPointsZoomXYPngParamsRankInfrahybrid   GetPointsZoomXYPngParamsRank = "infrahybrid"
	GetPointsZoomXYPngParamsRankInfraorder    GetPointsZoomXYPngParamsRank = "infraorder"
	GetPointsZoomXYPngParamsRankKingdom       GetPointsZoomXYPngParamsRank = "kingdom"
	GetPointsZoomXYPngParamsRankOrder         GetPointsZoomXYPngParamsRank = "order"
	GetPointsZoomXYPngParamsRankParvorder     GetPointsZoomXYPngParamsRank = "parvorder"
	GetPointsZoomXYPngParamsRankPhylum        GetPointsZoomXYPngParamsRank = "phylum"
	GetPointsZoomXYPngParamsRankSection       GetPointsZoomXYPngParamsRank = "section"
	GetPointsZoomXYPngParamsRankSpecies       GetPointsZoomXYPngParamsRank = "species"
	GetPointsZoomXYPngParamsRankSubclass      GetPointsZoomXYPngParamsRank = "subclass"
	GetPointsZoomXYPngParamsRankSubfamily     GetPointsZoomXYPngParamsRank = "subfamily"
	GetPointsZoomXYPngParamsRankSubgenus      GetPointsZoomXYPngParamsRank = "subgenus"
	GetPointsZoomXYPngParamsRankSuborder      GetPointsZoomXYPngParamsRank = "suborder"
	GetPointsZoomXYPngParamsRankSubphylum     GetPointsZoomXYPngParamsRank = "subphylum"
	GetPointsZoomXYPngParamsRankSubsection    GetPointsZoomXYPngParamsRank = "subsection"
	GetPointsZoomXYPngParamsRankSubspecies    GetPointsZoomXYPngParamsRank = "subspecies"
	GetPointsZoomXYPngParamsRankSubterclass   GetPointsZoomXYPngParamsRank = "subterclass"
	GetPointsZoomXYPngParamsRankSubtribe      GetPointsZoomXYPngParamsRank = "subtribe"
	GetPointsZoomXYPngParamsRankSuperclass    GetPointsZoomXYPngParamsRank = "superclass"
	GetPointsZoomXYPngParamsRankSuperfamily   GetPointsZoomXYPngParamsRank = "superfamily"
	GetPointsZoomXYPngParamsRankSuperorder    GetPointsZoomXYPngParamsRank = "superorder"
	GetPointsZoomXYPngParamsRankSupertribe    GetPointsZoomXYPngParamsRank = "supertribe"
	GetPointsZoomXYPngParamsRankTribe         GetPointsZoomXYPngParamsRank = "tribe"
	GetPointsZoomXYPngParamsRankVariety       GetPointsZoomXYPngParamsRank = "variety"
	GetPointsZoomXYPngParamsRankZoosection    GetPointsZoomXYPngParamsRank = "zoosection"
	GetPointsZoomXYPngParamsRankZoosubsection GetPointsZoomXYPngParamsRank = "zoosubsection"
)

// Defines values for GetPointsZoomXYPngParamsSoundLicense.
const (
	GetPointsZoomXYPngParamsSoundLicenseCc0      GetPointsZoomXYPngParamsSoundLicense = "cc0"
	GetPointsZoomXYPngParamsSoundLicenseCcBy     GetPointsZoomXYPngParamsSoundLicense = "cc-by"
	GetPointsZoomXYPngParamsSoundLicenseCcByNc   GetPointsZoomXYPngParamsSoundLicense = "cc-by-nc"
	GetPointsZoomXYPngParamsSoundLicenseCcByNcNd GetPointsZoomXYPngParamsSoundLicense = "cc-by-nc-nd"
	GetPointsZoomXYPngParamsSoundLicenseCcByNcSa GetPointsZoomXYPngParamsSoundLicense = "cc-by-nc-sa"
	GetPointsZoomXYPngParamsSoundLicenseCcByNd   GetPointsZoomXYPngParamsSoundLicense = "cc-by-nd"
	GetPointsZoomXYPngParamsSoundLicenseCcBySa   GetPointsZoomXYPngParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetPointsZoomXYPngParamsCsi.
const (
	GetPointsZoomXYPngParamsCsiCR GetPointsZoomXYPngParamsCsi = "CR"
	GetPointsZoomXYPngParamsCsiEN GetPointsZoomXYPngParamsCsi = "EN"
	GetPointsZoomXYPngParamsCsiEW GetPointsZoomXYPngParamsCsi = "EW"
	GetPointsZoomXYPngParamsCsiEX GetPointsZoomXYPngParamsCsi = "EX"
	GetPointsZoomXYPngParamsCsiLC GetPointsZoomXYPngParamsCsi = "LC"
	GetPointsZoomXYPngParamsCsiNT GetPointsZoomXYPngParamsCsi = "NT"
	GetPointsZoomXYPngParamsCsiVU GetPointsZoomXYPngParamsCsi = "VU"
)

// Defines values for GetPointsZoomXYPngParamsGeoprivacy.
const (
	GetPointsZoomXYPngParamsGeoprivacyObscured        GetPointsZoomXYPngParamsGeoprivacy = "obscured"
	GetPointsZoomXYPngParamsGeoprivacyObscuredPrivate GetPointsZoomXYPngParamsGeoprivacy = "obscured_private"
	GetPointsZoomXYPngParamsGeoprivacyOpen            GetPointsZoomXYPngParamsGeoprivacy = "open"
	GetPointsZoomXYPngParamsGeoprivacyPrivate         GetPointsZoomXYPngParamsGeoprivacy = "private"
)

// Defines values for GetPointsZoomXYPngParamsTaxonGeoprivacy.
const (
	GetPointsZoomXYPngParamsTaxonGeoprivacyObscured        GetPointsZoomXYPngParamsTaxonGeoprivacy = "obscured"
	GetPointsZoomXYPngParamsTaxonGeoprivacyObscuredPrivate GetPointsZoomXYPngParamsTaxonGeoprivacy = "obscured_private"
	GetPointsZoomXYPngParamsTaxonGeoprivacyOpen            GetPointsZoomXYPngParamsTaxonGeoprivacy = "open"
	GetPointsZoomXYPngParamsTaxonGeoprivacyPrivate         GetPointsZoomXYPngParamsTaxonGeoprivacy = "private"
)

// Defines values for GetPointsZoomXYPngParamsObscuration.
const (
	GetPointsZoomXYPngParamsObscurationNone     GetPointsZoomXYPngParamsObscuration = "none"
	GetPointsZoomXYPngParamsObscurationObscured GetPointsZoomXYPngParamsObscuration = "obscured"
	GetPointsZoomXYPngParamsObscurationPrivate  GetPointsZoomXYPngParamsObscuration = "private"
)

// Defines values for GetPointsZoomXYPngParamsHrank.
const (
	GetPointsZoomXYPngParamsHrankClass         GetPointsZoomXYPngParamsHrank = "class"
	GetPointsZoomXYPngParamsHrankComplex       GetPointsZoomXYPngParamsHrank = "complex"
	GetPointsZoomXYPngParamsHrankEpifamily     GetPointsZoomXYPngParamsHrank = "epifamily"
	GetPointsZoomXYPngParamsHrankFamily        GetPointsZoomXYPngParamsHrank = "family"
	GetPointsZoomXYPngParamsHrankForm          GetPointsZoomXYPngParamsHrank = "form"
	GetPointsZoomXYPngParamsHrankGenus         GetPointsZoomXYPngParamsHrank = "genus"
	GetPointsZoomXYPngParamsHrankGenushybrid   GetPointsZoomXYPngParamsHrank = "genushybrid"
	GetPointsZoomXYPngParamsHrankHybrid        GetPointsZoomXYPngParamsHrank = "hybrid"
	GetPointsZoomXYPngParamsHrankInfraclass    GetPointsZoomXYPngParamsHrank = "infraclass"
	GetPointsZoomXYPngParamsHrankInfrahybrid   GetPointsZoomXYPngParamsHrank = "infrahybrid"
	GetPointsZoomXYPngParamsHrankInfraorder    GetPointsZoomXYPngParamsHrank = "infraorder"
	GetPointsZoomXYPngParamsHrankKingdom       GetPointsZoomXYPngParamsHrank = "kingdom"
	GetPointsZoomXYPngParamsHrankOrder         GetPointsZoomXYPngParamsHrank = "order"
	GetPointsZoomXYPngParamsHrankParvorder     GetPointsZoomXYPngParamsHrank = "parvorder"
	GetPointsZoomXYPngParamsHrankPhylum        GetPointsZoomXYPngParamsHrank = "phylum"
	GetPointsZoomXYPngParamsHrankSection       GetPointsZoomXYPngParamsHrank = "section"
	GetPointsZoomXYPngParamsHrankSpecies       GetPointsZoomXYPngParamsHrank = "species"
	GetPointsZoomXYPngParamsHrankSubclass      GetPointsZoomXYPngParamsHrank = "subclass"
	GetPointsZoomXYPngParamsHrankSubfamily     GetPointsZoomXYPngParamsHrank = "subfamily"
	GetPointsZoomXYPngParamsHrankSubgenus      GetPointsZoomXYPngParamsHrank = "subgenus"
	GetPointsZoomXYPngParamsHrankSuborder      GetPointsZoomXYPngParamsHrank = "suborder"
	GetPointsZoomXYPngParamsHrankSubphylum     GetPointsZoomXYPngParamsHrank = "subphylum"
	GetPointsZoomXYPngParamsHrankSubsection    GetPointsZoomXYPngParamsHrank = "subsection"
	GetPointsZoomXYPngParamsHrankSubspecies    GetPointsZoomXYPngParamsHrank = "subspecies"
	GetPointsZoomXYPngParamsHrankSubterclass   GetPointsZoomXYPngParamsHrank = "subterclass"
	GetPointsZoomXYPngParamsHrankSubtribe      GetPointsZoomXYPngParamsHrank = "subtribe"
	GetPointsZoomXYPngParamsHrankSuperclass    GetPointsZoomXYPngParamsHrank = "superclass"
	GetPointsZoomXYPngParamsHrankSuperfamily   GetPointsZoomXYPngParamsHrank = "superfamily"
	GetPointsZoomXYPngParamsHrankSuperorder    GetPointsZoomXYPngParamsHrank = "superorder"
	GetPointsZoomXYPngParamsHrankSupertribe    GetPointsZoomXYPngParamsHrank = "supertribe"
	GetPointsZoomXYPngParamsHrankTribe         GetPointsZoomXYPngParamsHrank = "tribe"
	GetPointsZoomXYPngParamsHrankVariety       GetPointsZoomXYPngParamsHrank = "variety"
	GetPointsZoomXYPngParamsHrankZoosection    GetPointsZoomXYPngParamsHrank = "zoosection"
	GetPointsZoomXYPngParamsHrankZoosubsection GetPointsZoomXYPngParamsHrank = "zoosubsection"
)

// Defines values for GetPointsZoomXYPngParamsLrank.
const (
	GetPointsZoomXYPngParamsLrankClass         GetPointsZoomXYPngParamsLrank = "class"
	GetPointsZoomXYPngParamsLrankComplex       GetPointsZoomXYPngParamsLrank = "complex"
	GetPointsZoomXYPngParamsLrankEpifamily     GetPointsZoomXYPngParamsLrank = "epifamily"
	GetPointsZoomXYPngParamsLrankFamily        GetPointsZoomXYPngParamsLrank = "family"
	GetPointsZoomXYPngParamsLrankForm          GetPointsZoomXYPngParamsLrank = "form"
	GetPointsZoomXYPngParamsLrankGenus         GetPointsZoomXYPngParamsLrank = "genus"
	GetPointsZoomXYPngParamsLrankGenushybrid   GetPointsZoomXYPngParamsLrank = "genushybrid"
	GetPointsZoomXYPngParamsLrankHybrid        GetPointsZoomXYPngParamsLrank = "hybrid"
	GetPointsZoomXYPngParamsLrankInfraclass    GetPointsZoomXYPngParamsLrank = "infraclass"
	GetPointsZoomXYPngParamsLrankInfrahybrid   GetPointsZoomXYPngParamsLrank = "infrahybrid"
	GetPointsZoomXYPngParamsLrankInfraorder    GetPointsZoomXYPngParamsLrank = "infraorder"
	GetPointsZoomXYPngParamsLrankKingdom       GetPointsZoomXYPngParamsLrank = "kingdom"
	GetPointsZoomXYPngParamsLrankOrder         GetPointsZoomXYPngParamsLrank = "order"
	GetPointsZoomXYPngParamsLrankParvorder     GetPointsZoomXYPngParamsLrank = "parvorder"
	GetPointsZoomXYPngParamsLrankPhylum        GetPointsZoomXYPngParamsLrank = "phylum"
	GetPointsZoomXYPngParamsLrankSection       GetPointsZoomXYPngParamsLrank = "section"
	GetPointsZoomXYPngParamsLrankSpecies       GetPointsZoomXYPngParamsLrank = "species"
	GetPointsZoomXYPngParamsLrankSubclass      GetPointsZoomXYPngParamsLrank = "subclass"
	GetPointsZoomXYPngParamsLrankSubfamily     GetPointsZoomXYPngParamsLrank = "subfamily"
	GetPointsZoomXYPngParamsLrankSubgenus      GetPointsZoomXYPngParamsLrank = "subgenus"
	GetPointsZoomXYPngParamsLrankSuborder      GetPointsZoomXYPngParamsLrank = "suborder"
	GetPointsZoomXYPngParamsLrankSubphylum     GetPointsZoomXYPngParamsLrank = "subphylum"
	GetPointsZoomXYPngParamsLrankSubsection    GetPointsZoomXYPngParamsLrank = "subsection"
	GetPointsZoomXYPngParamsLrankSubspecies    GetPointsZoomXYPngParamsLrank = "subspecies"
	GetPointsZoomXYPngParamsLrankSubterclass   GetPointsZoomXYPngParamsLrank = "subterclass"
	GetPointsZoomXYPngParamsLrankSubtribe      GetPointsZoomXYPngParamsLrank = "subtribe"
	GetPointsZoomXYPngParamsLrankSuperclass    GetPointsZoomXYPngParamsLrank = "superclass"
	GetPointsZoomXYPngParamsLrankSuperfamily   GetPointsZoomXYPngParamsLrank = "superfamily"
	GetPointsZoomXYPngParamsLrankSuperorder    GetPointsZoomXYPngParamsLrank = "superorder"
	GetPointsZoomXYPngParamsLrankSupertribe    GetPointsZoomXYPngParamsLrank = "supertribe"
	GetPointsZoomXYPngParamsLrankTribe         GetPointsZoomXYPngParamsLrank = "tribe"
	GetPointsZoomXYPngParamsLrankVariety       GetPointsZoomXYPngParamsLrank = "variety"
	GetPointsZoomXYPngParamsLrankZoosection    GetPointsZoomXYPngParamsLrank = "zoosection"
	GetPointsZoomXYPngParamsLrankZoosubsection GetPointsZoomXYPngParamsLrank = "zoosubsection"
)

// Defines values for GetPointsZoomXYPngParamsIconicTaxa.
const (
	GetPointsZoomXYPngParamsIconicTaxaActinopterygii GetPointsZoomXYPngParamsIconicTaxa = "Actinopterygii"
	GetPointsZoomXYPngParamsIconicTaxaAmphibia       GetPointsZoomXYPngParamsIconicTaxa = "Amphibia"
	GetPointsZoomXYPngParamsIconicTaxaAnimalia       GetPointsZoomXYPngParamsIconicTaxa = "Animalia"
	GetPointsZoomXYPngParamsIconicTaxaArachnida      GetPointsZoomXYPngParamsIconicTaxa = "Arachnida"
	GetPointsZoomXYPngParamsIconicTaxaAves           GetPointsZoomXYPngParamsIconicTaxa = "Aves"
	GetPointsZoomXYPngParamsIconicTaxaChromista      GetPointsZoomXYPngParamsIconicTaxa = "Chromista"
	GetPointsZoomXYPngParamsIconicTaxaFungi          GetPointsZoomXYPngParamsIconicTaxa = "Fungi"
	GetPointsZoomXYPngParamsIconicTaxaInsecta        GetPointsZoomXYPngParamsIconicTaxa = "Insecta"
	GetPointsZoomXYPngParamsIconicTaxaMammalia       GetPointsZoomXYPngParamsIconicTaxa = "Mammalia"
	GetPointsZoomXYPngParamsIconicTaxaMollusca       GetPointsZoomXYPngParamsIconicTaxa = "Mollusca"
	GetPointsZoomXYPngParamsIconicTaxaPlantae        GetPointsZoomXYPngParamsIconicTaxa = "Plantae"
	GetPointsZoomXYPngParamsIconicTaxaProtozoa       GetPointsZoomXYPngParamsIconicTaxa = "Protozoa"
	GetPointsZoomXYPngParamsIconicTaxaReptilia       GetPointsZoomXYPngParamsIconicTaxa = "Reptilia"
	GetPointsZoomXYPngParamsIconicTaxaUnknown        GetPointsZoomXYPngParamsIconicTaxa = "unknown"
)

// Defines values for GetPointsZoomXYPngParamsIdentifications.
const (
	GetPointsZoomXYPngParamsIdentificationsMostAgree    GetPointsZoomXYPngParamsIdentifications = "most_agree"
	GetPointsZoomXYPngParamsIdentificationsMostDisagree GetPointsZoomXYPngParamsIdentifications = "most_disagree"
	GetPointsZoomXYPngParamsIdentificationsSomeAgree    GetPointsZoomXYPngParamsIdentifications = "some_agree"
)

// Defines values for GetPointsZoomXYPngParamsSearchOn.
const (
	GetPointsZoomXYPngParamsSearchOnDescription        GetPointsZoomXYPngParamsSearchOn = "description"
	GetPointsZoomXYPngParamsSearchOnNames              GetPointsZoomXYPngParamsSearchOn = "names"
	GetPointsZoomXYPngParamsSearchOnPlace              GetPointsZoomXYPngParamsSearchOn = "place"
	GetPointsZoomXYPngParamsSearchOnTags               GetPointsZoomXYPngParamsSearchOn = "tags"
	GetPointsZoomXYPngParamsSearchOnTaxonPageObsPhotos GetPointsZoomXYPngParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetPointsZoomXYPngParamsQualityGrade.
const (
	GetPointsZoomXYPngParamsQualityGradeCasual   GetPointsZoomXYPngParamsQualityGrade = "casual"
	GetPointsZoomXYPngParamsQualityGradeNeedsId  GetPointsZoomXYPngParamsQualityGrade = "needs_id"
	GetPointsZoomXYPngParamsQualityGradeResearch GetPointsZoomXYPngParamsQualityGrade = "research"
)

// Defines values for GetPointsZoomXYPngParamsOrder.
const (
	GetPointsZoomXYPngParamsOrderAsc  GetPointsZoomXYPngParamsOrder = "asc"
	GetPointsZoomXYPngParamsOrderDesc GetPointsZoomXYPngParamsOrder = "desc"
)

// Defines values for GetPointsZoomXYPngParamsOrderBy.
const (
	GetPointsZoomXYPngParamsOrderByCreatedAt    GetPointsZoomXYPngParamsOrderBy = "created_at"
	GetPointsZoomXYPngParamsOrderByGeoScore     GetPointsZoomXYPngParamsOrderBy = "geo_score"
	GetPointsZoomXYPngParamsOrderById           GetPointsZoomXYPngParamsOrderBy = "id"
	GetPointsZoomXYPngParamsOrderByObservedOn   GetPointsZoomXYPngParamsOrderBy = "observed_on"
	GetPointsZoomXYPngParamsOrderByRandom       GetPointsZoomXYPngParamsOrderBy = "random"
	GetPointsZoomXYPngParamsOrderBySpeciesGuess GetPointsZoomXYPngParamsOrderBy = "species_guess"
	GetPointsZoomXYPngParamsOrderByUpdatedAt    GetPointsZoomXYPngParamsOrderBy = "updated_at"
	GetPointsZoomXYPngParamsOrderByVotes        GetPointsZoomXYPngParamsOrderBy = "votes"
)

// Defines values for GetProjectsParamsType.
const (
	Collection GetProjectsParamsType = "collection"
	Umbrella   GetProjectsParamsType = "umbrella"
)

// Defines values for GetProjectsParamsOrderBy.
const (
	GetProjectsParamsOrderByCreated     GetProjectsParamsOrderBy = "created"
	GetProjectsParamsOrderByDistance    GetProjectsParamsOrderBy = "distance"
	GetProjectsParamsOrderByFeatured    GetProjectsParamsOrderBy = "featured"
	GetProjectsParamsOrderByRecentPosts GetProjectsParamsOrderBy = "recent_posts"
	GetProjectsParamsOrderByUpdated     GetProjectsParamsOrderBy = "updated"
)

// Defines values for GetProjectsIdMembersParamsOrderBy.
const (
	GetProjectsIdMembersParamsOrderByLogin             GetProjectsIdMembersParamsOrderBy = "login"
	GetProjectsIdMembersParamsOrderByObservationsCount GetProjectsIdMembersParamsOrderBy = "observations_count"
)

// Defines values for GetRelationshipsParamsTrusted.
const (
	GetRelationshipsParamsTrustedAny GetRelationshipsParamsTrusted = "any"
	GetRelationshipsParamsTrustedNo  GetRelationshipsParamsTrusted = "no"
	GetRelationshipsParamsTrustedYes GetRelationshipsParamsTrusted = "yes"
)

// Defines values for GetRelationshipsParamsFollowing.
const (
	GetRelationshipsParamsFollowingAny GetRelationshipsParamsFollowing = "any"
	GetRelationshipsParamsFollowingNo  GetRelationshipsParamsFollowing = "no"
	GetRelationshipsParamsFollowingYes GetRelationshipsParamsFollowing = "yes"
)

// Defines values for GetRelationshipsParamsOrder.
const (
	GetRelationshipsParamsOrderAsc  GetRelationshipsParamsOrder = "asc"
	GetRelationshipsParamsOrderDesc GetRelationshipsParamsOrder = "desc"
)

// Defines values for GetRelationshipsParamsOrderBy.
const (
	FriendshipsId GetRelationshipsParamsOrderBy = "friendships.id"
	UsersLogin    GetRelationshipsParamsOrderBy = "users.login"
)

// Defines values for GetSearchParamsSources.
const (
	Places   GetSearchParamsSources = "places"
	Projects GetSearchParamsSources = "projects"
	Taxa     GetSearchParamsSources = "taxa"
	Users    GetSearchParamsSources = "users"
)

// Defines values for GetTaxaParamsRank.
const (
	GetTaxaParamsRankClass       GetTaxaParamsRank = "class"
	GetTaxaParamsRankEpifamily   GetTaxaParamsRank = "epifamily"
	GetTaxaParamsRankFamily      GetTaxaParamsRank = "family"
	GetTaxaParamsRankForm        GetTaxaParamsRank = "form"
	GetTaxaParamsRankGenus       GetTaxaParamsRank = "genus"
	GetTaxaParamsRankGenushybrid GetTaxaParamsRank = "genushybrid"
	GetTaxaParamsRankHybrid      GetTaxaParamsRank = "hybrid"
	GetTaxaParamsRankInfraorder  GetTaxaParamsRank = "infraorder"
	GetTaxaParamsRankKingdom     GetTaxaParamsRank = "kingdom"
	GetTaxaParamsRankOrder       GetTaxaParamsRank = "order"
	GetTaxaParamsRankPhylum      GetTaxaParamsRank = "phylum"
	GetTaxaParamsRankSpecies     GetTaxaParamsRank = "species"
	GetTaxaParamsRankSubclass    GetTaxaParamsRank = "subclass"
	GetTaxaParamsRankSubfamily   GetTaxaParamsRank = "subfamily"
	GetTaxaParamsRankSuborder    GetTaxaParamsRank = "suborder"
	GetTaxaParamsRankSubphylum   GetTaxaParamsRank = "subphylum"
	GetTaxaParamsRankSubspecies  GetTaxaParamsRank = "subspecies"
	GetTaxaParamsRankSubtribe    GetTaxaParamsRank = "subtribe"
	GetTaxaParamsRankSuperclass  GetTaxaParamsRank = "superclass"
	GetTaxaParamsRankSuperfamily GetTaxaParamsRank = "superfamily"
	GetTaxaParamsRankSuperorder  GetTaxaParamsRank = "superorder"
	GetTaxaParamsRankSupertribe  GetTaxaParamsRank = "supertribe"
	GetTaxaParamsRankTribe       GetTaxaParamsRank = "tribe"
	GetTaxaParamsRankVariety     GetTaxaParamsRank = "variety"
)

// Defines values for GetTaxaSuggestParamsOrderBy.
const (
	GetTaxaSuggestParamsOrderByDefault  GetTaxaSuggestParamsOrderBy = "default"
	GetTaxaSuggestParamsOrderBySciname  GetTaxaSuggestParamsOrderBy = "sciname"
	GetTaxaSuggestParamsOrderByTaxonomy GetTaxaSuggestParamsOrderBy = "taxonomy"
)

// Defines values for GetTaxaSuggestParamsSource.
const (
	GetTaxaSuggestParamsSourceCaptiveObservations GetTaxaSuggestParamsSource = "captive_observations"
	GetTaxaSuggestParamsSourceChecklist           GetTaxaSuggestParamsSource = "checklist"
	GetTaxaSuggestParamsSourceMisidentifications  GetTaxaSuggestParamsSource = "misidentifications"
	GetTaxaSuggestParamsSourceObservations        GetTaxaSuggestParamsSource = "observations"
	GetTaxaSuggestParamsSourceRgObservations      GetTaxaSuggestParamsSource = "rg_observations"
	GetTaxaSuggestParamsSourceVisual              GetTaxaSuggestParamsSource = "visual"
)

// Defines values for PostTaxaSuggestMultipartBodyOrderBy.
const (
	Default  PostTaxaSuggestMultipartBodyOrderBy = "default"
	Sciname  PostTaxaSuggestMultipartBodyOrderBy = "sciname"
	Taxonomy PostTaxaSuggestMultipartBodyOrderBy = "taxonomy"
)

// Defines values for PostTaxaSuggestMultipartBodySource.
const (
	CaptiveObservations PostTaxaSuggestMultipartBodySource = "captive_observations"
	Checklist           PostTaxaSuggestMultipartBodySource = "checklist"
	Misidentifications  PostTaxaSuggestMultipartBodySource = "misidentifications"
	Observations        PostTaxaSuggestMultipartBodySource = "observations"
	RgObservations      PostTaxaSuggestMultipartBodySource = "rg_observations"
	Visual              PostTaxaSuggestMultipartBodySource = "visual"
)

// Defines values for GetTaxonPlacesIdZoomXYPngParamsTileSize.
const (
	GetTaxonPlacesIdZoomXYPngParamsTileSizeN256 GetTaxonPlacesIdZoomXYPngParamsTileSize = 256
	GetTaxonPlacesIdZoomXYPngParamsTileSizeN512 GetTaxonPlacesIdZoomXYPngParamsTileSize = 512
)

// Defines values for GetTaxonPlacesIdZoomXYPngParamsLicense.
const (
	GetTaxonPlacesIdZoomXYPngParamsLicenseCc0      GetTaxonPlacesIdZoomXYPngParamsLicense = "cc0"
	GetTaxonPlacesIdZoomXYPngParamsLicenseCcBy     GetTaxonPlacesIdZoomXYPngParamsLicense = "cc-by"
	GetTaxonPlacesIdZoomXYPngParamsLicenseCcByNc   GetTaxonPlacesIdZoomXYPngParamsLicense = "cc-by-nc"
	GetTaxonPlacesIdZoomXYPngParamsLicenseCcByNcNd GetTaxonPlacesIdZoomXYPngParamsLicense = "cc-by-nc-nd"
	GetTaxonPlacesIdZoomXYPngParamsLicenseCcByNcSa GetTaxonPlacesIdZoomXYPngParamsLicense = "cc-by-nc-sa"
	GetTaxonPlacesIdZoomXYPngParamsLicenseCcByNd   GetTaxonPlacesIdZoomXYPngParamsLicense = "cc-by-nd"
	GetTaxonPlacesIdZoomXYPngParamsLicenseCcBySa   GetTaxonPlacesIdZoomXYPngParamsLicense = "cc-by-sa"
)

// Defines values for GetTaxonPlacesIdZoomXYPngParamsPhotoLicense.
const (
	GetTaxonPlacesIdZoomXYPngParamsPhotoLicenseCc0      GetTaxonPlacesIdZoomXYPngParamsPhotoLicense = "cc0"
	GetTaxonPlacesIdZoomXYPngParamsPhotoLicenseCcBy     GetTaxonPlacesIdZoomXYPngParamsPhotoLicense = "cc-by"
	GetTaxonPlacesIdZoomXYPngParamsPhotoLicenseCcByNc   GetTaxonPlacesIdZoomXYPngParamsPhotoLicense = "cc-by-nc"
	GetTaxonPlacesIdZoomXYPngParamsPhotoLicenseCcByNcNd GetTaxonPlacesIdZoomXYPngParamsPhotoLicense = "cc-by-nc-nd"
	GetTaxonPlacesIdZoomXYPngParamsPhotoLicenseCcByNcSa GetTaxonPlacesIdZoomXYPngParamsPhotoLicense = "cc-by-nc-sa"
	GetTaxonPlacesIdZoomXYPngParamsPhotoLicenseCcByNd   GetTaxonPlacesIdZoomXYPngParamsPhotoLicense = "cc-by-nd"
	GetTaxonPlacesIdZoomXYPngParamsPhotoLicenseCcBySa   GetTaxonPlacesIdZoomXYPngParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetTaxonPlacesIdZoomXYPngParamsRank.
const (
	GetTaxonPlacesIdZoomXYPngParamsRankClass         GetTaxonPlacesIdZoomXYPngParamsRank = "class"
	GetTaxonPlacesIdZoomXYPngParamsRankComplex       GetTaxonPlacesIdZoomXYPngParamsRank = "complex"
	GetTaxonPlacesIdZoomXYPngParamsRankEpifamily     GetTaxonPlacesIdZoomXYPngParamsRank = "epifamily"
	GetTaxonPlacesIdZoomXYPngParamsRankFamily        GetTaxonPlacesIdZoomXYPngParamsRank = "family"
	GetTaxonPlacesIdZoomXYPngParamsRankForm          GetTaxonPlacesIdZoomXYPngParamsRank = "form"
	GetTaxonPlacesIdZoomXYPngParamsRankGenus         GetTaxonPlacesIdZoomXYPngParamsRank = "genus"
	GetTaxonPlacesIdZoomXYPngParamsRankGenushybrid   GetTaxonPlacesIdZoomXYPngParamsRank = "genushybrid"
	GetTaxonPlacesIdZoomXYPngParamsRankHybrid        GetTaxonPlacesIdZoomXYPngParamsRank = "hybrid"
	GetTaxonPlacesIdZoomXYPngParamsRankInfraclass    GetTaxonPlacesIdZoomXYPngParamsRank = "infraclass"
	GetTaxonPlacesIdZoomXYPngParamsRankInfrahybrid   GetTaxonPlacesIdZoomXYPngParamsRank = "infrahybrid"
	GetTaxonPlacesIdZoomXYPngParamsRankInfraorder    GetTaxonPlacesIdZoomXYPngParamsRank = "infraorder"
	GetTaxonPlacesIdZoomXYPngParamsRankKingdom       GetTaxonPlacesIdZoomXYPngParamsRank = "kingdom"
	GetTaxonPlacesIdZoomXYPngParamsRankOrder         GetTaxonPlacesIdZoomXYPngParamsRank = "order"
	GetTaxonPlacesIdZoomXYPngParamsRankParvorder     GetTaxonPlacesIdZoomXYPngParamsRank = "parvorder"
	GetTaxonPlacesIdZoomXYPngParamsRankPhylum        GetTaxonPlacesIdZoomXYPngParamsRank = "phylum"
	GetTaxonPlacesIdZoomXYPngParamsRankSection       GetTaxonPlacesIdZoomXYPngParamsRank = "section"
	GetTaxonPlacesIdZoomXYPngParamsRankSpecies       GetTaxonPlacesIdZoomXYPngParamsRank = "species"
	GetTaxonPlacesIdZoomXYPngParamsRankSubclass      GetTaxonPlacesIdZoomXYPngParamsRank = "subclass"
	GetTaxonPlacesIdZoomXYPngParamsRankSubfamily     GetTaxonPlacesIdZoomXYPngParamsRank = "subfamily"
	GetTaxonPlacesIdZoomXYPngParamsRankSubgenus      GetTaxonPlacesIdZoomXYPngParamsRank = "subgenus"
	GetTaxonPlacesIdZoomXYPngParamsRankSuborder      GetTaxonPlacesIdZoomXYPngParamsRank = "suborder"
	GetTaxonPlacesIdZoomXYPngParamsRankSubphylum     GetTaxonPlacesIdZoomXYPngParamsRank = "subphylum"
	GetTaxonPlacesIdZoomXYPngParamsRankSubsection    GetTaxonPlacesIdZoomXYPngParamsRank = "subsection"
	GetTaxonPlacesIdZoomXYPngParamsRankSubspecies    GetTaxonPlacesIdZoomXYPngParamsRank = "subspecies"
	GetTaxonPlacesIdZoomXYPngParamsRankSubterclass   GetTaxonPlacesIdZoomXYPngParamsRank = "subterclass"
	GetTaxonPlacesIdZoomXYPngParamsRankSubtribe      GetTaxonPlacesIdZoomXYPngParamsRank = "subtribe"
	GetTaxonPlacesIdZoomXYPngParamsRankSuperclass    GetTaxonPlacesIdZoomXYPngParamsRank = "superclass"
	GetTaxonPlacesIdZoomXYPngParamsRankSuperfamily   GetTaxonPlacesIdZoomXYPngParamsRank = "superfamily"
	GetTaxonPlacesIdZoomXYPngParamsRankSuperorder    GetTaxonPlacesIdZoomXYPngParamsRank = "superorder"
	GetTaxonPlacesIdZoomXYPngParamsRankSupertribe    GetTaxonPlacesIdZoomXYPngParamsRank = "supertribe"
	GetTaxonPlacesIdZoomXYPngParamsRankTribe         GetTaxonPlacesIdZoomXYPngParamsRank = "tribe"
	GetTaxonPlacesIdZoomXYPngParamsRankVariety       GetTaxonPlacesIdZoomXYPngParamsRank = "variety"
	GetTaxonPlacesIdZoomXYPngParamsRankZoosection    GetTaxonPlacesIdZoomXYPngParamsRank = "zoosection"
	GetTaxonPlacesIdZoomXYPngParamsRankZoosubsection GetTaxonPlacesIdZoomXYPngParamsRank = "zoosubsection"
)

// Defines values for GetTaxonPlacesIdZoomXYPngParamsSoundLicense.
const (
	GetTaxonPlacesIdZoomXYPngParamsSoundLicenseCc0      GetTaxonPlacesIdZoomXYPngParamsSoundLicense = "cc0"
	GetTaxonPlacesIdZoomXYPngParamsSoundLicenseCcBy     GetTaxonPlacesIdZoomXYPngParamsSoundLicense = "cc-by"
	GetTaxonPlacesIdZoomXYPngParamsSoundLicenseCcByNc   GetTaxonPlacesIdZoomXYPngParamsSoundLicense = "cc-by-nc"
	GetTaxonPlacesIdZoomXYPngParamsSoundLicenseCcByNcNd GetTaxonPlacesIdZoomXYPngParamsSoundLicense = "cc-by-nc-nd"
	GetTaxonPlacesIdZoomXYPngParamsSoundLicenseCcByNcSa GetTaxonPlacesIdZoomXYPngParamsSoundLicense = "cc-by-nc-sa"
	GetTaxonPlacesIdZoomXYPngParamsSoundLicenseCcByNd   GetTaxonPlacesIdZoomXYPngParamsSoundLicense = "cc-by-nd"
	GetTaxonPlacesIdZoomXYPngParamsSoundLicenseCcBySa   GetTaxonPlacesIdZoomXYPngParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetTaxonPlacesIdZoomXYPngParamsCsi.
const (
	GetTaxonPlacesIdZoomXYPngParamsCsiCR GetTaxonPlacesIdZoomXYPngParamsCsi = "CR"
	GetTaxonPlacesIdZoomXYPngParamsCsiEN GetTaxonPlacesIdZoomXYPngParamsCsi = "EN"
	GetTaxonPlacesIdZoomXYPngParamsCsiEW GetTaxonPlacesIdZoomXYPngParamsCsi = "EW"
	GetTaxonPlacesIdZoomXYPngParamsCsiEX GetTaxonPlacesIdZoomXYPngParamsCsi = "EX"
	GetTaxonPlacesIdZoomXYPngParamsCsiLC GetTaxonPlacesIdZoomXYPngParamsCsi = "LC"
	GetTaxonPlacesIdZoomXYPngParamsCsiNT GetTaxonPlacesIdZoomXYPngParamsCsi = "NT"
	GetTaxonPlacesIdZoomXYPngParamsCsiVU GetTaxonPlacesIdZoomXYPngParamsCsi = "VU"
)

// Defines values for GetTaxonPlacesIdZoomXYPngParamsGeoprivacy.
const (
	GetTaxonPlacesIdZoomXYPngParamsGeoprivacyObscured        GetTaxonPlacesIdZoomXYPngParamsGeoprivacy = "obscured"
	GetTaxonPlacesIdZoomXYPngParamsGeoprivacyObscuredPrivate GetTaxonPlacesIdZoomXYPngParamsGeoprivacy = "obscured_private"
	GetTaxonPlacesIdZoomXYPngParamsGeoprivacyOpen            GetTaxonPlacesIdZoomXYPngParamsGeoprivacy = "open"
	GetTaxonPlacesIdZoomXYPngParamsGeoprivacyPrivate         GetTaxonPlacesIdZoomXYPngParamsGeoprivacy = "private"
)

// Defines values for GetTaxonPlacesIdZoomXYPngParamsTaxonGeoprivacy.
const (
	GetTaxonPlacesIdZoomXYPngParamsTaxonGeoprivacyObscured        GetTaxonPlacesIdZoomXYPngParamsTaxonGeoprivacy = "obscured"
	GetTaxonPlacesIdZoomXYPngParamsTaxonGeoprivacyObscuredPrivate GetTaxonPlacesIdZoomXYPngParamsTaxonGeoprivacy = "obscured_private"
	GetTaxonPlacesIdZoomXYPngParamsTaxonGeoprivacyOpen            GetTaxonPlacesIdZoomXYPngParamsTaxonGeoprivacy = "open"
	GetTaxonPlacesIdZoomXYPngParamsTaxonGeoprivacyPrivate         GetTaxonPlacesIdZoomXYPngParamsTaxonGeoprivacy = "private"
)

// Defines values for GetTaxonPlacesIdZoomXYPngParamsObscuration.
const (
	GetTaxonPlacesIdZoomXYPngParamsObscurationNone     GetTaxonPlacesIdZoomXYPngParamsObscuration = "none"
	GetTaxonPlacesIdZoomXYPngParamsObscurationObscured GetTaxonPlacesIdZoomXYPngParamsObscuration = "obscured"
	GetTaxonPlacesIdZoomXYPngParamsObscurationPrivate  GetTaxonPlacesIdZoomXYPngParamsObscuration = "private"
)

// Defines values for GetTaxonPlacesIdZoomXYPngParamsHrank.
const (
	GetTaxonPlacesIdZoomXYPngParamsHrankClass         GetTaxonPlacesIdZoomXYPngParamsHrank = "class"
	GetTaxonPlacesIdZoomXYPngParamsHrankComplex       GetTaxonPlacesIdZoomXYPngParamsHrank = "complex"
	GetTaxonPlacesIdZoomXYPngParamsHrankEpifamily     GetTaxonPlacesIdZoomXYPngParamsHrank = "epifamily"
	GetTaxonPlacesIdZoomXYPngParamsHrankFamily        GetTaxonPlacesIdZoomXYPngParamsHrank = "family"
	GetTaxonPlacesIdZoomXYPngParamsHrankForm          GetTaxonPlacesIdZoomXYPngParamsHrank = "form"
	GetTaxonPlacesIdZoomXYPngParamsHrankGenus         GetTaxonPlacesIdZoomXYPngParamsHrank = "genus"
	GetTaxonPlacesIdZoomXYPngParamsHrankGenushybrid   GetTaxonPlacesIdZoomXYPngParamsHrank = "genushybrid"
	GetTaxonPlacesIdZoomXYPngParamsHrankHybrid        GetTaxonPlacesIdZoomXYPngParamsHrank = "hybrid"
	GetTaxonPlacesIdZoomXYPngParamsHrankInfraclass    GetTaxonPlacesIdZoomXYPngParamsHrank = "infraclass"
	GetTaxonPlacesIdZoomXYPngParamsHrankInfrahybrid   GetTaxonPlacesIdZoomXYPngParamsHrank = "infrahybrid"
	GetTaxonPlacesIdZoomXYPngParamsHrankInfraorder    GetTaxonPlacesIdZoomXYPngParamsHrank = "infraorder"
	GetTaxonPlacesIdZoomXYPngParamsHrankKingdom       GetTaxonPlacesIdZoomXYPngParamsHrank = "kingdom"
	GetTaxonPlacesIdZoomXYPngParamsHrankOrder         GetTaxonPlacesIdZoomXYPngParamsHrank = "order"
	GetTaxonPlacesIdZoomXYPngParamsHrankParvorder     GetTaxonPlacesIdZoomXYPngParamsHrank = "parvorder"
	GetTaxonPlacesIdZoomXYPngParamsHrankPhylum        GetTaxonPlacesIdZoomXYPngParamsHrank = "phylum"
	GetTaxonPlacesIdZoomXYPngParamsHrankSection       GetTaxonPlacesIdZoomXYPngParamsHrank = "section"
	GetTaxonPlacesIdZoomXYPngParamsHrankSpecies       GetTaxonPlacesIdZoomXYPngParamsHrank = "species"
	GetTaxonPlacesIdZoomXYPngParamsHrankSubclass      GetTaxonPlacesIdZoomXYPngParamsHrank = "subclass"
	GetTaxonPlacesIdZoomXYPngParamsHrankSubfamily     GetTaxonPlacesIdZoomXYPngParamsHrank = "subfamily"
	GetTaxonPlacesIdZoomXYPngParamsHrankSubgenus      GetTaxonPlacesIdZoomXYPngParamsHrank = "subgenus"
	GetTaxonPlacesIdZoomXYPngParamsHrankSuborder      GetTaxonPlacesIdZoomXYPngParamsHrank = "suborder"
	GetTaxonPlacesIdZoomXYPngParamsHrankSubphylum     GetTaxonPlacesIdZoomXYPngParamsHrank = "subphylum"
	GetTaxonPlacesIdZoomXYPngParamsHrankSubsection    GetTaxonPlacesIdZoomXYPngParamsHrank = "subsection"
	GetTaxonPlacesIdZoomXYPngParamsHrankSubspecies    GetTaxonPlacesIdZoomXYPngParamsHrank = "subspecies"
	GetTaxonPlacesIdZoomXYPngParamsHrankSubterclass   GetTaxonPlacesIdZoomXYPngParamsHrank = "subterclass"
	GetTaxonPlacesIdZoomXYPngParamsHrankSubtribe      GetTaxonPlacesIdZoomXYPngParamsHrank = "subtribe"
	GetTaxonPlacesIdZoomXYPngParamsHrankSuperclass    GetTaxonPlacesIdZoomXYPngParamsHrank = "superclass"
	GetTaxonPlacesIdZoomXYPngParamsHrankSuperfamily   GetTaxonPlacesIdZoomXYPngParamsHrank = "superfamily"
	GetTaxonPlacesIdZoomXYPngParamsHrankSuperorder    GetTaxonPlacesIdZoomXYPngParamsHrank = "superorder"
	GetTaxonPlacesIdZoomXYPngParamsHrankSupertribe    GetTaxonPlacesIdZoomXYPngParamsHrank = "supertribe"
	GetTaxonPlacesIdZoomXYPngParamsHrankTribe         GetTaxonPlacesIdZoomXYPngParamsHrank = "tribe"
	GetTaxonPlacesIdZoomXYPngParamsHrankVariety       GetTaxonPlacesIdZoomXYPngParamsHrank = "variety"
	GetTaxonPlacesIdZoomXYPngParamsHrankZoosection    GetTaxonPlacesIdZoomXYPngParamsHrank = "zoosection"
	GetTaxonPlacesIdZoomXYPngParamsHrankZoosubsection GetTaxonPlacesIdZoomXYPngParamsHrank = "zoosubsection"
)

// Defines values for GetTaxonPlacesIdZoomXYPngParamsLrank.
const (
	GetTaxonPlacesIdZoomXYPngParamsLrankClass         GetTaxonPlacesIdZoomXYPngParamsLrank = "class"
	GetTaxonPlacesIdZoomXYPngParamsLrankComplex       GetTaxonPlacesIdZoomXYPngParamsLrank = "complex"
	GetTaxonPlacesIdZoomXYPngParamsLrankEpifamily     GetTaxonPlacesIdZoomXYPngParamsLrank = "epifamily"
	GetTaxonPlacesIdZoomXYPngParamsLrankFamily        GetTaxonPlacesIdZoomXYPngParamsLrank = "family"
	GetTaxonPlacesIdZoomXYPngParamsLrankForm          GetTaxonPlacesIdZoomXYPngParamsLrank = "form"
	GetTaxonPlacesIdZoomXYPngParamsLrankGenus         GetTaxonPlacesIdZoomXYPngParamsLrank = "genus"
	GetTaxonPlacesIdZoomXYPngParamsLrankGenushybrid   GetTaxonPlacesIdZoomXYPngParamsLrank = "genushybrid"
	GetTaxonPlacesIdZoomXYPngParamsLrankHybrid        GetTaxonPlacesIdZoomXYPngParamsLrank = "hybrid"
	GetTaxonPlacesIdZoomXYPngParamsLrankInfraclass    GetTaxonPlacesIdZoomXYPngParamsLrank = "infraclass"
	GetTaxonPlacesIdZoomXYPngParamsLrankInfrahybrid   GetTaxonPlacesIdZoomXYPngParamsLrank = "infrahybrid"
	GetTaxonPlacesIdZoomXYPngParamsLrankInfraorder    GetTaxonPlacesIdZoomXYPngParamsLrank = "infraorder"
	GetTaxonPlacesIdZoomXYPngParamsLrankKingdom       GetTaxonPlacesIdZoomXYPngParamsLrank = "kingdom"
	GetTaxonPlacesIdZoomXYPngParamsLrankOrder         GetTaxonPlacesIdZoomXYPngParamsLrank = "order"
	GetTaxonPlacesIdZoomXYPngParamsLrankParvorder     GetTaxonPlacesIdZoomXYPngParamsLrank = "parvorder"
	GetTaxonPlacesIdZoomXYPngParamsLrankPhylum        GetTaxonPlacesIdZoomXYPngParamsLrank = "phylum"
	GetTaxonPlacesIdZoomXYPngParamsLrankSection       GetTaxonPlacesIdZoomXYPngParamsLrank = "section"
	GetTaxonPlacesIdZoomXYPngParamsLrankSpecies       GetTaxonPlacesIdZoomXYPngParamsLrank = "species"
	GetTaxonPlacesIdZoomXYPngParamsLrankSubclass      GetTaxonPlacesIdZoomXYPngParamsLrank = "subclass"
	GetTaxonPlacesIdZoomXYPngParamsLrankSubfamily     GetTaxonPlacesIdZoomXYPngParamsLrank = "subfamily"
	GetTaxonPlacesIdZoomXYPngParamsLrankSubgenus      GetTaxonPlacesIdZoomXYPngParamsLrank = "subgenus"
	GetTaxonPlacesIdZoomXYPngParamsLrankSuborder      GetTaxonPlacesIdZoomXYPngParamsLrank = "suborder"
	GetTaxonPlacesIdZoomXYPngParamsLrankSubphylum     GetTaxonPlacesIdZoomXYPngParamsLrank = "subphylum"
	GetTaxonPlacesIdZoomXYPngParamsLrankSubsection    GetTaxonPlacesIdZoomXYPngParamsLrank = "subsection"
	GetTaxonPlacesIdZoomXYPngParamsLrankSubspecies    GetTaxonPlacesIdZoomXYPngParamsLrank = "subspecies"
	GetTaxonPlacesIdZoomXYPngParamsLrankSubterclass   GetTaxonPlacesIdZoomXYPngParamsLrank = "subterclass"
	GetTaxonPlacesIdZoomXYPngParamsLrankSubtribe      GetTaxonPlacesIdZoomXYPngParamsLrank = "subtribe"
	GetTaxonPlacesIdZoomXYPngParamsLrankSuperclass    GetTaxonPlacesIdZoomXYPngParamsLrank = "superclass"
	GetTaxonPlacesIdZoomXYPngParamsLrankSuperfamily   GetTaxonPlacesIdZoomXYPngParamsLrank = "superfamily"
	GetTaxonPlacesIdZoomXYPngParamsLrankSuperorder    GetTaxonPlacesIdZoomXYPngParamsLrank = "superorder"
	GetTaxonPlacesIdZoomXYPngParamsLrankSupertribe    GetTaxonPlacesIdZoomXYPngParamsLrank = "supertribe"
	GetTaxonPlacesIdZoomXYPngParamsLrankTribe         GetTaxonPlacesIdZoomXYPngParamsLrank = "tribe"
	GetTaxonPlacesIdZoomXYPngParamsLrankVariety       GetTaxonPlacesIdZoomXYPngParamsLrank = "variety"
	GetTaxonPlacesIdZoomXYPngParamsLrankZoosection    GetTaxonPlacesIdZoomXYPngParamsLrank = "zoosection"
	GetTaxonPlacesIdZoomXYPngParamsLrankZoosubsection GetTaxonPlacesIdZoomXYPngParamsLrank = "zoosubsection"
)

// Defines values for GetTaxonPlacesIdZoomXYPngParamsIconicTaxa.
const (
	GetTaxonPlacesIdZoomXYPngParamsIconicTaxaActinopterygii GetTaxonPlacesIdZoomXYPngParamsIconicTaxa = "Actinopterygii"
	GetTaxonPlacesIdZoomXYPngParamsIconicTaxaAmphibia       GetTaxonPlacesIdZoomXYPngParamsIconicTaxa = "Amphibia"
	GetTaxonPlacesIdZoomXYPngParamsIconicTaxaAnimalia       GetTaxonPlacesIdZoomXYPngParamsIconicTaxa = "Animalia"
	GetTaxonPlacesIdZoomXYPngParamsIconicTaxaArachnida      GetTaxonPlacesIdZoomXYPngParamsIconicTaxa = "Arachnida"
	GetTaxonPlacesIdZoomXYPngParamsIconicTaxaAves           GetTaxonPlacesIdZoomXYPngParamsIconicTaxa = "Aves"
	GetTaxonPlacesIdZoomXYPngParamsIconicTaxaChromista      GetTaxonPlacesIdZoomXYPngParamsIconicTaxa = "Chromista"
	GetTaxonPlacesIdZoomXYPngParamsIconicTaxaFungi          GetTaxonPlacesIdZoomXYPngParamsIconicTaxa = "Fungi"
	GetTaxonPlacesIdZoomXYPngParamsIconicTaxaInsecta        GetTaxonPlacesIdZoomXYPngParamsIconicTaxa = "Insecta"
	GetTaxonPlacesIdZoomXYPngParamsIconicTaxaMammalia       GetTaxonPlacesIdZoomXYPngParamsIconicTaxa = "Mammalia"
	GetTaxonPlacesIdZoomXYPngParamsIconicTaxaMollusca       GetTaxonPlacesIdZoomXYPngParamsIconicTaxa = "Mollusca"
	GetTaxonPlacesIdZoomXYPngParamsIconicTaxaPlantae        GetTaxonPlacesIdZoomXYPngParamsIconicTaxa = "Plantae"
	GetTaxonPlacesIdZoomXYPngParamsIconicTaxaProtozoa       GetTaxonPlacesIdZoomXYPngParamsIconicTaxa = "Protozoa"
	GetTaxonPlacesIdZoomXYPngParamsIconicTaxaReptilia       GetTaxonPlacesIdZoomXYPngParamsIconicTaxa = "Reptilia"
	GetTaxonPlacesIdZoomXYPngParamsIconicTaxaUnknown        GetTaxonPlacesIdZoomXYPngParamsIconicTaxa = "unknown"
)

// Defines values for GetTaxonPlacesIdZoomXYPngParamsIdentifications.
const (
	GetTaxonPlacesIdZoomXYPngParamsIdentificationsMostAgree    GetTaxonPlacesIdZoomXYPngParamsIdentifications = "most_agree"
	GetTaxonPlacesIdZoomXYPngParamsIdentificationsMostDisagree GetTaxonPlacesIdZoomXYPngParamsIdentifications = "most_disagree"
	GetTaxonPlacesIdZoomXYPngParamsIdentificationsSomeAgree    GetTaxonPlacesIdZoomXYPngParamsIdentifications = "some_agree"
)

// Defines values for GetTaxonPlacesIdZoomXYPngParamsSearchOn.
const (
	GetTaxonPlacesIdZoomXYPngParamsSearchOnDescription        GetTaxonPlacesIdZoomXYPngParamsSearchOn = "description"
	GetTaxonPlacesIdZoomXYPngParamsSearchOnNames              GetTaxonPlacesIdZoomXYPngParamsSearchOn = "names"
	GetTaxonPlacesIdZoomXYPngParamsSearchOnPlace              GetTaxonPlacesIdZoomXYPngParamsSearchOn = "place"
	GetTaxonPlacesIdZoomXYPngParamsSearchOnTags               GetTaxonPlacesIdZoomXYPngParamsSearchOn = "tags"
	GetTaxonPlacesIdZoomXYPngParamsSearchOnTaxonPageObsPhotos GetTaxonPlacesIdZoomXYPngParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetTaxonPlacesIdZoomXYPngParamsQualityGrade.
const (
	GetTaxonPlacesIdZoomXYPngParamsQualityGradeCasual   GetTaxonPlacesIdZoomXYPngParamsQualityGrade = "casual"
	GetTaxonPlacesIdZoomXYPngParamsQualityGradeNeedsId  GetTaxonPlacesIdZoomXYPngParamsQualityGrade = "needs_id"
	GetTaxonPlacesIdZoomXYPngParamsQualityGradeResearch GetTaxonPlacesIdZoomXYPngParamsQualityGrade = "research"
)

// Defines values for GetTaxonPlacesIdZoomXYPngParamsOrder.
const (
	GetTaxonPlacesIdZoomXYPngParamsOrderAsc  GetTaxonPlacesIdZoomXYPngParamsOrder = "asc"
	GetTaxonPlacesIdZoomXYPngParamsOrderDesc GetTaxonPlacesIdZoomXYPngParamsOrder = "desc"
)

// Defines values for GetTaxonPlacesIdZoomXYPngParamsOrderBy.
const (
	GetTaxonPlacesIdZoomXYPngParamsOrderByCreatedAt    GetTaxonPlacesIdZoomXYPngParamsOrderBy = "created_at"
	GetTaxonPlacesIdZoomXYPngParamsOrderByGeoScore     GetTaxonPlacesIdZoomXYPngParamsOrderBy = "geo_score"
	GetTaxonPlacesIdZoomXYPngParamsOrderById           GetTaxonPlacesIdZoomXYPngParamsOrderBy = "id"
	GetTaxonPlacesIdZoomXYPngParamsOrderByObservedOn   GetTaxonPlacesIdZoomXYPngParamsOrderBy = "observed_on"
	GetTaxonPlacesIdZoomXYPngParamsOrderByRandom       GetTaxonPlacesIdZoomXYPngParamsOrderBy = "random"
	GetTaxonPlacesIdZoomXYPngParamsOrderBySpeciesGuess GetTaxonPlacesIdZoomXYPngParamsOrderBy = "species_guess"
	GetTaxonPlacesIdZoomXYPngParamsOrderByUpdatedAt    GetTaxonPlacesIdZoomXYPngParamsOrderBy = "updated_at"
	GetTaxonPlacesIdZoomXYPngParamsOrderByVotes        GetTaxonPlacesIdZoomXYPngParamsOrderBy = "votes"
)

// Defines values for GetTaxonRangesIdZoomXYPngParamsTileSize.
const (
	N256 GetTaxonRangesIdZoomXYPngParamsTileSize = 256
	N512 GetTaxonRangesIdZoomXYPngParamsTileSize = 512
)

// Defines values for GetTaxonRangesIdZoomXYPngParamsLicense.
const (
	GetTaxonRangesIdZoomXYPngParamsLicenseCc0      GetTaxonRangesIdZoomXYPngParamsLicense = "cc0"
	GetTaxonRangesIdZoomXYPngParamsLicenseCcBy     GetTaxonRangesIdZoomXYPngParamsLicense = "cc-by"
	GetTaxonRangesIdZoomXYPngParamsLicenseCcByNc   GetTaxonRangesIdZoomXYPngParamsLicense = "cc-by-nc"
	GetTaxonRangesIdZoomXYPngParamsLicenseCcByNcNd GetTaxonRangesIdZoomXYPngParamsLicense = "cc-by-nc-nd"
	GetTaxonRangesIdZoomXYPngParamsLicenseCcByNcSa GetTaxonRangesIdZoomXYPngParamsLicense = "cc-by-nc-sa"
	GetTaxonRangesIdZoomXYPngParamsLicenseCcByNd   GetTaxonRangesIdZoomXYPngParamsLicense = "cc-by-nd"
	GetTaxonRangesIdZoomXYPngParamsLicenseCcBySa   GetTaxonRangesIdZoomXYPngParamsLicense = "cc-by-sa"
)

// Defines values for GetTaxonRangesIdZoomXYPngParamsPhotoLicense.
const (
	GetTaxonRangesIdZoomXYPngParamsPhotoLicenseCc0      GetTaxonRangesIdZoomXYPngParamsPhotoLicense = "cc0"
	GetTaxonRangesIdZoomXYPngParamsPhotoLicenseCcBy     GetTaxonRangesIdZoomXYPngParamsPhotoLicense = "cc-by"
	GetTaxonRangesIdZoomXYPngParamsPhotoLicenseCcByNc   GetTaxonRangesIdZoomXYPngParamsPhotoLicense = "cc-by-nc"
	GetTaxonRangesIdZoomXYPngParamsPhotoLicenseCcByNcNd GetTaxonRangesIdZoomXYPngParamsPhotoLicense = "cc-by-nc-nd"
	GetTaxonRangesIdZoomXYPngParamsPhotoLicenseCcByNcSa GetTaxonRangesIdZoomXYPngParamsPhotoLicense = "cc-by-nc-sa"
	GetTaxonRangesIdZoomXYPngParamsPhotoLicenseCcByNd   GetTaxonRangesIdZoomXYPngParamsPhotoLicense = "cc-by-nd"
	GetTaxonRangesIdZoomXYPngParamsPhotoLicenseCcBySa   GetTaxonRangesIdZoomXYPngParamsPhotoLicense = "cc-by-sa"
)

// Defines values for GetTaxonRangesIdZoomXYPngParamsRank.
const (
	GetTaxonRangesIdZoomXYPngParamsRankClass         GetTaxonRangesIdZoomXYPngParamsRank = "class"
	GetTaxonRangesIdZoomXYPngParamsRankComplex       GetTaxonRangesIdZoomXYPngParamsRank = "complex"
	GetTaxonRangesIdZoomXYPngParamsRankEpifamily     GetTaxonRangesIdZoomXYPngParamsRank = "epifamily"
	GetTaxonRangesIdZoomXYPngParamsRankFamily        GetTaxonRangesIdZoomXYPngParamsRank = "family"
	GetTaxonRangesIdZoomXYPngParamsRankForm          GetTaxonRangesIdZoomXYPngParamsRank = "form"
	GetTaxonRangesIdZoomXYPngParamsRankGenus         GetTaxonRangesIdZoomXYPngParamsRank = "genus"
	GetTaxonRangesIdZoomXYPngParamsRankGenushybrid   GetTaxonRangesIdZoomXYPngParamsRank = "genushybrid"
	GetTaxonRangesIdZoomXYPngParamsRankHybrid        GetTaxonRangesIdZoomXYPngParamsRank = "hybrid"
	GetTaxonRangesIdZoomXYPngParamsRankInfraclass    GetTaxonRangesIdZoomXYPngParamsRank = "infraclass"
	GetTaxonRangesIdZoomXYPngParamsRankInfrahybrid   GetTaxonRangesIdZoomXYPngParamsRank = "infrahybrid"
	GetTaxonRangesIdZoomXYPngParamsRankInfraorder    GetTaxonRangesIdZoomXYPngParamsRank = "infraorder"
	GetTaxonRangesIdZoomXYPngParamsRankKingdom       GetTaxonRangesIdZoomXYPngParamsRank = "kingdom"
	GetTaxonRangesIdZoomXYPngParamsRankOrder         GetTaxonRangesIdZoomXYPngParamsRank = "order"
	GetTaxonRangesIdZoomXYPngParamsRankParvorder     GetTaxonRangesIdZoomXYPngParamsRank = "parvorder"
	GetTaxonRangesIdZoomXYPngParamsRankPhylum        GetTaxonRangesIdZoomXYPngParamsRank = "phylum"
	GetTaxonRangesIdZoomXYPngParamsRankSection       GetTaxonRangesIdZoomXYPngParamsRank = "section"
	GetTaxonRangesIdZoomXYPngParamsRankSpecies       GetTaxonRangesIdZoomXYPngParamsRank = "species"
	GetTaxonRangesIdZoomXYPngParamsRankSubclass      GetTaxonRangesIdZoomXYPngParamsRank = "subclass"
	GetTaxonRangesIdZoomXYPngParamsRankSubfamily     GetTaxonRangesIdZoomXYPngParamsRank = "subfamily"
	GetTaxonRangesIdZoomXYPngParamsRankSubgenus      GetTaxonRangesIdZoomXYPngParamsRank = "subgenus"
	GetTaxonRangesIdZoomXYPngParamsRankSuborder      GetTaxonRangesIdZoomXYPngParamsRank = "suborder"
	GetTaxonRangesIdZoomXYPngParamsRankSubphylum     GetTaxonRangesIdZoomXYPngParamsRank = "subphylum"
	GetTaxonRangesIdZoomXYPngParamsRankSubsection    GetTaxonRangesIdZoomXYPngParamsRank = "subsection"
	GetTaxonRangesIdZoomXYPngParamsRankSubspecies    GetTaxonRangesIdZoomXYPngParamsRank = "subspecies"
	GetTaxonRangesIdZoomXYPngParamsRankSubterclass   GetTaxonRangesIdZoomXYPngParamsRank = "subterclass"
	GetTaxonRangesIdZoomXYPngParamsRankSubtribe      GetTaxonRangesIdZoomXYPngParamsRank = "subtribe"
	GetTaxonRangesIdZoomXYPngParamsRankSuperclass    GetTaxonRangesIdZoomXYPngParamsRank = "superclass"
	GetTaxonRangesIdZoomXYPngParamsRankSuperfamily   GetTaxonRangesIdZoomXYPngParamsRank = "superfamily"
	GetTaxonRangesIdZoomXYPngParamsRankSuperorder    GetTaxonRangesIdZoomXYPngParamsRank = "superorder"
	GetTaxonRangesIdZoomXYPngParamsRankSupertribe    GetTaxonRangesIdZoomXYPngParamsRank = "supertribe"
	GetTaxonRangesIdZoomXYPngParamsRankTribe         GetTaxonRangesIdZoomXYPngParamsRank = "tribe"
	GetTaxonRangesIdZoomXYPngParamsRankVariety       GetTaxonRangesIdZoomXYPngParamsRank = "variety"
	GetTaxonRangesIdZoomXYPngParamsRankZoosection    GetTaxonRangesIdZoomXYPngParamsRank = "zoosection"
	GetTaxonRangesIdZoomXYPngParamsRankZoosubsection GetTaxonRangesIdZoomXYPngParamsRank = "zoosubsection"
)

// Defines values for GetTaxonRangesIdZoomXYPngParamsSoundLicense.
const (
	Cc0      GetTaxonRangesIdZoomXYPngParamsSoundLicense = "cc0"
	CcBy     GetTaxonRangesIdZoomXYPngParamsSoundLicense = "cc-by"
	CcByNc   GetTaxonRangesIdZoomXYPngParamsSoundLicense = "cc-by-nc"
	CcByNcNd GetTaxonRangesIdZoomXYPngParamsSoundLicense = "cc-by-nc-nd"
	CcByNcSa GetTaxonRangesIdZoomXYPngParamsSoundLicense = "cc-by-nc-sa"
	CcByNd   GetTaxonRangesIdZoomXYPngParamsSoundLicense = "cc-by-nd"
	CcBySa   GetTaxonRangesIdZoomXYPngParamsSoundLicense = "cc-by-sa"
)

// Defines values for GetTaxonRangesIdZoomXYPngParamsCsi.
const (
	CR GetTaxonRangesIdZoomXYPngParamsCsi = "CR"
	EN GetTaxonRangesIdZoomXYPngParamsCsi = "EN"
	EW GetTaxonRangesIdZoomXYPngParamsCsi = "EW"
	EX GetTaxonRangesIdZoomXYPngParamsCsi = "EX"
	LC GetTaxonRangesIdZoomXYPngParamsCsi = "LC"
	NT GetTaxonRangesIdZoomXYPngParamsCsi = "NT"
	VU GetTaxonRangesIdZoomXYPngParamsCsi = "VU"
)

// Defines values for GetTaxonRangesIdZoomXYPngParamsGeoprivacy.
const (
	GetTaxonRangesIdZoomXYPngParamsGeoprivacyObscured        GetTaxonRangesIdZoomXYPngParamsGeoprivacy = "obscured"
	GetTaxonRangesIdZoomXYPngParamsGeoprivacyObscuredPrivate GetTaxonRangesIdZoomXYPngParamsGeoprivacy = "obscured_private"
	GetTaxonRangesIdZoomXYPngParamsGeoprivacyOpen            GetTaxonRangesIdZoomXYPngParamsGeoprivacy = "open"
	GetTaxonRangesIdZoomXYPngParamsGeoprivacyPrivate         GetTaxonRangesIdZoomXYPngParamsGeoprivacy = "private"
)

// Defines values for GetTaxonRangesIdZoomXYPngParamsTaxonGeoprivacy.
const (
	GetTaxonRangesIdZoomXYPngParamsTaxonGeoprivacyObscured        GetTaxonRangesIdZoomXYPngParamsTaxonGeoprivacy = "obscured"
	GetTaxonRangesIdZoomXYPngParamsTaxonGeoprivacyObscuredPrivate GetTaxonRangesIdZoomXYPngParamsTaxonGeoprivacy = "obscured_private"
	GetTaxonRangesIdZoomXYPngParamsTaxonGeoprivacyOpen            GetTaxonRangesIdZoomXYPngParamsTaxonGeoprivacy = "open"
	GetTaxonRangesIdZoomXYPngParamsTaxonGeoprivacyPrivate         GetTaxonRangesIdZoomXYPngParamsTaxonGeoprivacy = "private"
)

// Defines values for GetTaxonRangesIdZoomXYPngParamsObscuration.
const (
	GetTaxonRangesIdZoomXYPngParamsObscurationNone     GetTaxonRangesIdZoomXYPngParamsObscuration = "none"
	GetTaxonRangesIdZoomXYPngParamsObscurationObscured GetTaxonRangesIdZoomXYPngParamsObscuration = "obscured"
	GetTaxonRangesIdZoomXYPngParamsObscurationPrivate  GetTaxonRangesIdZoomXYPngParamsObscuration = "private"
)

// Defines values for GetTaxonRangesIdZoomXYPngParamsHrank.
const (
	GetTaxonRangesIdZoomXYPngParamsHrankClass         GetTaxonRangesIdZoomXYPngParamsHrank = "class"
	GetTaxonRangesIdZoomXYPngParamsHrankComplex       GetTaxonRangesIdZoomXYPngParamsHrank = "complex"
	GetTaxonRangesIdZoomXYPngParamsHrankEpifamily     GetTaxonRangesIdZoomXYPngParamsHrank = "epifamily"
	GetTaxonRangesIdZoomXYPngParamsHrankFamily        GetTaxonRangesIdZoomXYPngParamsHrank = "family"
	GetTaxonRangesIdZoomXYPngParamsHrankForm          GetTaxonRangesIdZoomXYPngParamsHrank = "form"
	GetTaxonRangesIdZoomXYPngParamsHrankGenus         GetTaxonRangesIdZoomXYPngParamsHrank = "genus"
	GetTaxonRangesIdZoomXYPngParamsHrankGenushybrid   GetTaxonRangesIdZoomXYPngParamsHrank = "genushybrid"
	GetTaxonRangesIdZoomXYPngParamsHrankHybrid        GetTaxonRangesIdZoomXYPngParamsHrank = "hybrid"
	GetTaxonRangesIdZoomXYPngParamsHrankInfraclass    GetTaxonRangesIdZoomXYPngParamsHrank = "infraclass"
	GetTaxonRangesIdZoomXYPngParamsHrankInfrahybrid   GetTaxonRangesIdZoomXYPngParamsHrank = "infrahybrid"
	GetTaxonRangesIdZoomXYPngParamsHrankInfraorder    GetTaxonRangesIdZoomXYPngParamsHrank = "infraorder"
	GetTaxonRangesIdZoomXYPngParamsHrankKingdom       GetTaxonRangesIdZoomXYPngParamsHrank = "kingdom"
	GetTaxonRangesIdZoomXYPngParamsHrankOrder         GetTaxonRangesIdZoomXYPngParamsHrank = "order"
	GetTaxonRangesIdZoomXYPngParamsHrankParvorder     GetTaxonRangesIdZoomXYPngParamsHrank = "parvorder"
	GetTaxonRangesIdZoomXYPngParamsHrankPhylum        GetTaxonRangesIdZoomXYPngParamsHrank = "phylum"
	GetTaxonRangesIdZoomXYPngParamsHrankSection       GetTaxonRangesIdZoomXYPngParamsHrank = "section"
	GetTaxonRangesIdZoomXYPngParamsHrankSpecies       GetTaxonRangesIdZoomXYPngParamsHrank = "species"
	GetTaxonRangesIdZoomXYPngParamsHrankSubclass      GetTaxonRangesIdZoomXYPngParamsHrank = "subclass"
	GetTaxonRangesIdZoomXYPngParamsHrankSubfamily     GetTaxonRangesIdZoomXYPngParamsHrank = "subfamily"
	GetTaxonRangesIdZoomXYPngParamsHrankSubgenus      GetTaxonRangesIdZoomXYPngParamsHrank = "subgenus"
	GetTaxonRangesIdZoomXYPngParamsHrankSuborder      GetTaxonRangesIdZoomXYPngParamsHrank = "suborder"
	GetTaxonRangesIdZoomXYPngParamsHrankSubphylum     GetTaxonRangesIdZoomXYPngParamsHrank = "subphylum"
	GetTaxonRangesIdZoomXYPngParamsHrankSubsection    GetTaxonRangesIdZoomXYPngParamsHrank = "subsection"
	GetTaxonRangesIdZoomXYPngParamsHrankSubspecies    GetTaxonRangesIdZoomXYPngParamsHrank = "subspecies"
	GetTaxonRangesIdZoomXYPngParamsHrankSubterclass   GetTaxonRangesIdZoomXYPngParamsHrank = "subterclass"
	GetTaxonRangesIdZoomXYPngParamsHrankSubtribe      GetTaxonRangesIdZoomXYPngParamsHrank = "subtribe"
	GetTaxonRangesIdZoomXYPngParamsHrankSuperclass    GetTaxonRangesIdZoomXYPngParamsHrank = "superclass"
	GetTaxonRangesIdZoomXYPngParamsHrankSuperfamily   GetTaxonRangesIdZoomXYPngParamsHrank = "superfamily"
	GetTaxonRangesIdZoomXYPngParamsHrankSuperorder    GetTaxonRangesIdZoomXYPngParamsHrank = "superorder"
	GetTaxonRangesIdZoomXYPngParamsHrankSupertribe    GetTaxonRangesIdZoomXYPngParamsHrank = "supertribe"
	GetTaxonRangesIdZoomXYPngParamsHrankTribe         GetTaxonRangesIdZoomXYPngParamsHrank = "tribe"
	GetTaxonRangesIdZoomXYPngParamsHrankVariety       GetTaxonRangesIdZoomXYPngParamsHrank = "variety"
	GetTaxonRangesIdZoomXYPngParamsHrankZoosection    GetTaxonRangesIdZoomXYPngParamsHrank = "zoosection"
	GetTaxonRangesIdZoomXYPngParamsHrankZoosubsection GetTaxonRangesIdZoomXYPngParamsHrank = "zoosubsection"
)

// Defines values for GetTaxonRangesIdZoomXYPngParamsLrank.
const (
	GetTaxonRangesIdZoomXYPngParamsLrankClass         GetTaxonRangesIdZoomXYPngParamsLrank = "class"
	GetTaxonRangesIdZoomXYPngParamsLrankComplex       GetTaxonRangesIdZoomXYPngParamsLrank = "complex"
	GetTaxonRangesIdZoomXYPngParamsLrankEpifamily     GetTaxonRangesIdZoomXYPngParamsLrank = "epifamily"
	GetTaxonRangesIdZoomXYPngParamsLrankFamily        GetTaxonRangesIdZoomXYPngParamsLrank = "family"
	GetTaxonRangesIdZoomXYPngParamsLrankForm          GetTaxonRangesIdZoomXYPngParamsLrank = "form"
	GetTaxonRangesIdZoomXYPngParamsLrankGenus         GetTaxonRangesIdZoomXYPngParamsLrank = "genus"
	GetTaxonRangesIdZoomXYPngParamsLrankGenushybrid   GetTaxonRangesIdZoomXYPngParamsLrank = "genushybrid"
	GetTaxonRangesIdZoomXYPngParamsLrankHybrid        GetTaxonRangesIdZoomXYPngParamsLrank = "hybrid"
	GetTaxonRangesIdZoomXYPngParamsLrankInfraclass    GetTaxonRangesIdZoomXYPngParamsLrank = "infraclass"
	GetTaxonRangesIdZoomXYPngParamsLrankInfrahybrid   GetTaxonRangesIdZoomXYPngParamsLrank = "infrahybrid"
	GetTaxonRangesIdZoomXYPngParamsLrankInfraorder    GetTaxonRangesIdZoomXYPngParamsLrank = "infraorder"
	GetTaxonRangesIdZoomXYPngParamsLrankKingdom       GetTaxonRangesIdZoomXYPngParamsLrank = "kingdom"
	GetTaxonRangesIdZoomXYPngParamsLrankOrder         GetTaxonRangesIdZoomXYPngParamsLrank = "order"
	GetTaxonRangesIdZoomXYPngParamsLrankParvorder     GetTaxonRangesIdZoomXYPngParamsLrank = "parvorder"
	GetTaxonRangesIdZoomXYPngParamsLrankPhylum        GetTaxonRangesIdZoomXYPngParamsLrank = "phylum"
	GetTaxonRangesIdZoomXYPngParamsLrankSection       GetTaxonRangesIdZoomXYPngParamsLrank = "section"
	GetTaxonRangesIdZoomXYPngParamsLrankSpecies       GetTaxonRangesIdZoomXYPngParamsLrank = "species"
	GetTaxonRangesIdZoomXYPngParamsLrankSubclass      GetTaxonRangesIdZoomXYPngParamsLrank = "subclass"
	GetTaxonRangesIdZoomXYPngParamsLrankSubfamily     GetTaxonRangesIdZoomXYPngParamsLrank = "subfamily"
	GetTaxonRangesIdZoomXYPngParamsLrankSubgenus      GetTaxonRangesIdZoomXYPngParamsLrank = "subgenus"
	GetTaxonRangesIdZoomXYPngParamsLrankSuborder      GetTaxonRangesIdZoomXYPngParamsLrank = "suborder"
	GetTaxonRangesIdZoomXYPngParamsLrankSubphylum     GetTaxonRangesIdZoomXYPngParamsLrank = "subphylum"
	GetTaxonRangesIdZoomXYPngParamsLrankSubsection    GetTaxonRangesIdZoomXYPngParamsLrank = "subsection"
	GetTaxonRangesIdZoomXYPngParamsLrankSubspecies    GetTaxonRangesIdZoomXYPngParamsLrank = "subspecies"
	GetTaxonRangesIdZoomXYPngParamsLrankSubterclass   GetTaxonRangesIdZoomXYPngParamsLrank = "subterclass"
	GetTaxonRangesIdZoomXYPngParamsLrankSubtribe      GetTaxonRangesIdZoomXYPngParamsLrank = "subtribe"
	GetTaxonRangesIdZoomXYPngParamsLrankSuperclass    GetTaxonRangesIdZoomXYPngParamsLrank = "superclass"
	GetTaxonRangesIdZoomXYPngParamsLrankSuperfamily   GetTaxonRangesIdZoomXYPngParamsLrank = "superfamily"
	GetTaxonRangesIdZoomXYPngParamsLrankSuperorder    GetTaxonRangesIdZoomXYPngParamsLrank = "superorder"
	GetTaxonRangesIdZoomXYPngParamsLrankSupertribe    GetTaxonRangesIdZoomXYPngParamsLrank = "supertribe"
	GetTaxonRangesIdZoomXYPngParamsLrankTribe         GetTaxonRangesIdZoomXYPngParamsLrank = "tribe"
	GetTaxonRangesIdZoomXYPngParamsLrankVariety       GetTaxonRangesIdZoomXYPngParamsLrank = "variety"
	GetTaxonRangesIdZoomXYPngParamsLrankZoosection    GetTaxonRangesIdZoomXYPngParamsLrank = "zoosection"
	GetTaxonRangesIdZoomXYPngParamsLrankZoosubsection GetTaxonRangesIdZoomXYPngParamsLrank = "zoosubsection"
)

// Defines values for GetTaxonRangesIdZoomXYPngParamsIconicTaxa.
const (
	Actinopterygii GetTaxonRangesIdZoomXYPngParamsIconicTaxa = "Actinopterygii"
	Amphibia       GetTaxonRangesIdZoomXYPngParamsIconicTaxa = "Amphibia"
	Animalia       GetTaxonRangesIdZoomXYPngParamsIconicTaxa = "Animalia"
	Arachnida      GetTaxonRangesIdZoomXYPngParamsIconicTaxa = "Arachnida"
	Aves           GetTaxonRangesIdZoomXYPngParamsIconicTaxa = "Aves"
	Chromista      GetTaxonRangesIdZoomXYPngParamsIconicTaxa = "Chromista"
	Fungi          GetTaxonRangesIdZoomXYPngParamsIconicTaxa = "Fungi"
	Insecta        GetTaxonRangesIdZoomXYPngParamsIconicTaxa = "Insecta"
	Mammalia       GetTaxonRangesIdZoomXYPngParamsIconicTaxa = "Mammalia"
	Mollusca       GetTaxonRangesIdZoomXYPngParamsIconicTaxa = "Mollusca"
	Plantae        GetTaxonRangesIdZoomXYPngParamsIconicTaxa = "Plantae"
	Protozoa       GetTaxonRangesIdZoomXYPngParamsIconicTaxa = "Protozoa"
	Reptilia       GetTaxonRangesIdZoomXYPngParamsIconicTaxa = "Reptilia"
	Unknown        GetTaxonRangesIdZoomXYPngParamsIconicTaxa = "unknown"
)

// Defines values for GetTaxonRangesIdZoomXYPngParamsIdentifications.
const (
	MostAgree    GetTaxonRangesIdZoomXYPngParamsIdentifications = "most_agree"
	MostDisagree GetTaxonRangesIdZoomXYPngParamsIdentifications = "most_disagree"
	SomeAgree    GetTaxonRangesIdZoomXYPngParamsIdentifications = "some_agree"
)

// Defines values for GetTaxonRangesIdZoomXYPngParamsSearchOn.
const (
	GetTaxonRangesIdZoomXYPngParamsSearchOnDescription        GetTaxonRangesIdZoomXYPngParamsSearchOn = "description"
	GetTaxonRangesIdZoomXYPngParamsSearchOnNames              GetTaxonRangesIdZoomXYPngParamsSearchOn = "names"
	GetTaxonRangesIdZoomXYPngParamsSearchOnPlace              GetTaxonRangesIdZoomXYPngParamsSearchOn = "place"
	GetTaxonRangesIdZoomXYPngParamsSearchOnTags               GetTaxonRangesIdZoomXYPngParamsSearchOn = "tags"
	GetTaxonRangesIdZoomXYPngParamsSearchOnTaxonPageObsPhotos GetTaxonRangesIdZoomXYPngParamsSearchOn = "taxon_page_obs_photos"
)

// Defines values for GetTaxonRangesIdZoomXYPngParamsQualityGrade.
const (
	GetTaxonRangesIdZoomXYPngParamsQualityGradeCasual   GetTaxonRangesIdZoomXYPngParamsQualityGrade = "casual"
	GetTaxonRangesIdZoomXYPngParamsQualityGradeNeedsId  GetTaxonRangesIdZoomXYPngParamsQualityGrade = "needs_id"
	GetTaxonRangesIdZoomXYPngParamsQualityGradeResearch GetTaxonRangesIdZoomXYPngParamsQualityGrade = "research"
)

// Defines values for GetTaxonRangesIdZoomXYPngParamsOrder.
const (
	GetTaxonRangesIdZoomXYPngParamsOrderAsc  GetTaxonRangesIdZoomXYPngParamsOrder = "asc"
	GetTaxonRangesIdZoomXYPngParamsOrderDesc GetTaxonRangesIdZoomXYPngParamsOrder = "desc"
)

// Defines values for GetTaxonRangesIdZoomXYPngParamsOrderBy.
const (
	CreatedAt    GetTaxonRangesIdZoomXYPngParamsOrderBy = "created_at"
	GeoScore     GetTaxonRangesIdZoomXYPngParamsOrderBy = "geo_score"
	Id           GetTaxonRangesIdZoomXYPngParamsOrderBy = "id"
	ObservedOn   GetTaxonRangesIdZoomXYPngParamsOrderBy = "observed_on"
	Random       GetTaxonRangesIdZoomXYPngParamsOrderBy = "random"
	SpeciesGuess GetTaxonRangesIdZoomXYPngParamsOrderBy = "species_guess"
	UpdatedAt    GetTaxonRangesIdZoomXYPngParamsOrderBy = "updated_at"
	Votes        GetTaxonRangesIdZoomXYPngParamsOrderBy = "votes"
)

// Annotation defines model for Annotation.
type Annotation struct {
	ConcatenatedAttrVal   *string            `json:"concatenated_attr_val,omitempty"`
	ControlledAttribute   *ControlledTerm    `json:"controlled_attribute"`
	ControlledAttributeId *int               `json:"controlled_attribute_id,omitempty"`
	ControlledValue       *ControlledTerm    `json:"controlled_value"`
	ControlledValueId     *int               `json:"controlled_value_id,omitempty"`
	User                  *User              `json:"user"`
	UserId                *int               `json:"user_id,omitempty"`
	Uuid                  openapi_types.UUID `json:"uuid"`
	VoteScore             *int               `json:"vote_score,omitempty"`
	Votes                 *[]Vote            `json:"votes,omitempty"`
}

// AnnotationsCreate defines model for AnnotationsCreate.
type AnnotationsCreate struct {
	ControlledAttributeId int                `json:"controlled_attribute_id"`
	ControlledValueId     int                `json:"controlled_value_id"`
	ResourceId            openapi_types.UUID `json:"resource_id"`
	ResourceType          string             `json:"resource_type"`
}

// Announcement defines model for Announcement.
type Announcement struct {
	Body        *string    `json:"body,omitempty"`
	Clients     *[]string  `json:"clients,omitempty"`
	Dismissible *bool      `json:"dismissible,omitempty"`
	End         *time.Time `json:"end,omitempty"`
	Id          int        `json:"id"`
	Locales     *[]string  `json:"locales,omitempty"`
	Placement   *string    `json:"placement,omitempty"`
	Start       *time.Time `json:"start,omitempty"`
}

// AuthorizedApplication defines model for AuthorizedApplication.
type AuthorizedApplication struct {
	Application struct {
		Id   int     `json:"id"`
		Name *string `json:"name,omitempty"`

		// Official Whether this application is controlled by iNaturalist itself
		Official *bool `json:"official,omitempty"`
	} `json:"application"`
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Scopes List of scopes granted to this application. `login` provides access to information required for logging into a third-party service like user ID, email address, profile pic, etc. `write` allows the application to post content to iNat as the user; `account_delete` allows the application to delete the user's iNat account.
	Scopes *[]AuthorizedApplicationScopes `json:"scopes,omitempty"`
}

// AuthorizedApplicationScopes defines model for AuthorizedApplication.Scopes.
type AuthorizedApplicationScopes string

// Comment defines model for Comment.
type Comment struct {
	Body             *string      `json:"body,omitempty"`
	CreatedAt        *time.Time   `json:"created_at,omitempty"`
	CreatedAtDetails *DateDetails `json:"created_at_details"`
	CreatedAtUtc     *time.Time   `json:"created_at_utc,omitempty"`
	Flags            *[]Flag      `json:"flags,omitempty"`
	Hidden           *bool        `json:"hidden,omitempty"`
	Html             *string      `json:"html,omitempty"`

	// Id Unique auto-increment integer identifier.
	Id               *int               `json:"id,omitempty"`
	ModeratorActions *[]ModeratorAction `json:"moderator_actions,omitempty"`
	ParentId         *int               `json:"parent_id"`
	ParentType       *string            `json:"parent_type"`
	UpdatedAt        *time.Time         `json:"updated_at,omitempty"`
	UpdatedAtDetails *time.Time         `json:"updated_at_details,omitempty"`
	User             *User              `json:"user"`
	UserId           *int               `json:"user_id"`
	Uuid             openapi_types.UUID `json:"uuid"`
}

// CommentsCreate defines model for CommentsCreate.
type CommentsCreate struct {
	Comment struct {
		Body string `json:"body"`

		// ParentId UUID of record being commented on
		ParentId openapi_types.UUID `json:"parent_id"`

		// ParentType Type of record being commented on
		ParentType CommentsCreateCommentParentType `json:"parent_type"`
	} `json:"comment"`
	Fields interface{} `json:"fields,omitempty"`
}

// CommentsCreateCommentParentType Type of record being commented on
type CommentsCreateCommentParentType string

// CommentsUpdate defines model for CommentsUpdate.
type CommentsUpdate struct {
	Comment struct {
		Body string `json:"body"`
	} `json:"comment"`
	Fields interface{} `json:"fields,omitempty"`
}

// CommonAncestor  Common ancestor taxon of some of the top results weighted by combined score.
//
//	If present, it generally has a much higher chance of being accurate (if not
//	precise), often by as much as 30-40 percentage points.
type CommonAncestor struct {
	// Score  Common ancestor scores are not directly comparable to the combined_score
	//     of results. Generally they are similar, factoring in both vision and spatial
	//     similarity, but are derived from a subset of the top results resulting in
	//     a value different than combined_score. Usually the common ancestor score
	//     will be above 70 as taxa need to have a high confidence in order to be
	//     considered a likely common ancestor.
	//
	Score *float32 `json:"score,omitempty"`
	Taxon *Taxon   `json:"taxon"`
}

// ConservationStatus defines model for ConservationStatus.
type ConservationStatus struct {
	Authority      *string `json:"authority"`
	Description    *string `json:"description"`
	Geoprivacy     *string `json:"geoprivacy"`
	Id             int     `json:"id"`
	Iucn           *int    `json:"iucn,omitempty"`
	IucnStatus     *string `json:"iucn_status,omitempty"`
	IucnStatusCode *string `json:"iucn_status_code,omitempty"`
	Place          *Place  `json:"place"`
	PlaceId        *int    `json:"place_id"`
	SourceId       *int    `json:"source_id"`
	Status         *string `json:"status,omitempty"`
	StatusName     *string `json:"status_name,omitempty"`
	TaxonId        *int    `json:"taxon_id,omitempty"`
	Url            *string `json:"url"`
	UserId         *int    `json:"user_id"`
}

// ControlledTerm defines model for ControlledTerm.
type ControlledTerm struct {
	Blocking         *bool  `json:"blocking,omitempty"`
	ExceptedTaxonIds *[]int `json:"excepted_taxon_ids,omitempty"`

	// Id Unique auto-increment integer identifier.
	Id      int     `json:"id"`
	IsValue *bool   `json:"is_value,omitempty"`
	Label   *string `json:"label,omitempty"`
	Labels  *[]struct {
		Definition       *string `json:"definition,omitempty"`
		Id               *int    `json:"id,omitempty"`
		Label            *string `json:"label,omitempty"`
		Locale           *string `json:"locale,omitempty"`
		ValidWithinClade *int    `json:"valid_within_clade"`
	} `json:"labels,omitempty"`
	Multivalued      *bool               `json:"multivalued,omitempty"`
	OntologyUri      *string             `json:"ontology_uri,omitempty"`
	TaxonIds         *[]int              `json:"taxon_ids,omitempty"`
	Uri              *string             `json:"uri,omitempty"`
	Uuid             *openapi_types.UUID `json:"uuid"`
	ValidWithinClade *int                `json:"valid_within_clade"`
	Values           *[]ControlledTerm   `json:"values,omitempty"`
}

// DateDetails defines model for DateDetails.
type DateDetails struct {
	Date  string `json:"date"`
	Day   int    `json:"day"`
	Hour  int    `json:"hour"`
	Month int    `json:"month"`
	Week  int    `json:"week"`
	Year  int    `json:"year"`
}

// Error defines model for Error.
type Error struct {
	Errors *[]struct {
		ErrorCode *string `json:"errorCode,omitempty"`
		From      *string `json:"from"`
		Message   *string `json:"message,omitempty"`
		Stack     *string `json:"stack"`
	} `json:"errors,omitempty"`

	// Status Unique auto-increment integer identifier.
	Status *string `json:"status,omitempty"`
}

// Flag defines model for Flag.
type Flag struct {
	Comment          *string    `json:"comment"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	CreatedAtUtc     *time.Time `json:"created_at_utc"`
	Flag             *string    `json:"flag,omitempty"`
	FlaggableContent *string    `json:"flaggable_content"`
	FlaggableId      *int       `json:"flaggable_id"`
	FlaggableType    *string    `json:"flaggable_type"`
	FlaggableUserId  *int       `json:"flaggable_user_id"`

	// Id Unique auto-increment integer identifier.
	Id           int                 `json:"id"`
	Resolved     *bool               `json:"resolved,omitempty"`
	ResolvedAt   *time.Time          `json:"resolved_at"`
	ResolverId   *int                `json:"resolver_id"`
	UpdatedAt    *time.Time          `json:"updated_at"`
	UpdatedAtUtc *time.Time          `json:"updated_at_utc"`
	User         *User               `json:"user"`
	UserId       *int                `json:"user_id,omitempty"`
	Uuid         *openapi_types.UUID `json:"uuid"`
}

// FlagsCreate defines model for FlagsCreate.
type FlagsCreate struct {
	Fields interface{} `json:"fields,omitempty"`
	Flag   *struct {
		Flag          *string `json:"flag,omitempty"`
		FlaggableId   *int    `json:"flaggable_id,omitempty"`
		FlaggableType *string `json:"flaggable_type,omitempty"`
	} `json:"flag,omitempty"`
	FlagExplanation *string `json:"flag_explanation"`
}

// FlagsUpdate defines model for FlagsUpdate.
type FlagsUpdate struct {
	Fields interface{} `json:"fields,omitempty"`
	Flag   *struct {
		Resolved *bool `json:"resolved,omitempty"`
	} `json:"flag,omitempty"`
}

// Identification defines model for Identification.
type Identification struct {
	Body             *string      `json:"body"`
	Category         *string      `json:"category"`
	CreatedAt        *time.Time   `json:"created_at,omitempty"`
	CreatedAtDetails *DateDetails `json:"created_at_details"`
	Current          *bool        `json:"current,omitempty"`
	Disagreement     *bool        `json:"disagreement"`
	Flags            *[]Flag      `json:"flags,omitempty"`
	Hidden           *bool        `json:"hidden,omitempty"`

	// Id Unique auto-increment integer identifier.
	Id                         int                `json:"id"`
	ModeratorActions           *[]ModeratorAction `json:"moderator_actions,omitempty"`
	ObservationId              *int               `json:"observation_id,omitempty"`
	OwnObservation             *bool              `json:"own_observation,omitempty"`
	PreviousObservationTaxon   *Taxon             `json:"previous_observation_taxon"`
	PreviousObservationTaxonId *int               `json:"previous_observation_taxon_id"`
	Spam                       *bool              `json:"spam,omitempty"`
	Taxon                      *Taxon             `json:"taxon"`
	TaxonChange                *struct {
		Id   int    `json:"id"`
		Type string `json:"type"`
	} `json:"taxon_change"`
	TaxonChangeId   *int                `json:"taxon_change_id"`
	TaxonChangeType *string             `json:"taxon_change_type"`
	TaxonId         *int                `json:"taxon_id,omitempty"`
	UpdatedAt       *time.Time          `json:"updated_at,omitempty"`
	User            *User               `json:"user"`
	UserId          *int                `json:"user_id,omitempty"`
	Uuid            *openapi_types.UUID `json:"uuid,omitempty"`
	Vision          *bool               `json:"vision,omitempty"`
}

// IdentificationsCreate defines model for IdentificationsCreate.
type IdentificationsCreate struct {
	Fields         interface{} `json:"fields,omitempty"`
	Identification struct {
		Body          *string            `json:"body,omitempty"`
		Disagreement  *bool              `json:"disagreement,omitempty"`
		ObservationId openapi_types.UUID `json:"observation_id"`
		TaxonId       int                `json:"taxon_id"`
		Vision        *bool              `json:"vision,omitempty"`
	} `json:"identification"`
}

// IdentificationsUpdate defines model for IdentificationsUpdate.
type IdentificationsUpdate struct {
	Fields         interface{} `json:"fields,omitempty"`
	Identification struct {
		Body *string `json:"body,omitempty"`

		// Current Setting to false means the identification is withdrawn
		Current *bool `json:"current,omitempty"`
	} `json:"identification"`
}

// List defines model for List.
type List struct {
	// Id Unique auto-increment integer identifier.
	Id    int     `json:"id"`
	Title *string `json:"title"`
}

// ListedTaxon defines model for ListedTaxon.
type ListedTaxon struct {
	CommentsCount *int    `json:"comments_count,omitempty"`
	CreatedAt     *string `json:"created_at,omitempty"`
	Description   *string `json:"description"`

	// EstablishmentMeans How this taxon became established in this place
	EstablishmentMeans *ListedTaxonEstablishmentMeans `json:"establishment_means,omitempty"`

	// EstablishmentMeansDescription Localized description of the establishment means
	EstablishmentMeansDescription *string `json:"establishment_means_description,omitempty"`

	// EstablishmentMeansLabel Localized version of the establishment means
	EstablishmentMeansLabel *string `json:"establishment_means_label,omitempty"`

	// Id Unique auto-increment integer identifier.
	Id int `json:"id"`

	// ManuallyAdded Whether this taxon was added to this list by a person or not
	ManuallyAdded     *bool `json:"manually_added"`
	ObservationsCount *int  `json:"observations_count,omitempty"`

	// OccurrenceStatusLevel Assessment of occurrence frequency in this place. 60 = present, 50 = common, 40 = uncommon, 30 = irregular, 20 = doubtful, 10 = absent
	OccurrenceStatusLevel *int   `json:"occurrence_status_level"`
	Place                 *Place `json:"place"`

	// PrimaryListing Whether or not this is the primary listing for this taxon in this place (places can have multiple checklists that contain the same taxa)
	PrimaryListing *bool   `json:"primary_listing,omitempty"`
	UpdatedAt      *string `json:"updated_at,omitempty"`
}

// ListedTaxonEstablishmentMeans How this taxon became established in this place
type ListedTaxonEstablishmentMeans string

// Message defines model for Message.
type Message struct {
	Body          *string    `json:"body,omitempty"`
	CommentsCount *int       `json:"comments_count,omitempty"`
	CreatedAt     *time.Time `json:"created_at,omitempty"`
	FromUser      *User      `json:"from_user"`

	// Id Unique auto-increment integer identifier.
	Id        int        `json:"id"`
	ReadAt    *time.Time `json:"read_at,omitempty"`
	Subject   *string    `json:"subject,omitempty"`
	ThreadId  *int       `json:"thread_id,omitempty"`
	ToUser    *User      `json:"to_user"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	UserId    *int       `json:"user_id,omitempty"`
}

// MessagesCreate defines model for MessagesCreate.
type MessagesCreate struct {
	Fields  interface{} `json:"fields,omitempty"`
	Message *struct {
		Body     string  `json:"body"`
		Subject  *string `json:"subject,omitempty"`
		ThreadId *int    `json:"thread_id,omitempty"`
		ToUserId *int    `json:"to_user_id,omitempty"`
	} `json:"message,omitempty"`
}

// ModeratorAction defines model for ModeratorAction.
type ModeratorAction struct {
	Action           *string      `json:"action,omitempty"`
	CreatedAt        *string      `json:"created_at,omitempty"`
	CreatedAtDetails *DateDetails `json:"created_at_details"`

	// Id Unique auto-increment integer identifier.
	Id      int     `json:"id"`
	Private *bool   `json:"private,omitempty"`
	Reason  *string `json:"reason,omitempty"`
	User    *User   `json:"user"`
}

// Observation defines model for Observation.
type Observation struct {
	Annotations *[]Annotation `json:"annotations,omitempty"`
	Application *struct {
		Icon *string `json:"icon"`
		Id   int     `json:"id"`
		Name *string `json:"name,omitempty"`
		Url  *string `json:"url,omitempty"`
	} `json:"application,omitempty"`
	CachedVotesTotal       *int          `json:"cached_votes_total,omitempty"`
	Captive                *bool         `json:"captive,omitempty"`
	Comments               *[]Comment    `json:"comments,omitempty"`
	CommentsCount          *int          `json:"comments_count,omitempty"`
	CommunityTaxon         *Taxon        `json:"community_taxon"`
	CommunityTaxonId       *int          `json:"community_taxon_id"`
	ContextGeoprivacy      *string       `json:"context_geoprivacy"`
	ContextTaxonGeoprivacy *string       `json:"context_taxon_geoprivacy"`
	ContextUserGeoprivacy  *string       `json:"context_user_geoprivacy"`
	CreatedAt              *string       `json:"created_at,omitempty"`
	CreatedAtDetails       *DateDetails  `json:"created_at_details"`
	CreatedTimeZone        *string       `json:"created_time_zone,omitempty"`
	Description            *string       `json:"description"`
	Faves                  *[]Vote       `json:"faves,omitempty"`
	FavesCount             *int          `json:"faves_count,omitempty"`
	Flags                  *[]Flag       `json:"flags,omitempty"`
	Geojson                *PointGeoJson `json:"geojson"`
	Geoprivacy             *string       `json:"geoprivacy"`

	// Id Unique auto-increment integer identifier.
	Id                          *int              `json:"id"`
	IdPlease                    *bool             `json:"id_please,omitempty"`
	IdentTaxonIds               *[]int            `json:"ident_taxon_ids,omitempty"`
	Identifications             *[]Identification `json:"identifications,omitempty"`
	IdentificationsCount        *int              `json:"identifications_count,omitempty"`
	IdentificationsMostAgree    *bool             `json:"identifications_most_agree,omitempty"`
	IdentificationsMostDisagree *bool             `json:"identifications_most_disagree,omitempty"`
	IdentificationsSomeAgree    *bool             `json:"identifications_some_agree,omitempty"`
	LicenseCode                 *string           `json:"license_code"`
	Location                    *string           `json:"location"`
	MapScale                    *int              `json:"map_scale"`
	Mappable                    *bool             `json:"mappable,omitempty"`
	NonOwnerIds                 *[]Identification `json:"non_owner_ids,omitempty"`
	NonTraditionalProjects      *[]struct {
		CurrentUserIsMember *bool    `json:"current_user_is_member,omitempty"`
		Project             *Project `json:"project"`
		ProjectUser         *struct {
			PrefersCuratorCoordinateAccessFor *string `json:"prefers_curator_coordinate_access_for,omitempty"`
			Role                              *string `json:"role,omitempty"`
		} `json:"projectUser,omitempty"`
	} `json:"non_traditional_projects,omitempty"`
	NumIdentificationAgreements    *int                     `json:"num_identification_agreements,omitempty"`
	NumIdentificationDisagreements *int                     `json:"num_identification_disagreements,omitempty"`
	OauthApplicationId             *int                     `json:"oauth_application_id"`
	Obscured                       *bool                    `json:"obscured,omitempty"`
	ObservationPhotos              *[]ObservationPhoto      `json:"observation_photos,omitempty"`
	ObservationSounds              *[]ObservationSound      `json:"observation_sounds,omitempty"`
	ObservedOn                     *string                  `json:"observed_on"`
	ObservedOnDetails              *DateDetails             `json:"observed_on_details"`
	ObservedOnString               *string                  `json:"observed_on_string"`
	ObservedTimeZone               *string                  `json:"observed_time_zone"`
	Ofvs                           *[]ObservationFieldValue `json:"ofvs,omitempty"`
	OutOfRange                     *bool                    `json:"out_of_range"`
	Outlinks                       *[]struct {
		Source *string `json:"source,omitempty"`
		Url    *string `json:"url,omitempty"`
	} `json:"outlinks,omitempty"`
	OwnersIdentificationFromVision *bool    `json:"owners_identification_from_vision"`
	Photos                         *[]Photo `json:"photos,omitempty"`
	PlaceGuess                     *string  `json:"place_guess"`
	PlaceIds                       *[]int   `json:"place_ids,omitempty"`
	PositionalAccuracy             *int     `json:"positional_accuracy"`
	Preferences                    *struct {
		AutoObscuration       *bool `json:"auto_obscuration,omitempty"`
		PrefersCommunityTaxon *bool `json:"prefers_community_taxon"`
	} `json:"preferences,omitempty"`
	PrivateGeojson             *PointGeoJson         `json:"private_geojson"`
	PrivateLocation            *string               `json:"private_location"`
	PrivatePlaceGuess          *string               `json:"private_place_guess"`
	ProjectIds                 *[]int                `json:"project_ids,omitempty"`
	ProjectIdsWithCuratorId    *[]int                `json:"project_ids_with_curator_id,omitempty"`
	ProjectIdsWithoutCuratorId *[]int                `json:"project_ids_without_curator_id,omitempty"`
	ProjectObservations        *[]ProjectObservation `json:"project_observations,omitempty"`
	PublicPositionalAccuracy   *int                  `json:"public_positional_accuracy"`
	QualityGrade               *string               `json:"quality_grade,omitempty"`
	QualityMetrics             *[]QualityMetric      `json:"quality_metrics,omitempty"`
	ReviewedBy                 *[]int                `json:"reviewed_by,omitempty"`
	SiteId                     *int                  `json:"site_id"`
	Sounds                     *[]Sound              `json:"sounds,omitempty"`
	Spam                       *bool                 `json:"spam,omitempty"`
	SpeciesGuess               *string               `json:"species_guess"`
	Tags                       *[]string             `json:"tags,omitempty"`
	Taxon                      *Taxon                `json:"taxon"`
	TaxonGeoprivacy            *string               `json:"taxon_geoprivacy"`
	TimeObservedAt             *string               `json:"time_observed_at"`
	TimeZoneOffset             *string               `json:"time_zone_offset,omitempty"`
	UpdatedAt                  *string               `json:"updated_at,omitempty"`
	Uri                        *string               `json:"uri,omitempty"`
	User                       *User                 `json:"user"`
	Uuid                       openapi_types.UUID    `json:"uuid"`

	// ViewerTrustedByObserver Observer trusts the authenticated user with access to hidden coordinates
	ViewerTrustedByObserver *bool   `json:"viewer_trusted_by_observer"`
	Votes                   *[]Vote `json:"votes,omitempty"`
}

// ObservationField defines model for ObservationField.
type ObservationField struct {
	AllowedValues           *string `json:"allowed_values"`
	Datatype                *string `json:"datatype,omitempty"`
	Description             *string `json:"description"`
	DescriptionAutocomplete *string `json:"description_autocomplete"`

	// Id Unique auto-increment integer identifier.
	Id               int                 `json:"id"`
	Name             *string             `json:"name,omitempty"`
	NameAutocomplete *string             `json:"name_autocomplete,omitempty"`
	UsersCount       *int                `json:"users_count"`
	Uuid             *openapi_types.UUID `json:"uuid,omitempty"`
	ValuesCount      *int                `json:"values_count"`
}

// ObservationFieldValue defines model for ObservationFieldValue.
type ObservationFieldValue struct {
	Datatype *string `json:"datatype,omitempty"`
	FieldId  *int    `json:"field_id,omitempty"`

	// Id Unique auto-increment integer identifier.
	Id               *int                `json:"id,omitempty"`
	Name             *string             `json:"name,omitempty"`
	NameCi           *string             `json:"name_ci,omitempty"`
	ObservationField *ObservationField   `json:"observation_field,omitempty"`
	Taxon            *Taxon              `json:"taxon"`
	TaxonId          *string             `json:"taxon_id,omitempty"`
	User             *User               `json:"user"`
	UserId           *int                `json:"user_id,omitempty"`
	Uuid             *openapi_types.UUID `json:"uuid,omitempty"`
	Value            *string             `json:"value,omitempty"`
	ValueCi          *string             `json:"value_ci,omitempty"`
}

// ObservationFieldValuesCreate defines model for ObservationFieldValuesCreate.
type ObservationFieldValuesCreate struct {
	Fields                interface{} `json:"fields,omitempty"`
	ObservationFieldValue *struct {
		ObservationFieldId *int                                                      `json:"observation_field_id,omitempty"`
		ObservationId      openapi_types.UUID                                        `json:"observation_id"`
		Value              *ObservationFieldValuesCreate_ObservationFieldValue_Value `json:"value,omitempty"`
	} `json:"observation_field_value,omitempty"`
}

// ObservationFieldValuesCreateObservationFieldValueValue0 defines model for .
type ObservationFieldValuesCreateObservationFieldValueValue0 = string

// ObservationFieldValuesCreateObservationFieldValueValue1 defines model for .
type ObservationFieldValuesCreateObservationFieldValueValue1 = float32

// ObservationFieldValuesCreate_ObservationFieldValue_Value defines model for ObservationFieldValuesCreate.ObservationFieldValue.Value.
type ObservationFieldValuesCreate_ObservationFieldValue_Value struct {
	union json.RawMessage
}

// ObservationPhoto defines model for ObservationPhoto.
type ObservationPhoto struct {
	// Id Unique auto-increment integer identifier.
	Id       int                 `json:"id"`
	Photo    *Photo              `json:"photo"`
	Position *int                `json:"position"`
	Uuid     *openapi_types.UUID `json:"uuid,omitempty"`
}

// ObservationPhotosCreate description inside of schema file
type ObservationPhotosCreate struct {
	Fields           interface{} `json:"fields,omitempty"`
	ObservationPhoto *struct {
		// ObservationId UUID for the existing observation
		ObservationId openapi_types.UUID `json:"observation_id"`

		// PhotoId Sequential ID for the existing photo
		PhotoId  *int `json:"photo_id,omitempty"`
		Position *int `json:"position,omitempty"`

		// Uuid New UUID for the photo, helps prevent duplication in poor network conditions
		Uuid *openapi_types.UUID `json:"uuid,omitempty"`
	} `json:"observation_photo,omitempty"`
}

// ObservationPhotosCreateMultipart defines model for ObservationPhotosCreateMultipart.
type ObservationPhotosCreateMultipart struct {
	Fields interface{}        `json:"fields,omitempty"`
	File   openapi_types.File `json:"file"`

	// ObservationPhotoObservationId UUID for the existing observation
	ObservationPhotoObservationId openapi_types.UUID `json:"observation_photo[observation_id]"`
	ObservationPhotoPosition      *int               `json:"observation_photo[position],omitempty"`

	// ObservationPhotoUuid New UUID for the photo, helps prevent duplication in poor network conditions
	ObservationPhotoUuid *openapi_types.UUID `json:"observation_photo[uuid],omitempty"`
}

// ObservationPhotosUpdate defines model for ObservationPhotosUpdate.
type ObservationPhotosUpdate struct {
	Fields           interface{} `json:"fields,omitempty"`
	ObservationPhoto *struct {
		ObservationId openapi_types.UUID `json:"observation_id"`
		Position      *int               `json:"position,omitempty"`
	} `json:"observation_photo,omitempty"`
}

// ObservationSound defines model for ObservationSound.
type ObservationSound struct {
	// Id Unique auto-increment integer identifier.
	Id       int                 `json:"id"`
	Position *int                `json:"position,omitempty"`
	Sound    *Sound              `json:"sound"`
	Uuid     *openapi_types.UUID `json:"uuid,omitempty"`
}

// ObservationSoundsCreate defines model for ObservationSoundsCreate.
type ObservationSoundsCreate struct {
	Fields           interface{} `json:"fields,omitempty"`
	ObservationSound *struct {
		ObservationId openapi_types.UUID `json:"observation_id"`
		SoundId       *int               `json:"sound_id,omitempty"`
	} `json:"observation_sound,omitempty"`
}

// ObservationSoundsCreateMultipart defines model for ObservationSoundsCreateMultipart.
type ObservationSoundsCreateMultipart struct {
	Fields                        interface{}        `json:"fields,omitempty"`
	File                          openapi_types.File `json:"file"`
	ObservationSoundObservationId openapi_types.UUID `json:"observation_sound[observation_id]"`
}

// ObservationSoundsUpdate defines model for ObservationSoundsUpdate.
type ObservationSoundsUpdate struct {
	Fields           interface{} `json:"fields,omitempty"`
	ObservationSound *struct {
		ObservationId openapi_types.UUID `json:"observation_id"`
	} `json:"observation_sound,omitempty"`
}

// ObservationsCreate defines model for ObservationsCreate.
type ObservationsCreate struct {
	Fields      interface{} `json:"fields,omitempty"`
	Observation *struct {
		CaptiveFlag                      *bool    `json:"captive_flag,omitempty"`
		CoordinateSystem                 *string  `json:"coordinate_system,omitempty"`
		Description                      *string  `json:"description,omitempty"`
		GeoX                             *float32 `json:"geo_x,omitempty"`
		GeoY                             *float32 `json:"geo_y,omitempty"`
		Geoprivacy                       *string  `json:"geoprivacy,omitempty"`
		Latitude                         *float32 `json:"latitude,omitempty"`
		License                          *string  `json:"license,omitempty"`
		LocationIsExact                  *bool    `json:"location_is_exact,omitempty"`
		Longitude                        *float32 `json:"longitude,omitempty"`
		MakeLicenseDefault               *bool    `json:"make_license_default,omitempty"`
		MakeLicensesSame                 *bool    `json:"make_licenses_same,omitempty"`
		MapScale                         *int     `json:"map_scale,omitempty"`
		ObservationFieldValuesAttributes *struct {
			ObservationFieldId int         `json:"observation_field_id"`
			Value              interface{} `json:"value"`
		} `json:"observation_field_values_attributes,omitempty"`
		ObservedOnString               *string  `json:"observed_on_string,omitempty"`
		OwnersIdentificationFromVision *bool    `json:"owners_identification_from_vision,omitempty"`
		PlaceGuess                     *string  `json:"place_guess,omitempty"`
		PositionalAccuracy             *float32 `json:"positional_accuracy,omitempty"`
		PositioningDevice              *string  `json:"positioning_device,omitempty"`
		PositioningMethod              *string  `json:"positioning_method,omitempty"`
		PrefersCommunityTaxon          *bool    `json:"prefers_community_taxon,omitempty"`
		ProjectId                      *int     `json:"project_id,omitempty"`
		SiteId                         *int     `json:"site_id,omitempty"`

		// SpeciesGuess The name of the organism observed. If the taxon ID is absent, iNat will try to choose a single taxon based on this string, but it may fail if there's some taxonomic amgiguity.
		SpeciesGuess *string             `json:"species_guess,omitempty"`
		TagList      *string             `json:"tag_list,omitempty"`
		TaxonId      *float32            `json:"taxon_id,omitempty"`
		TaxonName    *float32            `json:"taxon_name,omitempty"`
		TimeZone     *string             `json:"time_zone,omitempty"`
		Uuid         *openapi_types.UUID `json:"uuid,omitempty"`
	} `json:"observation,omitempty"`
}

// ObservationsUpdate defines model for ObservationsUpdate.
type ObservationsUpdate struct {
	Fields       interface{} `json:"fields,omitempty"`
	IgnorePhotos *bool       `json:"ignore_photos,omitempty"`
	Observation  *struct {
		CaptiveFlag                      *bool    `json:"captive_flag,omitempty"`
		CoordinateSystem                 *string  `json:"coordinate_system,omitempty"`
		Description                      *string  `json:"description"`
		GeoX                             *float32 `json:"geo_x"`
		GeoY                             *float32 `json:"geo_y"`
		Geoprivacy                       *string  `json:"geoprivacy,omitempty"`
		Latitude                         *float32 `json:"latitude"`
		License                          *string  `json:"license,omitempty"`
		LocationIsExact                  *bool    `json:"location_is_exact,omitempty"`
		Longitude                        *float32 `json:"longitude"`
		MakeLicenseDefault               *bool    `json:"make_license_default,omitempty"`
		MakeLicensesSame                 *bool    `json:"make_licenses_same,omitempty"`
		MapScale                         *int     `json:"map_scale,omitempty"`
		ObservationFieldValuesAttributes *struct {
			ObservationFieldId int         `json:"observation_field_id"`
			Value              interface{} `json:"value"`
		} `json:"observation_field_values_attributes,omitempty"`
		ObservedOnString               *string  `json:"observed_on_string"`
		OwnersIdentificationFromVision *bool    `json:"owners_identification_from_vision,omitempty"`
		PlaceGuess                     *string  `json:"place_guess"`
		PositionalAccuracy             *float32 `json:"positional_accuracy"`
		PositioningDevice              *string  `json:"positioning_device"`
		PositioningMethod              *string  `json:"positioning_method"`
		PrefersCommunityTaxon          *bool    `json:"prefers_community_taxon,omitempty"`
		ProjectId                      *int     `json:"project_id,omitempty"`
		SiteId                         *int     `json:"site_id,omitempty"`

		// SpeciesGuess The name of the organism observed. If the taxon ID is absent, iNat will try to choose a single taxon based on this string, but it may fail if there's some taxonomic amgiguity.
		SpeciesGuess *string             `json:"species_guess"`
		TagList      *string             `json:"tag_list"`
		TaxonId      *float32            `json:"taxon_id,omitempty"`
		TaxonName    *float32            `json:"taxon_name,omitempty"`
		TimeZone     *string             `json:"time_zone,omitempty"`
		Uuid         *openapi_types.UUID `json:"uuid,omitempty"`
	} `json:"observation,omitempty"`
}

// Photo defines model for Photo.
type Photo struct {
	Attribution     *string `json:"attribution,omitempty"`
	AttributionName *string `json:"attribution_name"`
	Flags           *[]Flag `json:"flags,omitempty"`
	Hidden          *bool   `json:"hidden,omitempty"`

	// Id Unique auto-increment integer identifier.
	Id                 int                `json:"id"`
	LargeUrl           *string            `json:"large_url"`
	LicenseCode        *string            `json:"license_code"`
	MediumUrl          *string            `json:"medium_url"`
	ModeratorActions   *[]ModeratorAction `json:"moderator_actions,omitempty"`
	NativePageUrl      *string            `json:"native_page_url"`
	NativePhotoId      *string            `json:"native_photo_id"`
	OriginalDimensions *struct {
		Height *int `json:"height"`
		Width  *int `json:"width"`
	} `json:"original_dimensions"`
	OriginalUrl *string `json:"original_url"`
	SmallUrl    *string `json:"small_url"`
	SquareUrl   *string `json:"square_url"`
	Type        *string `json:"type,omitempty"`
	Url         *string `json:"url"`
}

// PhotosCreate defines model for PhotosCreate.
type PhotosCreate struct {
	Fields interface{}         `json:"fields,omitempty"`
	File   openapi_types.File  `json:"file"`
	Uuid   *openapi_types.UUID `json:"uuid,omitempty"`
}

// Place defines model for Place.
type Place struct {
	AdminLevel              *int            `json:"admin_level"`
	AncestorPlaceIds        *[]int          `json:"ancestor_place_ids"`
	BboxArea                *float32        `json:"bbox_area"`
	BoundingBoxGeojson      *PolygonGeoJson `json:"bounding_box_geojson"`
	DisplayName             *string         `json:"display_name"`
	DisplayNameAutocomplete *string         `json:"display_name_autocomplete"`
	GeometryGeojson         *PolygonGeoJson `json:"geometry_geojson"`

	// Id Unique auto-increment integer identifier.
	Id                  int                 `json:"id"`
	Location            *string             `json:"location"`
	MatchedTerm         *string             `json:"matched_term"`
	Name                *string             `json:"name,omitempty"`
	ObservationsCount   *int                `json:"observations_count,omitempty"`
	PlaceType           *int                `json:"place_type"`
	PointGeojson        *PointGeoJson       `json:"point_geojson"`
	Slug                *string             `json:"slug"`
	UniversalSearchRank *int                `json:"universal_search_rank"`
	User                *User               `json:"user"`
	Uuid                *openapi_types.UUID `json:"uuid,omitempty"`
	WithoutCheckList    *bool               `json:"without_check_list"`
}

// PointGeoJson defines model for PointGeoJson.
type PointGeoJson struct {
	Coordinates []float32 `json:"coordinates"`
	Type        string    `json:"type"`
}

// PolygonGeoJson defines model for PolygonGeoJson.
type PolygonGeoJson struct {
	Coordinates PolygonGeoJson_Coordinates `json:"coordinates"`
	Type        string                     `json:"type"`
}

// PolygonGeoJsonCoordinates0 defines model for .
type PolygonGeoJsonCoordinates0 = [][][][]float32

// PolygonGeoJsonCoordinates1 defines model for .
type PolygonGeoJsonCoordinates1 = [][][]float32

// PolygonGeoJson_Coordinates defines model for PolygonGeoJson.Coordinates.
type PolygonGeoJson_Coordinates struct {
	union json.RawMessage
}

// PrivateUser defines model for PrivateUser.
type PrivateUser struct {
	ActivityCount              *int       `json:"activity_count,omitempty"`
	AnnotatedObservationsCount *int       `json:"annotated_observations_count,omitempty"`
	BlockedUserIds             *[]int     `json:"blocked_user_ids"`
	ConfirmationSentAt         *time.Time `json:"confirmation_sent_at"`
	ConfirmedAt                *time.Time `json:"confirmed_at"`
	CreatedAt                  *time.Time `json:"created_at,omitempty"`
	DataTransferConsent        *bool      `json:"data_transfer_consent"`
	Description                *string    `json:"description"`
	Email                      *string    `json:"email"`

	// FavedProjectIds Ordered list of IDs of projects the user has faved
	FavedProjectIds *[]float32 `json:"faved_project_ids,omitempty"`
	Icon            *string    `json:"icon"`
	IconUrl         *string    `json:"icon_url"`

	// Id Unique auto-increment integer identifier.
	Id                   int        `json:"id"`
	IdentificationsCount *int       `json:"identifications_count,omitempty"`
	JournalPostsCount    *int       `json:"journal_posts_count,omitempty"`
	LastActive           *time.Time `json:"last_active,omitempty"`
	Locale               *string    `json:"locale"`
	Login                *string    `json:"login,omitempty"`
	MonthlySupporter     *bool      `json:"monthly_supporter"`
	MutedUserIds         *[]int     `json:"muted_user_ids"`
	Name                 *string    `json:"name"`
	ObservationsCount    *int       `json:"observations_count,omitempty"`
	Orcid                *string    `json:"orcid"`
	PiConsent            *bool      `json:"pi_consent"`
	PlaceId              *int       `json:"place_id"`
	Preferences          *struct {
		// PrefersCommonNames Prefers to view common names
		PrefersCommonNames   *bool `json:"prefers_common_names,omitempty"`
		PrefersCommunityTaxa *bool `json:"prefers_community_taxa,omitempty"`

		// PrefersObservationFieldsBy Allows this kind of user to add observation field values to their observations
		PrefersObservationFieldsBy *string `json:"prefers_observation_fields_by,omitempty"`

		// PrefersProjectAdditionBy Allows this kind of user to add their observations to projects
		PrefersProjectAdditionBy *string `json:"prefers_project_addition_by,omitempty"`

		// PrefersScientificNameFirst Prefers to view scientific names before common names
		PrefersScientificNameFirst *bool `json:"prefers_scientific_name_first,omitempty"`
	} `json:"preferences,omitempty"`
	PreferredObservationFieldsBy                        *string              `json:"preferred_observation_fields_by"`
	PreferredObservationLicense                         *string              `json:"preferred_observation_license"`
	PreferredPhotoLicense                               *string              `json:"preferred_photo_license"`
	PreferredProjectAdditionBy                          *string              `json:"preferred_project_addition_by"`
	PreferredSoundLicense                               *string              `json:"preferred_sound_license"`
	PrefersAutomaticTaxonomicChanges                    *bool                `json:"prefers_automatic_taxonomic_changes"`
	PrefersCommentEmailNotification                     *bool                `json:"prefers_comment_email_notification"`
	PrefersCommonNames                                  *bool                `json:"prefers_common_names"`
	PrefersCommunityTaxa                                *bool                `json:"prefers_community_taxa"`
	PrefersIdentificationEmailNotification              *bool                `json:"prefers_identification_email_notification"`
	PrefersInfraspeciesIdentificationNotifications      *bool                `json:"prefers_infraspecies_identification_notifications"`
	PrefersMentionEmailNotification                     *bool                `json:"prefers_mention_email_notification"`
	PrefersMessageEmailNotification                     *bool                `json:"prefers_message_email_notification"`
	PrefersMonthlySupporterBadge                        *bool                `json:"prefers_monthly_supporter_badge"`
	PrefersNoEmail                                      *bool                `json:"prefers_no_email"`
	PrefersNoTracking                                   *bool                `json:"prefers_no_tracking"`
	PrefersNonDisagreeingIdentificationNotifications    *bool                `json:"prefers_non_disagreeing_identification_notifications"`
	PrefersProjectAddedYourObservationEmailNotification *bool                `json:"prefers_project_added_your_observation_email_notification"`
	PrefersProjectCuratorChangeEmailNotification        *bool                `json:"prefers_project_curator_change_email_notification"`
	PrefersProjectJournalPostEmailNotification          *bool                `json:"prefers_project_journal_post_email_notification"`
	PrefersReceiveMentions                              *bool                `json:"prefers_receive_mentions"`
	PrefersRedundantIdentificationNotifications         *bool                `json:"prefers_redundant_identification_notifications"`
	PrefersScientificNameFirst                          *bool                `json:"prefers_scientific_name_first"`
	PrefersTaxonChangeEmailNotification                 *bool                `json:"prefers_taxon_change_email_notification"`
	PrefersTaxonOrPlaceObservationEmailNotification     *bool                `json:"prefers_taxon_or_place_observation_email_notification"`
	PrefersUserObservationEmailNotification             *bool                `json:"prefers_user_observation_email_notification"`
	Privileges                                          *[]string            `json:"privileges"`
	Roles                                               *[]string            `json:"roles,omitempty"`
	SearchPlaceId                                       *int                 `json:"search_place_id"`
	Site                                                *Site                `json:"site"`
	SiteId                                              *int                 `json:"site_id"`
	Spam                                                *bool                `json:"spam,omitempty"`
	SpeciesCount                                        *int                 `json:"species_count,omitempty"`
	Suspended                                           *bool                `json:"suspended,omitempty"`
	TaxonNamePriorities                                 *[]TaxonNamePriority `json:"taxon_name_priorities,omitempty"`
	TimeZone                                            *string              `json:"time_zone"`
	UnconfirmedEmail                                    *string              `json:"unconfirmed_email"`
	UniversalSearchRank                                 *int                 `json:"universal_search_rank,omitempty"`
	UpdatedAt                                           *time.Time           `json:"updated_at,omitempty"`
	Uuid                                                *openapi_types.UUID  `json:"uuid,omitempty"`
}

// Project defines model for Project.
type Project struct {
	Admins *[]struct {
		Id        *int    `json:"id,omitempty"`
		ProjectId *int    `json:"project_id,omitempty"`
		Role      *string `json:"role,omitempty"`
		User      *User   `json:"user"`
		UserId    *int    `json:"user_id,omitempty"`
	} `json:"admins,omitempty"`
	BannerColor          *string `json:"banner_color"`
	CreatedAt            *string `json:"created_at,omitempty"`
	DelegatedProjectId   *int    `json:"delegated_project_id"`
	Description          *string `json:"description"`
	Flags                *[]Flag `json:"flags,omitempty"`
	HeaderImageContain   *bool   `json:"header_image_contain,omitempty"`
	HeaderImageFileName  *string `json:"header_image_file_name"`
	HeaderImageUrl       *string `json:"header_image_url"`
	HideTitle            *bool   `json:"hide_title,omitempty"`
	HideUmbrellaMapFlags *bool   `json:"hide_umbrella_map_flags,omitempty"`
	Icon                 *string `json:"icon"`
	IconFileName         *string `json:"icon_file_name"`

	// Id Unique auto-increment integer identifier.
	Id                               int        `json:"id"`
	IsDelegatedUmbrella              *bool      `json:"is_delegated_umbrella"`
	IsUmbrella                       *bool      `json:"is_umbrella,omitempty"`
	Latitude                         *string    `json:"latitude,omitempty"`
	Location                         *string    `json:"location"`
	Longitude                        *string    `json:"longitude,omitempty"`
	ObservationRequirementsUpdatedAt *time.Time `json:"observation_requirements_updated_at"`
	PlaceId                          *int       `json:"place_id"`
	PrefersUserTrust                 *bool      `json:"prefers_user_trust"`
	ProjectObservationFields         *[]struct {
		Id               int               `json:"id"`
		ObservationField *ObservationField `json:"observation_field,omitempty"`
		Position         *int              `json:"position,omitempty"`
		Required         *bool             `json:"required"`
	} `json:"project_observation_fields,omitempty"`
	ProjectObservationRules *[]struct {
		Id          int      `json:"id"`
		OperandId   *int     `json:"operand_id"`
		OperandType *string  `json:"operand_type"`
		Operator    *string  `json:"operator,omitempty"`
		Place       *Place   `json:"place"`
		Project     *Project `json:"project"`
		Taxon       *Taxon   `json:"taxon"`
		User        *User    `json:"user"`
	} `json:"project_observation_rules,omitempty"`
	ProjectType     *string `json:"project_type"`
	RulePreferences *[]struct {
		// Field Observation attribute this rule assesses
		Field *string `json:"field,omitempty"`

		// Value Required observation attribute value(s)
		Value interface{} `json:"value,omitempty"`
	} `json:"rule_preferences,omitempty"`
	SearchParameters *[]struct {
		Field *string `json:"field,omitempty"`

		// Value TODO: values can be single values or arrays
		Value     interface{} `json:"value,omitempty"`
		ValueBool *bool       `json:"value_bool,omitempty"`
		ValueDate *[]string   `json:"value_date,omitempty"`

		// ValueKeyword TODO: values can be single values or arrays
		ValueKeyword interface{}                           `json:"value_keyword,omitempty"`
		ValueNumber  *Project_SearchParameters_ValueNumber `json:"value_number,omitempty"`
	} `json:"search_parameters,omitempty"`

	// SiteFeatures TODO: fix this
	SiteFeatures *[]struct {
		FeaturedAt *time.Time `json:"featured_at,omitempty"`
		Noteworthy *bool      `json:"noteworthy,omitempty"`
		SiteId     *int       `json:"site_id,omitempty"`
	} `json:"site_features"`
	Slug      *string `json:"slug,omitempty"`
	Terms     *string `json:"terms"`
	Title     *string `json:"title,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	User      *User   `json:"user"`
	UserId    *int    `json:"user_id,omitempty"`
	UserIds   *[]int  `json:"user_ids,omitempty"`
}

// ProjectSearchParametersValueNumber0 defines model for .
type ProjectSearchParametersValueNumber0 = float32

// ProjectSearchParametersValueNumber1 defines model for .
type ProjectSearchParametersValueNumber1 = []float32

// Project_SearchParameters_ValueNumber defines model for Project.SearchParameters.ValueNumber.
type Project_SearchParameters_ValueNumber struct {
	union json.RawMessage
}

// ProjectMembership defines model for ProjectMembership.
type ProjectMembership struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id Unique auto-increment integer identifier.
	Id                                int        `json:"id"`
	PrefersCuratorCoordinateAccessFor *string    `json:"prefers_curator_coordinate_access_for"`
	PrefersUpdates                    *bool      `json:"prefers_updates"`
	ProjectId                         *int       `json:"project_id,omitempty"`
	Role                              *string    `json:"role"`
	UpdatedAt                         *time.Time `json:"updated_at,omitempty"`
}

// ProjectObservation defines model for ProjectObservation.
type ProjectObservation struct {
	// Id Unique auto-increment integer identifier.
	Id          int `json:"id"`
	Preferences *struct {
		AllowsCuratorCoordinateAccess *bool `json:"allows_curator_coordinate_access,omitempty"`
	} `json:"preferences,omitempty"`
	Project     *Project           `json:"project"`
	ProjectId   *int               `json:"project_id,omitempty"`
	ProjectUser *ProjectUser       `json:"project_user,omitempty"`
	User        *User              `json:"user"`
	UserId      *int               `json:"user_id"`
	Uuid        openapi_types.UUID `json:"uuid"`
}

// ProjectObservationsCreate defines model for ProjectObservationsCreate.
type ProjectObservationsCreate struct {
	Fields             interface{} `json:"fields,omitempty"`
	ProjectObservation *struct {
		ObservationId openapi_types.UUID `json:"observation_id"`
		ProjectId     int                `json:"project_id"`
	} `json:"project_observation,omitempty"`
}

// ProjectObservationsUpdate defines model for ProjectObservationsUpdate.
type ProjectObservationsUpdate struct {
	Fields             interface{} `json:"fields,omitempty"`
	ProjectObservation *struct {
		// PrefersCuratorCoordinateAccess Whether the observer allows project curators to view the coordinates of this observation
		PrefersCuratorCoordinateAccess *bool `json:"prefers_curator_coordinate_access,omitempty"`
	} `json:"project_observation,omitempty"`
}

// ProjectUser defines model for ProjectUser.
type ProjectUser struct {
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	CreatedAtUtc *time.Time `json:"created_at_utc,omitempty"`

	// Id Unique auto-increment integer identifier.
	Id                                int        `json:"id"`
	ObservationsCount                 *int       `json:"observations_count,omitempty"`
	PrefersCuratorCoordinateAccessFor *string    `json:"prefers_curator_coordinate_access_for,omitempty"`
	ProjectId                         *int       `json:"project_id,omitempty"`
	Role                              *string    `json:"role"`
	TaxaCount                         *int       `json:"taxa_count,omitempty"`
	UpdatedAt                         *time.Time `json:"updated_at,omitempty"`
	UpdatedAtUtc                      *time.Time `json:"updated_at_utc,omitempty"`
	UserId                            *int       `json:"user_id,omitempty"`
}

// ProjectUsersUpdate defines model for ProjectUsersUpdate.
type ProjectUsersUpdate struct {
	ProjectUser *struct {
		PrefersCuratorCoordinateAccessFor *ProjectUsersUpdateProjectUserPrefersCuratorCoordinateAccessFor `json:"prefers_curator_coordinate_access_for,omitempty"`
		PrefersUpdates                    *bool                                                           `json:"prefers_updates,omitempty"`
	} `json:"project_user,omitempty"`
}

// ProjectUsersUpdateProjectUserPrefersCuratorCoordinateAccessFor defines model for ProjectUsersUpdate.ProjectUser.PrefersCuratorCoordinateAccessFor.
type ProjectUsersUpdateProjectUserPrefersCuratorCoordinateAccessFor string

// ProviderAuthorization defines model for ProviderAuthorization.
type ProviderAuthorization struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        int        `json:"id"`

	// ProviderName Name of the provider from a controlled vocabulary. The `open_id` means Yahoo in this context
	ProviderName *ProviderAuthorizationProviderName `json:"provider_name,omitempty"`

	// ProviderUid Unique identifier for the user from the provider
	ProviderUid *string `json:"provider_uid"`

	// Scope Comma-separated list of OAuth scopes granted by the provider
	Scope     *string    `json:"scope"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	UserId    *int       `json:"user_id,omitempty"`
}

// ProviderAuthorizationProviderName Name of the provider from a controlled vocabulary. The `open_id` means Yahoo in this context
type ProviderAuthorizationProviderName string

// QualityMetric defines model for QualityMetric.
type QualityMetric struct {
	Agree *bool `json:"agree,omitempty"`

	// Id Unique auto-increment integer identifier.
	Id     int     `json:"id"`
	Metric *string `json:"metric,omitempty"`
	User   *User   `json:"user"`
	UserId *int    `json:"user_id"`
}

// Relationship defines model for Relationship.
type Relationship struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Following Whether the user notifications about new content made by the friend
	Following  *bool `json:"following,omitempty"`
	FriendUser *User `json:"friend_user"`

	// Id Unique auto-increment integer identifier.
	Id int `json:"id"`

	// ReciprocalTrust Whether the friend trusts the user with hidden coordinates
	ReciprocalTrust *bool `json:"reciprocal_trust,omitempty"`

	// Trust Whether the user trusts the friend with hidden coordinates
	Trust     *bool      `json:"trust,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	User      *User      `json:"user"`
}

// RelationshipsCreate defines model for RelationshipsCreate.
type RelationshipsCreate struct {
	Fields       interface{} `json:"fields,omitempty"`
	Relationship struct {
		// Following Whether the user notifications about new content made by the friend
		Following *bool `json:"following,omitempty"`

		// FriendId
		//         Sequential ID of the user that is the object of the relationship, i.e.
		//         the user that the authenticated user is establishing a relationship
		//         with
		//
		FriendId int `json:"friend_id"`

		// Trust Whether the user trusts the friend with hidden coordinates
		Trust *bool `json:"trust,omitempty"`
	} `json:"relationship"`
}

// RelationshipsUpdate defines model for RelationshipsUpdate.
type RelationshipsUpdate struct {
	Fields       interface{} `json:"fields,omitempty"`
	Relationship struct {
		// Following Whether the user notifications about new content made by the friend
		Following *bool `json:"following,omitempty"`

		// Trust Whether the user trusts the friend with hidden coordinates
		Trust *bool `json:"trust,omitempty"`
	} `json:"relationship"`
}

// ResultsAnnotations defines model for ResultsAnnotations.
type ResultsAnnotations struct {
	Page         int          `json:"page"`
	PerPage      int          `json:"per_page"`
	Results      []Annotation `json:"results"`
	TotalResults int          `json:"total_results"`
}

// ResultsAnnouncements defines model for ResultsAnnouncements.
type ResultsAnnouncements struct {
	Page         int            `json:"page"`
	PerPage      int            `json:"per_page"`
	Results      []Announcement `json:"results"`
	TotalResults int            `json:"total_results"`
}

// ResultsAuthorizedApplications defines model for ResultsAuthorizedApplications.
type ResultsAuthorizedApplications struct {
	Page         int                     `json:"page"`
	PerPage      int                     `json:"per_page"`
	Results      []AuthorizedApplication `json:"results"`
	TotalResults int                     `json:"total_results"`
}

// ResultsComments defines model for ResultsComments.
type ResultsComments struct {
	Page         int       `json:"page"`
	PerPage      int       `json:"per_page"`
	Results      []Comment `json:"results"`
	TotalResults int       `json:"total_results"`
}

// ResultsControlledTerms defines model for ResultsControlledTerms.
type ResultsControlledTerms struct {
	Page         int              `json:"page"`
	PerPage      int              `json:"per_page"`
	Results      []ControlledTerm `json:"results"`
	TotalResults int              `json:"total_results"`
}

// ResultsEmailAvailable defines model for ResultsEmailAvailable.
type ResultsEmailAvailable struct {
	Available *bool `json:"available,omitempty"`
}

// ResultsFlags defines model for ResultsFlags.
type ResultsFlags struct {
	Page         int    `json:"page"`
	PerPage      int    `json:"per_page"`
	Results      []Flag `json:"results"`
	TotalResults int    `json:"total_results"`
}

// ResultsIdentifications defines model for ResultsIdentifications.
type ResultsIdentifications struct {
	Page         int              `json:"page"`
	PerPage      int              `json:"per_page"`
	Results      []Identification `json:"results"`
	TotalResults int              `json:"total_results"`
}

// ResultsIdentificationsRecentTaxa defines model for ResultsIdentificationsRecentTaxa.
type ResultsIdentificationsRecentTaxa struct {
	AllResultsAvailable *bool `json:"all_results_available,omitempty"`
	Page                int   `json:"page"`
	PerPage             int   `json:"per_page"`
	Results             []struct {
		Identification Identification `json:"identification"`
		Taxon          *Taxon         `json:"taxon"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsIdentifiers defines model for ResultsIdentifiers.
type ResultsIdentifiers struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		Count  int   `json:"count"`
		User   *User `json:"user"`
		UserId *int  `json:"user_id,omitempty"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsMessages defines model for ResultsMessages.
type ResultsMessages struct {
	Page         int       `json:"page"`
	PerPage      int       `json:"per_page"`
	Results      []Message `json:"results"`
	TotalResults int       `json:"total_results"`
}

// ResultsMessagesThread defines model for ResultsMessagesThread.
type ResultsMessagesThread struct {
	FlaggableMessageId *int      `json:"flaggable_message_id,omitempty"`
	Page               int       `json:"page"`
	PerPage            int       `json:"per_page"`
	ReplyToUser        *User     `json:"reply_to_user"`
	Results            []Message `json:"results"`
	ThreadId           *int      `json:"thread_id,omitempty"`
	TotalResults       int       `json:"total_results"`
}

// ResultsObservationFieldValues defines model for ResultsObservationFieldValues.
type ResultsObservationFieldValues struct {
	Page         int                     `json:"page"`
	PerPage      int                     `json:"per_page"`
	Results      []ObservationFieldValue `json:"results"`
	TotalResults int                     `json:"total_results"`
}

// ResultsObservationFields defines model for ResultsObservationFields.
type ResultsObservationFields struct {
	Page         int                `json:"page"`
	PerPage      int                `json:"per_page"`
	Results      []ObservationField `json:"results"`
	TotalResults int                `json:"total_results"`
}

// ResultsObservationPhotos defines model for ResultsObservationPhotos.
type ResultsObservationPhotos struct {
	Page         int                `json:"page"`
	PerPage      int                `json:"per_page"`
	Results      []ObservationPhoto `json:"results"`
	TotalResults int                `json:"total_results"`
}

// ResultsObservationSounds defines model for ResultsObservationSounds.
type ResultsObservationSounds struct {
	Page         int                `json:"page"`
	PerPage      int                `json:"per_page"`
	Results      []ObservationPhoto `json:"results"`
	TotalResults int                `json:"total_results"`
}

// ResultsObservations defines model for ResultsObservations.
type ResultsObservations struct {
	Page        int           `json:"page"`
	PerPage     int           `json:"per_page"`
	Results     []Observation `json:"results"`
	TotalBounds *struct {
		Nelat *float32 `json:"nelat,omitempty"`
		Nelng *float32 `json:"nelng,omitempty"`
		Swlat *float32 `json:"swlat,omitempty"`
		Swlng *float32 `json:"swlng,omitempty"`
	} `json:"total_bounds,omitempty"`
	TotalResults int `json:"total_results"`
}

// ResultsObservationsDeleted defines model for ResultsObservationsDeleted.
type ResultsObservationsDeleted struct {
	Page         int   `json:"page"`
	PerPage      int   `json:"per_page"`
	Results      []int `json:"results"`
	TotalResults int   `json:"total_results"`
}

// ResultsObservationsHistogram defines model for ResultsObservationsHistogram.
type ResultsObservationsHistogram struct {
	Page         int                                  `json:"page"`
	PerPage      int                                  `json:"per_page"`
	Results      ResultsObservationsHistogram_Results `json:"results"`
	TotalResults int                                  `json:"total_results"`
}

// ResultsObservationsHistogramResults0 defines model for .
type ResultsObservationsHistogramResults0 struct {
	Day         *map[string]int `json:"day,omitempty"`
	Hour        *map[string]int `json:"hour,omitempty"`
	Month       *map[string]int `json:"month,omitempty"`
	MonthOfYear *map[string]int `json:"month_of_year,omitempty"`
	Week        *map[string]int `json:"week,omitempty"`
	WeekOfYear  *map[string]int `json:"week_of_year,omitempty"`
	Year        *map[string]int `json:"year,omitempty"`
}

// ResultsObservationsHistogram_Results defines model for ResultsObservationsHistogram.Results.
type ResultsObservationsHistogram_Results struct {
	union json.RawMessage
}

// ResultsObservationsIdentificationCategories defines model for ResultsObservationsIdentificationCategories.
type ResultsObservationsIdentificationCategories struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		Category string `json:"category"`
		Count    int    `json:"count"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsObservationsIdentifiers defines model for ResultsObservationsIdentifiers.
type ResultsObservationsIdentifiers struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		Count int   `json:"count"`
		User  *User `json:"user"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsObservationsObservers defines model for ResultsObservationsObservers.
type ResultsObservationsObservers struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		ObservationCount int   `json:"observation_count"`
		SpeciesCount     int   `json:"species_count"`
		User             *User `json:"user"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsObservationsPopularFieldValues defines model for ResultsObservationsPopularFieldValues.
type ResultsObservationsPopularFieldValues struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		ControlledAttribute *struct {
			ExceptedTaxonIds *[]int  `json:"excepted_taxon_ids,omitempty"`
			Id               *int    `json:"id,omitempty"`
			IsValue          *bool   `json:"is_value,omitempty"`
			Label            *string `json:"label,omitempty"`
			Multivalued      *bool   `json:"multivalued,omitempty"`
			OntologyUri      *string `json:"ontology_uri,omitempty"`
			TaxonIds         *[]int  `json:"taxon_ids,omitempty"`
			Uri              *string `json:"uri,omitempty"`
			Values           *[]struct {
				Blocking    *bool   `json:"blocking,omitempty"`
				Id          *int    `json:"id,omitempty"`
				Label       *string `json:"label,omitempty"`
				OntologyUri *string `json:"ontology_uri,omitempty"`
				TaxonIds    *[]int  `json:"taxon_ids,omitempty"`
				Uri         *string `json:"uri,omitempty"`
			} `json:"values,omitempty"`
		} `json:"controlled_attribute,omitempty"`
		ControlledValue *struct {
			Blocking    *bool          `json:"blocking,omitempty"`
			Id          *int           `json:"id,omitempty"`
			IsValue     *bool          `json:"is_value,omitempty"`
			Label       *string        `json:"label,omitempty"`
			OntologyUri *string        `json:"ontology_uri,omitempty"`
			TaxonIds    *[]int         `json:"taxon_ids,omitempty"`
			Uri         *string        `json:"uri,omitempty"`
			Values      *[]interface{} `json:"values,omitempty"`
		} `json:"controlled_value,omitempty"`
		Count       int         `json:"count"`
		MonthOfYear interface{} `json:"month_of_year,omitempty"`
		WeekOfYear  interface{} `json:"week_of_year,omitempty"`
	} `json:"results"`
	TotalResults int                                                                                `json:"total_results"`
	Unannotated  *map[string]ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties `json:"unannotated,omitempty"`
}

// ResultsObservationsPopularFieldValuesUnannotated0 defines model for .
type ResultsObservationsPopularFieldValuesUnannotated0 struct {
	Count       *int            `json:"count,omitempty"`
	MonthOfYear *map[string]int `json:"month_of_year,omitempty"`
}

// ResultsObservationsPopularFieldValuesUnannotated1 defines model for .
type ResultsObservationsPopularFieldValuesUnannotated1 struct {
	Count      *int            `json:"count,omitempty"`
	WeekOfYear *map[string]int `json:"week_of_year,omitempty"`
}

// ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties defines model for ResultsObservationsPopularFieldValues.unannotated.AdditionalProperties.
type ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties struct {
	union json.RawMessage
}

// ResultsObservationsQualityGrades defines model for ResultsObservationsQualityGrades.
type ResultsObservationsQualityGrades struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		Count        int    `json:"count"`
		QualityGrade string `json:"quality_grade"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsObservationsSpeciesCounts defines model for ResultsObservationsSpeciesCounts.
type ResultsObservationsSpeciesCounts struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		Count int    `json:"count"`
		Taxon *Taxon `json:"taxon"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsObservationsUmbrellaProjectStats defines model for ResultsObservationsUmbrellaProjectStats.
type ResultsObservationsUmbrellaProjectStats struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		ObservationCount int      `json:"observation_count"`
		ObserversCount   int      `json:"observers_count"`
		Project          *Project `json:"project"`
		SpeciesCount     int      `json:"species_count"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsPhotos defines model for ResultsPhotos.
type ResultsPhotos struct {
	Page         int     `json:"page"`
	PerPage      int     `json:"per_page"`
	Results      []Photo `json:"results"`
	TotalResults int     `json:"total_results"`
}

// ResultsPlaces defines model for ResultsPlaces.
type ResultsPlaces struct {
	Page         int     `json:"page"`
	PerPage      int     `json:"per_page"`
	Results      []Place `json:"results"`
	TotalResults int     `json:"total_results"`
}

// ResultsPlacesNearby defines model for ResultsPlacesNearby.
type ResultsPlacesNearby struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results struct {
		Community *[]Place `json:"community,omitempty"`
		Standard  *[]Place `json:"standard,omitempty"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsProjectMembership defines model for ResultsProjectMembership.
type ResultsProjectMembership struct {
	Page         int                 `json:"page"`
	PerPage      int                 `json:"per_page"`
	Results      []ProjectMembership `json:"results"`
	TotalResults int                 `json:"total_results"`
}

// ResultsProjectObservations defines model for ResultsProjectObservations.
type ResultsProjectObservations struct {
	Page         int                  `json:"page"`
	PerPage      int                  `json:"per_page"`
	Results      []ProjectObservation `json:"results"`
	TotalResults int                  `json:"total_results"`
}

// ResultsProjects defines model for ResultsProjects.
type ResultsProjects struct {
	Page         int       `json:"page"`
	PerPage      int       `json:"per_page"`
	Results      []Project `json:"results"`
	TotalResults int       `json:"total_results"`
}

// ResultsProjectsMembers defines model for ResultsProjectsMembers.
type ResultsProjectsMembers struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		CreatedAt         *time.Time `json:"created_at,omitempty"`
		Id                int        `json:"id"`
		ObservationsCount int        `json:"observations_count"`
		ProjectId         *int       `json:"project_id,omitempty"`
		Role              *string    `json:"role"`
		TaxaCount         *int       `json:"taxa_count,omitempty"`
		UpdatedAt         *time.Time `json:"updated_at,omitempty"`
		User              struct {
			Icon    *string `json:"icon"`
			IconUrl *string `json:"icon_url"`
			Id      int     `json:"id"`
			Login   *string `json:"login,omitempty"`
			Name    *string `json:"name"`
			Orcid   *string `json:"orcid"`
		} `json:"user"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsProjectsPosts defines model for ResultsProjectsPosts.
type ResultsProjectsPosts struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		Body        *string                                `json:"body,omitempty"`
		CreatedAt   *time.Time                             `json:"created_at,omitempty"`
		Distance    *float32                               `json:"distance"`
		Id          *int                                   `json:"id,omitempty"`
		Latitude    *float32                               `json:"latitude"`
		Longitude   *float32                               `json:"longitude"`
		ParentId    *int                                   `json:"parent_id,omitempty"`
		ParentType  *ResultsProjectsPostsResultsParentType `json:"parent_type,omitempty"`
		PlaceId     *int                                   `json:"place_id"`
		PublishedAt *time.Time                             `json:"published_at,omitempty"`
		Radius      *float32                               `json:"radius"`
		StartTime   *time.Time                             `json:"start_time"`
		StopTime    *time.Time                             `json:"stop_time"`
		Title       *string                                `json:"title,omitempty"`
		Type        *string                                `json:"type"`
		UpdatedAt   *time.Time                             `json:"updated_at,omitempty"`
		User        *User                                  `json:"user"`
		Uuid        *openapi_types.UUID                    `json:"uuid"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsProjectsPostsResultsParentType defines model for ResultsProjectsPosts.Results.ParentType.
type ResultsProjectsPostsResultsParentType string

// ResultsProviderAuthorizations defines model for ResultsProviderAuthorizations.
type ResultsProviderAuthorizations struct {
	Page         int                     `json:"page"`
	PerPage      int                     `json:"per_page"`
	Results      []ProviderAuthorization `json:"results"`
	TotalResults int                     `json:"total_results"`
}

// ResultsQualityMetrics defines model for ResultsQualityMetrics.
type ResultsQualityMetrics struct {
	Page         int             `json:"page"`
	PerPage      int             `json:"per_page"`
	Results      []QualityMetric `json:"results"`
	TotalResults int             `json:"total_results"`
}

// ResultsRelationships defines model for ResultsRelationships.
type ResultsRelationships struct {
	Page         int            `json:"page"`
	PerPage      int            `json:"per_page"`
	Results      []Relationship `json:"results"`
	TotalResults int            `json:"total_results"`
}

// ResultsSavedLocations defines model for ResultsSavedLocations.
type ResultsSavedLocations struct {
	Page         int             `json:"page"`
	PerPage      int             `json:"per_page"`
	Results      []SavedLocation `json:"results"`
	TotalResults int             `json:"total_results"`
}

// ResultsSearch defines model for ResultsSearch.
type ResultsSearch struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		// Matches Array of text field values that matched the search query
		Matches *[]string `json:"matches,omitempty"`
		Place   *Place    `json:"place"`
		Project *Project  `json:"project"`

		// Score Search score; can be used to sort search results
		Score *float32 `json:"score,omitempty"`
		Taxon *Taxon   `json:"taxon"`

		// Type Type of record for this search result
		Type ResultsSearchResultsType `json:"type"`
		User *User                    `json:"user"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsSearchResultsType Type of record for this search result
type ResultsSearchResultsType string

// ResultsSites defines model for ResultsSites.
type ResultsSites struct {
	Page         int    `json:"page"`
	PerPage      int    `json:"per_page"`
	Results      []Site `json:"results"`
	TotalResults int    `json:"total_results"`
}

// ResultsSounds defines model for ResultsSounds.
type ResultsSounds struct {
	Page         int     `json:"page"`
	PerPage      int     `json:"per_page"`
	Results      []Sound `json:"results"`
	TotalResults int     `json:"total_results"`
}

// ResultsSubscriptions defines model for ResultsSubscriptions.
type ResultsSubscriptions struct {
	Page         int            `json:"page"`
	PerPage      int            `json:"per_page"`
	Results      []Subscription `json:"results"`
	TotalResults int            `json:"total_results"`
}

// ResultsTaxa defines model for ResultsTaxa.
type ResultsTaxa struct {
	Page         int     `json:"page"`
	PerPage      int     `json:"per_page"`
	Results      []Taxon `json:"results"`
	TotalResults int     `json:"total_results"`
}

// ResultsTaxaCounts defines model for ResultsTaxaCounts.
type ResultsTaxaCounts struct {
	Page         int          `json:"page"`
	PerPage      int          `json:"per_page"`
	Results      []TaxonCount `json:"results"`
	TotalResults int          `json:"total_results"`
}

// ResultsTaxaSuggest defines model for ResultsTaxaSuggest.
type ResultsTaxaSuggest struct {
	// CommonAncestor  Common ancestor taxon of some of the top results weighted by combined score.
	//   If present, it generally has a much higher chance of being accurate (if not
	//   precise), often by as much as 30-40 percentage points.
	CommonAncestor *CommonAncestor `json:"common_ancestor,omitempty"`

	// Comprehensiveness  Set when the suggestions are believed to be comprehensive given the search
	//       parameters, e.g. if retrieving suggestions for squirrels in California,
	//       these should represent *all* the squirrels known to occur in California.
	//       If blank or absent, that means the suggestions may or may not be
	//       comprehensive. Currently only set when `source` is `checklist`
	//
	Comprehensiveness *struct {
		// List Source of these comprehensive suggestions
		List *struct {
			// Id Unique auto-increment integer identifier.
			Id     int `json:"id"`
			Source *struct {
				InText *string `json:"in_text,omitempty"`
				Url    *string `json:"url,omitempty"`
			} `json:"source,omitempty"`
			Title *string `json:"title,omitempty"`
		} `json:"list,omitempty"`
	} `json:"comprehensiveness,omitempty"`

	// Query  Query parameters used to generate these results. When `source` is
	//       `*observations` this may have some additional parameters used to set
	//       defaults for the observations query.
	//
	Query *struct {
		// FeaturedObservationId When `source` is `observations`, ignore this observation
		FeaturedObservationId *openapi_types.UUID `json:"featured_observation_id,omitempty"`
		Fields                interface{}         `json:"fields,omitempty"`

		// ImageUrl URL for image to use when `source` is `visual`
		ImageUrl                    *string                                               `json:"image_url,omitempty"`
		IncludeRepresentativePhotos *ResultsTaxaSuggest_Query_IncludeRepresentativePhotos `json:"include_representative_photos,omitempty"`

		// Lat Coordinate used when fetching nearby results `source` is `visual` or `*observations`
		Lat *float32 `json:"lat,omitempty"`

		// Limit Number of results to return
		Limit *float32 `json:"limit,omitempty"`

		// Lng Coordinate used when fetching nearby results `source` is `visual` or `*observations`
		Lng    *float32 `json:"lng,omitempty"`
		Locale *string  `json:"locale,omitempty"`
		Months *string  `json:"months,omitempty"`

		// ObservationId  Automatically set place and taxon filters based on this observation; this
		//       will override the values of `place_id` and `taxon_id` if these values
		//       can be derived from the observation
		//
		ObservationId *openapi_types.UUID `json:"observation_id,omitempty"`

		// ObservedOn  Date the subject was observed (YYYY-MM-DD), used to refine suggestions to
		//       those observed at a similar time of year
		//
		ObservedOn *string `json:"observed_on,omitempty"`

		// OrderBy  How the suggestions will be ordered. The default is to order by whatever default
		//       a source uses, e.g. the score when `source` is `visual`, or the number of
		//       observations (frequency) when the `source` is `*observations`. Ordering by
		//       `taxonomy` will group the results by their closeness in the taxonomic
		//       tree, but continue to use default ordering for siblings (e.g. species in the
		//       same genus).
		//
		OrderBy *ResultsTaxaSuggestQueryOrderBy `json:"order_by,omitempty"`

		// PlaceId  Only retrieve suggestions from this place when `source` is `checklist`
		//       or `*observations`
		//
		PlaceId *int `json:"place_id,omitempty"`

		// PlaceLat  Coordinate used to set a place filter when source is `*observations` by
		//       choosing the place whose boundary contains the coordinate. Only chooses
		//       from places curated by staff (aka "standard" places) and only sets the
		//       place when lat, lng, and place_id are blank
		//
		PlaceLat *float32 `json:"place_lat,omitempty"`

		// PlaceLng See `place_lat`
		PlaceLng *float32 `json:"place_lng,omitempty"`

		// Source  Source of the suggestions. Note that different sources support different
		//       search parameters. See each parameter for details
		//
		Source *ResultsTaxaSuggestQuerySource `json:"source"`

		// TaxonId  Only retrieve suggestions in this taxon. If taxon is below genus level it
		//       will be replaced with the genus that contains it. When `source` is
		//       `misidentifications`, suggestions will be species commonly misidentified
		//       as this taxon
		//
		TaxonId *int `json:"taxon_id,omitempty"`
	} `json:"query,omitempty"`
	QueryPlace *Place `json:"queryPlace"`
	QueryTaxon *Taxon `json:"queryTaxon"`
	Results    []struct {
		Score         float32 `json:"score"`
		SourceDetails *struct {
			CombinedScore     *float32     `json:"combined_score,omitempty"`
			FrequencyScore    *float32     `json:"frequency_score,omitempty"`
			ListedTaxon       *ListedTaxon `json:"listed_taxon"`
			ObservationsCount *int         `json:"observations_count,omitempty"`
			VisionScore       *float32     `json:"vision_score,omitempty"`
		} `json:"source_details,omitempty"`
		SourceType string `json:"source_type"`
		Taxon      *Taxon `json:"taxon"`
	} `json:"results"`
}

// ResultsTaxaSuggestQueryIncludeRepresentativePhotos0 defines model for .
type ResultsTaxaSuggestQueryIncludeRepresentativePhotos0 = bool

// ResultsTaxaSuggestQueryIncludeRepresentativePhotos1 defines model for .
type ResultsTaxaSuggestQueryIncludeRepresentativePhotos1 = string

// ResultsTaxaSuggest_Query_IncludeRepresentativePhotos defines model for ResultsTaxaSuggest.Query.IncludeRepresentativePhotos.
type ResultsTaxaSuggest_Query_IncludeRepresentativePhotos struct {
	union json.RawMessage
}

// ResultsTaxaSuggestQueryOrderBy  How the suggestions will be ordered. The default is to order by whatever default
//
//	a source uses, e.g. the score when `source` is `visual`, or the number of
//	observations (frequency) when the `source` is `*observations`. Ordering by
//	`taxonomy` will group the results by their closeness in the taxonomic
//	tree, but continue to use default ordering for siblings (e.g. species in the
//	same genus).
type ResultsTaxaSuggestQueryOrderBy string

// ResultsTaxaSuggestQuerySource  Source of the suggestions. Note that different sources support different
//
//	search parameters. See each parameter for details
type ResultsTaxaSuggestQuerySource string

// ResultsTaxonNamePriorities defines model for ResultsTaxonNamePriorities.
type ResultsTaxonNamePriorities struct {
	Page         int                 `json:"page"`
	PerPage      int                 `json:"per_page"`
	Results      []TaxonNamePriority `json:"results"`
	TotalResults int                 `json:"total_results"`
}

// ResultsTaxonSummary defines model for ResultsTaxonSummary.
type ResultsTaxonSummary struct {
	ConservationStatus *ConservationStatus `json:"conservation_status"`
	ListedTaxon        *ListedTaxon        `json:"listed_taxon"`

	// WikipediaSummary Summary description of this taxon from Wikipedia
	WikipediaSummary *string `json:"wikipedia_summary"`
}

// ResultsTranslationsLocales defines model for ResultsTranslationsLocales.
type ResultsTranslationsLocales struct {
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Results []struct {
		LanguageInLocale *string `json:"language_in_locale,omitempty"`
		Locale           string  `json:"locale"`
	} `json:"results"`
	TotalResults int `json:"total_results"`
}

// ResultsUpdates defines model for ResultsUpdates.
type ResultsUpdates struct {
	Page         int      `json:"page"`
	PerPage      int      `json:"per_page"`
	Results      []Update `json:"results"`
	TotalResults int      `json:"total_results"`
}

// ResultsUsers defines model for ResultsUsers.
type ResultsUsers struct {
	Page         int    `json:"page"`
	PerPage      int    `json:"per_page"`
	Results      []User `json:"results"`
	TotalResults int    `json:"total_results"`
}

// ResultsUsersMe defines model for ResultsUsersMe.
type ResultsUsersMe struct {
	Page         int           `json:"page"`
	PerPage      int           `json:"per_page"`
	Results      []PrivateUser `json:"results"`
	TotalResults int           `json:"total_results"`
}

// ResultsUsersNotificationCounts defines model for ResultsUsersNotificationCounts.
type ResultsUsersNotificationCounts struct {
	MessagesCount int `json:"messages_count"`
	UpdatesCount  int `json:"updates_count"`
}

// SavedLocation defines model for SavedLocation.
type SavedLocation struct {
	CreatedAt  *time.Time               `json:"created_at,omitempty"`
	Geoprivacy *SavedLocationGeoprivacy `json:"geoprivacy"`

	// Id Unique auto-increment integer identifier.
	Id                 int        `json:"id"`
	Latitude           *float32   `json:"latitude,omitempty"`
	Longitude          *float32   `json:"longitude,omitempty"`
	PositionalAccuracy *int       `json:"positional_accuracy,omitempty"`
	Title              *string    `json:"title,omitempty"`
	UpdatedAt          *time.Time `json:"updated_at,omitempty"`
	UserId             *int       `json:"user_id,omitempty"`
}

// SavedLocationGeoprivacy defines model for SavedLocation.Geoprivacy.
type SavedLocationGeoprivacy string

// SavedLocationsCreate defines model for SavedLocationsCreate.
type SavedLocationsCreate struct {
	Fields        interface{} `json:"fields,omitempty"`
	SavedLocation struct {
		Geoprivacy         *SavedLocationsCreateSavedLocationGeoprivacy `json:"geoprivacy,omitempty"`
		Latitude           *float32                                     `json:"latitude,omitempty"`
		Longitude          *float32                                     `json:"longitude,omitempty"`
		PositionalAccuracy *int                                         `json:"positional_accuracy,omitempty"`
		Title              *string                                      `json:"title,omitempty"`
	} `json:"saved_location"`
}

// SavedLocationsCreateSavedLocationGeoprivacy defines model for SavedLocationsCreate.SavedLocation.Geoprivacy.
type SavedLocationsCreateSavedLocationGeoprivacy string

// Site defines model for Site.
type Site struct {
	// IconUrl URL of an icon image for the site
	IconUrl *string `json:"icon_url,omitempty"`

	// Id Unique auto-increment integer identifier.
	Id int `json:"id"`

	// Locale Default language code for users of this site
	Locale *string `json:"locale"`

	// Name Full name of the site
	Name *string `json:"name,omitempty"`

	// PlaceId Integer ID of the default search place for this site
	PlaceId *int `json:"place_id"`

	// SiteNameShort Short name for this site
	SiteNameShort *string `json:"site_name_short"`
	Url           *string `json:"url,omitempty"`
}

// Sound defines model for Sound.
type Sound struct {
	Attribution     *string `json:"attribution,omitempty"`
	FileContentType *string `json:"file_content_type,omitempty"`
	FileUrl         *string `json:"file_url,omitempty"`
	Flags           *[]Flag `json:"flags,omitempty"`
	Hidden          *bool   `json:"hidden,omitempty"`

	// Id Unique auto-increment integer identifier.
	Id               int                `json:"id"`
	LicenseCode      *string            `json:"license_code"`
	ModeratorActions *[]ModeratorAction `json:"moderator_actions,omitempty"`
	NativeSoundId    *string            `json:"native_sound_id"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	CreatedAt *string `json:"created_at,omitempty"`

	// Id Unique auto-increment integer identifier.
	Id           int     `json:"id"`
	ResourceId   *int    `json:"resource_id,omitempty"`
	ResourceType *string `json:"resource_type,omitempty"`
	TaxonId      *int    `json:"taxon_id,omitempty"`
	UpdatedAt    *string `json:"updated_at,omitempty"`
	UserId       *int    `json:"user_id,omitempty"`
}

// Taxon defines model for Taxon.
type Taxon struct {
	AncestorIds               *[]int                `json:"ancestor_ids,omitempty"`
	Ancestors                 *[]Taxon              `json:"ancestors,omitempty"`
	Ancestry                  *string               `json:"ancestry"`
	AtlasId                   *int                  `json:"atlas_id"`
	Children                  *[]Taxon              `json:"children,omitempty"`
	CompleteRank              *string               `json:"complete_rank,omitempty"`
	CompleteSpeciesCount      *int                  `json:"complete_species_count"`
	ConservationStatus        *ConservationStatus   `json:"conservation_status"`
	ConservationStatuses      *[]ConservationStatus `json:"conservation_statuses,omitempty"`
	CreatedAt                 *string               `json:"created_at,omitempty"`
	CurrentSynonymousTaxonIds *[]int                `json:"current_synonymous_taxon_ids"`
	DefaultPhoto              *Photo                `json:"default_photo"`
	Endemic                   *bool                 `json:"endemic,omitempty"`
	EnglishCommonName         *string               `json:"english_common_name,omitempty"`
	EstablishmentMeans        *struct {
		EstablishmentMeans *string `json:"establishment_means,omitempty"`
		Id                 *int    `json:"id,omitempty"`
		Place              *struct {
			Ancestry    *string `json:"ancestry,omitempty"`
			DisplayName *string `json:"display_name,omitempty"`
			Id          *int    `json:"id,omitempty"`
			Name        *string `json:"name,omitempty"`
		} `json:"place,omitempty"`
	} `json:"establishment_means,omitempty"`
	Extinct    *bool `json:"extinct,omitempty"`
	FlagCounts *struct {
		Resolved   *int `json:"resolved,omitempty"`
		Unresolved *int `json:"unresolved,omitempty"`
	} `json:"flag_counts,omitempty"`
	IconicTaxonId   *int    `json:"iconic_taxon_id"`
	IconicTaxonName *string `json:"iconic_taxon_name,omitempty"`

	// Id Unique auto-increment integer identifier.
	Id         int   `json:"id"`
	Introduced *bool `json:"introduced,omitempty"`
	IsActive   *bool `json:"is_active,omitempty"`
	ListedTaxa *[]struct {
		EstablishmentMeans *string `json:"establishment_means,omitempty"`
		Id                 *int    `json:"id,omitempty"`
		List               *List   `json:"list"`
		Place              *Place  `json:"place"`
		Taxon              *Taxon  `json:"taxon"`
		TaxonId            *int    `json:"taxon_id,omitempty"`
	} `json:"listed_taxa,omitempty"`
	ListedTaxaCount    *int    `json:"listed_taxa_count,omitempty"`
	MatchedTerm        *string `json:"matched_term,omitempty"`
	MinSpeciesAncestry *string `json:"min_species_ancestry,omitempty"`
	MinSpeciesTaxonId  *int    `json:"min_species_taxon_id,omitempty"`
	Name               *string `json:"name,omitempty"`
	Native             *bool   `json:"native,omitempty"`
	ObservationsCount  *int    `json:"observations_count,omitempty"`
	ParentId           *int    `json:"parent_id"`

	// PhotosLocked Whether or not photos for this taxon can be edited
	PhotosLocked                *bool          `json:"photos_locked,omitempty"`
	PreferredCommonName         *string        `json:"preferred_common_name"`
	PreferredCommonNames        *[]interface{} `json:"preferred_common_names"`
	PreferredEstablishmentMeans *string        `json:"preferred_establishment_means,omitempty"`
	Rank                        *string        `json:"rank,omitempty"`
	RankLevel                   *float32       `json:"rank_level,omitempty"`
	RepresentativePhoto         *Photo         `json:"representative_photo"`
	Statuses                    *[]interface{} `json:"statuses,omitempty"`
	TaxonChangesCount           *int           `json:"taxon_changes_count,omitempty"`
	TaxonPhotos                 *[]struct {
		Photo   *Photo `json:"photo"`
		Taxon   *Taxon `json:"taxon"`
		TaxonId *int   `json:"taxon_id,omitempty"`
	} `json:"taxon_photos,omitempty"`
	TaxonSchemesCount   *int                `json:"taxon_schemes_count,omitempty"`
	Threatened          *bool               `json:"threatened,omitempty"`
	UniversalSearchRank *int                `json:"universal_search_rank,omitempty"`
	Uuid                *openapi_types.UUID `json:"uuid,omitempty"`
	Vision              *bool               `json:"vision,omitempty"`
	WikipediaSummary    *string             `json:"wikipedia_summary"`
	WikipediaUrl        *string             `json:"wikipedia_url"`
}

// TaxonCount defines model for TaxonCount.
type TaxonCount struct {
	Count int    `json:"count"`
	Taxon *Taxon `json:"taxon"`
}

// TaxonNamePrioritiesCreate defines model for TaxonNamePrioritiesCreate.
type TaxonNamePrioritiesCreate struct {
	Fields            interface{} `json:"fields,omitempty"`
	TaxonNamePriority struct {
		Lexicon *string `json:"lexicon"`
		PlaceId *int    `json:"place_id"`
	} `json:"taxon_name_priority"`
}

// TaxonNamePrioritiesUpdate defines model for TaxonNamePrioritiesUpdate.
type TaxonNamePrioritiesUpdate struct {
	Fields            interface{} `json:"fields,omitempty"`
	TaxonNamePriority struct {
		Position int `json:"position"`
	} `json:"taxon_name_priority"`
}

// TaxonNamePriority defines model for TaxonNamePriority.
type TaxonNamePriority struct {
	Id      int     `json:"id"`
	Lexicon *string `json:"lexicon"`
	Place   *struct {
		DisplayName *string             `json:"display_name"`
		Id          int                 `json:"id"`
		Name        *string             `json:"name,omitempty"`
		Uuid        *openapi_types.UUID `json:"uuid,omitempty"`
	} `json:"place,omitempty"`
	PlaceId  *int `json:"place_id"`
	Position *int `json:"position"`
	UserId   int  `json:"user_id"`
}

// Update defines model for Update.
type Update struct {
	Comment   *Comment   `json:"comment,omitempty"`
	CommentId *int       `json:"comment_id"`
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id Unique auto-increment integer identifier.
	Id               int                 `json:"id"`
	Identification   *Identification     `json:"identification,omitempty"`
	IdentificationId *int                `json:"identification_id"`
	Notification     *string             `json:"notification,omitempty"`
	NotifierId       *int                `json:"notifier_id,omitempty"`
	NotifierType     *string             `json:"notifier_type,omitempty"`
	ResourceId       *int                `json:"resource_id,omitempty"`
	ResourceOwnerId  *int                `json:"resource_owner_id,omitempty"`
	ResourceType     *string             `json:"resource_type,omitempty"`
	ResourceUuid     *openapi_types.UUID `json:"resource_uuid,omitempty"`
	Viewed           *bool               `json:"viewed,omitempty"`
}

// User defines model for User.
type User struct {
	AnnotatedObservationsCount *int       `json:"annotated_observations_count,omitempty"`
	CreatedAt                  *time.Time `json:"created_at,omitempty"`
	Description                *string    `json:"description"`

	// FavedProjectIds Ordered list of IDs of projects the user has faved
	FavedProjectIds *[]float32 `json:"faved_project_ids,omitempty"`
	Icon            *string    `json:"icon"`
	IconUrl         *string    `json:"icon_url"`

	// Id Unique auto-increment integer identifier.
	Id                   int        `json:"id"`
	IdentificationsCount *int       `json:"identifications_count,omitempty"`
	JournalPostsCount    *int       `json:"journal_posts_count,omitempty"`
	LastActive           *time.Time `json:"last_active,omitempty"`
	Login                *string    `json:"login,omitempty"`
	MonthlySupporter     *bool      `json:"monthly_supporter"`
	Name                 *string    `json:"name"`
	ObservationsCount    *int       `json:"observations_count,omitempty"`
	Orcid                *string    `json:"orcid"`
	Preferences          *struct {
		// PrefersCommunityTaxa
		//         Whether the user allows the Community Taxon to be the taxon their observation is associated with
		//
		PrefersCommunityTaxa       *bool                                      `json:"prefers_community_taxa,omitempty"`
		PrefersObservationFieldsBy *UserPreferencesPrefersObservationFieldsBy `json:"prefers_observation_fields_by,omitempty"`
		PrefersProjectAdditionBy   *UserPreferencesPrefersProjectAdditionBy   `json:"prefers_project_addition_by,omitempty"`
	} `json:"preferences,omitempty"`
	Roles        *[]string           `json:"roles,omitempty"`
	Site         *Site               `json:"site"`
	SiteId       *int                `json:"site_id"`
	Spam         *bool               `json:"spam,omitempty"`
	SpeciesCount *int                `json:"species_count,omitempty"`
	Suspended    *bool               `json:"suspended,omitempty"`
	UpdatedAt    *time.Time          `json:"updated_at,omitempty"`
	Uuid         *openapi_types.UUID `json:"uuid,omitempty"`
}

// UserPreferencesPrefersObservationFieldsBy defines model for User.Preferences.PrefersObservationFieldsBy.
type UserPreferencesPrefersObservationFieldsBy string

// UserPreferencesPrefersProjectAdditionBy defines model for User.Preferences.PrefersProjectAdditionBy.
type UserPreferencesPrefersProjectAdditionBy string

// UsersResetPassword defines model for UsersResetPassword.
type UsersResetPassword struct {
	User *struct {
		Email openapi_types.Email `json:"email"`
	} `json:"user,omitempty"`
}

// UsersUpdate defines model for UsersUpdate.
type UsersUpdate struct {
	IconDelete *bool `json:"icon_delete,omitempty"`
	User       *struct {
		// DataTransferConsent
		//         Whether the user consents to the transfer of their personal
		//         information to the United States. The only way to revoke this consent
		//         is to delete the account.
		//
		DataTransferConsent *bool   `json:"data_transfer_consent"`
		Description         *string `json:"description"`
		Email               *string `json:"email,omitempty"`

		// FavedProjectIds
		//         Ordered list of IDs of projects the user has faved. Order of IDs in
		//         the array is the order in which they will be displayed
		//
		FavedProjectIds *[]float32              `json:"faved_project_ids,omitempty"`
		Icon            *map[string]interface{} `json:"icon"`
		Locale          *string                 `json:"locale"`
		Login           *string                 `json:"login,omitempty"`

		// MakeObservationLicensesSame Whether a change to `preferred_observation_license` should be apply to all the user's existing observations
		MakeObservationLicensesSame *bool `json:"make_observation_licenses_same,omitempty"`

		// MakePhotoLicensesSame Whether a change to `preferred_photo_license` should be apply to all the user's existing photos
		MakePhotoLicensesSame *bool `json:"make_photo_licenses_same,omitempty"`

		// MakeSoundLicensesSame Whether a change to `preferred_sound_license` should be apply to all the user's existing sounds
		MakeSoundLicensesSame *bool   `json:"make_sound_licenses_same,omitempty"`
		Name                  *string `json:"name"`
		Password              *string `json:"password,omitempty"`
		PasswordConfirmation  *string `json:"password_confirmation,omitempty"`

		// PiConsent
		//         Whether the user consents to the storage of their personal
		//         information. The only way to revoke this consent is to delete the
		//         account.
		//
		PiConsent *bool `json:"pi_consent"`

		// PlaceId ID of place for localizing common names
		PlaceId                                             *int    `json:"place_id"`
		PreferredObservationFieldsBy                        *string `json:"preferred_observation_fields_by,omitempty"`
		PreferredObservationLicense                         *string `json:"preferred_observation_license"`
		PreferredPhotoLicense                               *string `json:"preferred_photo_license"`
		PreferredProjectAdditionBy                          *string `json:"preferred_project_addition_by,omitempty"`
		PreferredSoundLicense                               *string `json:"preferred_sound_license"`
		PrefersAutomaticTaxonomicChanges                    *bool   `json:"prefers_automatic_taxonomic_changes,omitempty"`
		PrefersCommentEmailNotification                     *bool   `json:"prefers_comment_email_notification,omitempty"`
		PrefersCommonNames                                  *bool   `json:"prefers_common_names,omitempty"`
		PrefersCommunityTaxa                                *bool   `json:"prefers_community_taxa,omitempty"`
		PrefersIdentificationEmailNotification              *bool   `json:"prefers_identification_email_notification,omitempty"`
		PrefersInfraspeciesIdentificationNotifications      *bool   `json:"prefers_infraspecies_identification_notifications,omitempty"`
		PrefersMentionEmailNotification                     *bool   `json:"prefers_mention_email_notification,omitempty"`
		PrefersMessageEmailNotification                     *bool   `json:"prefers_message_email_notification,omitempty"`
		PrefersMonthlySupporterBadge                        *bool   `json:"prefers_monthly_supporter_badge,omitempty"`
		PrefersNoEmail                                      *bool   `json:"prefers_no_email,omitempty"`
		PrefersNoTracking                                   *bool   `json:"prefers_no_tracking,omitempty"`
		PrefersNonDisagreeingIdentificationNotifications    *bool   `json:"prefers_non_disagreeing_identification_notifications,omitempty"`
		PrefersProjectAddedYourObservationEmailNotification *bool   `json:"prefers_project_added_your_observation_email_notification,omitempty"`
		PrefersProjectCuratorChangeEmailNotification        *bool   `json:"prefers_project_curator_change_email_notification,omitempty"`
		PrefersProjectJournalPostEmailNotification          *bool   `json:"prefers_project_journal_post_email_notification,omitempty"`
		PrefersReceiveMentions                              *bool   `json:"prefers_receive_mentions,omitempty"`
		PrefersRedundantIdentificationNotifications         *bool   `json:"prefers_redundant_identification_notifications,omitempty"`
		PrefersScientificNameFirst                          *bool   `json:"prefers_scientific_name_first,omitempty"`
		PrefersTaxonChangeEmailNotification                 *bool   `json:"prefers_taxon_change_email_notification,omitempty"`
		PrefersTaxonOrPlaceObservationEmailNotification     *bool   `json:"prefers_taxon_or_place_observation_email_notification,omitempty"`
		PrefersUserObservationEmailNotification             *bool   `json:"prefers_user_observation_email_notification,omitempty"`

		// SearchPlaceId ID of place for default observation searches
		SearchPlaceId *int    `json:"search_place_id"`
		SiteId        *int    `json:"site_id"`
		TimeZone      *string `json:"time_zone"`
	} `json:"user,omitempty"`
}

// UsersUpdateMultipart defines model for UsersUpdateMultipart.
type UsersUpdateMultipart struct {
	IconDelete *bool `json:"icon_delete,omitempty"`

	// UserDataTransferConsent
	//         Whether the user consents to the transfer of their personal
	//         information to the United States. The only way to revoke this consent
	//         is to delete the account.
	//
	UserDataTransferConsent *bool   `json:"user[data_transfer_consent]"`
	UserDescription         *string `json:"user[description]"`
	UserEmail               *string `json:"user[email],omitempty"`

	// UserFavedProjectIds
	//         Ordered list of IDs of projects the user has faved. Order of IDs in
	//         the array is the order in which they will be displayed
	//
	UserFavedProjectIds *[]float32          `json:"user[faved_project_ids],omitempty"`
	UserIcon            *openapi_types.File `json:"user[icon],omitempty"`
	UserLocale          *string             `json:"user[locale]"`
	UserLogin           *string             `json:"user[login],omitempty"`

	// UserMakeObservationLicensesSame Whether a change to `preferred_observation_license` should be apply to all the user's existing observations
	UserMakeObservationLicensesSame *bool `json:"user[make_observation_licenses_same],omitempty"`

	// UserMakePhotoLicensesSame Whether a change to `preferred_photo_license` should be apply to all the user's existing photos
	UserMakePhotoLicensesSame *bool `json:"user[make_photo_licenses_same],omitempty"`

	// UserMakeSoundLicensesSame Whether a change to `preferred_sound_license` should be apply to all the user's existing sounds
	UserMakeSoundLicensesSame *bool   `json:"user[make_sound_licenses_same],omitempty"`
	UserName                  *string `json:"user[name]"`
	UserPassword              *string `json:"user[password],omitempty"`
	UserPasswordConfirmation  *string `json:"user[password_confirmation],omitempty"`

	// UserPiConsent
	//         Whether the user consents to the storage of their personal
	//         information. The only way to revoke this consent is to delete the
	//         account.
	//
	UserPiConsent *bool `json:"user[pi_consent]"`

	// UserPlaceId ID of place for localizing common names
	UserPlaceId                                             *int    `json:"user[place_id]"`
	UserPreferredObservationFieldsBy                        *string `json:"user[preferred_observation_fields_by],omitempty"`
	UserPreferredObservationLicense                         *string `json:"user[preferred_observation_license]"`
	UserPreferredPhotoLicense                               *string `json:"user[preferred_photo_license]"`
	UserPreferredProjectAdditionBy                          *string `json:"user[preferred_project_addition_by],omitempty"`
	UserPreferredSoundLicense                               *string `json:"user[preferred_sound_license]"`
	UserPrefersAutomaticTaxonomicChanges                    *bool   `json:"user[prefers_automatic_taxonomic_changes],omitempty"`
	UserPrefersCommentEmailNotification                     *bool   `json:"user[prefers_comment_email_notification],omitempty"`
	UserPrefersCommonNames                                  *bool   `json:"user[prefers_common_names],omitempty"`
	UserPrefersCommunityTaxa                                *bool   `json:"user[prefers_community_taxa],omitempty"`
	UserPrefersIdentificationEmailNotification              *bool   `json:"user[prefers_identification_email_notification],omitempty"`
	UserPrefersInfraspeciesIdentificationNotifications      *bool   `json:"user[prefers_infraspecies_identification_notifications],omitempty"`
	UserPrefersMentionEmailNotification                     *bool   `json:"user[prefers_mention_email_notification],omitempty"`
	UserPrefersMessageEmailNotification                     *bool   `json:"user[prefers_message_email_notification],omitempty"`
	UserPrefersMonthlySupporterBadge                        *bool   `json:"user[prefers_monthly_supporter_badge],omitempty"`
	UserPrefersNoEmail                                      *bool   `json:"user[prefers_no_email],omitempty"`
	UserPrefersNoTracking                                   *bool   `json:"user[prefers_no_tracking],omitempty"`
	UserPrefersNonDisagreeingIdentificationNotifications    *bool   `json:"user[prefers_non_disagreeing_identification_notifications],omitempty"`
	UserPrefersProjectAddedYourObservationEmailNotification *bool   `json:"user[prefers_project_added_your_observation_email_notification],omitempty"`
	UserPrefersProjectCuratorChangeEmailNotification        *bool   `json:"user[prefers_project_curator_change_email_notification],omitempty"`
	UserPrefersProjectJournalPostEmailNotification          *bool   `json:"user[prefers_project_journal_post_email_notification],omitempty"`
	UserPrefersReceiveMentions                              *bool   `json:"user[prefers_receive_mentions],omitempty"`
	UserPrefersRedundantIdentificationNotifications         *bool   `json:"user[prefers_redundant_identification_notifications],omitempty"`
	UserPrefersScientificNameFirst                          *bool   `json:"user[prefers_scientific_name_first],omitempty"`
	UserPrefersTaxonChangeEmailNotification                 *bool   `json:"user[prefers_taxon_change_email_notification],omitempty"`
	UserPrefersTaxonOrPlaceObservationEmailNotification     *bool   `json:"user[prefers_taxon_or_place_observation_email_notification],omitempty"`
	UserPrefersUserObservationEmailNotification             *bool   `json:"user[prefers_user_observation_email_notification],omitempty"`

	// UserSearchPlaceId ID of place for default observation searches
	UserSearchPlaceId *int    `json:"user[search_place_id]"`
	UserSiteId        *int    `json:"user[site_id]"`
	UserTimeZone      *string `json:"user[time_zone]"`
}

// UtfGrid defines model for UtfGrid.
type UtfGrid struct {
	Data map[string]interface{} `json:"data"`
	Grid []string               `json:"grid"`
	Keys []string               `json:"keys"`
}

// Vote defines model for Vote.
type Vote struct {
	CreatedAt *string `json:"created_at,omitempty"`

	// Id Unique auto-increment integer identifier.
	Id        *int    `json:"id,omitempty"`
	User      *User   `json:"user"`
	UserId    *int    `json:"user_id,omitempty"`
	VoteFlag  *bool   `json:"vote_flag,omitempty"`
	VoteScope *string `json:"vote_scope"`
}

// GetAnnouncementsParams defines parameters for GetAnnouncements.
type GetAnnouncementsParams struct {
	Placement           *GetAnnouncementsParamsPlacement `form:"placement,omitempty" json:"placement,omitempty"`
	Client              *GetAnnouncementsParamsClient    `form:"client,omitempty" json:"client,omitempty"`
	Locale              *string                          `form:"locale,omitempty" json:"locale,omitempty"`
	Fields              interface{}                      `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string                          `json:"X-HTTP-Method-Override,omitempty"`
}

// GetAnnouncementsParamsPlacement defines parameters for GetAnnouncements.
type GetAnnouncementsParamsPlacement string

// GetAnnouncementsParamsClient defines parameters for GetAnnouncements.
type GetAnnouncementsParamsClient string

// GetAuthorizedApplicationsParams defines parameters for GetAuthorizedApplications.
type GetAuthorizedApplicationsParams struct {
	Fields              *string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetControlledTermsParams defines parameters for GetControlledTerms.
type GetControlledTermsParams struct {
	Fields              *string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetControlledTermsForTaxonTaxonIdParams defines parameters for GetControlledTermsForTaxonTaxonId.
type GetControlledTermsForTaxonTaxonIdParams struct {
	Fields              *string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetGeomodelIdZoomXYPngParams defines parameters for GetGeomodelIdZoomXYPng.
type GetGeomodelIdZoomXYPngParams struct {
	TileSize *GetGeomodelIdZoomXYPngParamsTileSize `form:"tile_size,omitempty" json:"tile_size,omitempty"`

	// Thresholded Set to true to render only cells above the Seen Nearby threshold
	Thresholded interface{} `form:"thresholded,omitempty" json:"thresholded,omitempty"`
}

// GetGeomodelIdZoomXYPngParamsTileSize defines parameters for GetGeomodelIdZoomXYPng.
type GetGeomodelIdZoomXYPngParamsTileSize int

// GetGeomodelComparisonIdZoomXYPngParams defines parameters for GetGeomodelComparisonIdZoomXYPng.
type GetGeomodelComparisonIdZoomXYPngParams struct {
	TileSize *GetGeomodelComparisonIdZoomXYPngParamsTileSize `form:"tile_size,omitempty" json:"tile_size,omitempty"`
}

// GetGeomodelComparisonIdZoomXYPngParamsTileSize defines parameters for GetGeomodelComparisonIdZoomXYPng.
type GetGeomodelComparisonIdZoomXYPngParamsTileSize int

// GetGeomodelTaxonRangeIdZoomXYPngParams defines parameters for GetGeomodelTaxonRangeIdZoomXYPng.
type GetGeomodelTaxonRangeIdZoomXYPngParams struct {
	TileSize *GetGeomodelTaxonRangeIdZoomXYPngParamsTileSize `form:"tile_size,omitempty" json:"tile_size,omitempty"`
}

// GetGeomodelTaxonRangeIdZoomXYPngParamsTileSize defines parameters for GetGeomodelTaxonRangeIdZoomXYPng.
type GetGeomodelTaxonRangeIdZoomXYPngParamsTileSize int

// GetGridZoomXYGridJsonParams defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParams struct {
	TileSize *GetGridZoomXYGridJsonParamsTileSize `form:"tile_size,omitempty" json:"tile_size,omitempty"`

	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IdPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                                `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	Id           *[]GetGridZoomXYGridJsonParams_Id_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotId        *[]openapi_types.UUID                      `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      *[]GetGridZoomXYGridJsonParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense *[]GetGridZoomXYGridJsonParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                   `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceId       *[]GetGridZoomXYGridJsonParams_PlaceId_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectId     *[]GetGridZoomXYGridJsonParams_ProjectId_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                   `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            *[]GetGridZoomXYGridJsonParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteId                          *[]int                                        `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    *[]GetGridZoomXYGridJsonParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonId                         *[]int                                        `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonId                  *[]int                                        `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       *string                                       `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserId                          *[]string                                     `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       *[]string                                     `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            *[]int                                        `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             *[]int                                        `form:"day,omitempty" json:"day,omitempty"`
	Month                           *[]int                                        `form:"month,omitempty" json:"month,omitempty"`
	Year                            *[]int                                        `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      *[]int                                        `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    *[]int                                        `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     *[]int                                        `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermId                          *[]int                                        `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueId                     *[]int                                        `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueId              *[]int                                        `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIdOrUnknown                 *[]int                                        `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserId                *[]string                                     `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        *int                                          `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        *int                                          `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               *int                                          `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              *string                                       `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              *string                                       `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       *string                                       `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       *string                                       `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       *string                                       `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      *string                                       `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserId              *string                                       `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            *string                                       `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentId *[]int                                        `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              *string                                       `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             *string                                       `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             *[]GetGridZoomXYGridJsonParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      *[]GetGridZoomXYGridJsonParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 *[]GetGridZoomXYGridJsonParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration *[]GetGridZoomXYGridJsonParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       *[]GetGridZoomXYGridJsonParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       *[]GetGridZoomXYGridJsonParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  *[]GetGridZoomXYGridJsonParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IdAbove     *int                                      `form:"id_above,omitempty" json:"id_above,omitempty"`
	IdBelow     *int                                      `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications *GetGridZoomXYGridJsonParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                                `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        *float32                                   `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        *float32                                   `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     *float32                                   `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      *float32                                   `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      *float32                                   `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      *float32                                   `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      *float32                                   `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListId                     *int                                       `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               *[]string                                  `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor *string                                    `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          *string                                    `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   *GetGridZoomXYGridJsonParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               *[]GetGridZoomXYGridJsonParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               *string                                    `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              *string                                    `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               *string                                    `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerId                   *int                                       `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                                `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                                `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     *string                                    `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceId           *int                                       `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	Ttl                        *int                                       `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       *int                                       `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    *int                                       `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      *GetGridZoomXYGridJsonParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    *GetGridZoomXYGridJsonParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyId                     interface{}                                `form:"only_id,omitempty" json:"only_id,omitempty"`
}

// GetGridZoomXYGridJsonParamsTileSize defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsTileSize int

// GetGridZoomXYGridJsonParamsId0 defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsId0 = openapi_types.UUID

// GetGridZoomXYGridJsonParamsId1 defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsId1 = int

// GetGridZoomXYGridJsonParamsId2 defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsId2 = string

// GetGridZoomXYGridJsonParams_Id_Item defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParams_Id_Item struct {
	union json.RawMessage
}

// GetGridZoomXYGridJsonParamsLicense defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsLicense string

// GetGridZoomXYGridJsonParamsPhotoLicense defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsPhotoLicense string

// GetGridZoomXYGridJsonParamsPlaceId0 defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsPlaceId0 = openapi_types.UUID

// GetGridZoomXYGridJsonParamsPlaceId1 defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsPlaceId1 = int

// GetGridZoomXYGridJsonParamsPlaceId2 defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsPlaceId2 = string

// GetGridZoomXYGridJsonParams_PlaceId_Item defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParams_PlaceId_Item struct {
	union json.RawMessage
}

// GetGridZoomXYGridJsonParamsProjectId0 defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsProjectId0 = int

// GetGridZoomXYGridJsonParamsProjectId1 defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsProjectId1 = string

// GetGridZoomXYGridJsonParams_ProjectId_Item defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParams_ProjectId_Item struct {
	union json.RawMessage
}

// GetGridZoomXYGridJsonParamsRank defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsRank string

// GetGridZoomXYGridJsonParamsSoundLicense defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsSoundLicense string

// GetGridZoomXYGridJsonParamsCsi defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsCsi string

// GetGridZoomXYGridJsonParamsGeoprivacy defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsGeoprivacy string

// GetGridZoomXYGridJsonParamsTaxonGeoprivacy defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsTaxonGeoprivacy string

// GetGridZoomXYGridJsonParamsObscuration defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsObscuration string

// GetGridZoomXYGridJsonParamsHrank defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsHrank string

// GetGridZoomXYGridJsonParamsLrank defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsLrank string

// GetGridZoomXYGridJsonParamsIconicTaxa defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsIconicTaxa string

// GetGridZoomXYGridJsonParamsIdentifications defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsIdentifications string

// GetGridZoomXYGridJsonParamsSearchOn defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsSearchOn string

// GetGridZoomXYGridJsonParamsQualityGrade defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsQualityGrade string

// GetGridZoomXYGridJsonParamsOrder defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsOrder string

// GetGridZoomXYGridJsonParamsOrderBy defines parameters for GetGridZoomXYGridJson.
type GetGridZoomXYGridJsonParamsOrderBy string

// GetGridZoomXYPngParams defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParams struct {
	TileSize *GetGridZoomXYPngParamsTileSize `form:"tile_size,omitempty" json:"tile_size,omitempty"`

	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IdPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                           `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	Id           *[]GetGridZoomXYPngParams_Id_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotId        *[]openapi_types.UUID                 `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      *[]GetGridZoomXYPngParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense *[]GetGridZoomXYPngParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                              `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceId       *[]GetGridZoomXYPngParams_PlaceId_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectId     *[]GetGridZoomXYPngParams_ProjectId_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                              `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            *[]GetGridZoomXYPngParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteId                          *[]int                                   `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    *[]GetGridZoomXYPngParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonId                         *[]int                                   `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonId                  *[]int                                   `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       *string                                  `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserId                          *[]string                                `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       *[]string                                `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            *[]int                                   `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             *[]int                                   `form:"day,omitempty" json:"day,omitempty"`
	Month                           *[]int                                   `form:"month,omitempty" json:"month,omitempty"`
	Year                            *[]int                                   `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      *[]int                                   `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    *[]int                                   `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     *[]int                                   `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermId                          *[]int                                   `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueId                     *[]int                                   `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueId              *[]int                                   `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIdOrUnknown                 *[]int                                   `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserId                *[]string                                `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        *int                                     `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        *int                                     `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               *int                                     `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              *string                                  `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              *string                                  `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       *string                                  `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       *string                                  `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       *string                                  `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      *string                                  `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserId              *string                                  `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            *string                                  `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentId *[]int                                   `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              *string                                  `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             *string                                  `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             *[]GetGridZoomXYPngParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      *[]GetGridZoomXYPngParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 *[]GetGridZoomXYPngParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration *[]GetGridZoomXYPngParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       *[]GetGridZoomXYPngParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       *[]GetGridZoomXYPngParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  *[]GetGridZoomXYPngParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IdAbove     *int                                 `form:"id_above,omitempty" json:"id_above,omitempty"`
	IdBelow     *int                                 `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications *GetGridZoomXYPngParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                           `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        *float32                              `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        *float32                              `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     *float32                              `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      *float32                              `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      *float32                              `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      *float32                              `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      *float32                              `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListId                     *int                                  `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               *[]string                             `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor *string                               `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          *string                               `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   *GetGridZoomXYPngParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               *[]GetGridZoomXYPngParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               *string                               `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              *string                               `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               *string                               `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerId                   *int                                  `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                           `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                           `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     *string                               `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceId           *int                                  `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	Ttl                        *int                                  `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       *int                                  `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    *int                                  `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      *GetGridZoomXYPngParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    *GetGridZoomXYPngParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyId                     interface{}                           `form:"only_id,omitempty" json:"only_id,omitempty"`
}

// GetGridZoomXYPngParamsTileSize defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsTileSize int

// GetGridZoomXYPngParamsId0 defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsId0 = openapi_types.UUID

// GetGridZoomXYPngParamsId1 defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsId1 = int

// GetGridZoomXYPngParamsId2 defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsId2 = string

// GetGridZoomXYPngParams_Id_Item defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParams_Id_Item struct {
	union json.RawMessage
}

// GetGridZoomXYPngParamsLicense defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsLicense string

// GetGridZoomXYPngParamsPhotoLicense defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsPhotoLicense string

// GetGridZoomXYPngParamsPlaceId0 defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsPlaceId0 = openapi_types.UUID

// GetGridZoomXYPngParamsPlaceId1 defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsPlaceId1 = int

// GetGridZoomXYPngParamsPlaceId2 defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsPlaceId2 = string

// GetGridZoomXYPngParams_PlaceId_Item defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParams_PlaceId_Item struct {
	union json.RawMessage
}

// GetGridZoomXYPngParamsProjectId0 defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsProjectId0 = int

// GetGridZoomXYPngParamsProjectId1 defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsProjectId1 = string

// GetGridZoomXYPngParams_ProjectId_Item defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParams_ProjectId_Item struct {
	union json.RawMessage
}

// GetGridZoomXYPngParamsRank defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsRank string

// GetGridZoomXYPngParamsSoundLicense defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsSoundLicense string

// GetGridZoomXYPngParamsCsi defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsCsi string

// GetGridZoomXYPngParamsGeoprivacy defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsGeoprivacy string

// GetGridZoomXYPngParamsTaxonGeoprivacy defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsTaxonGeoprivacy string

// GetGridZoomXYPngParamsObscuration defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsObscuration string

// GetGridZoomXYPngParamsHrank defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsHrank string

// GetGridZoomXYPngParamsLrank defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsLrank string

// GetGridZoomXYPngParamsIconicTaxa defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsIconicTaxa string

// GetGridZoomXYPngParamsIdentifications defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsIdentifications string

// GetGridZoomXYPngParamsSearchOn defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsSearchOn string

// GetGridZoomXYPngParamsQualityGrade defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsQualityGrade string

// GetGridZoomXYPngParamsOrder defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsOrder string

// GetGridZoomXYPngParamsOrderBy defines parameters for GetGridZoomXYPng.
type GetGridZoomXYPngParamsOrderBy string

// GetHeatmapZoomXYPngParams defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParams struct {
	TileSize *GetHeatmapZoomXYPngParamsTileSize `form:"tile_size,omitempty" json:"tile_size,omitempty"`

	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IdPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                              `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	Id           *[]GetHeatmapZoomXYPngParams_Id_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotId        *[]openapi_types.UUID                    `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      *[]GetHeatmapZoomXYPngParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense *[]GetHeatmapZoomXYPngParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                 `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceId       *[]GetHeatmapZoomXYPngParams_PlaceId_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectId     *[]GetHeatmapZoomXYPngParams_ProjectId_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                 `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            *[]GetHeatmapZoomXYPngParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteId                          *[]int                                      `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    *[]GetHeatmapZoomXYPngParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonId                         *[]int                                      `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonId                  *[]int                                      `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       *string                                     `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserId                          *[]string                                   `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       *[]string                                   `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            *[]int                                      `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             *[]int                                      `form:"day,omitempty" json:"day,omitempty"`
	Month                           *[]int                                      `form:"month,omitempty" json:"month,omitempty"`
	Year                            *[]int                                      `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      *[]int                                      `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    *[]int                                      `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     *[]int                                      `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermId                          *[]int                                      `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueId                     *[]int                                      `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueId              *[]int                                      `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIdOrUnknown                 *[]int                                      `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserId                *[]string                                   `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        *int                                        `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        *int                                        `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               *int                                        `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              *string                                     `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              *string                                     `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       *string                                     `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       *string                                     `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       *string                                     `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      *string                                     `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserId              *string                                     `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            *string                                     `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentId *[]int                                      `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              *string                                     `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             *string                                     `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             *[]GetHeatmapZoomXYPngParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      *[]GetHeatmapZoomXYPngParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 *[]GetHeatmapZoomXYPngParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration *[]GetHeatmapZoomXYPngParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       *[]GetHeatmapZoomXYPngParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       *[]GetHeatmapZoomXYPngParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  *[]GetHeatmapZoomXYPngParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IdAbove     *int                                    `form:"id_above,omitempty" json:"id_above,omitempty"`
	IdBelow     *int                                    `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications *GetHeatmapZoomXYPngParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                              `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        *float32                                 `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        *float32                                 `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     *float32                                 `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      *float32                                 `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      *float32                                 `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      *float32                                 `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      *float32                                 `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListId                     *int                                     `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               *[]string                                `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor *string                                  `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          *string                                  `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   *GetHeatmapZoomXYPngParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               *[]GetHeatmapZoomXYPngParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               *string                                  `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              *string                                  `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               *string                                  `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerId                   *int                                     `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                              `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                              `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     *string                                  `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceId           *int                                     `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	Ttl                        *int                                     `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       *int                                     `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    *int                                     `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      *GetHeatmapZoomXYPngParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    *GetHeatmapZoomXYPngParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyId                     interface{}                              `form:"only_id,omitempty" json:"only_id,omitempty"`
}

// GetHeatmapZoomXYPngParamsTileSize defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsTileSize int

// GetHeatmapZoomXYPngParamsId0 defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsId0 = openapi_types.UUID

// GetHeatmapZoomXYPngParamsId1 defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsId1 = int

// GetHeatmapZoomXYPngParamsId2 defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsId2 = string

// GetHeatmapZoomXYPngParams_Id_Item defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParams_Id_Item struct {
	union json.RawMessage
}

// GetHeatmapZoomXYPngParamsLicense defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsLicense string

// GetHeatmapZoomXYPngParamsPhotoLicense defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsPhotoLicense string

// GetHeatmapZoomXYPngParamsPlaceId0 defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsPlaceId0 = openapi_types.UUID

// GetHeatmapZoomXYPngParamsPlaceId1 defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsPlaceId1 = int

// GetHeatmapZoomXYPngParamsPlaceId2 defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsPlaceId2 = string

// GetHeatmapZoomXYPngParams_PlaceId_Item defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParams_PlaceId_Item struct {
	union json.RawMessage
}

// GetHeatmapZoomXYPngParamsProjectId0 defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsProjectId0 = int

// GetHeatmapZoomXYPngParamsProjectId1 defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsProjectId1 = string

// GetHeatmapZoomXYPngParams_ProjectId_Item defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParams_ProjectId_Item struct {
	union json.RawMessage
}

// GetHeatmapZoomXYPngParamsRank defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsRank string

// GetHeatmapZoomXYPngParamsSoundLicense defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsSoundLicense string

// GetHeatmapZoomXYPngParamsCsi defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsCsi string

// GetHeatmapZoomXYPngParamsGeoprivacy defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsGeoprivacy string

// GetHeatmapZoomXYPngParamsTaxonGeoprivacy defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsTaxonGeoprivacy string

// GetHeatmapZoomXYPngParamsObscuration defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsObscuration string

// GetHeatmapZoomXYPngParamsHrank defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsHrank string

// GetHeatmapZoomXYPngParamsLrank defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsLrank string

// GetHeatmapZoomXYPngParamsIconicTaxa defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsIconicTaxa string

// GetHeatmapZoomXYPngParamsIdentifications defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsIdentifications string

// GetHeatmapZoomXYPngParamsSearchOn defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsSearchOn string

// GetHeatmapZoomXYPngParamsQualityGrade defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsQualityGrade string

// GetHeatmapZoomXYPngParamsOrder defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsOrder string

// GetHeatmapZoomXYPngParamsOrderBy defines parameters for GetHeatmapZoomXYPng.
type GetHeatmapZoomXYPngParamsOrderBy string

// GetIdentificationsIdentifiersParams defines parameters for GetIdentificationsIdentifiers.
type GetIdentificationsIdentifiersParams struct {
	Page    *int    `form:"page,omitempty" json:"page,omitempty"`
	PerPage *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Fields  *string `form:"fields,omitempty" json:"fields,omitempty"`

	// TaxonId ID taxa must match the given taxa or their descendants
	TaxonId *[]string `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`

	// QualityGrade Observation must have this quality grade
	QualityGrade        *[]GetIdentificationsIdentifiersParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	XHTTPMethodOverride *string                                            `json:"X-HTTP-Method-Override,omitempty"`
}

// GetIdentificationsIdentifiersParamsQualityGrade defines parameters for GetIdentificationsIdentifiers.
type GetIdentificationsIdentifiersParamsQualityGrade string

// GetIdentificationsRecentTaxaParams defines parameters for GetIdentificationsRecentTaxa.
type GetIdentificationsRecentTaxaParams struct {
	Page       *int        `form:"page,omitempty" json:"page,omitempty"`
	PerPage    *int        `form:"per_page,omitempty" json:"per_page,omitempty"`
	Fields     *string     `form:"fields,omitempty" json:"fields,omitempty"`
	Verifiable interface{} `form:"verifiable,omitempty" json:"verifiable,omitempty"`

	// TaxonId ID taxa must match the given taxa or their descendants
	TaxonId []int `form:"taxon_id" json:"taxon_id"`

	// QualityGrade Observation must have this quality grade
	QualityGrade        *[]GetIdentificationsRecentTaxaParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	Rank                *string                                           `form:"rank,omitempty" json:"rank,omitempty"`
	Category            *[]string                                         `form:"category,omitempty" json:"category,omitempty"`
	Locale              *string                                           `form:"locale,omitempty" json:"locale,omitempty"`
	XHTTPMethodOverride *string                                           `json:"X-HTTP-Method-Override,omitempty"`
}

// GetIdentificationsRecentTaxaParamsQualityGrade defines parameters for GetIdentificationsRecentTaxa.
type GetIdentificationsRecentTaxaParamsQualityGrade string

// GetIdentificationsSimilarSpeciesParams defines parameters for GetIdentificationsSimilarSpecies.
type GetIdentificationsSimilarSpeciesParams struct {
	Page    *int    `form:"page,omitempty" json:"page,omitempty"`
	PerPage *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Fields  *string `form:"fields,omitempty" json:"fields,omitempty"`
	TaxonId int     `form:"taxon_id" json:"taxon_id"`

	// QualityGrade Observation must have this quality grade
	QualityGrade        *[]GetIdentificationsSimilarSpeciesParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	XHTTPMethodOverride *string                                               `json:"X-HTTP-Method-Override,omitempty"`
}

// GetIdentificationsSimilarSpeciesParamsQualityGrade defines parameters for GetIdentificationsSimilarSpecies.
type GetIdentificationsSimilarSpeciesParamsQualityGrade string

// GetMessagesParams defines parameters for GetMessages.
type GetMessagesParams struct {
	Page                *int        `form:"page,omitempty" json:"page,omitempty"`
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string     `json:"X-HTTP-Method-Override,omitempty"`
}

// GetMessagesIdParams defines parameters for GetMessagesId.
type GetMessagesIdParams struct {
	Fields              *string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsParams defines parameters for GetObservations.
type GetObservationsParams struct {
	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IdPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                          `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	Id           *[]GetObservationsParams_Id_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotId        *[]openapi_types.UUID                `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      *[]GetObservationsParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense *[]GetObservationsParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                             `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceId       *[]GetObservationsParams_PlaceId_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectId     *[]GetObservationsParams_ProjectId_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                             `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            *[]GetObservationsParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteId                          *[]int                                  `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    *[]GetObservationsParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonId                         *[]int                                  `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonId                  *[]int                                  `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       *string                                 `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserId                          *[]string                               `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       *[]string                               `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            *[]int                                  `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             *[]int                                  `form:"day,omitempty" json:"day,omitempty"`
	Month                           *[]int                                  `form:"month,omitempty" json:"month,omitempty"`
	Year                            *[]int                                  `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      *[]int                                  `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    *[]int                                  `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     *[]int                                  `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermId                          *[]int                                  `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueId                     *[]int                                  `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueId              *[]int                                  `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIdOrUnknown                 *[]int                                  `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserId                *[]string                               `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        *int                                    `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        *int                                    `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               *int                                    `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              *string                                 `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              *string                                 `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       *string                                 `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       *string                                 `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       *string                                 `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      *string                                 `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserId              *string                                 `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            *string                                 `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentId *[]int                                  `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              *string                                 `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             *string                                 `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             *[]GetObservationsParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      *[]GetObservationsParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 *[]GetObservationsParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration *[]GetObservationsParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       *[]GetObservationsParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       *[]GetObservationsParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  *[]GetObservationsParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IdAbove     *int                                `form:"id_above,omitempty" json:"id_above,omitempty"`
	IdBelow     *int                                `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications *GetObservationsParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                          `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        *float32                             `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        *float32                             `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     *float32                             `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      *float32                             `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      *float32                             `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      *float32                             `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      *float32                             `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListId                     *int                                 `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               *[]string                            `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor *string                              `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          *string                              `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   *GetObservationsParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               *[]GetObservationsParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               *string                              `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              *string                              `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               *string                              `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerId                   *int                                 `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                          `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                          `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     *string                              `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceId           *int                                 `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	Ttl                        *int                                 `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       *int                                 `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    *int                                 `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      *GetObservationsParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    *GetObservationsParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyId                     interface{}                          `form:"only_id,omitempty" json:"only_id,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string     `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsParamsId0 defines parameters for GetObservations.
type GetObservationsParamsId0 = openapi_types.UUID

// GetObservationsParamsId1 defines parameters for GetObservations.
type GetObservationsParamsId1 = int

// GetObservationsParamsId2 defines parameters for GetObservations.
type GetObservationsParamsId2 = string

// GetObservationsParams_Id_Item defines parameters for GetObservations.
type GetObservationsParams_Id_Item struct {
	union json.RawMessage
}

// GetObservationsParamsLicense defines parameters for GetObservations.
type GetObservationsParamsLicense string

// GetObservationsParamsPhotoLicense defines parameters for GetObservations.
type GetObservationsParamsPhotoLicense string

// GetObservationsParamsPlaceId0 defines parameters for GetObservations.
type GetObservationsParamsPlaceId0 = openapi_types.UUID

// GetObservationsParamsPlaceId1 defines parameters for GetObservations.
type GetObservationsParamsPlaceId1 = int

// GetObservationsParamsPlaceId2 defines parameters for GetObservations.
type GetObservationsParamsPlaceId2 = string

// GetObservationsParams_PlaceId_Item defines parameters for GetObservations.
type GetObservationsParams_PlaceId_Item struct {
	union json.RawMessage
}

// GetObservationsParamsProjectId0 defines parameters for GetObservations.
type GetObservationsParamsProjectId0 = int

// GetObservationsParamsProjectId1 defines parameters for GetObservations.
type GetObservationsParamsProjectId1 = string

// GetObservationsParams_ProjectId_Item defines parameters for GetObservations.
type GetObservationsParams_ProjectId_Item struct {
	union json.RawMessage
}

// GetObservationsParamsRank defines parameters for GetObservations.
type GetObservationsParamsRank string

// GetObservationsParamsSoundLicense defines parameters for GetObservations.
type GetObservationsParamsSoundLicense string

// GetObservationsParamsCsi defines parameters for GetObservations.
type GetObservationsParamsCsi string

// GetObservationsParamsGeoprivacy defines parameters for GetObservations.
type GetObservationsParamsGeoprivacy string

// GetObservationsParamsTaxonGeoprivacy defines parameters for GetObservations.
type GetObservationsParamsTaxonGeoprivacy string

// GetObservationsParamsObscuration defines parameters for GetObservations.
type GetObservationsParamsObscuration string

// GetObservationsParamsHrank defines parameters for GetObservations.
type GetObservationsParamsHrank string

// GetObservationsParamsLrank defines parameters for GetObservations.
type GetObservationsParamsLrank string

// GetObservationsParamsIconicTaxa defines parameters for GetObservations.
type GetObservationsParamsIconicTaxa string

// GetObservationsParamsIdentifications defines parameters for GetObservations.
type GetObservationsParamsIdentifications string

// GetObservationsParamsSearchOn defines parameters for GetObservations.
type GetObservationsParamsSearchOn string

// GetObservationsParamsQualityGrade defines parameters for GetObservations.
type GetObservationsParamsQualityGrade string

// GetObservationsParamsOrder defines parameters for GetObservations.
type GetObservationsParamsOrder string

// GetObservationsParamsOrderBy defines parameters for GetObservations.
type GetObservationsParamsOrderBy string

// GetObservationsDeletedParams defines parameters for GetObservationsDeleted.
type GetObservationsDeletedParams struct {
	Fields              interface{}        `form:"fields,omitempty" json:"fields,omitempty"`
	Since               openapi_types.Date `form:"since" json:"since"`
	XHTTPMethodOverride *string            `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsHistogramParams defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParams struct {
	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IdPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                                   `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	Id           *[]GetObservationsHistogramParams_Id_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotId        *[]openapi_types.UUID                         `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      *[]GetObservationsHistogramParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense *[]GetObservationsHistogramParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                      `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceId       *[]GetObservationsHistogramParams_PlaceId_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectId     *[]GetObservationsHistogramParams_ProjectId_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                      `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            *[]GetObservationsHistogramParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteId                          *[]int                                           `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    *[]GetObservationsHistogramParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonId                         *[]int                                           `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonId                  *[]int                                           `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       *string                                          `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserId                          *[]string                                        `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       *[]string                                        `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            *[]int                                           `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             *[]int                                           `form:"day,omitempty" json:"day,omitempty"`
	Month                           *[]int                                           `form:"month,omitempty" json:"month,omitempty"`
	Year                            *[]int                                           `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      *[]int                                           `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    *[]int                                           `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     *[]int                                           `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermId                          *[]int                                           `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueId                     *[]int                                           `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueId              *[]int                                           `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIdOrUnknown                 *[]int                                           `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserId                *[]string                                        `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        *int                                             `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        *int                                             `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               *int                                             `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              *string                                          `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              *string                                          `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       *string                                          `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       *string                                          `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       *string                                          `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      *string                                          `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserId              *string                                          `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            *string                                          `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentId *[]int                                           `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              *string                                          `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             *string                                          `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             *[]GetObservationsHistogramParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      *[]GetObservationsHistogramParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 *[]GetObservationsHistogramParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration *[]GetObservationsHistogramParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       *[]GetObservationsHistogramParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       *[]GetObservationsHistogramParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  *[]GetObservationsHistogramParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IdAbove     *int                                         `form:"id_above,omitempty" json:"id_above,omitempty"`
	IdBelow     *int                                         `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications *GetObservationsHistogramParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                                   `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        *float32                                      `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        *float32                                      `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     *float32                                      `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      *float32                                      `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      *float32                                      `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      *float32                                      `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      *float32                                      `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListId                     *int                                          `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               *[]string                                     `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor *string                                       `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          *string                                       `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   *GetObservationsHistogramParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               *[]GetObservationsHistogramParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               *string                                       `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              *string                                       `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               *string                                       `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerId                   *int                                          `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                                   `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                                   `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     *string                                       `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceId           *int                                          `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	Ttl                        *int                                          `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       *int                                          `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    *int                                          `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      *GetObservationsHistogramParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    *GetObservationsHistogramParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyId                     interface{}                                   `form:"only_id,omitempty" json:"only_id,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{}                              `form:"fields,omitempty" json:"fields,omitempty"`
	DateField           *GetObservationsHistogramParamsDateField `form:"date_field,omitempty" json:"date_field,omitempty"`
	Interval            *GetObservationsHistogramParamsInterval  `form:"interval,omitempty" json:"interval,omitempty"`
	XHTTPMethodOverride *string                                  `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsHistogramParamsId0 defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsId0 = openapi_types.UUID

// GetObservationsHistogramParamsId1 defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsId1 = int

// GetObservationsHistogramParamsId2 defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsId2 = string

// GetObservationsHistogramParams_Id_Item defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParams_Id_Item struct {
	union json.RawMessage
}

// GetObservationsHistogramParamsLicense defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsLicense string

// GetObservationsHistogramParamsPhotoLicense defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsPhotoLicense string

// GetObservationsHistogramParamsPlaceId0 defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsPlaceId0 = openapi_types.UUID

// GetObservationsHistogramParamsPlaceId1 defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsPlaceId1 = int

// GetObservationsHistogramParamsPlaceId2 defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsPlaceId2 = string

// GetObservationsHistogramParams_PlaceId_Item defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParams_PlaceId_Item struct {
	union json.RawMessage
}

// GetObservationsHistogramParamsProjectId0 defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsProjectId0 = int

// GetObservationsHistogramParamsProjectId1 defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsProjectId1 = string

// GetObservationsHistogramParams_ProjectId_Item defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParams_ProjectId_Item struct {
	union json.RawMessage
}

// GetObservationsHistogramParamsRank defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsRank string

// GetObservationsHistogramParamsSoundLicense defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsSoundLicense string

// GetObservationsHistogramParamsCsi defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsCsi string

// GetObservationsHistogramParamsGeoprivacy defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsGeoprivacy string

// GetObservationsHistogramParamsTaxonGeoprivacy defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsTaxonGeoprivacy string

// GetObservationsHistogramParamsObscuration defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsObscuration string

// GetObservationsHistogramParamsHrank defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsHrank string

// GetObservationsHistogramParamsLrank defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsLrank string

// GetObservationsHistogramParamsIconicTaxa defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsIconicTaxa string

// GetObservationsHistogramParamsIdentifications defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsIdentifications string

// GetObservationsHistogramParamsSearchOn defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsSearchOn string

// GetObservationsHistogramParamsQualityGrade defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsQualityGrade string

// GetObservationsHistogramParamsOrder defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsOrder string

// GetObservationsHistogramParamsOrderBy defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsOrderBy string

// GetObservationsHistogramParamsDateField defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsDateField string

// GetObservationsHistogramParamsInterval defines parameters for GetObservationsHistogram.
type GetObservationsHistogramParamsInterval string

// GetObservationsIconicTaxaSpeciesCountsParams defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParams struct {
	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IdPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                                                 `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	Id           *[]GetObservationsIconicTaxaSpeciesCountsParams_Id_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotId        *[]openapi_types.UUID                                       `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      *[]GetObservationsIconicTaxaSpeciesCountsParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense *[]GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                                    `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceId       *[]GetObservationsIconicTaxaSpeciesCountsParams_PlaceId_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectId     *[]GetObservationsIconicTaxaSpeciesCountsParams_ProjectId_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                                    `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            *[]GetObservationsIconicTaxaSpeciesCountsParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteId                          *[]int                                                         `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    *[]GetObservationsIconicTaxaSpeciesCountsParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonId                         *[]int                                                         `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonId                  *[]int                                                         `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       *string                                                        `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserId                          *[]string                                                      `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       *[]string                                                      `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            *[]int                                                         `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             *[]int                                                         `form:"day,omitempty" json:"day,omitempty"`
	Month                           *[]int                                                         `form:"month,omitempty" json:"month,omitempty"`
	Year                            *[]int                                                         `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      *[]int                                                         `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    *[]int                                                         `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     *[]int                                                         `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermId                          *[]int                                                         `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueId                     *[]int                                                         `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueId              *[]int                                                         `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIdOrUnknown                 *[]int                                                         `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserId                *[]string                                                      `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        *int                                                           `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        *int                                                           `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               *int                                                           `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              *string                                                        `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              *string                                                        `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       *string                                                        `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       *string                                                        `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       *string                                                        `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      *string                                                        `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserId              *string                                                        `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            *string                                                        `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentId *[]int                                                         `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              *string                                                        `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             *string                                                        `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             *[]GetObservationsIconicTaxaSpeciesCountsParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      *[]GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 *[]GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration *[]GetObservationsIconicTaxaSpeciesCountsParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       *[]GetObservationsIconicTaxaSpeciesCountsParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       *[]GetObservationsIconicTaxaSpeciesCountsParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  *[]GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IdAbove     *int                                                       `form:"id_above,omitempty" json:"id_above,omitempty"`
	IdBelow     *int                                                       `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications *GetObservationsIconicTaxaSpeciesCountsParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                                                 `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        *float32                                                    `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        *float32                                                    `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     *float32                                                    `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      *float32                                                    `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      *float32                                                    `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      *float32                                                    `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      *float32                                                    `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListId                     *int                                                        `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               *[]string                                                   `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor *string                                                     `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          *string                                                     `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   *GetObservationsIconicTaxaSpeciesCountsParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               *[]GetObservationsIconicTaxaSpeciesCountsParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               *string                                                     `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              *string                                                     `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               *string                                                     `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerId                   *int                                                        `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                                                 `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                                                 `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     *string                                                     `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceId           *int                                                        `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	Ttl                        *int                                                        `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       *int                                                        `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    *int                                                        `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      *GetObservationsIconicTaxaSpeciesCountsParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    *GetObservationsIconicTaxaSpeciesCountsParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyId                     interface{}                                                 `form:"only_id,omitempty" json:"only_id,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string     `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsIconicTaxaSpeciesCountsParamsId0 defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsId0 = openapi_types.UUID

// GetObservationsIconicTaxaSpeciesCountsParamsId1 defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsId1 = int

// GetObservationsIconicTaxaSpeciesCountsParamsId2 defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsId2 = string

// GetObservationsIconicTaxaSpeciesCountsParams_Id_Item defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParams_Id_Item struct {
	union json.RawMessage
}

// GetObservationsIconicTaxaSpeciesCountsParamsLicense defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsLicense string

// GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicense defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsPhotoLicense string

// GetObservationsIconicTaxaSpeciesCountsParamsPlaceId0 defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsPlaceId0 = openapi_types.UUID

// GetObservationsIconicTaxaSpeciesCountsParamsPlaceId1 defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsPlaceId1 = int

// GetObservationsIconicTaxaSpeciesCountsParamsPlaceId2 defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsPlaceId2 = string

// GetObservationsIconicTaxaSpeciesCountsParams_PlaceId_Item defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParams_PlaceId_Item struct {
	union json.RawMessage
}

// GetObservationsIconicTaxaSpeciesCountsParamsProjectId0 defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsProjectId0 = int

// GetObservationsIconicTaxaSpeciesCountsParamsProjectId1 defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsProjectId1 = string

// GetObservationsIconicTaxaSpeciesCountsParams_ProjectId_Item defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParams_ProjectId_Item struct {
	union json.RawMessage
}

// GetObservationsIconicTaxaSpeciesCountsParamsRank defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsRank string

// GetObservationsIconicTaxaSpeciesCountsParamsSoundLicense defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsSoundLicense string

// GetObservationsIconicTaxaSpeciesCountsParamsCsi defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsCsi string

// GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacy defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsGeoprivacy string

// GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacy defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsTaxonGeoprivacy string

// GetObservationsIconicTaxaSpeciesCountsParamsObscuration defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsObscuration string

// GetObservationsIconicTaxaSpeciesCountsParamsHrank defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsHrank string

// GetObservationsIconicTaxaSpeciesCountsParamsLrank defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsLrank string

// GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsIconicTaxa string

// GetObservationsIconicTaxaSpeciesCountsParamsIdentifications defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsIdentifications string

// GetObservationsIconicTaxaSpeciesCountsParamsSearchOn defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsSearchOn string

// GetObservationsIconicTaxaSpeciesCountsParamsQualityGrade defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsQualityGrade string

// GetObservationsIconicTaxaSpeciesCountsParamsOrder defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsOrder string

// GetObservationsIconicTaxaSpeciesCountsParamsOrderBy defines parameters for GetObservationsIconicTaxaSpeciesCounts.
type GetObservationsIconicTaxaSpeciesCountsParamsOrderBy string

// GetObservationsIdentificationCategoriesParams defines parameters for GetObservationsIdentificationCategories.
type GetObservationsIdentificationCategoriesParams struct {
	Fields              *string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsIdentifiersParams defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParams struct {
	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IdPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                                     `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	Id           *[]GetObservationsIdentifiersParams_Id_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotId        *[]openapi_types.UUID                           `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      *[]GetObservationsIdentifiersParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense *[]GetObservationsIdentifiersParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                        `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceId       *[]GetObservationsIdentifiersParams_PlaceId_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectId     *[]GetObservationsIdentifiersParams_ProjectId_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                        `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            *[]GetObservationsIdentifiersParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteId                          *[]int                                             `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    *[]GetObservationsIdentifiersParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonId                         *[]int                                             `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonId                  *[]int                                             `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       *string                                            `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserId                          *[]string                                          `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       *[]string                                          `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            *[]int                                             `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             *[]int                                             `form:"day,omitempty" json:"day,omitempty"`
	Month                           *[]int                                             `form:"month,omitempty" json:"month,omitempty"`
	Year                            *[]int                                             `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      *[]int                                             `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    *[]int                                             `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     *[]int                                             `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermId                          *[]int                                             `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueId                     *[]int                                             `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueId              *[]int                                             `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIdOrUnknown                 *[]int                                             `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserId                *[]string                                          `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        *int                                               `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        *int                                               `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               *int                                               `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              *string                                            `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              *string                                            `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       *string                                            `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       *string                                            `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       *string                                            `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      *string                                            `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserId              *string                                            `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            *string                                            `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentId *[]int                                             `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              *string                                            `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             *string                                            `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             *[]GetObservationsIdentifiersParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      *[]GetObservationsIdentifiersParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 *[]GetObservationsIdentifiersParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration *[]GetObservationsIdentifiersParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       *[]GetObservationsIdentifiersParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       *[]GetObservationsIdentifiersParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  *[]GetObservationsIdentifiersParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IdAbove     *int                                           `form:"id_above,omitempty" json:"id_above,omitempty"`
	IdBelow     *int                                           `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications *GetObservationsIdentifiersParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                                     `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        *float32                                        `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        *float32                                        `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     *float32                                        `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      *float32                                        `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      *float32                                        `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      *float32                                        `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      *float32                                        `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListId                     *int                                            `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               *[]string                                       `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor *string                                         `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          *string                                         `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   *GetObservationsIdentifiersParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               *[]GetObservationsIdentifiersParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               *string                                         `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              *string                                         `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               *string                                         `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerId                   *int                                            `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                                     `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                                     `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     *string                                         `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceId           *int                                            `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	Ttl                        *int                                            `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       *int                                            `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    *int                                            `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      *GetObservationsIdentifiersParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    *GetObservationsIdentifiersParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyId                     interface{}                                     `form:"only_id,omitempty" json:"only_id,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string     `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsIdentifiersParamsId0 defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsId0 = openapi_types.UUID

// GetObservationsIdentifiersParamsId1 defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsId1 = int

// GetObservationsIdentifiersParamsId2 defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsId2 = string

// GetObservationsIdentifiersParams_Id_Item defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParams_Id_Item struct {
	union json.RawMessage
}

// GetObservationsIdentifiersParamsLicense defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsLicense string

// GetObservationsIdentifiersParamsPhotoLicense defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsPhotoLicense string

// GetObservationsIdentifiersParamsPlaceId0 defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsPlaceId0 = openapi_types.UUID

// GetObservationsIdentifiersParamsPlaceId1 defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsPlaceId1 = int

// GetObservationsIdentifiersParamsPlaceId2 defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsPlaceId2 = string

// GetObservationsIdentifiersParams_PlaceId_Item defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParams_PlaceId_Item struct {
	union json.RawMessage
}

// GetObservationsIdentifiersParamsProjectId0 defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsProjectId0 = int

// GetObservationsIdentifiersParamsProjectId1 defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsProjectId1 = string

// GetObservationsIdentifiersParams_ProjectId_Item defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParams_ProjectId_Item struct {
	union json.RawMessage
}

// GetObservationsIdentifiersParamsRank defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsRank string

// GetObservationsIdentifiersParamsSoundLicense defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsSoundLicense string

// GetObservationsIdentifiersParamsCsi defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsCsi string

// GetObservationsIdentifiersParamsGeoprivacy defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsGeoprivacy string

// GetObservationsIdentifiersParamsTaxonGeoprivacy defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsTaxonGeoprivacy string

// GetObservationsIdentifiersParamsObscuration defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsObscuration string

// GetObservationsIdentifiersParamsHrank defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsHrank string

// GetObservationsIdentifiersParamsLrank defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsLrank string

// GetObservationsIdentifiersParamsIconicTaxa defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsIconicTaxa string

// GetObservationsIdentifiersParamsIdentifications defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsIdentifications string

// GetObservationsIdentifiersParamsSearchOn defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsSearchOn string

// GetObservationsIdentifiersParamsQualityGrade defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsQualityGrade string

// GetObservationsIdentifiersParamsOrder defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsOrder string

// GetObservationsIdentifiersParamsOrderBy defines parameters for GetObservationsIdentifiers.
type GetObservationsIdentifiersParamsOrderBy string

// GetObservationsObserversParams defines parameters for GetObservationsObservers.
type GetObservationsObserversParams struct {
	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IdPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                                   `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	Id           *[]GetObservationsObserversParams_Id_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotId        *[]openapi_types.UUID                         `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      *[]GetObservationsObserversParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense *[]GetObservationsObserversParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                      `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceId       *[]GetObservationsObserversParams_PlaceId_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectId     *[]GetObservationsObserversParams_ProjectId_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                      `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            *[]GetObservationsObserversParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteId                          *[]int                                           `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    *[]GetObservationsObserversParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonId                         *[]int                                           `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonId                  *[]int                                           `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       *string                                          `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserId                          *[]string                                        `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       *[]string                                        `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            *[]int                                           `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             *[]int                                           `form:"day,omitempty" json:"day,omitempty"`
	Month                           *[]int                                           `form:"month,omitempty" json:"month,omitempty"`
	Year                            *[]int                                           `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      *[]int                                           `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    *[]int                                           `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     *[]int                                           `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermId                          *[]int                                           `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueId                     *[]int                                           `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueId              *[]int                                           `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIdOrUnknown                 *[]int                                           `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserId                *[]string                                        `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        *int                                             `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        *int                                             `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               *int                                             `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              *string                                          `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              *string                                          `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       *string                                          `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       *string                                          `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       *string                                          `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      *string                                          `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserId              *string                                          `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            *string                                          `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentId *[]int                                           `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              *string                                          `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             *string                                          `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             *[]GetObservationsObserversParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      *[]GetObservationsObserversParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 *[]GetObservationsObserversParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration *[]GetObservationsObserversParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       *[]GetObservationsObserversParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       *[]GetObservationsObserversParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  *[]GetObservationsObserversParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IdAbove     *int                                         `form:"id_above,omitempty" json:"id_above,omitempty"`
	IdBelow     *int                                         `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications *GetObservationsObserversParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                                   `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        *float32                                      `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        *float32                                      `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     *float32                                      `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      *float32                                      `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      *float32                                      `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      *float32                                      `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      *float32                                      `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListId                     *int                                          `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               *[]string                                     `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor *string                                       `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          *string                                       `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   *GetObservationsObserversParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               *[]GetObservationsObserversParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               *string                                       `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              *string                                       `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               *string                                       `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerId                   *int                                          `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                                   `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                                   `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     *string                                       `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceId           *int                                          `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	Ttl                        *int                                          `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       *int                                          `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    *int                                          `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      *GetObservationsObserversParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OnlyId                     interface{}                                   `form:"only_id,omitempty" json:"only_id,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{}                            `form:"fields,omitempty" json:"fields,omitempty"`
	OrderBy             *GetObservationsObserversParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
	XHTTPMethodOverride *string                                `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsObserversParamsId0 defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsId0 = openapi_types.UUID

// GetObservationsObserversParamsId1 defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsId1 = int

// GetObservationsObserversParamsId2 defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsId2 = string

// GetObservationsObserversParams_Id_Item defines parameters for GetObservationsObservers.
type GetObservationsObserversParams_Id_Item struct {
	union json.RawMessage
}

// GetObservationsObserversParamsLicense defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsLicense string

// GetObservationsObserversParamsPhotoLicense defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsPhotoLicense string

// GetObservationsObserversParamsPlaceId0 defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsPlaceId0 = openapi_types.UUID

// GetObservationsObserversParamsPlaceId1 defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsPlaceId1 = int

// GetObservationsObserversParamsPlaceId2 defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsPlaceId2 = string

// GetObservationsObserversParams_PlaceId_Item defines parameters for GetObservationsObservers.
type GetObservationsObserversParams_PlaceId_Item struct {
	union json.RawMessage
}

// GetObservationsObserversParamsProjectId0 defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsProjectId0 = int

// GetObservationsObserversParamsProjectId1 defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsProjectId1 = string

// GetObservationsObserversParams_ProjectId_Item defines parameters for GetObservationsObservers.
type GetObservationsObserversParams_ProjectId_Item struct {
	union json.RawMessage
}

// GetObservationsObserversParamsRank defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsRank string

// GetObservationsObserversParamsSoundLicense defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsSoundLicense string

// GetObservationsObserversParamsCsi defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsCsi string

// GetObservationsObserversParamsGeoprivacy defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsGeoprivacy string

// GetObservationsObserversParamsTaxonGeoprivacy defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsTaxonGeoprivacy string

// GetObservationsObserversParamsObscuration defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsObscuration string

// GetObservationsObserversParamsHrank defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsHrank string

// GetObservationsObserversParamsLrank defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsLrank string

// GetObservationsObserversParamsIconicTaxa defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsIconicTaxa string

// GetObservationsObserversParamsIdentifications defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsIdentifications string

// GetObservationsObserversParamsSearchOn defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsSearchOn string

// GetObservationsObserversParamsQualityGrade defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsQualityGrade string

// GetObservationsObserversParamsOrder defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsOrder string

// GetObservationsObserversParamsOrderBy defines parameters for GetObservationsObservers.
type GetObservationsObserversParamsOrderBy string

// GetObservationsPopularFieldValuesParams defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParams struct {
	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IdPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                                            `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	Id           *[]GetObservationsPopularFieldValuesParams_Id_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotId        *[]openapi_types.UUID                                  `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      *[]GetObservationsPopularFieldValuesParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense *[]GetObservationsPopularFieldValuesParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                               `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceId       *[]GetObservationsPopularFieldValuesParams_PlaceId_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectId     *[]GetObservationsPopularFieldValuesParams_ProjectId_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                               `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            *[]GetObservationsPopularFieldValuesParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteId                          *[]int                                                    `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    *[]GetObservationsPopularFieldValuesParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonId                         *[]int                                                    `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonId                  *[]int                                                    `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       *string                                                   `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserId                          *[]string                                                 `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       *[]string                                                 `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            *[]int                                                    `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             *[]int                                                    `form:"day,omitempty" json:"day,omitempty"`
	Month                           *[]int                                                    `form:"month,omitempty" json:"month,omitempty"`
	Year                            *[]int                                                    `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      *[]int                                                    `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    *[]int                                                    `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     *[]int                                                    `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermId                          *[]int                                                    `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueId                     *[]int                                                    `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueId              *[]int                                                    `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIdOrUnknown                 *[]int                                                    `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserId                *[]string                                                 `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        *int                                                      `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        *int                                                      `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               *int                                                      `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              *string                                                   `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              *string                                                   `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       *string                                                   `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       *string                                                   `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       *string                                                   `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      *string                                                   `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserId              *string                                                   `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            *string                                                   `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentId *[]int                                                    `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              *string                                                   `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             *string                                                   `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             *[]GetObservationsPopularFieldValuesParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      *[]GetObservationsPopularFieldValuesParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 *[]GetObservationsPopularFieldValuesParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration *[]GetObservationsPopularFieldValuesParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       *[]GetObservationsPopularFieldValuesParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       *[]GetObservationsPopularFieldValuesParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  *[]GetObservationsPopularFieldValuesParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IdAbove     *int                                                  `form:"id_above,omitempty" json:"id_above,omitempty"`
	IdBelow     *int                                                  `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications *GetObservationsPopularFieldValuesParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                                            `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        *float32                                               `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        *float32                                               `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     *float32                                               `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      *float32                                               `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      *float32                                               `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      *float32                                               `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      *float32                                               `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListId                     *int                                                   `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               *[]string                                              `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor *string                                                `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          *string                                                `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   *GetObservationsPopularFieldValuesParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               *[]GetObservationsPopularFieldValuesParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               *string                                                `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              *string                                                `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               *string                                                `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerId                   *int                                                   `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                                            `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                                            `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     *string                                                `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceId           *int                                                   `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	Ttl                        *int                                                   `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       *int                                                   `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    *int                                                   `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      *GetObservationsPopularFieldValuesParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    *GetObservationsPopularFieldValuesParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyId                     interface{}                                            `form:"only_id,omitempty" json:"only_id,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{}                                       `form:"fields,omitempty" json:"fields,omitempty"`
	NoHistograms        interface{}                                       `form:"no_histograms,omitempty" json:"no_histograms,omitempty"`
	Unannotated         interface{}                                       `form:"unannotated,omitempty" json:"unannotated,omitempty"`
	DateField           *GetObservationsPopularFieldValuesParamsDateField `form:"date_field,omitempty" json:"date_field,omitempty"`
	Interval            *GetObservationsPopularFieldValuesParamsInterval  `form:"interval,omitempty" json:"interval,omitempty"`
	XHTTPMethodOverride *string                                           `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsPopularFieldValuesParamsId0 defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsId0 = openapi_types.UUID

// GetObservationsPopularFieldValuesParamsId1 defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsId1 = int

// GetObservationsPopularFieldValuesParamsId2 defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsId2 = string

// GetObservationsPopularFieldValuesParams_Id_Item defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParams_Id_Item struct {
	union json.RawMessage
}

// GetObservationsPopularFieldValuesParamsLicense defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsLicense string

// GetObservationsPopularFieldValuesParamsPhotoLicense defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsPhotoLicense string

// GetObservationsPopularFieldValuesParamsPlaceId0 defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsPlaceId0 = openapi_types.UUID

// GetObservationsPopularFieldValuesParamsPlaceId1 defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsPlaceId1 = int

// GetObservationsPopularFieldValuesParamsPlaceId2 defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsPlaceId2 = string

// GetObservationsPopularFieldValuesParams_PlaceId_Item defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParams_PlaceId_Item struct {
	union json.RawMessage
}

// GetObservationsPopularFieldValuesParamsProjectId0 defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsProjectId0 = int

// GetObservationsPopularFieldValuesParamsProjectId1 defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsProjectId1 = string

// GetObservationsPopularFieldValuesParams_ProjectId_Item defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParams_ProjectId_Item struct {
	union json.RawMessage
}

// GetObservationsPopularFieldValuesParamsRank defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsRank string

// GetObservationsPopularFieldValuesParamsSoundLicense defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsSoundLicense string

// GetObservationsPopularFieldValuesParamsCsi defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsCsi string

// GetObservationsPopularFieldValuesParamsGeoprivacy defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsGeoprivacy string

// GetObservationsPopularFieldValuesParamsTaxonGeoprivacy defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsTaxonGeoprivacy string

// GetObservationsPopularFieldValuesParamsObscuration defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsObscuration string

// GetObservationsPopularFieldValuesParamsHrank defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsHrank string

// GetObservationsPopularFieldValuesParamsLrank defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsLrank string

// GetObservationsPopularFieldValuesParamsIconicTaxa defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsIconicTaxa string

// GetObservationsPopularFieldValuesParamsIdentifications defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsIdentifications string

// GetObservationsPopularFieldValuesParamsSearchOn defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsSearchOn string

// GetObservationsPopularFieldValuesParamsQualityGrade defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsQualityGrade string

// GetObservationsPopularFieldValuesParamsOrder defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsOrder string

// GetObservationsPopularFieldValuesParamsOrderBy defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsOrderBy string

// GetObservationsPopularFieldValuesParamsDateField defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsDateField string

// GetObservationsPopularFieldValuesParamsInterval defines parameters for GetObservationsPopularFieldValues.
type GetObservationsPopularFieldValuesParamsInterval string

// GetObservationsQualityGradesParams defines parameters for GetObservationsQualityGrades.
type GetObservationsQualityGradesParams struct {
	Fields              *string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsSpeciesCountsParams defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParams struct {
	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IdPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                                       `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	Id           *[]GetObservationsSpeciesCountsParams_Id_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotId        *[]openapi_types.UUID                             `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      *[]GetObservationsSpeciesCountsParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense *[]GetObservationsSpeciesCountsParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                          `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceId       *[]GetObservationsSpeciesCountsParams_PlaceId_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectId     *[]GetObservationsSpeciesCountsParams_ProjectId_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                          `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            *[]GetObservationsSpeciesCountsParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteId                          *[]int                                               `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    *[]GetObservationsSpeciesCountsParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonId                         *[]int                                               `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonId                  *[]int                                               `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       *string                                              `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserId                          *[]string                                            `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       *[]string                                            `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            *[]int                                               `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             *[]int                                               `form:"day,omitempty" json:"day,omitempty"`
	Month                           *[]int                                               `form:"month,omitempty" json:"month,omitempty"`
	Year                            *[]int                                               `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      *[]int                                               `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    *[]int                                               `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     *[]int                                               `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermId                          *[]int                                               `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueId                     *[]int                                               `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueId              *[]int                                               `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIdOrUnknown                 *[]int                                               `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserId                *[]string                                            `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        *int                                                 `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        *int                                                 `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               *int                                                 `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              *string                                              `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              *string                                              `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       *string                                              `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       *string                                              `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       *string                                              `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      *string                                              `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserId              *string                                              `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            *string                                              `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentId *[]int                                               `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              *string                                              `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             *string                                              `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             *[]GetObservationsSpeciesCountsParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      *[]GetObservationsSpeciesCountsParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 *[]GetObservationsSpeciesCountsParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration *[]GetObservationsSpeciesCountsParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       *[]GetObservationsSpeciesCountsParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       *[]GetObservationsSpeciesCountsParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  *[]GetObservationsSpeciesCountsParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IdAbove     *int                                             `form:"id_above,omitempty" json:"id_above,omitempty"`
	IdBelow     *int                                             `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications *GetObservationsSpeciesCountsParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                                       `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        *float32                                          `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        *float32                                          `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     *float32                                          `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      *float32                                          `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      *float32                                          `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      *float32                                          `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      *float32                                          `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListId                     *int                                              `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               *[]string                                         `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor *string                                           `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          *string                                           `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   *GetObservationsSpeciesCountsParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               *[]GetObservationsSpeciesCountsParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               *string                                           `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              *string                                           `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               *string                                           `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerId                   *int                                              `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                                       `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                                       `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     *string                                           `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceId           *int                                              `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	Ttl                        *int                                              `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       *int                                              `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    *int                                              `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      *GetObservationsSpeciesCountsParamsOrder          `form:"order,omitempty" json:"order,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	IncludeAncestors    interface{} `form:"include_ancestors,omitempty" json:"include_ancestors,omitempty"`
	XHTTPMethodOverride *string     `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsSpeciesCountsParamsId0 defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsId0 = openapi_types.UUID

// GetObservationsSpeciesCountsParamsId1 defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsId1 = int

// GetObservationsSpeciesCountsParamsId2 defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsId2 = string

// GetObservationsSpeciesCountsParams_Id_Item defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParams_Id_Item struct {
	union json.RawMessage
}

// GetObservationsSpeciesCountsParamsLicense defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsLicense string

// GetObservationsSpeciesCountsParamsPhotoLicense defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsPhotoLicense string

// GetObservationsSpeciesCountsParamsPlaceId0 defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsPlaceId0 = openapi_types.UUID

// GetObservationsSpeciesCountsParamsPlaceId1 defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsPlaceId1 = int

// GetObservationsSpeciesCountsParamsPlaceId2 defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsPlaceId2 = string

// GetObservationsSpeciesCountsParams_PlaceId_Item defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParams_PlaceId_Item struct {
	union json.RawMessage
}

// GetObservationsSpeciesCountsParamsProjectId0 defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsProjectId0 = int

// GetObservationsSpeciesCountsParamsProjectId1 defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsProjectId1 = string

// GetObservationsSpeciesCountsParams_ProjectId_Item defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParams_ProjectId_Item struct {
	union json.RawMessage
}

// GetObservationsSpeciesCountsParamsRank defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsRank string

// GetObservationsSpeciesCountsParamsSoundLicense defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsSoundLicense string

// GetObservationsSpeciesCountsParamsCsi defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsCsi string

// GetObservationsSpeciesCountsParamsGeoprivacy defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsGeoprivacy string

// GetObservationsSpeciesCountsParamsTaxonGeoprivacy defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsTaxonGeoprivacy string

// GetObservationsSpeciesCountsParamsObscuration defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsObscuration string

// GetObservationsSpeciesCountsParamsHrank defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsHrank string

// GetObservationsSpeciesCountsParamsLrank defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsLrank string

// GetObservationsSpeciesCountsParamsIconicTaxa defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsIconicTaxa string

// GetObservationsSpeciesCountsParamsIdentifications defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsIdentifications string

// GetObservationsSpeciesCountsParamsSearchOn defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsSearchOn string

// GetObservationsSpeciesCountsParamsQualityGrade defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsQualityGrade string

// GetObservationsSpeciesCountsParamsOrder defines parameters for GetObservationsSpeciesCounts.
type GetObservationsSpeciesCountsParamsOrder string

// GetObservationsUmbrellaProjectStatsParams defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParams struct {
	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IdPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                                              `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	Id           *[]GetObservationsUmbrellaProjectStatsParams_Id_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotId        *[]openapi_types.UUID                                    `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      *[]GetObservationsUmbrellaProjectStatsParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense *[]GetObservationsUmbrellaProjectStatsParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                                 `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceId       *[]GetObservationsUmbrellaProjectStatsParams_PlaceId_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectId     *[]GetObservationsUmbrellaProjectStatsParams_ProjectId_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                                 `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            *[]GetObservationsUmbrellaProjectStatsParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteId                          *[]int                                                      `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    *[]GetObservationsUmbrellaProjectStatsParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonId                         *[]int                                                      `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonId                  *[]int                                                      `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       *string                                                     `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserId                          *[]string                                                   `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       *[]string                                                   `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            *[]int                                                      `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             *[]int                                                      `form:"day,omitempty" json:"day,omitempty"`
	Month                           *[]int                                                      `form:"month,omitempty" json:"month,omitempty"`
	Year                            *[]int                                                      `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      *[]int                                                      `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    *[]int                                                      `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     *[]int                                                      `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermId                          *[]int                                                      `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueId                     *[]int                                                      `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueId              *[]int                                                      `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIdOrUnknown                 *[]int                                                      `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserId                *[]string                                                   `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        *int                                                        `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        *int                                                        `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               *int                                                        `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              *string                                                     `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              *string                                                     `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       *string                                                     `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       *string                                                     `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       *string                                                     `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      *string                                                     `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserId              *string                                                     `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            *string                                                     `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentId *[]int                                                      `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              *string                                                     `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             *string                                                     `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             *[]GetObservationsUmbrellaProjectStatsParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      *[]GetObservationsUmbrellaProjectStatsParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 *[]GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration *[]GetObservationsUmbrellaProjectStatsParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       *[]GetObservationsUmbrellaProjectStatsParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       *[]GetObservationsUmbrellaProjectStatsParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  *[]GetObservationsUmbrellaProjectStatsParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IdAbove     *int                                                    `form:"id_above,omitempty" json:"id_above,omitempty"`
	IdBelow     *int                                                    `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications *GetObservationsUmbrellaProjectStatsParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                                              `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        *float32                                                 `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        *float32                                                 `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     *float32                                                 `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      *float32                                                 `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      *float32                                                 `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      *float32                                                 `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      *float32                                                 `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListId                     *int                                                     `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               *[]string                                                `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor *string                                                  `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          *string                                                  `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   *GetObservationsUmbrellaProjectStatsParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               *[]GetObservationsUmbrellaProjectStatsParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               *string                                                  `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              *string                                                  `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               *string                                                  `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerId                   *int                                                     `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                                              `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                                              `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     *string                                                  `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceId           *int                                                     `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	Ttl                        *int                                                     `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       *int                                                     `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    *int                                                     `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      *GetObservationsUmbrellaProjectStatsParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    *GetObservationsUmbrellaProjectStatsParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyId                     interface{}                                              `form:"only_id,omitempty" json:"only_id,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string     `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsUmbrellaProjectStatsParamsId0 defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsId0 = openapi_types.UUID

// GetObservationsUmbrellaProjectStatsParamsId1 defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsId1 = int

// GetObservationsUmbrellaProjectStatsParamsId2 defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsId2 = string

// GetObservationsUmbrellaProjectStatsParams_Id_Item defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParams_Id_Item struct {
	union json.RawMessage
}

// GetObservationsUmbrellaProjectStatsParamsLicense defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsLicense string

// GetObservationsUmbrellaProjectStatsParamsPhotoLicense defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsPhotoLicense string

// GetObservationsUmbrellaProjectStatsParamsPlaceId0 defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsPlaceId0 = openapi_types.UUID

// GetObservationsUmbrellaProjectStatsParamsPlaceId1 defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsPlaceId1 = int

// GetObservationsUmbrellaProjectStatsParamsPlaceId2 defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsPlaceId2 = string

// GetObservationsUmbrellaProjectStatsParams_PlaceId_Item defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParams_PlaceId_Item struct {
	union json.RawMessage
}

// GetObservationsUmbrellaProjectStatsParamsProjectId0 defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsProjectId0 = int

// GetObservationsUmbrellaProjectStatsParamsProjectId1 defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsProjectId1 = string

// GetObservationsUmbrellaProjectStatsParams_ProjectId_Item defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParams_ProjectId_Item struct {
	union json.RawMessage
}

// GetObservationsUmbrellaProjectStatsParamsRank defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsRank string

// GetObservationsUmbrellaProjectStatsParamsSoundLicense defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsSoundLicense string

// GetObservationsUmbrellaProjectStatsParamsCsi defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsCsi string

// GetObservationsUmbrellaProjectStatsParamsGeoprivacy defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsGeoprivacy string

// GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacy defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsTaxonGeoprivacy string

// GetObservationsUmbrellaProjectStatsParamsObscuration defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsObscuration string

// GetObservationsUmbrellaProjectStatsParamsHrank defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsHrank string

// GetObservationsUmbrellaProjectStatsParamsLrank defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsLrank string

// GetObservationsUmbrellaProjectStatsParamsIconicTaxa defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsIconicTaxa string

// GetObservationsUmbrellaProjectStatsParamsIdentifications defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsIdentifications string

// GetObservationsUmbrellaProjectStatsParamsSearchOn defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsSearchOn string

// GetObservationsUmbrellaProjectStatsParamsQualityGrade defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsQualityGrade string

// GetObservationsUmbrellaProjectStatsParamsOrder defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsOrder string

// GetObservationsUmbrellaProjectStatsParamsOrderBy defines parameters for GetObservationsUmbrellaProjectStats.
type GetObservationsUmbrellaProjectStatsParamsOrderBy string

// GetObservationsUpdatesParams defines parameters for GetObservationsUpdates.
type GetObservationsUpdatesParams struct {
	// CreatedAfter ISO8601 datetime after which the update was created
	CreatedAfter *string `form:"created_after,omitempty" json:"created_after,omitempty"`

	// Viewed When false this only returns updates that have not been viewed by the authenticated user. When true it returns all updates.
	Viewed interface{} `form:"viewed,omitempty" json:"viewed,omitempty"`

	// ObservationsBy Restrict to updates on observations by the authenticated user (owner) or on observations the authenticated user is following
	ObservationsBy      *GetObservationsUpdatesParamsObservationsBy `form:"observations_by,omitempty" json:"observations_by,omitempty"`
	Page                *int                                        `form:"page,omitempty" json:"page,omitempty"`
	PerPage             *int                                        `form:"per_page,omitempty" json:"per_page,omitempty"`
	Fields              interface{}                                 `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string                                     `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsUpdatesParamsObservationsBy defines parameters for GetObservationsUpdates.
type GetObservationsUpdatesParamsObservationsBy string

// GetObservationsUuidParams defines parameters for GetObservationsUuid.
type GetObservationsUuidParams struct {
	Fields              *string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string `json:"X-HTTP-Method-Override,omitempty"`
}

// DeleteObservationsUuidQualityMetricParamsMetric defines parameters for DeleteObservationsUuidQualityMetric.
type DeleteObservationsUuidQualityMetricParamsMetric string

// PostObservationsUuidQualityMetricParams defines parameters for PostObservationsUuidQualityMetric.
type PostObservationsUuidQualityMetricParams struct {
	Agree interface{} `form:"agree,omitempty" json:"agree,omitempty"`
}

// PostObservationsUuidQualityMetricParamsMetric defines parameters for PostObservationsUuidQualityMetric.
type PostObservationsUuidQualityMetricParamsMetric string

// GetObservationsUuidQualityMetricsParams defines parameters for GetObservationsUuidQualityMetrics.
type GetObservationsUuidQualityMetricsParams struct {
	Fields              *string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsUuidSubscriptionsParams defines parameters for GetObservationsUuidSubscriptions.
type GetObservationsUuidSubscriptionsParams struct {
	Fields              *string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetObservationsUuidTaxonSummaryParams defines parameters for GetObservationsUuidTaxonSummary.
type GetObservationsUuidTaxonSummaryParams struct {
	// Community Show info about the community taxon instead of the observation taxon
	Community interface{} `form:"community,omitempty" json:"community,omitempty"`
}

// GetPlacesParams defines parameters for GetPlaces.
type GetPlacesParams struct {
	Q                   *string                 `form:"q,omitempty" json:"q,omitempty"`
	OrderBy             *GetPlacesParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
	Geo                 interface{}             `form:"geo,omitempty" json:"geo,omitempty"`
	PerPage             *int                    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Fields              interface{}             `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string                 `json:"X-HTTP-Method-Override,omitempty"`
}

// GetPlacesParamsOrderBy defines parameters for GetPlaces.
type GetPlacesParamsOrderBy string

// GetPlacesNearbyParams defines parameters for GetPlacesNearby.
type GetPlacesNearbyParams struct {
	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IdPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                          `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	Id           *[]GetPlacesNearbyParams_Id_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotId        *[]openapi_types.UUID                `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      *[]GetPlacesNearbyParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense *[]GetPlacesNearbyParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                             `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceId       *[]GetPlacesNearbyParams_PlaceId_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectId     *[]GetPlacesNearbyParams_ProjectId_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                             `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            *[]GetPlacesNearbyParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteId                          *[]int                                  `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    *[]GetPlacesNearbyParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonId                         *[]int                                  `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonId                  *[]int                                  `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       *string                                 `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserId                          *[]string                               `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       *[]string                               `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            *[]int                                  `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             *[]int                                  `form:"day,omitempty" json:"day,omitempty"`
	Month                           *[]int                                  `form:"month,omitempty" json:"month,omitempty"`
	Year                            *[]int                                  `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      *[]int                                  `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    *[]int                                  `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     *[]int                                  `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermId                          *[]int                                  `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueId                     *[]int                                  `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueId              *[]int                                  `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIdOrUnknown                 *[]int                                  `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserId                *[]string                               `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        *int                                    `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        *int                                    `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               *int                                    `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              *string                                 `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              *string                                 `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       *string                                 `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       *string                                 `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       *string                                 `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      *string                                 `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserId              *string                                 `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            *string                                 `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentId *[]int                                  `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              *string                                 `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             *string                                 `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             *[]GetPlacesNearbyParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      *[]GetPlacesNearbyParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 *[]GetPlacesNearbyParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration *[]GetPlacesNearbyParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       *[]GetPlacesNearbyParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       *[]GetPlacesNearbyParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  *[]GetPlacesNearbyParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IdAbove     *int                                `form:"id_above,omitempty" json:"id_above,omitempty"`
	IdBelow     *int                                `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications *GetPlacesNearbyParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                          `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        *float32                             `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        *float32                             `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     *float32                             `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      *float32                             `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      *float32                             `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      *float32                             `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      *float32                             `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListId                     *int                                 `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               *[]string                            `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor *string                              `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          *string                              `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   *GetPlacesNearbyParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               *[]GetPlacesNearbyParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               *string                              `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              *string                              `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               *string                              `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerId                   *int                                 `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                          `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                          `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     *string                              `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceId           *int                                 `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	Ttl                        *int                                 `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       *int                                 `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    *int                                 `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      *GetPlacesNearbyParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    *GetPlacesNearbyParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyId                     interface{}                          `form:"only_id,omitempty" json:"only_id,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{}                     `form:"fields,omitempty" json:"fields,omitempty"`
	DateField           *GetPlacesNearbyParamsDateField `form:"date_field,omitempty" json:"date_field,omitempty"`
	Interval            *GetPlacesNearbyParamsInterval  `form:"interval,omitempty" json:"interval,omitempty"`
	XHTTPMethodOverride *string                         `json:"X-HTTP-Method-Override,omitempty"`
}

// GetPlacesNearbyParamsId0 defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsId0 = openapi_types.UUID

// GetPlacesNearbyParamsId1 defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsId1 = int

// GetPlacesNearbyParamsId2 defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsId2 = string

// GetPlacesNearbyParams_Id_Item defines parameters for GetPlacesNearby.
type GetPlacesNearbyParams_Id_Item struct {
	union json.RawMessage
}

// GetPlacesNearbyParamsLicense defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsLicense string

// GetPlacesNearbyParamsPhotoLicense defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsPhotoLicense string

// GetPlacesNearbyParamsPlaceId0 defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsPlaceId0 = openapi_types.UUID

// GetPlacesNearbyParamsPlaceId1 defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsPlaceId1 = int

// GetPlacesNearbyParamsPlaceId2 defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsPlaceId2 = string

// GetPlacesNearbyParams_PlaceId_Item defines parameters for GetPlacesNearby.
type GetPlacesNearbyParams_PlaceId_Item struct {
	union json.RawMessage
}

// GetPlacesNearbyParamsProjectId0 defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsProjectId0 = int

// GetPlacesNearbyParamsProjectId1 defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsProjectId1 = string

// GetPlacesNearbyParams_ProjectId_Item defines parameters for GetPlacesNearby.
type GetPlacesNearbyParams_ProjectId_Item struct {
	union json.RawMessage
}

// GetPlacesNearbyParamsRank defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsRank string

// GetPlacesNearbyParamsSoundLicense defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsSoundLicense string

// GetPlacesNearbyParamsCsi defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsCsi string

// GetPlacesNearbyParamsGeoprivacy defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsGeoprivacy string

// GetPlacesNearbyParamsTaxonGeoprivacy defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsTaxonGeoprivacy string

// GetPlacesNearbyParamsObscuration defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsObscuration string

// GetPlacesNearbyParamsHrank defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsHrank string

// GetPlacesNearbyParamsLrank defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsLrank string

// GetPlacesNearbyParamsIconicTaxa defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsIconicTaxa string

// GetPlacesNearbyParamsIdentifications defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsIdentifications string

// GetPlacesNearbyParamsSearchOn defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsSearchOn string

// GetPlacesNearbyParamsQualityGrade defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsQualityGrade string

// GetPlacesNearbyParamsOrder defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsOrder string

// GetPlacesNearbyParamsOrderBy defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsOrderBy string

// GetPlacesNearbyParamsDateField defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsDateField string

// GetPlacesNearbyParamsInterval defines parameters for GetPlacesNearby.
type GetPlacesNearbyParamsInterval string

// GetPlacesIdZoomXYPngParams defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParams struct {
	TileSize *GetPlacesIdZoomXYPngParamsTileSize `form:"tile_size,omitempty" json:"tile_size,omitempty"`

	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IdPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                               `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	NotId        *[]openapi_types.UUID                     `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      *[]GetPlacesIdZoomXYPngParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense *[]GetPlacesIdZoomXYPngParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                  `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceId       *[]GetPlacesIdZoomXYPngParams_PlaceId_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectId     *[]GetPlacesIdZoomXYPngParams_ProjectId_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                  `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            *[]GetPlacesIdZoomXYPngParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteId                          *[]int                                       `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    *[]GetPlacesIdZoomXYPngParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonId                         *[]int                                       `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonId                  *[]int                                       `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       *string                                      `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserId                          *[]string                                    `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       *[]string                                    `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            *[]int                                       `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             *[]int                                       `form:"day,omitempty" json:"day,omitempty"`
	Month                           *[]int                                       `form:"month,omitempty" json:"month,omitempty"`
	Year                            *[]int                                       `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      *[]int                                       `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    *[]int                                       `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     *[]int                                       `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermId                          *[]int                                       `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueId                     *[]int                                       `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueId              *[]int                                       `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIdOrUnknown                 *[]int                                       `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserId                *[]string                                    `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        *int                                         `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        *int                                         `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               *int                                         `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              *string                                      `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              *string                                      `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       *string                                      `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       *string                                      `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       *string                                      `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      *string                                      `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserId              *string                                      `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            *string                                      `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentId *[]int                                       `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              *string                                      `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             *string                                      `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             *[]GetPlacesIdZoomXYPngParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      *[]GetPlacesIdZoomXYPngParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 *[]GetPlacesIdZoomXYPngParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration *[]GetPlacesIdZoomXYPngParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       *[]GetPlacesIdZoomXYPngParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       *[]GetPlacesIdZoomXYPngParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  *[]GetPlacesIdZoomXYPngParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IdAbove     *int                                     `form:"id_above,omitempty" json:"id_above,omitempty"`
	IdBelow     *int                                     `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications *GetPlacesIdZoomXYPngParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                               `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        *float32                                  `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        *float32                                  `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     *float32                                  `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      *float32                                  `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      *float32                                  `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      *float32                                  `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      *float32                                  `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListId                     *int                                      `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               *[]string                                 `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor *string                                   `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          *string                                   `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   *GetPlacesIdZoomXYPngParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               *[]GetPlacesIdZoomXYPngParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               *string                                   `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              *string                                   `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               *string                                   `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerId                   *int                                      `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                               `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                               `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     *string                                   `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceId           *int                                      `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	Ttl                        *int                                      `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       *int                                      `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    *int                                      `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      *GetPlacesIdZoomXYPngParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    *GetPlacesIdZoomXYPngParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyId                     interface{}                               `form:"only_id,omitempty" json:"only_id,omitempty"`
}

// GetPlacesIdZoomXYPngParamsTileSize defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParamsTileSize int

// GetPlacesIdZoomXYPngParamsLicense defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParamsLicense string

// GetPlacesIdZoomXYPngParamsPhotoLicense defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParamsPhotoLicense string

// GetPlacesIdZoomXYPngParamsPlaceId0 defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParamsPlaceId0 = openapi_types.UUID

// GetPlacesIdZoomXYPngParamsPlaceId1 defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParamsPlaceId1 = int

// GetPlacesIdZoomXYPngParamsPlaceId2 defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParamsPlaceId2 = string

// GetPlacesIdZoomXYPngParams_PlaceId_Item defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParams_PlaceId_Item struct {
	union json.RawMessage
}

// GetPlacesIdZoomXYPngParamsProjectId0 defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParamsProjectId0 = int

// GetPlacesIdZoomXYPngParamsProjectId1 defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParamsProjectId1 = string

// GetPlacesIdZoomXYPngParams_ProjectId_Item defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParams_ProjectId_Item struct {
	union json.RawMessage
}

// GetPlacesIdZoomXYPngParamsRank defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParamsRank string

// GetPlacesIdZoomXYPngParamsSoundLicense defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParamsSoundLicense string

// GetPlacesIdZoomXYPngParamsCsi defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParamsCsi string

// GetPlacesIdZoomXYPngParamsGeoprivacy defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParamsGeoprivacy string

// GetPlacesIdZoomXYPngParamsTaxonGeoprivacy defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParamsTaxonGeoprivacy string

// GetPlacesIdZoomXYPngParamsObscuration defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParamsObscuration string

// GetPlacesIdZoomXYPngParamsHrank defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParamsHrank string

// GetPlacesIdZoomXYPngParamsLrank defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParamsLrank string

// GetPlacesIdZoomXYPngParamsIconicTaxa defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParamsIconicTaxa string

// GetPlacesIdZoomXYPngParamsIdentifications defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParamsIdentifications string

// GetPlacesIdZoomXYPngParamsSearchOn defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParamsSearchOn string

// GetPlacesIdZoomXYPngParamsQualityGrade defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParamsQualityGrade string

// GetPlacesIdZoomXYPngParamsOrder defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParamsOrder string

// GetPlacesIdZoomXYPngParamsOrderBy defines parameters for GetPlacesIdZoomXYPng.
type GetPlacesIdZoomXYPngParamsOrderBy string

// GetPlacesUuidParams defines parameters for GetPlacesUuid.
type GetPlacesUuidParams struct {
	// Lat Latitude of coordinate used to sort results by distance
	Lat *string `form:"lat,omitempty" json:"lat,omitempty"`

	// Lng Longitude of coordinate used to sort results by distance
	Lng *string `form:"lng,omitempty" json:"lng,omitempty"`

	// OrderBy Order results by admin level and distance from a point specified in lat and lng
	OrderBy             *GetPlacesUuidParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
	Fields              *string                     `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string                     `json:"X-HTTP-Method-Override,omitempty"`
}

// GetPlacesUuidParamsOrderBy defines parameters for GetPlacesUuid.
type GetPlacesUuidParamsOrderBy string

// GetPointsZoomXYGridJsonParams defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParams struct {
	TileSize *GetPointsZoomXYGridJsonParamsTileSize `form:"tile_size,omitempty" json:"tile_size,omitempty"`

	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IdPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                                  `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	Id           *[]GetPointsZoomXYGridJsonParams_Id_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotId        *[]openapi_types.UUID                        `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      *[]GetPointsZoomXYGridJsonParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense *[]GetPointsZoomXYGridJsonParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                     `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceId       *[]GetPointsZoomXYGridJsonParams_PlaceId_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectId     *[]GetPointsZoomXYGridJsonParams_ProjectId_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                     `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            *[]GetPointsZoomXYGridJsonParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteId                          *[]int                                          `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    *[]GetPointsZoomXYGridJsonParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonId                         *[]int                                          `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonId                  *[]int                                          `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       *string                                         `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserId                          *[]string                                       `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       *[]string                                       `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            *[]int                                          `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             *[]int                                          `form:"day,omitempty" json:"day,omitempty"`
	Month                           *[]int                                          `form:"month,omitempty" json:"month,omitempty"`
	Year                            *[]int                                          `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      *[]int                                          `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    *[]int                                          `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     *[]int                                          `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermId                          *[]int                                          `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueId                     *[]int                                          `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueId              *[]int                                          `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIdOrUnknown                 *[]int                                          `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserId                *[]string                                       `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        *int                                            `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        *int                                            `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               *int                                            `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              *string                                         `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              *string                                         `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       *string                                         `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       *string                                         `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       *string                                         `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      *string                                         `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserId              *string                                         `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            *string                                         `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentId *[]int                                          `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              *string                                         `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             *string                                         `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             *[]GetPointsZoomXYGridJsonParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      *[]GetPointsZoomXYGridJsonParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 *[]GetPointsZoomXYGridJsonParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration *[]GetPointsZoomXYGridJsonParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       *[]GetPointsZoomXYGridJsonParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       *[]GetPointsZoomXYGridJsonParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  *[]GetPointsZoomXYGridJsonParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IdAbove     *int                                        `form:"id_above,omitempty" json:"id_above,omitempty"`
	IdBelow     *int                                        `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications *GetPointsZoomXYGridJsonParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                                  `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        *float32                                     `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        *float32                                     `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     *float32                                     `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      *float32                                     `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      *float32                                     `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      *float32                                     `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      *float32                                     `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListId                     *int                                         `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               *[]string                                    `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor *string                                      `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          *string                                      `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   *GetPointsZoomXYGridJsonParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               *[]GetPointsZoomXYGridJsonParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               *string                                      `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              *string                                      `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               *string                                      `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerId                   *int                                         `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                                  `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                                  `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     *string                                      `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceId           *int                                         `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	Ttl                        *int                                         `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       *int                                         `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    *int                                         `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      *GetPointsZoomXYGridJsonParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    *GetPointsZoomXYGridJsonParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyId                     interface{}                                  `form:"only_id,omitempty" json:"only_id,omitempty"`
}

// GetPointsZoomXYGridJsonParamsTileSize defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsTileSize int

// GetPointsZoomXYGridJsonParamsId0 defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsId0 = openapi_types.UUID

// GetPointsZoomXYGridJsonParamsId1 defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsId1 = int

// GetPointsZoomXYGridJsonParamsId2 defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsId2 = string

// GetPointsZoomXYGridJsonParams_Id_Item defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParams_Id_Item struct {
	union json.RawMessage
}

// GetPointsZoomXYGridJsonParamsLicense defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsLicense string

// GetPointsZoomXYGridJsonParamsPhotoLicense defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsPhotoLicense string

// GetPointsZoomXYGridJsonParamsPlaceId0 defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsPlaceId0 = openapi_types.UUID

// GetPointsZoomXYGridJsonParamsPlaceId1 defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsPlaceId1 = int

// GetPointsZoomXYGridJsonParamsPlaceId2 defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsPlaceId2 = string

// GetPointsZoomXYGridJsonParams_PlaceId_Item defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParams_PlaceId_Item struct {
	union json.RawMessage
}

// GetPointsZoomXYGridJsonParamsProjectId0 defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsProjectId0 = int

// GetPointsZoomXYGridJsonParamsProjectId1 defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsProjectId1 = string

// GetPointsZoomXYGridJsonParams_ProjectId_Item defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParams_ProjectId_Item struct {
	union json.RawMessage
}

// GetPointsZoomXYGridJsonParamsRank defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsRank string

// GetPointsZoomXYGridJsonParamsSoundLicense defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsSoundLicense string

// GetPointsZoomXYGridJsonParamsCsi defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsCsi string

// GetPointsZoomXYGridJsonParamsGeoprivacy defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsGeoprivacy string

// GetPointsZoomXYGridJsonParamsTaxonGeoprivacy defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsTaxonGeoprivacy string

// GetPointsZoomXYGridJsonParamsObscuration defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsObscuration string

// GetPointsZoomXYGridJsonParamsHrank defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsHrank string

// GetPointsZoomXYGridJsonParamsLrank defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsLrank string

// GetPointsZoomXYGridJsonParamsIconicTaxa defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsIconicTaxa string

// GetPointsZoomXYGridJsonParamsIdentifications defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsIdentifications string

// GetPointsZoomXYGridJsonParamsSearchOn defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsSearchOn string

// GetPointsZoomXYGridJsonParamsQualityGrade defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsQualityGrade string

// GetPointsZoomXYGridJsonParamsOrder defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsOrder string

// GetPointsZoomXYGridJsonParamsOrderBy defines parameters for GetPointsZoomXYGridJson.
type GetPointsZoomXYGridJsonParamsOrderBy string

// GetPointsZoomXYPngParams defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParams struct {
	TileSize *GetPointsZoomXYPngParamsTileSize `form:"tile_size,omitempty" json:"tile_size,omitempty"`

	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IdPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                             `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	Id           *[]GetPointsZoomXYPngParams_Id_Item     `form:"id,omitempty" json:"id,omitempty"`
	NotId        *[]openapi_types.UUID                   `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      *[]GetPointsZoomXYPngParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense *[]GetPointsZoomXYPngParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceId       *[]GetPointsZoomXYPngParams_PlaceId_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectId     *[]GetPointsZoomXYPngParams_ProjectId_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            *[]GetPointsZoomXYPngParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteId                          *[]int                                     `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    *[]GetPointsZoomXYPngParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonId                         *[]int                                     `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonId                  *[]int                                     `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       *string                                    `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserId                          *[]string                                  `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       *[]string                                  `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            *[]int                                     `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             *[]int                                     `form:"day,omitempty" json:"day,omitempty"`
	Month                           *[]int                                     `form:"month,omitempty" json:"month,omitempty"`
	Year                            *[]int                                     `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      *[]int                                     `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    *[]int                                     `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     *[]int                                     `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermId                          *[]int                                     `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueId                     *[]int                                     `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueId              *[]int                                     `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIdOrUnknown                 *[]int                                     `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserId                *[]string                                  `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        *int                                       `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        *int                                       `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               *int                                       `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              *string                                    `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              *string                                    `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       *string                                    `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       *string                                    `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       *string                                    `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      *string                                    `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserId              *string                                    `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            *string                                    `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentId *[]int                                     `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              *string                                    `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             *string                                    `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             *[]GetPointsZoomXYPngParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      *[]GetPointsZoomXYPngParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 *[]GetPointsZoomXYPngParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration *[]GetPointsZoomXYPngParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       *[]GetPointsZoomXYPngParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       *[]GetPointsZoomXYPngParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  *[]GetPointsZoomXYPngParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IdAbove     *int                                   `form:"id_above,omitempty" json:"id_above,omitempty"`
	IdBelow     *int                                   `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications *GetPointsZoomXYPngParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                             `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        *float32                                `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        *float32                                `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     *float32                                `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      *float32                                `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      *float32                                `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      *float32                                `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      *float32                                `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListId                     *int                                    `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               *[]string                               `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor *string                                 `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          *string                                 `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   *GetPointsZoomXYPngParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               *[]GetPointsZoomXYPngParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               *string                                 `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              *string                                 `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               *string                                 `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerId                   *int                                    `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                             `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                             `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     *string                                 `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceId           *int                                    `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	Ttl                        *int                                    `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       *int                                    `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    *int                                    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      *GetPointsZoomXYPngParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    *GetPointsZoomXYPngParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyId                     interface{}                             `form:"only_id,omitempty" json:"only_id,omitempty"`
}

// GetPointsZoomXYPngParamsTileSize defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsTileSize int

// GetPointsZoomXYPngParamsId0 defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsId0 = openapi_types.UUID

// GetPointsZoomXYPngParamsId1 defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsId1 = int

// GetPointsZoomXYPngParamsId2 defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsId2 = string

// GetPointsZoomXYPngParams_Id_Item defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParams_Id_Item struct {
	union json.RawMessage
}

// GetPointsZoomXYPngParamsLicense defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsLicense string

// GetPointsZoomXYPngParamsPhotoLicense defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsPhotoLicense string

// GetPointsZoomXYPngParamsPlaceId0 defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsPlaceId0 = openapi_types.UUID

// GetPointsZoomXYPngParamsPlaceId1 defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsPlaceId1 = int

// GetPointsZoomXYPngParamsPlaceId2 defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsPlaceId2 = string

// GetPointsZoomXYPngParams_PlaceId_Item defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParams_PlaceId_Item struct {
	union json.RawMessage
}

// GetPointsZoomXYPngParamsProjectId0 defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsProjectId0 = int

// GetPointsZoomXYPngParamsProjectId1 defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsProjectId1 = string

// GetPointsZoomXYPngParams_ProjectId_Item defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParams_ProjectId_Item struct {
	union json.RawMessage
}

// GetPointsZoomXYPngParamsRank defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsRank string

// GetPointsZoomXYPngParamsSoundLicense defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsSoundLicense string

// GetPointsZoomXYPngParamsCsi defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsCsi string

// GetPointsZoomXYPngParamsGeoprivacy defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsGeoprivacy string

// GetPointsZoomXYPngParamsTaxonGeoprivacy defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsTaxonGeoprivacy string

// GetPointsZoomXYPngParamsObscuration defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsObscuration string

// GetPointsZoomXYPngParamsHrank defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsHrank string

// GetPointsZoomXYPngParamsLrank defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsLrank string

// GetPointsZoomXYPngParamsIconicTaxa defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsIconicTaxa string

// GetPointsZoomXYPngParamsIdentifications defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsIdentifications string

// GetPointsZoomXYPngParamsSearchOn defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsSearchOn string

// GetPointsZoomXYPngParamsQualityGrade defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsQualityGrade string

// GetPointsZoomXYPngParamsOrder defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsOrder string

// GetPointsZoomXYPngParamsOrderBy defines parameters for GetPointsZoomXYPng.
type GetPointsZoomXYPngParamsOrderBy string

// GetProjectsParams defines parameters for GetProjects.
type GetProjectsParams struct {
	Q           *string                   `form:"q,omitempty" json:"q,omitempty"`
	Id          *[]int                    `form:"id,omitempty" json:"id,omitempty"`
	NotId       *[]int                    `form:"not_id,omitempty" json:"not_id,omitempty"`
	Lat         *float32                  `form:"lat,omitempty" json:"lat,omitempty"`
	Lng         *float32                  `form:"lng,omitempty" json:"lng,omitempty"`
	Radius      *int                      `form:"radius,omitempty" json:"radius,omitempty"`
	PlaceId     *[]int                    `form:"place_id,omitempty" json:"place_id,omitempty"`
	Features    interface{}               `form:"features,omitempty" json:"features,omitempty"`
	Noteworthy  interface{}               `form:"noteworthy,omitempty" json:"noteworthy,omitempty"`
	SiteId      *int                      `form:"site_id,omitempty" json:"site_id,omitempty"`
	RuleDetails interface{}               `form:"rule_details,omitempty" json:"rule_details,omitempty"`
	Type        *[]GetProjectsParamsType  `form:"type,omitempty" json:"type,omitempty"`
	MemberId    *[]int                    `form:"member_id,omitempty" json:"member_id,omitempty"`
	HasParams   interface{}               `form:"has_params,omitempty" json:"has_params,omitempty"`
	HasPosts    interface{}               `form:"has_posts,omitempty" json:"has_posts,omitempty"`
	Page        *int                      `form:"page,omitempty" json:"page,omitempty"`
	PerPage     *int                      `form:"per_page,omitempty" json:"per_page,omitempty"`
	OrderBy     *GetProjectsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string     `json:"X-HTTP-Method-Override,omitempty"`
}

// GetProjectsParamsType defines parameters for GetProjects.
type GetProjectsParamsType string

// GetProjectsParamsOrderBy defines parameters for GetProjects.
type GetProjectsParamsOrderBy string

// GetProjectsIdParams defines parameters for GetProjectsId.
type GetProjectsIdParams struct {
	RuleDetails         interface{} `form:"rule_details,omitempty" json:"rule_details,omitempty"`
	Fields              *string     `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string     `json:"X-HTTP-Method-Override,omitempty"`
}

// GetProjectsIdMembersParams defines parameters for GetProjectsIdMembers.
type GetProjectsIdMembersParams struct {
	// SkipCounts If counts are not needed, consider setting this to true to save on processing time, resulting in faster responses
	SkipCounts          interface{}                        `form:"skip_counts,omitempty" json:"skip_counts,omitempty"`
	Page                *int                               `form:"page,omitempty" json:"page,omitempty"`
	PerPage             *int                               `form:"per_page,omitempty" json:"per_page,omitempty"`
	Fields              interface{}                        `form:"fields,omitempty" json:"fields,omitempty"`
	OrderBy             *GetProjectsIdMembersParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
	XHTTPMethodOverride *string                            `json:"X-HTTP-Method-Override,omitempty"`
}

// GetProjectsIdMembersParamsOrderBy defines parameters for GetProjectsIdMembers.
type GetProjectsIdMembersParamsOrderBy string

// GetProjectsIdMembershipParams defines parameters for GetProjectsIdMembership.
type GetProjectsIdMembershipParams struct {
	Fields              *string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetProjectsIdPostsParams defines parameters for GetProjectsIdPosts.
type GetProjectsIdPostsParams struct {
	Page                *int        `form:"page,omitempty" json:"page,omitempty"`
	PerPage             *int        `form:"per_page,omitempty" json:"per_page,omitempty"`
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string     `json:"X-HTTP-Method-Override,omitempty"`
}

// GetProviderAuthorizationsParams defines parameters for GetProviderAuthorizations.
type GetProviderAuthorizationsParams struct {
	Fields              *string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetRelationshipsParams defines parameters for GetRelationships.
type GetRelationshipsParams struct {
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Trusted Whether or not the user trusts the friend with hidden coordinates.
	Trusted *GetRelationshipsParamsTrusted `form:"trusted,omitempty" json:"trusted,omitempty"`

	// Following Whether or not the user wants to see updates about new content from the friend.
	Following *GetRelationshipsParamsFollowing `form:"following,omitempty" json:"following,omitempty"`
	Order     *GetRelationshipsParamsOrder     `form:"order,omitempty" json:"order,omitempty"`
	OrderBy   *GetRelationshipsParamsOrderBy   `form:"order_by,omitempty" json:"order_by,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string     `json:"X-HTTP-Method-Override,omitempty"`
}

// GetRelationshipsParamsTrusted defines parameters for GetRelationships.
type GetRelationshipsParamsTrusted string

// GetRelationshipsParamsFollowing defines parameters for GetRelationships.
type GetRelationshipsParamsFollowing string

// GetRelationshipsParamsOrder defines parameters for GetRelationships.
type GetRelationshipsParamsOrder string

// GetRelationshipsParamsOrderBy defines parameters for GetRelationships.
type GetRelationshipsParamsOrderBy string

// GetSavedLocationsParams defines parameters for GetSavedLocations.
type GetSavedLocationsParams struct {
	Q                   *string     `form:"q,omitempty" json:"q,omitempty"`
	Page                *int        `form:"page,omitempty" json:"page,omitempty"`
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string     `json:"X-HTTP-Method-Override,omitempty"`
}

// GetSearchParams defines parameters for GetSearch.
type GetSearchParams struct {
	// Q Search query
	Q      *string `form:"q,omitempty" json:"q,omitempty"`
	Locale *string `form:"locale,omitempty" json:"locale,omitempty"`

	// PlaceId Integer ID for a place associated with results; only works for projects
	PlaceId *int `form:"place_id,omitempty" json:"place_id,omitempty"`

	// PreferredPlaceId Localizes some response values for the given place
	PreferredPlaceId *int `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`

	// Sources Filters search results by record types. Can be specified as an array or a comma-separated list of values
	Sources               *[]GetSearchParamsSources `form:"sources,omitempty" json:"sources,omitempty"`
	IncludeTaxonAncestors interface{}               `form:"include_taxon_ancestors,omitempty" json:"include_taxon_ancestors,omitempty"`
	Page                  *int                      `form:"page,omitempty" json:"page,omitempty"`
	PerPage               *int                      `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Fields Attribute fields to return in the response
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string     `json:"X-HTTP-Method-Override,omitempty"`
}

// GetSearchParamsSources defines parameters for GetSearch.
type GetSearchParamsSources string

// GetSitesParams defines parameters for GetSites.
type GetSitesParams struct {
	XHTTPMethodOverride *string `json:"X-HTTP-Method-Override,omitempty"`
}

// PostSoundsMultipartBody defines parameters for PostSounds.
type PostSoundsMultipartBody struct {
	Fields interface{}         `json:"fields,omitempty"`
	File   openapi_types.File  `json:"file"`
	Uuid   *openapi_types.UUID `json:"uuid,omitempty"`
}

// GetTaxaParams defines parameters for GetTaxa.
type GetTaxaParams struct {
	Q                   *string              `form:"q,omitempty" json:"q,omitempty"`
	IsActive            interface{}          `form:"is_active,omitempty" json:"is_active,omitempty"`
	Iconic              interface{}          `form:"iconic,omitempty" json:"iconic,omitempty"`
	TaxonId             *int                 `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	ParentId            *int                 `form:"parent_id,omitempty" json:"parent_id,omitempty"`
	Rank                *[]GetTaxaParamsRank `form:"rank,omitempty" json:"rank,omitempty"`
	RankLevel           *[]float32           `form:"rank_level,omitempty" json:"rank_level,omitempty"`
	IdAbove             *int                 `form:"id_above,omitempty" json:"id_above,omitempty"`
	IdBelow             *int                 `form:"id_below,omitempty" json:"id_below,omitempty"`
	PerPage             *int                 `form:"per_page,omitempty" json:"per_page,omitempty"`
	Locale              *string              `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceId    *int                 `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	Fields              interface{}          `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string              `json:"X-HTTP-Method-Override,omitempty"`
}

// GetTaxaParamsRank defines parameters for GetTaxa.
type GetTaxaParamsRank string

// GetTaxaAutocompleteParams defines parameters for GetTaxaAutocomplete.
type GetTaxaAutocompleteParams struct {
	Q                   *string     `form:"q,omitempty" json:"q,omitempty"`
	IsActive            interface{} `form:"is_active,omitempty" json:"is_active,omitempty"`
	Iconic              interface{} `form:"iconic,omitempty" json:"iconic,omitempty"`
	PerPage             *int        `form:"per_page,omitempty" json:"per_page,omitempty"`
	Locale              *string     `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceId    *int        `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	Fields              interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string     `json:"X-HTTP-Method-Override,omitempty"`
}

// GetTaxaIconicParams defines parameters for GetTaxaIconic.
type GetTaxaIconicParams struct {
	Fields              *string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetTaxaSuggestParams defines parameters for GetTaxaSuggest.
type GetTaxaSuggestParams struct {
	// FeaturedObservationId When `source` is `observations`, ignore this observation
	FeaturedObservationId *openapi_types.UUID `form:"featured_observation_id,omitempty" json:"featured_observation_id,omitempty"`
	Fields                interface{}         `form:"fields,omitempty" json:"fields,omitempty"`

	// ImageUrl URL for image to use when `source` is `visual`
	ImageUrl                    *string `form:"image_url,omitempty" json:"image_url,omitempty"`
	IncludeRepresentativePhotos *struct {
		union json.RawMessage
	} `form:"include_representative_photos,omitempty" json:"include_representative_photos,omitempty"`

	// Limit Number of results to return
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Lat Coordinate used when fetching nearby results `source` is `visual` or `*observations`
	Lat *float32 `form:"lat,omitempty" json:"lat,omitempty"`

	// Lng Coordinate used when fetching nearby results `source` is `visual` or `*observations`
	Lng    *float32 `form:"lng,omitempty" json:"lng,omitempty"`
	Locale *string  `form:"locale,omitempty" json:"locale,omitempty"`
	Months *string  `form:"months,omitempty" json:"months,omitempty"`

	// ObservationId  Automatically set place and taxon filters based on this observation; this
	//       will override the values of `place_id` and `taxon_id` if these values
	//       can be derived from the observation
	//
	ObservationId *openapi_types.UUID `form:"observation_id,omitempty" json:"observation_id,omitempty"`

	// ObservedOn  Date the subject was observed (YYYY-MM-DD), used to refine suggestions to
	//       those observed at a similar time of year
	//
	ObservedOn *string `form:"observed_on,omitempty" json:"observed_on,omitempty"`

	// OrderBy  How the suggestions will be ordered. The default is to order by whatever default
	//       a source uses, e.g. the score when `source` is `visual`, or the number of
	//       observations (frequency) when the `source` is `*observations`. Ordering by
	//       `taxonomy` will group the results by their closeness in the taxonomic
	//       tree, but continue to use default ordering for siblings (e.g. species in the
	//       same genus).
	//
	OrderBy *GetTaxaSuggestParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// PlaceId  Only retrieve suggestions from this place when `source` is `checklist`
	//       or `*observations`
	//
	PlaceId *int `form:"place_id,omitempty" json:"place_id,omitempty"`

	// PlaceLat  Coordinate used to set a place filter when source is `*observations` by
	//       choosing the place whose boundary contains the coordinate. Only chooses
	//       from places curated by staff (aka "standard" places) and only sets the
	//       place when lat, lng, and place_id are blank
	//
	PlaceLat *float32 `form:"place_lat,omitempty" json:"place_lat,omitempty"`

	// PlaceLng See `place_lat`
	PlaceLng *float32 `form:"place_lng,omitempty" json:"place_lng,omitempty"`

	// Source  Source of the suggestions. Note that different sources support different
	//       search parameters. See each parameter for details
	//
	Source *GetTaxaSuggestParamsSource `form:"source,omitempty" json:"source,omitempty"`

	// TaxonId  Only retrieve suggestions in this taxon. If taxon is below genus level it
	//       will be replaced with the genus that contains it. When `source` is
	//       `misidentifications`, suggestions will be species commonly misidentified
	//       as this taxon
	//
	TaxonId             *int    `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	XHTTPMethodOverride *string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetTaxaSuggestParamsIncludeRepresentativePhotos0 defines parameters for GetTaxaSuggest.
type GetTaxaSuggestParamsIncludeRepresentativePhotos0 = bool

// GetTaxaSuggestParamsIncludeRepresentativePhotos1 defines parameters for GetTaxaSuggest.
type GetTaxaSuggestParamsIncludeRepresentativePhotos1 = string

// GetTaxaSuggestParamsOrderBy defines parameters for GetTaxaSuggest.
type GetTaxaSuggestParamsOrderBy string

// GetTaxaSuggestParamsSource defines parameters for GetTaxaSuggest.
type GetTaxaSuggestParamsSource string

// PostTaxaSuggestMultipartBody defines parameters for PostTaxaSuggest.
type PostTaxaSuggestMultipartBody struct {
	// FeaturedObservationId When `source` is `observations`, ignore this observation
	FeaturedObservationId *openapi_types.UUID `json:"featured_observation_id,omitempty"`
	Fields                interface{}         `json:"fields,omitempty"`

	// Image Image to use when `source` is `visual`
	Image *openapi_types.File `json:"image,omitempty"`

	// ImageUrl URL for image to use when `source` is `visual`
	ImageUrl                    *string                                                   `json:"image_url,omitempty"`
	IncludeRepresentativePhotos *PostTaxaSuggestMultipartBody_IncludeRepresentativePhotos `json:"include_representative_photos,omitempty"`

	// Lat Coordinate used when fetching nearby results `source` is `visual` or `*observations`
	Lat *float32 `json:"lat,omitempty"`

	// Limit Number of results to return
	Limit *float32 `json:"limit,omitempty"`

	// Lng Coordinate used when fetching nearby results `source` is `visual` or `*observations`
	Lng    *float32 `json:"lng,omitempty"`
	Locale *string  `json:"locale,omitempty"`
	Months *string  `json:"months,omitempty"`

	// ObservationId  Automatically set place and taxon filters based on this observation; this
	//       will override the values of `place_id` and `taxon_id` if these values
	//       can be derived from the observation
	//
	ObservationId *openapi_types.UUID `json:"observation_id,omitempty"`

	// ObservedOn  Date the subject was observed (YYYY-MM-DD), used to refine suggestions to
	//       those observed at a similar time of year
	//
	ObservedOn *string `json:"observed_on,omitempty"`

	// OrderBy  How the suggestions will be ordered. The default is to order by whatever default
	//       a source uses, e.g. the score when `source` is `visual`, or the number of
	//       observations (frequency) when the `source` is `*observations`. Ordering by
	//       `taxonomy` will group the results by their closeness in the taxonomic
	//       tree, but continue to use default ordering for siblings (e.g. species in the
	//       same genus).
	//
	OrderBy *PostTaxaSuggestMultipartBodyOrderBy `json:"order_by,omitempty"`

	// PlaceId  Only retrieve suggestions from this place when `source` is `checklist`
	//       or `*observations`
	//
	PlaceId *int `json:"place_id,omitempty"`

	// PlaceLat  Coordinate used to set a place filter when source is `*observations` by
	//       choosing the place whose boundary contains the coordinate. Only chooses
	//       from places curated by staff (aka "standard" places) and only sets the
	//       place when lat, lng, and place_id are blank
	//
	PlaceLat *float32 `json:"place_lat,omitempty"`

	// PlaceLng See `place_lat`
	PlaceLng *float32 `json:"place_lng,omitempty"`

	// Source  Source of the suggestions. Note that different sources support different
	//       search parameters. See each parameter for details
	//
	Source *PostTaxaSuggestMultipartBodySource `json:"source"`

	// TaxonId  Only retrieve suggestions in this taxon. If taxon is below genus level it
	//       will be replaced with the genus that contains it. When `source` is
	//       `misidentifications`, suggestions will be species commonly misidentified
	//       as this taxon
	//
	TaxonId *int `json:"taxon_id,omitempty"`
}

// PostTaxaSuggestMultipartBodyIncludeRepresentativePhotos0 defines parameters for PostTaxaSuggest.
type PostTaxaSuggestMultipartBodyIncludeRepresentativePhotos0 = bool

// PostTaxaSuggestMultipartBodyIncludeRepresentativePhotos1 defines parameters for PostTaxaSuggest.
type PostTaxaSuggestMultipartBodyIncludeRepresentativePhotos1 = string

// PostTaxaSuggestMultipartBody_IncludeRepresentativePhotos defines parameters for PostTaxaSuggest.
type PostTaxaSuggestMultipartBody_IncludeRepresentativePhotos struct {
	union json.RawMessage
}

// PostTaxaSuggestMultipartBodyOrderBy defines parameters for PostTaxaSuggest.
type PostTaxaSuggestMultipartBodyOrderBy string

// PostTaxaSuggestMultipartBodySource defines parameters for PostTaxaSuggest.
type PostTaxaSuggestMultipartBodySource string

// GetTaxaIdParams defines parameters for GetTaxaId.
type GetTaxaIdParams struct {
	RankLevel           *[]float32 `form:"rank_level,omitempty" json:"rank_level,omitempty"`
	Fields              *string    `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string    `json:"X-HTTP-Method-Override,omitempty"`
}

// GetTaxaIdWantedParams defines parameters for GetTaxaIdWanted.
type GetTaxaIdWantedParams struct {
	Page                *int    `form:"page,omitempty" json:"page,omitempty"`
	PerPage             *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	XHTTPMethodOverride *string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetTaxonPlacesIdZoomXYPngParams defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParams struct {
	TileSize *GetTaxonPlacesIdZoomXYPngParamsTileSize `form:"tile_size,omitempty" json:"tile_size,omitempty"`

	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IdPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                                    `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	NotId        *[]openapi_types.UUID                          `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      *[]GetTaxonPlacesIdZoomXYPngParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense *[]GetTaxonPlacesIdZoomXYPngParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                       `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceId       *[]GetTaxonPlacesIdZoomXYPngParams_PlaceId_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectId     *[]GetTaxonPlacesIdZoomXYPngParams_ProjectId_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                       `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            *[]GetTaxonPlacesIdZoomXYPngParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteId                          *[]int                                            `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    *[]GetTaxonPlacesIdZoomXYPngParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonId                         *[]int                                            `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonId                  *[]int                                            `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       *string                                           `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserId                          *[]string                                         `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       *[]string                                         `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            *[]int                                            `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             *[]int                                            `form:"day,omitempty" json:"day,omitempty"`
	Month                           *[]int                                            `form:"month,omitempty" json:"month,omitempty"`
	Year                            *[]int                                            `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      *[]int                                            `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    *[]int                                            `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     *[]int                                            `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermId                          *[]int                                            `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueId                     *[]int                                            `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueId              *[]int                                            `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIdOrUnknown                 *[]int                                            `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserId                *[]string                                         `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        *int                                              `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        *int                                              `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               *int                                              `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              *string                                           `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              *string                                           `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       *string                                           `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       *string                                           `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       *string                                           `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      *string                                           `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserId              *string                                           `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            *string                                           `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentId *[]int                                            `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              *string                                           `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             *string                                           `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             *[]GetTaxonPlacesIdZoomXYPngParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      *[]GetTaxonPlacesIdZoomXYPngParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 *[]GetTaxonPlacesIdZoomXYPngParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration *[]GetTaxonPlacesIdZoomXYPngParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       *[]GetTaxonPlacesIdZoomXYPngParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       *[]GetTaxonPlacesIdZoomXYPngParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  *[]GetTaxonPlacesIdZoomXYPngParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IdAbove     *int                                          `form:"id_above,omitempty" json:"id_above,omitempty"`
	IdBelow     *int                                          `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications *GetTaxonPlacesIdZoomXYPngParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                                    `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        *float32                                       `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        *float32                                       `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     *float32                                       `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      *float32                                       `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      *float32                                       `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      *float32                                       `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      *float32                                       `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListId                     *int                                           `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               *[]string                                      `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor *string                                        `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          *string                                        `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   *GetTaxonPlacesIdZoomXYPngParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               *[]GetTaxonPlacesIdZoomXYPngParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               *string                                        `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              *string                                        `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               *string                                        `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerId                   *int                                           `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                                    `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                                    `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     *string                                        `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceId           *int                                           `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	Ttl                        *int                                           `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       *int                                           `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    *int                                           `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      *GetTaxonPlacesIdZoomXYPngParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    *GetTaxonPlacesIdZoomXYPngParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyId                     interface{}                                    `form:"only_id,omitempty" json:"only_id,omitempty"`
}

// GetTaxonPlacesIdZoomXYPngParamsTileSize defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParamsTileSize int

// GetTaxonPlacesIdZoomXYPngParamsLicense defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParamsLicense string

// GetTaxonPlacesIdZoomXYPngParamsPhotoLicense defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParamsPhotoLicense string

// GetTaxonPlacesIdZoomXYPngParamsPlaceId0 defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParamsPlaceId0 = openapi_types.UUID

// GetTaxonPlacesIdZoomXYPngParamsPlaceId1 defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParamsPlaceId1 = int

// GetTaxonPlacesIdZoomXYPngParamsPlaceId2 defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParamsPlaceId2 = string

// GetTaxonPlacesIdZoomXYPngParams_PlaceId_Item defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParams_PlaceId_Item struct {
	union json.RawMessage
}

// GetTaxonPlacesIdZoomXYPngParamsProjectId0 defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParamsProjectId0 = int

// GetTaxonPlacesIdZoomXYPngParamsProjectId1 defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParamsProjectId1 = string

// GetTaxonPlacesIdZoomXYPngParams_ProjectId_Item defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParams_ProjectId_Item struct {
	union json.RawMessage
}

// GetTaxonPlacesIdZoomXYPngParamsRank defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParamsRank string

// GetTaxonPlacesIdZoomXYPngParamsSoundLicense defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParamsSoundLicense string

// GetTaxonPlacesIdZoomXYPngParamsCsi defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParamsCsi string

// GetTaxonPlacesIdZoomXYPngParamsGeoprivacy defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParamsGeoprivacy string

// GetTaxonPlacesIdZoomXYPngParamsTaxonGeoprivacy defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParamsTaxonGeoprivacy string

// GetTaxonPlacesIdZoomXYPngParamsObscuration defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParamsObscuration string

// GetTaxonPlacesIdZoomXYPngParamsHrank defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParamsHrank string

// GetTaxonPlacesIdZoomXYPngParamsLrank defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParamsLrank string

// GetTaxonPlacesIdZoomXYPngParamsIconicTaxa defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParamsIconicTaxa string

// GetTaxonPlacesIdZoomXYPngParamsIdentifications defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParamsIdentifications string

// GetTaxonPlacesIdZoomXYPngParamsSearchOn defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParamsSearchOn string

// GetTaxonPlacesIdZoomXYPngParamsQualityGrade defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParamsQualityGrade string

// GetTaxonPlacesIdZoomXYPngParamsOrder defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParamsOrder string

// GetTaxonPlacesIdZoomXYPngParamsOrderBy defines parameters for GetTaxonPlacesIdZoomXYPng.
type GetTaxonPlacesIdZoomXYPngParamsOrderBy string

// GetTaxonRangesIdZoomXYPngParams defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParams struct {
	TileSize *GetTaxonRangesIdZoomXYPngParamsTileSize `form:"tile_size,omitempty" json:"tile_size,omitempty"`

	// Acc Filter by whether `positional_accuracy` is set or not
	Acc interface{} `form:"acc,omitempty" json:"acc,omitempty"`

	// Captive Filter by captive / cultivated status
	Captive interface{} `form:"captive,omitempty" json:"captive,omitempty"`

	// Endemic Filter by whether the observation is in a place with a check list entry indicating the establishment means is `endemic`
	Endemic       interface{} `form:"endemic,omitempty" json:"endemic,omitempty"`
	Geo           interface{} `form:"geo,omitempty" json:"geo,omitempty"`
	IdPlease      interface{} `form:"id_please,omitempty" json:"id_please,omitempty"`
	Identified    interface{} `form:"identified,omitempty" json:"identified,omitempty"`
	Introduced    interface{} `form:"introduced,omitempty" json:"introduced,omitempty"`
	Mappable      interface{} `form:"mappable,omitempty" json:"mappable,omitempty"`
	Native        interface{} `form:"native,omitempty" json:"native,omitempty"`
	OutOfRange    interface{} `form:"out_of_range,omitempty" json:"out_of_range,omitempty"`
	Pcid          interface{} `form:"pcid,omitempty" json:"pcid,omitempty"`
	Photos        interface{} `form:"photos,omitempty" json:"photos,omitempty"`
	Popular       interface{} `form:"popular,omitempty" json:"popular,omitempty"`
	Sounds        interface{} `form:"sounds,omitempty" json:"sounds,omitempty"`
	TaxonIsActive interface{} `form:"taxon_is_active,omitempty" json:"taxon_is_active,omitempty"`

	// Threatened Filter by whether the observed taxon has a conservation status of "threatened" or worse
	Threatened interface{} `form:"threatened,omitempty" json:"threatened,omitempty"`

	// Verifiable Filter by whether observations are 'verifiable' (have quality grades `research` or `needs_id`)
	Verifiable   interface{}                                    `form:"verifiable,omitempty" json:"verifiable,omitempty"`
	NotId        *[]openapi_types.UUID                          `form:"not_id,omitempty" json:"not_id,omitempty"`
	License      *[]GetTaxonRangesIdZoomXYPngParamsLicense      `form:"license,omitempty" json:"license,omitempty"`
	PhotoLicense *[]GetTaxonRangesIdZoomXYPngParamsPhotoLicense `form:"photo_license,omitempty" json:"photo_license,omitempty"`

	// Licensed Filter by observations where the license attribute is not null, i.e. it is licensed
	Licensed interface{} `form:"licensed,omitempty" json:"licensed,omitempty"`

	// PhotoLicensed Filter by observations where the license attribute of at least one photo is not null
	PhotoLicensed interface{}                                       `form:"photo_licensed,omitempty" json:"photo_licensed,omitempty"`
	PlaceId       *[]GetTaxonRangesIdZoomXYPngParams_PlaceId_Item   `form:"place_id,omitempty" json:"place_id,omitempty"`
	ProjectId     *[]GetTaxonRangesIdZoomXYPngParams_ProjectId_Item `form:"project_id,omitempty" json:"project_id,omitempty"`

	// CoordsViewableForProj Filter by observers who trust the project(s) specified in `project_id` OR trust the authenticated viewer
	CoordsViewableForProj           interface{}                                       `form:"coords_viewable_for_proj,omitempty" json:"coords_viewable_for_proj,omitempty"`
	Rank                            *[]GetTaxonRangesIdZoomXYPngParamsRank            `form:"rank,omitempty" json:"rank,omitempty"`
	SiteId                          *[]int                                            `form:"site_id,omitempty" json:"site_id,omitempty"`
	SoundLicense                    *[]GetTaxonRangesIdZoomXYPngParamsSoundLicense    `form:"sound_license,omitempty" json:"sound_license,omitempty"`
	TaxonId                         *[]int                                            `form:"taxon_id,omitempty" json:"taxon_id,omitempty"`
	WithoutTaxonId                  *[]int                                            `form:"without_taxon_id,omitempty" json:"without_taxon_id,omitempty"`
	TaxonName                       *string                                           `form:"taxon_name,omitempty" json:"taxon_name,omitempty"`
	UserId                          *[]string                                         `form:"user_id,omitempty" json:"user_id,omitempty"`
	UserLogin                       *[]string                                         `form:"user_login,omitempty" json:"user_login,omitempty"`
	Hour                            *[]int                                            `form:"hour,omitempty" json:"hour,omitempty"`
	Day                             *[]int                                            `form:"day,omitempty" json:"day,omitempty"`
	Month                           *[]int                                            `form:"month,omitempty" json:"month,omitempty"`
	Year                            *[]int                                            `form:"year,omitempty" json:"year,omitempty"`
	CreatedDay                      *[]int                                            `form:"created_day,omitempty" json:"created_day,omitempty"`
	CreatedMonth                    *[]int                                            `form:"created_month,omitempty" json:"created_month,omitempty"`
	CreatedYear                     *[]int                                            `form:"created_year,omitempty" json:"created_year,omitempty"`
	TermId                          *[]int                                            `form:"term_id,omitempty" json:"term_id,omitempty"`
	TermValueId                     *[]int                                            `form:"term_value_id,omitempty" json:"term_value_id,omitempty"`
	WithoutTermValueId              *[]int                                            `form:"without_term_value_id,omitempty" json:"without_term_value_id,omitempty"`
	TermIdOrUnknown                 *[]int                                            `form:"term_id_or_unknown,omitempty" json:"term_id_or_unknown,omitempty"`
	AnnotationUserId                *[]string                                         `form:"annotation_user_id,omitempty" json:"annotation_user_id,omitempty"`
	AccAbove                        *int                                              `form:"acc_above,omitempty" json:"acc_above,omitempty"`
	AccBelow                        *int                                              `form:"acc_below,omitempty" json:"acc_below,omitempty"`
	AccBelowOrUnknown               *int                                              `form:"acc_below_or_unknown,omitempty" json:"acc_below_or_unknown,omitempty"`
	D1                              *string                                           `form:"d1,omitempty" json:"d1,omitempty"`
	D2                              *string                                           `form:"d2,omitempty" json:"d2,omitempty"`
	CreatedD1                       *string                                           `form:"created_d1,omitempty" json:"created_d1,omitempty"`
	CreatedD2                       *string                                           `form:"created_d2,omitempty" json:"created_d2,omitempty"`
	CreatedOn                       *string                                           `form:"created_on,omitempty" json:"created_on,omitempty"`
	ObservedOn                      *string                                           `form:"observed_on,omitempty" json:"observed_on,omitempty"`
	UnobservedByUserId              *string                                           `form:"unobserved_by_user_id,omitempty" json:"unobserved_by_user_id,omitempty"`
	ApplyProjectRulesFor            *string                                           `form:"apply_project_rules_for,omitempty" json:"apply_project_rules_for,omitempty"`
	ObservationAccuracyExperimentId *[]int                                            `form:"observation_accuracy_experiment_id,omitempty" json:"observation_accuracy_experiment_id,omitempty"`
	Cs                              *string                                           `form:"cs,omitempty" json:"cs,omitempty"`
	Csa                             *string                                           `form:"csa,omitempty" json:"csa,omitempty"`
	Csi                             *[]GetTaxonRangesIdZoomXYPngParamsCsi             `form:"csi,omitempty" json:"csi,omitempty"`
	Geoprivacy                      *[]GetTaxonRangesIdZoomXYPngParamsGeoprivacy      `form:"geoprivacy,omitempty" json:"geoprivacy,omitempty"`
	TaxonGeoprivacy                 *[]GetTaxonRangesIdZoomXYPngParamsTaxonGeoprivacy `form:"taxon_geoprivacy,omitempty" json:"taxon_geoprivacy,omitempty"`

	// Obscuration Filter by observations where the `geoprivacy` or `taxon_geoprivacy` match these values
	Obscuration *[]GetTaxonRangesIdZoomXYPngParamsObscuration `form:"obscuration,omitempty" json:"obscuration,omitempty"`
	Hrank       *[]GetTaxonRangesIdZoomXYPngParamsHrank       `form:"hrank,omitempty" json:"hrank,omitempty"`
	Lrank       *[]GetTaxonRangesIdZoomXYPngParamsLrank       `form:"lrank,omitempty" json:"lrank,omitempty"`
	IconicTaxa  *[]GetTaxonRangesIdZoomXYPngParamsIconicTaxa  `form:"iconic_taxa,omitempty" json:"iconic_taxa,omitempty"`
	IdAbove     *int                                          `form:"id_above,omitempty" json:"id_above,omitempty"`
	IdBelow     *int                                          `form:"id_below,omitempty" json:"id_below,omitempty"`

	// Identifications Filter by level of agreement among identifications:
	//
	// * **most_agree:** returns observations where there are more active identifications of taxa that agree with the Observation Taxon than active identifications that disagree with the Observation Taxon
	// * **some_agree:** returns observations where there are some active identifications of taxa that agree with the Observation Taxon
	// * **most_disagree:** returns observations where there are more active identifications of taxa that disagree with the Observation Taxon than active identifications that agree with the Observation Taxon
	Identifications *GetTaxonRangesIdZoomXYPngParamsIdentifications `form:"identifications,omitempty" json:"identifications,omitempty"`

	// Disagreements Whether there is disagreement among active identifications
	Disagreements              interface{}                                    `form:"disagreements,omitempty" json:"disagreements,omitempty"`
	Lat                        *float32                                       `form:"lat,omitempty" json:"lat,omitempty"`
	Lng                        *float32                                       `form:"lng,omitempty" json:"lng,omitempty"`
	Radius                     *float32                                       `form:"radius,omitempty" json:"radius,omitempty"`
	Nelat                      *float32                                       `form:"nelat,omitempty" json:"nelat,omitempty"`
	Nelng                      *float32                                       `form:"nelng,omitempty" json:"nelng,omitempty"`
	Swlat                      *float32                                       `form:"swlat,omitempty" json:"swlat,omitempty"`
	Swlng                      *float32                                       `form:"swlng,omitempty" json:"swlng,omitempty"`
	ListId                     *int                                           `form:"list_id,omitempty" json:"list_id,omitempty"`
	NotInProject               *[]string                                      `form:"not_in_project,omitempty" json:"not_in_project,omitempty"`
	NotMatchingProjectRulesFor *string                                        `form:"not_matching_project_rules_for,omitempty" json:"not_matching_project_rules_for,omitempty"`
	Q                          *string                                        `form:"q,omitempty" json:"q,omitempty"`
	SearchOn                   *GetTaxonRangesIdZoomXYPngParamsSearchOn       `form:"search_on,omitempty" json:"search_on,omitempty"`
	QualityGrade               *[]GetTaxonRangesIdZoomXYPngParamsQualityGrade `form:"quality_grade,omitempty" json:"quality_grade,omitempty"`
	WithoutField               *string                                        `form:"without_field,omitempty" json:"without_field,omitempty"`
	OutlinkSource              *string                                        `form:"outlink_source,omitempty" json:"outlink_source,omitempty"`
	UpdatedSince               *string                                        `form:"updated_since,omitempty" json:"updated_since,omitempty"`
	ViewerId                   *int                                           `form:"viewer_id,omitempty" json:"viewer_id,omitempty"`
	Reviewed                   interface{}                                    `form:"reviewed,omitempty" json:"reviewed,omitempty"`
	ExpectedNearby             interface{}                                    `form:"expected_nearby,omitempty" json:"expected_nearby,omitempty"`
	Locale                     *string                                        `form:"locale,omitempty" json:"locale,omitempty"`
	PreferredPlaceId           *int                                           `form:"preferred_place_id,omitempty" json:"preferred_place_id,omitempty"`
	Ttl                        *int                                           `form:"ttl,omitempty" json:"ttl,omitempty"`
	Page                       *int                                           `form:"page,omitempty" json:"page,omitempty"`
	PerPage                    *int                                           `form:"per_page,omitempty" json:"per_page,omitempty"`
	Order                      *GetTaxonRangesIdZoomXYPngParamsOrder          `form:"order,omitempty" json:"order,omitempty"`
	OrderBy                    *GetTaxonRangesIdZoomXYPngParamsOrderBy        `form:"order_by,omitempty" json:"order_by,omitempty"`
	OnlyId                     interface{}                                    `form:"only_id,omitempty" json:"only_id,omitempty"`
}

// GetTaxonRangesIdZoomXYPngParamsTileSize defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParamsTileSize int

// GetTaxonRangesIdZoomXYPngParamsLicense defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParamsLicense string

// GetTaxonRangesIdZoomXYPngParamsPhotoLicense defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParamsPhotoLicense string

// GetTaxonRangesIdZoomXYPngParamsPlaceId0 defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParamsPlaceId0 = openapi_types.UUID

// GetTaxonRangesIdZoomXYPngParamsPlaceId1 defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParamsPlaceId1 = int

// GetTaxonRangesIdZoomXYPngParamsPlaceId2 defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParamsPlaceId2 = string

// GetTaxonRangesIdZoomXYPngParams_PlaceId_Item defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParams_PlaceId_Item struct {
	union json.RawMessage
}

// GetTaxonRangesIdZoomXYPngParamsProjectId0 defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParamsProjectId0 = int

// GetTaxonRangesIdZoomXYPngParamsProjectId1 defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParamsProjectId1 = string

// GetTaxonRangesIdZoomXYPngParams_ProjectId_Item defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParams_ProjectId_Item struct {
	union json.RawMessage
}

// GetTaxonRangesIdZoomXYPngParamsRank defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParamsRank string

// GetTaxonRangesIdZoomXYPngParamsSoundLicense defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParamsSoundLicense string

// GetTaxonRangesIdZoomXYPngParamsCsi defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParamsCsi string

// GetTaxonRangesIdZoomXYPngParamsGeoprivacy defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParamsGeoprivacy string

// GetTaxonRangesIdZoomXYPngParamsTaxonGeoprivacy defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParamsTaxonGeoprivacy string

// GetTaxonRangesIdZoomXYPngParamsObscuration defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParamsObscuration string

// GetTaxonRangesIdZoomXYPngParamsHrank defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParamsHrank string

// GetTaxonRangesIdZoomXYPngParamsLrank defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParamsLrank string

// GetTaxonRangesIdZoomXYPngParamsIconicTaxa defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParamsIconicTaxa string

// GetTaxonRangesIdZoomXYPngParamsIdentifications defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParamsIdentifications string

// GetTaxonRangesIdZoomXYPngParamsSearchOn defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParamsSearchOn string

// GetTaxonRangesIdZoomXYPngParamsQualityGrade defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParamsQualityGrade string

// GetTaxonRangesIdZoomXYPngParamsOrder defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParamsOrder string

// GetTaxonRangesIdZoomXYPngParamsOrderBy defines parameters for GetTaxonRangesIdZoomXYPng.
type GetTaxonRangesIdZoomXYPngParamsOrderBy string

// GetTranslationsLocalesParams defines parameters for GetTranslationsLocales.
type GetTranslationsLocalesParams struct {
	Fields              *string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	Fields  interface{} `form:"fields,omitempty" json:"fields,omitempty"`
	Page    *int        `form:"page,omitempty" json:"page,omitempty"`
	PerPage *int        `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Following Show users following this user, specified by sequential ID, username, or UUID
	Following *struct {
		union json.RawMessage
	} `form:"following,omitempty" json:"following,omitempty"`

	// FollowedBy Show users followed by this user, specified by sequential ID, username, or UUID
	FollowedBy *struct {
		union json.RawMessage
	} `form:"followed_by,omitempty" json:"followed_by,omitempty"`

	// Orcid Show users with the specified orcid
	Orcid               *string `form:"orcid,omitempty" json:"orcid,omitempty"`
	XHTTPMethodOverride *string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetUsersParamsFollowing0 defines parameters for GetUsers.
type GetUsersParamsFollowing0 = int

// GetUsersParamsFollowing1 defines parameters for GetUsers.
type GetUsersParamsFollowing1 = string

// GetUsersParamsFollowing2 defines parameters for GetUsers.
type GetUsersParamsFollowing2 = openapi_types.UUID

// GetUsersParamsFollowedBy0 defines parameters for GetUsers.
type GetUsersParamsFollowedBy0 = int

// GetUsersParamsFollowedBy1 defines parameters for GetUsers.
type GetUsersParamsFollowedBy1 = string

// GetUsersParamsFollowedBy2 defines parameters for GetUsers.
type GetUsersParamsFollowedBy2 = openapi_types.UUID

// GetUsersAutocompleteParams defines parameters for GetUsersAutocomplete.
type GetUsersAutocompleteParams struct {
	Q                *string     `form:"q,omitempty" json:"q,omitempty"`
	IncludeSuspended interface{} `form:"include_suspended,omitempty" json:"include_suspended,omitempty"`
	PerPage          *int        `form:"per_page,omitempty" json:"per_page,omitempty"`
	Fields           interface{} `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetUsersEmailAvailableParams defines parameters for GetUsersEmailAvailable.
type GetUsersEmailAvailableParams struct {
	Fields              *string `form:"fields,omitempty" json:"fields,omitempty"`
	Email               string  `form:"email" json:"email"`
	XHTTPMethodOverride *string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetUsersMeParams defines parameters for GetUsersMe.
type GetUsersMeParams struct {
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetUsersNotificationCountsParams defines parameters for GetUsersNotificationCounts.
type GetUsersNotificationCountsParams struct {
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetUsersRecentObservationFieldsParams defines parameters for GetUsersRecentObservationFields.
type GetUsersRecentObservationFieldsParams struct {
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`
}

// PutUsersUpdateSessionParams defines parameters for PutUsersUpdateSession.
type PutUsersUpdateSessionParams struct {
	PrefersHideObsShowIdentifiers interface{} `form:"prefers_hide_obs_show_identifiers,omitempty" json:"prefers_hide_obs_show_identifiers,omitempty"`
}

// GetUsersIdParams defines parameters for GetUsersId.
type GetUsersIdParams struct {
	Fields              *string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string `json:"X-HTTP-Method-Override,omitempty"`
}

// GetUsersIdProjectsParams defines parameters for GetUsersIdProjects.
type GetUsersIdProjectsParams struct {
	Fields              *string `form:"fields,omitempty" json:"fields,omitempty"`
	XHTTPMethodOverride *string `json:"X-HTTP-Method-Override,omitempty"`
}

// PostAnnotationsJSONRequestBody defines body for PostAnnotations for application/json ContentType.
type PostAnnotationsJSONRequestBody = AnnotationsCreate

// PostCommentsJSONRequestBody defines body for PostComments for application/json ContentType.
type PostCommentsJSONRequestBody = CommentsCreate

// PutCommentsUuidJSONRequestBody defines body for PutCommentsUuid for application/json ContentType.
type PutCommentsUuidJSONRequestBody = CommentsUpdate

// PostFlagsJSONRequestBody defines body for PostFlags for application/json ContentType.
type PostFlagsJSONRequestBody = FlagsCreate

// PutFlagsIdJSONRequestBody defines body for PutFlagsId for application/json ContentType.
type PutFlagsIdJSONRequestBody = FlagsUpdate

// PostIdentificationsJSONRequestBody defines body for PostIdentifications for application/json ContentType.
type PostIdentificationsJSONRequestBody = IdentificationsCreate

// PutIdentificationsUuidJSONRequestBody defines body for PutIdentificationsUuid for application/json ContentType.
type PutIdentificationsUuidJSONRequestBody = IdentificationsUpdate

// PostMessagesJSONRequestBody defines body for PostMessages for application/json ContentType.
type PostMessagesJSONRequestBody = MessagesCreate

// PostObservationFieldValuesJSONRequestBody defines body for PostObservationFieldValues for application/json ContentType.
type PostObservationFieldValuesJSONRequestBody = ObservationFieldValuesCreate

// PutObservationFieldValuesUuidJSONRequestBody defines body for PutObservationFieldValuesUuid for application/json ContentType.
type PutObservationFieldValuesUuidJSONRequestBody = ObservationFieldValuesCreate

// PostObservationPhotosJSONRequestBody defines body for PostObservationPhotos for application/json ContentType.
type PostObservationPhotosJSONRequestBody = ObservationPhotosCreate

// PostObservationPhotosMultipartRequestBody defines body for PostObservationPhotos for multipart/form-data ContentType.
type PostObservationPhotosMultipartRequestBody = ObservationPhotosCreateMultipart

// PutObservationPhotosUuidJSONRequestBody defines body for PutObservationPhotosUuid for application/json ContentType.
type PutObservationPhotosUuidJSONRequestBody = ObservationPhotosUpdate

// PostObservationSoundsJSONRequestBody defines body for PostObservationSounds for application/json ContentType.
type PostObservationSoundsJSONRequestBody = ObservationSoundsCreate

// PostObservationSoundsMultipartRequestBody defines body for PostObservationSounds for multipart/form-data ContentType.
type PostObservationSoundsMultipartRequestBody = ObservationSoundsCreateMultipart

// PutObservationSoundsUuidJSONRequestBody defines body for PutObservationSoundsUuid for application/json ContentType.
type PutObservationSoundsUuidJSONRequestBody = ObservationSoundsUpdate

// PostObservationsJSONRequestBody defines body for PostObservations for application/json ContentType.
type PostObservationsJSONRequestBody = ObservationsCreate

// PutObservationsUuidJSONRequestBody defines body for PutObservationsUuid for application/json ContentType.
type PutObservationsUuidJSONRequestBody = ObservationsUpdate

// PutObservationsUuidMultipartRequestBody defines body for PutObservationsUuid for multipart/form-data ContentType.
type PutObservationsUuidMultipartRequestBody = ObservationsUpdate

// PostPhotosMultipartRequestBody defines body for PostPhotos for multipart/form-data ContentType.
type PostPhotosMultipartRequestBody = PhotosCreate

// PostProjectObservationsJSONRequestBody defines body for PostProjectObservations for application/json ContentType.
type PostProjectObservationsJSONRequestBody = ProjectObservationsCreate

// PutProjectObservationsUuidJSONRequestBody defines body for PutProjectObservationsUuid for application/json ContentType.
type PutProjectObservationsUuidJSONRequestBody = ProjectObservationsUpdate

// PutProjectUsersIdJSONRequestBody defines body for PutProjectUsersId for application/json ContentType.
type PutProjectUsersIdJSONRequestBody = ProjectUsersUpdate

// PostRelationshipsJSONRequestBody defines body for PostRelationships for application/json ContentType.
type PostRelationshipsJSONRequestBody = RelationshipsCreate

// PutRelationshipsIdJSONRequestBody defines body for PutRelationshipsId for application/json ContentType.
type PutRelationshipsIdJSONRequestBody = RelationshipsUpdate

// PostSavedLocationsJSONRequestBody defines body for PostSavedLocations for application/json ContentType.
type PostSavedLocationsJSONRequestBody = SavedLocationsCreate

// PostSoundsMultipartRequestBody defines body for PostSounds for multipart/form-data ContentType.
type PostSoundsMultipartRequestBody PostSoundsMultipartBody

// PostTaxaSuggestMultipartRequestBody defines body for PostTaxaSuggest for multipart/form-data ContentType.
type PostTaxaSuggestMultipartRequestBody PostTaxaSuggestMultipartBody

// PostTaxonNamePrioritiesJSONRequestBody defines body for PostTaxonNamePriorities for application/json ContentType.
type PostTaxonNamePrioritiesJSONRequestBody = TaxonNamePrioritiesCreate

// PutTaxonNamePrioritiesIdJSONRequestBody defines body for PutTaxonNamePrioritiesId for application/json ContentType.
type PutTaxonNamePrioritiesIdJSONRequestBody = TaxonNamePrioritiesUpdate

// PostUsersResetPasswordJSONRequestBody defines body for PostUsersResetPassword for application/json ContentType.
type PostUsersResetPasswordJSONRequestBody = UsersResetPassword

// PutUsersIdJSONRequestBody defines body for PutUsersId for application/json ContentType.
type PutUsersIdJSONRequestBody = UsersUpdate

// PutUsersIdMultipartRequestBody defines body for PutUsersId for multipart/form-data ContentType.
type PutUsersIdMultipartRequestBody = UsersUpdateMultipart

// AsObservationFieldValuesCreateObservationFieldValueValue0 returns the union data inside the ObservationFieldValuesCreate_ObservationFieldValue_Value as a ObservationFieldValuesCreateObservationFieldValueValue0
func (t ObservationFieldValuesCreate_ObservationFieldValue_Value) AsObservationFieldValuesCreateObservationFieldValueValue0() (ObservationFieldValuesCreateObservationFieldValueValue0, error) {
	var body ObservationFieldValuesCreateObservationFieldValueValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromObservationFieldValuesCreateObservationFieldValueValue0 overwrites any union data inside the ObservationFieldValuesCreate_ObservationFieldValue_Value as the provided ObservationFieldValuesCreateObservationFieldValueValue0
func (t *ObservationFieldValuesCreate_ObservationFieldValue_Value) FromObservationFieldValuesCreateObservationFieldValueValue0(v ObservationFieldValuesCreateObservationFieldValueValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeObservationFieldValuesCreateObservationFieldValueValue0 performs a merge with any union data inside the ObservationFieldValuesCreate_ObservationFieldValue_Value, using the provided ObservationFieldValuesCreateObservationFieldValueValue0
func (t *ObservationFieldValuesCreate_ObservationFieldValue_Value) MergeObservationFieldValuesCreateObservationFieldValueValue0(v ObservationFieldValuesCreateObservationFieldValueValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsObservationFieldValuesCreateObservationFieldValueValue1 returns the union data inside the ObservationFieldValuesCreate_ObservationFieldValue_Value as a ObservationFieldValuesCreateObservationFieldValueValue1
func (t ObservationFieldValuesCreate_ObservationFieldValue_Value) AsObservationFieldValuesCreateObservationFieldValueValue1() (ObservationFieldValuesCreateObservationFieldValueValue1, error) {
	var body ObservationFieldValuesCreateObservationFieldValueValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromObservationFieldValuesCreateObservationFieldValueValue1 overwrites any union data inside the ObservationFieldValuesCreate_ObservationFieldValue_Value as the provided ObservationFieldValuesCreateObservationFieldValueValue1
func (t *ObservationFieldValuesCreate_ObservationFieldValue_Value) FromObservationFieldValuesCreateObservationFieldValueValue1(v ObservationFieldValuesCreateObservationFieldValueValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeObservationFieldValuesCreateObservationFieldValueValue1 performs a merge with any union data inside the ObservationFieldValuesCreate_ObservationFieldValue_Value, using the provided ObservationFieldValuesCreateObservationFieldValueValue1
func (t *ObservationFieldValuesCreate_ObservationFieldValue_Value) MergeObservationFieldValuesCreateObservationFieldValueValue1(v ObservationFieldValuesCreateObservationFieldValueValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ObservationFieldValuesCreate_ObservationFieldValue_Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ObservationFieldValuesCreate_ObservationFieldValue_Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPolygonGeoJsonCoordinates0 returns the union data inside the PolygonGeoJson_Coordinates as a PolygonGeoJsonCoordinates0
func (t PolygonGeoJson_Coordinates) AsPolygonGeoJsonCoordinates0() (PolygonGeoJsonCoordinates0, error) {
	var body PolygonGeoJsonCoordinates0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPolygonGeoJsonCoordinates0 overwrites any union data inside the PolygonGeoJson_Coordinates as the provided PolygonGeoJsonCoordinates0
func (t *PolygonGeoJson_Coordinates) FromPolygonGeoJsonCoordinates0(v PolygonGeoJsonCoordinates0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePolygonGeoJsonCoordinates0 performs a merge with any union data inside the PolygonGeoJson_Coordinates, using the provided PolygonGeoJsonCoordinates0
func (t *PolygonGeoJson_Coordinates) MergePolygonGeoJsonCoordinates0(v PolygonGeoJsonCoordinates0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPolygonGeoJsonCoordinates1 returns the union data inside the PolygonGeoJson_Coordinates as a PolygonGeoJsonCoordinates1
func (t PolygonGeoJson_Coordinates) AsPolygonGeoJsonCoordinates1() (PolygonGeoJsonCoordinates1, error) {
	var body PolygonGeoJsonCoordinates1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPolygonGeoJsonCoordinates1 overwrites any union data inside the PolygonGeoJson_Coordinates as the provided PolygonGeoJsonCoordinates1
func (t *PolygonGeoJson_Coordinates) FromPolygonGeoJsonCoordinates1(v PolygonGeoJsonCoordinates1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePolygonGeoJsonCoordinates1 performs a merge with any union data inside the PolygonGeoJson_Coordinates, using the provided PolygonGeoJsonCoordinates1
func (t *PolygonGeoJson_Coordinates) MergePolygonGeoJsonCoordinates1(v PolygonGeoJsonCoordinates1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PolygonGeoJson_Coordinates) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PolygonGeoJson_Coordinates) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsProjectSearchParametersValueNumber0 returns the union data inside the Project_SearchParameters_ValueNumber as a ProjectSearchParametersValueNumber0
func (t Project_SearchParameters_ValueNumber) AsProjectSearchParametersValueNumber0() (ProjectSearchParametersValueNumber0, error) {
	var body ProjectSearchParametersValueNumber0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProjectSearchParametersValueNumber0 overwrites any union data inside the Project_SearchParameters_ValueNumber as the provided ProjectSearchParametersValueNumber0
func (t *Project_SearchParameters_ValueNumber) FromProjectSearchParametersValueNumber0(v ProjectSearchParametersValueNumber0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProjectSearchParametersValueNumber0 performs a merge with any union data inside the Project_SearchParameters_ValueNumber, using the provided ProjectSearchParametersValueNumber0
func (t *Project_SearchParameters_ValueNumber) MergeProjectSearchParametersValueNumber0(v ProjectSearchParametersValueNumber0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProjectSearchParametersValueNumber1 returns the union data inside the Project_SearchParameters_ValueNumber as a ProjectSearchParametersValueNumber1
func (t Project_SearchParameters_ValueNumber) AsProjectSearchParametersValueNumber1() (ProjectSearchParametersValueNumber1, error) {
	var body ProjectSearchParametersValueNumber1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProjectSearchParametersValueNumber1 overwrites any union data inside the Project_SearchParameters_ValueNumber as the provided ProjectSearchParametersValueNumber1
func (t *Project_SearchParameters_ValueNumber) FromProjectSearchParametersValueNumber1(v ProjectSearchParametersValueNumber1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProjectSearchParametersValueNumber1 performs a merge with any union data inside the Project_SearchParameters_ValueNumber, using the provided ProjectSearchParametersValueNumber1
func (t *Project_SearchParameters_ValueNumber) MergeProjectSearchParametersValueNumber1(v ProjectSearchParametersValueNumber1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Project_SearchParameters_ValueNumber) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Project_SearchParameters_ValueNumber) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResultsObservationsHistogramResults0 returns the union data inside the ResultsObservationsHistogram_Results as a ResultsObservationsHistogramResults0
func (t ResultsObservationsHistogram_Results) AsResultsObservationsHistogramResults0() (ResultsObservationsHistogramResults0, error) {
	var body ResultsObservationsHistogramResults0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResultsObservationsHistogramResults0 overwrites any union data inside the ResultsObservationsHistogram_Results as the provided ResultsObservationsHistogramResults0
func (t *ResultsObservationsHistogram_Results) FromResultsObservationsHistogramResults0(v ResultsObservationsHistogramResults0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResultsObservationsHistogramResults0 performs a merge with any union data inside the ResultsObservationsHistogram_Results, using the provided ResultsObservationsHistogramResults0
func (t *ResultsObservationsHistogram_Results) MergeResultsObservationsHistogramResults0(v ResultsObservationsHistogramResults0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResultsObservationsHistogram_Results) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResultsObservationsHistogram_Results) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResultsObservationsPopularFieldValuesUnannotated0 returns the union data inside the ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties as a ResultsObservationsPopularFieldValuesUnannotated0
func (t ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties) AsResultsObservationsPopularFieldValuesUnannotated0() (ResultsObservationsPopularFieldValuesUnannotated0, error) {
	var body ResultsObservationsPopularFieldValuesUnannotated0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResultsObservationsPopularFieldValuesUnannotated0 overwrites any union data inside the ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties as the provided ResultsObservationsPopularFieldValuesUnannotated0
func (t *ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties) FromResultsObservationsPopularFieldValuesUnannotated0(v ResultsObservationsPopularFieldValuesUnannotated0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResultsObservationsPopularFieldValuesUnannotated0 performs a merge with any union data inside the ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties, using the provided ResultsObservationsPopularFieldValuesUnannotated0
func (t *ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties) MergeResultsObservationsPopularFieldValuesUnannotated0(v ResultsObservationsPopularFieldValuesUnannotated0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResultsObservationsPopularFieldValuesUnannotated1 returns the union data inside the ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties as a ResultsObservationsPopularFieldValuesUnannotated1
func (t ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties) AsResultsObservationsPopularFieldValuesUnannotated1() (ResultsObservationsPopularFieldValuesUnannotated1, error) {
	var body ResultsObservationsPopularFieldValuesUnannotated1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResultsObservationsPopularFieldValuesUnannotated1 overwrites any union data inside the ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties as the provided ResultsObservationsPopularFieldValuesUnannotated1
func (t *ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties) FromResultsObservationsPopularFieldValuesUnannotated1(v ResultsObservationsPopularFieldValuesUnannotated1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResultsObservationsPopularFieldValuesUnannotated1 performs a merge with any union data inside the ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties, using the provided ResultsObservationsPopularFieldValuesUnannotated1
func (t *ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties) MergeResultsObservationsPopularFieldValuesUnannotated1(v ResultsObservationsPopularFieldValuesUnannotated1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResultsObservationsPopularFieldValues_Unannotated_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResultsTaxaSuggestQueryIncludeRepresentativePhotos0 returns the union data inside the ResultsTaxaSuggest_Query_IncludeRepresentativePhotos as a ResultsTaxaSuggestQueryIncludeRepresentativePhotos0
func (t ResultsTaxaSuggest_Query_IncludeRepresentativePhotos) AsResultsTaxaSuggestQueryIncludeRepresentativePhotos0() (ResultsTaxaSuggestQueryIncludeRepresentativePhotos0, error) {
	var body ResultsTaxaSuggestQueryIncludeRepresentativePhotos0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResultsTaxaSuggestQueryIncludeRepresentativePhotos0 overwrites any union data inside the ResultsTaxaSuggest_Query_IncludeRepresentativePhotos as the provided ResultsTaxaSuggestQueryIncludeRepresentativePhotos0
func (t *ResultsTaxaSuggest_Query_IncludeRepresentativePhotos) FromResultsTaxaSuggestQueryIncludeRepresentativePhotos0(v ResultsTaxaSuggestQueryIncludeRepresentativePhotos0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResultsTaxaSuggestQueryIncludeRepresentativePhotos0 performs a merge with any union data inside the ResultsTaxaSuggest_Query_IncludeRepresentativePhotos, using the provided ResultsTaxaSuggestQueryIncludeRepresentativePhotos0
func (t *ResultsTaxaSuggest_Query_IncludeRepresentativePhotos) MergeResultsTaxaSuggestQueryIncludeRepresentativePhotos0(v ResultsTaxaSuggestQueryIncludeRepresentativePhotos0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResultsTaxaSuggestQueryIncludeRepresentativePhotos1 returns the union data inside the ResultsTaxaSuggest_Query_IncludeRepresentativePhotos as a ResultsTaxaSuggestQueryIncludeRepresentativePhotos1
func (t ResultsTaxaSuggest_Query_IncludeRepresentativePhotos) AsResultsTaxaSuggestQueryIncludeRepresentativePhotos1() (ResultsTaxaSuggestQueryIncludeRepresentativePhotos1, error) {
	var body ResultsTaxaSuggestQueryIncludeRepresentativePhotos1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResultsTaxaSuggestQueryIncludeRepresentativePhotos1 overwrites any union data inside the ResultsTaxaSuggest_Query_IncludeRepresentativePhotos as the provided ResultsTaxaSuggestQueryIncludeRepresentativePhotos1
func (t *ResultsTaxaSuggest_Query_IncludeRepresentativePhotos) FromResultsTaxaSuggestQueryIncludeRepresentativePhotos1(v ResultsTaxaSuggestQueryIncludeRepresentativePhotos1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResultsTaxaSuggestQueryIncludeRepresentativePhotos1 performs a merge with any union data inside the ResultsTaxaSuggest_Query_IncludeRepresentativePhotos, using the provided ResultsTaxaSuggestQueryIncludeRepresentativePhotos1
func (t *ResultsTaxaSuggest_Query_IncludeRepresentativePhotos) MergeResultsTaxaSuggestQueryIncludeRepresentativePhotos1(v ResultsTaxaSuggestQueryIncludeRepresentativePhotos1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResultsTaxaSuggest_Query_IncludeRepresentativePhotos) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResultsTaxaSuggest_Query_IncludeRepresentativePhotos) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAnnotationsWithBody request with any body
	PostAnnotationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAnnotations(ctx context.Context, body PostAnnotationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAnnotationsUuid request
	DeleteAnnotationsUuid(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAnnotationsUuidVote request
	DeleteAnnotationsUuidVote(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAnnotationsUuidVote request
	PostAnnotationsUuidVote(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAnnouncements request
	GetAnnouncements(ctx context.Context, params *GetAnnouncementsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAnnouncementsIdDismiss request
	PutAnnouncementsIdDismiss(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthorizedApplications request
	GetAuthorizedApplications(ctx context.Context, params *GetAuthorizedApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAuthorizedApplicationsId request
	DeleteAuthorizedApplicationsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCommentsWithBody request with any body
	PostCommentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostComments(ctx context.Context, body PostCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCommentsUuid request
	DeleteCommentsUuid(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCommentsUuidWithBody request with any body
	PutCommentsUuidWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCommentsUuid(ctx context.Context, uuid openapi_types.UUID, body PutCommentsUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetControlledTerms request
	GetControlledTerms(ctx context.Context, params *GetControlledTermsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetControlledTermsForTaxonTaxonId request
	GetControlledTermsForTaxonTaxonId(ctx context.Context, taxonId []string, params *GetControlledTermsForTaxonTaxonIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFlagsWithBody request with any body
	PostFlagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFlags(ctx context.Context, body PostFlagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFlagsId request
	DeleteFlagsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFlagsIdWithBody request with any body
	PutFlagsIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFlagsId(ctx context.Context, id int, body PutFlagsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGeomodelIdZoomXYPng request
	GetGeomodelIdZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGeomodelComparisonIdZoomXYPng request
	GetGeomodelComparisonIdZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelComparisonIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGeomodelTaxonRangeIdZoomXYPng request
	GetGeomodelTaxonRangeIdZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelTaxonRangeIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGridZoomXYGridJson request
	GetGridZoomXYGridJson(ctx context.Context, zoom int, x int, y int, params *GetGridZoomXYGridJsonParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGridZoomXYPng request
	GetGridZoomXYPng(ctx context.Context, zoom int, x int, y int, params *GetGridZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHeatmapZoomXYPng request
	GetHeatmapZoomXYPng(ctx context.Context, zoom int, x int, y int, params *GetHeatmapZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdentificationsWithBody request with any body
	PostIdentificationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIdentifications(ctx context.Context, body PostIdentificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdentificationsIdentifiers request
	GetIdentificationsIdentifiers(ctx context.Context, params *GetIdentificationsIdentifiersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdentificationsRecentTaxa request
	GetIdentificationsRecentTaxa(ctx context.Context, params *GetIdentificationsRecentTaxaParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdentificationsSimilarSpecies request
	GetIdentificationsSimilarSpecies(ctx context.Context, params *GetIdentificationsSimilarSpeciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdentificationsUuid request
	DeleteIdentificationsUuid(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIdentificationsUuidWithBody request with any body
	PutIdentificationsUuidWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIdentificationsUuid(ctx context.Context, uuid openapi_types.UUID, body PutIdentificationsUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMessages request
	GetMessages(ctx context.Context, params *GetMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMessagesWithBody request with any body
	PostMessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMessages(ctx context.Context, body PostMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMessagesId request
	GetMessagesId(ctx context.Context, id int, params *GetMessagesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObservationFieldValuesWithBody request with any body
	PostObservationFieldValuesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostObservationFieldValues(ctx context.Context, body PostObservationFieldValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObservationFieldValuesUuid request
	DeleteObservationFieldValuesUuid(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutObservationFieldValuesUuidWithBody request with any body
	PutObservationFieldValuesUuidWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutObservationFieldValuesUuid(ctx context.Context, uuid openapi_types.UUID, body PutObservationFieldValuesUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObservationPhotosWithBody request with any body
	PostObservationPhotosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostObservationPhotos(ctx context.Context, body PostObservationPhotosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObservationPhotosUuid request
	DeleteObservationPhotosUuid(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutObservationPhotosUuidWithBody request with any body
	PutObservationPhotosUuidWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutObservationPhotosUuid(ctx context.Context, uuid openapi_types.UUID, body PutObservationPhotosUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObservationSoundsWithBody request with any body
	PostObservationSoundsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostObservationSounds(ctx context.Context, body PostObservationSoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObservationSoundsUuid request
	DeleteObservationSoundsUuid(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutObservationSoundsUuidWithBody request with any body
	PutObservationSoundsUuidWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutObservationSoundsUuid(ctx context.Context, uuid openapi_types.UUID, body PutObservationSoundsUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservations request
	GetObservations(ctx context.Context, params *GetObservationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObservationsWithBody request with any body
	PostObservationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostObservations(ctx context.Context, body PostObservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsDeleted request
	GetObservationsDeleted(ctx context.Context, params *GetObservationsDeletedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsHistogram request
	GetObservationsHistogram(ctx context.Context, params *GetObservationsHistogramParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsIconicTaxaSpeciesCounts request
	GetObservationsIconicTaxaSpeciesCounts(ctx context.Context, params *GetObservationsIconicTaxaSpeciesCountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsIdentificationCategories request
	GetObservationsIdentificationCategories(ctx context.Context, params *GetObservationsIdentificationCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsIdentifiers request
	GetObservationsIdentifiers(ctx context.Context, params *GetObservationsIdentifiersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsObservers request
	GetObservationsObservers(ctx context.Context, params *GetObservationsObserversParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsPopularFieldValues request
	GetObservationsPopularFieldValues(ctx context.Context, params *GetObservationsPopularFieldValuesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsQualityGrades request
	GetObservationsQualityGrades(ctx context.Context, params *GetObservationsQualityGradesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsSpeciesCounts request
	GetObservationsSpeciesCounts(ctx context.Context, params *GetObservationsSpeciesCountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsUmbrellaProjectStats request
	GetObservationsUmbrellaProjectStats(ctx context.Context, params *GetObservationsUmbrellaProjectStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsUpdates request
	GetObservationsUpdates(ctx context.Context, params *GetObservationsUpdatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObservationsUuid request
	DeleteObservationsUuid(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsUuid request
	GetObservationsUuid(ctx context.Context, uuid []openapi_types.UUID, params *GetObservationsUuidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutObservationsUuidWithBody request with any body
	PutObservationsUuidWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutObservationsUuid(ctx context.Context, uuid openapi_types.UUID, body PutObservationsUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObservationsUuidFave request
	DeleteObservationsUuidFave(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObservationsUuidFave request
	PostObservationsUuidFave(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObservationsUuidQualityMetric request
	DeleteObservationsUuidQualityMetric(ctx context.Context, uuid []openapi_types.UUID, metric DeleteObservationsUuidQualityMetricParamsMetric, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObservationsUuidQualityMetric request
	PostObservationsUuidQualityMetric(ctx context.Context, uuid []openapi_types.UUID, metric PostObservationsUuidQualityMetricParamsMetric, params *PostObservationsUuidQualityMetricParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsUuidQualityMetrics request
	GetObservationsUuidQualityMetrics(ctx context.Context, uuid []openapi_types.UUID, params *GetObservationsUuidQualityMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObservationsUuidReview request
	DeleteObservationsUuidReview(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObservationsUuidReview request
	PostObservationsUuidReview(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutObservationsUuidSubscription request
	PutObservationsUuidSubscription(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsUuidSubscriptions request
	GetObservationsUuidSubscriptions(ctx context.Context, uuid openapi_types.UUID, params *GetObservationsUuidSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObservationsUuidTaxonSummary request
	GetObservationsUuidTaxonSummary(ctx context.Context, uuid openapi_types.UUID, params *GetObservationsUuidTaxonSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutObservationsUuidViewedUpdates request
	PutObservationsUuidViewedUpdates(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPhotosWithBody request with any body
	PostPhotosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPhotosId request
	PutPhotosId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaces request
	GetPlaces(ctx context.Context, params *GetPlacesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacesNearby request
	GetPlacesNearby(ctx context.Context, params *GetPlacesNearbyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacesIdZoomXYPng request
	GetPlacesIdZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetPlacesIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacesUuid request
	GetPlacesUuid(ctx context.Context, uuid []string, params *GetPlacesUuidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPointsZoomXYGridJson request
	GetPointsZoomXYGridJson(ctx context.Context, zoom int, x int, y int, params *GetPointsZoomXYGridJsonParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPointsZoomXYPng request
	GetPointsZoomXYPng(ctx context.Context, zoom int, x int, y int, params *GetPointsZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectObservationsWithBody request with any body
	PostProjectObservationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProjectObservations(ctx context.Context, body PostProjectObservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProjectObservationsUuid request
	DeleteProjectObservationsUuid(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutProjectObservationsUuidWithBody request with any body
	PutProjectObservationsUuidWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutProjectObservationsUuid(ctx context.Context, uuid openapi_types.UUID, body PutProjectObservationsUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutProjectUsersIdWithBody request with any body
	PutProjectUsersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutProjectUsersId(ctx context.Context, id string, body PutProjectUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjects request
	GetProjects(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectsId request
	GetProjectsId(ctx context.Context, id []int, params *GetProjectsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectsIdMembers request
	GetProjectsIdMembers(ctx context.Context, id int, params *GetProjectsIdMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProjectsIdMembership request
	DeleteProjectsIdMembership(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectsIdMembership request
	GetProjectsIdMembership(ctx context.Context, id []int, params *GetProjectsIdMembershipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectsIdMembership request
	PostProjectsIdMembership(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectsIdPosts request
	GetProjectsIdPosts(ctx context.Context, id []int, params *GetProjectsIdPostsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProviderAuthorizations request
	GetProviderAuthorizations(ctx context.Context, params *GetProviderAuthorizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProviderAuthorizationsId request
	DeleteProviderAuthorizationsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRelationships request
	GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRelationshipsWithBody request with any body
	PostRelationshipsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRelationships(ctx context.Context, body PostRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRelationshipsId request
	DeleteRelationshipsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRelationshipsIdWithBody request with any body
	PutRelationshipsIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRelationshipsId(ctx context.Context, id int, body PutRelationshipsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSavedLocations request
	GetSavedLocations(ctx context.Context, params *GetSavedLocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSavedLocationsWithBody request with any body
	PostSavedLocationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSavedLocations(ctx context.Context, body PostSavedLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSavedLocationsId request
	DeleteSavedLocationsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearch request
	GetSearch(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSites request
	GetSites(ctx context.Context, params *GetSitesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSoundsWithBody request with any body
	PostSoundsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxa request
	GetTaxa(ctx context.Context, params *GetTaxaParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxaAutocomplete request
	GetTaxaAutocomplete(ctx context.Context, params *GetTaxaAutocompleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxaIconic request
	GetTaxaIconic(ctx context.Context, params *GetTaxaIconicParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxaSuggest request
	GetTaxaSuggest(ctx context.Context, params *GetTaxaSuggestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTaxaSuggestWithBody request with any body
	PostTaxaSuggestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxaId request
	GetTaxaId(ctx context.Context, id []int, params *GetTaxaIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxaIdWanted request
	GetTaxaIdWanted(ctx context.Context, id int, params *GetTaxaIdWantedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTaxonNamePrioritiesWithBody request with any body
	PostTaxonNamePrioritiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTaxonNamePriorities(ctx context.Context, body PostTaxonNamePrioritiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTaxonNamePrioritiesId request
	DeleteTaxonNamePrioritiesId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTaxonNamePrioritiesIdWithBody request with any body
	PutTaxonNamePrioritiesIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTaxonNamePrioritiesId(ctx context.Context, id int, body PutTaxonNamePrioritiesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxonPlacesIdZoomXYPng request
	GetTaxonPlacesIdZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetTaxonPlacesIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxonRangesIdZoomXYPng request
	GetTaxonRangesIdZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetTaxonRangesIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTranslationsLocales request
	GetTranslationsLocales(ctx context.Context, params *GetTranslationsLocalesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersAutocomplete request
	GetUsersAutocomplete(ctx context.Context, params *GetUsersAutocompleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersEmailAvailable request
	GetUsersEmailAvailable(ctx context.Context, params *GetUsersEmailAvailableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersMe request
	GetUsersMe(ctx context.Context, params *GetUsersMeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersNotificationCounts request
	GetUsersNotificationCounts(ctx context.Context, params *GetUsersNotificationCountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersRecentObservationFields request
	GetUsersRecentObservationFields(ctx context.Context, params *GetUsersRecentObservationFieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersResendConfirmation request
	PostUsersResendConfirmation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersResetPasswordWithBody request with any body
	PostUsersResetPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsersResetPassword(ctx context.Context, body PostUsersResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUsersUpdateSession request
	PutUsersUpdateSession(ctx context.Context, params *PutUsersUpdateSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersId request
	GetUsersId(ctx context.Context, id string, params *GetUsersIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUsersIdWithBody request with any body
	PutUsersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUsersId(ctx context.Context, id string, body PutUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsersIdBlock request
	DeleteUsersIdBlock(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersIdBlock request
	PostUsersIdBlock(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsersIdMute request
	DeleteUsersIdMute(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersIdMute request
	PostUsersIdMute(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersIdProjects request
	GetUsersIdProjects(ctx context.Context, id int, params *GetUsersIdProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAnnotationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnnotationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAnnotations(ctx context.Context, body PostAnnotationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnnotationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAnnotationsUuid(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAnnotationsUuidRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAnnotationsUuidVote(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAnnotationsUuidVoteRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAnnotationsUuidVote(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnnotationsUuidVoteRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAnnouncements(ctx context.Context, params *GetAnnouncementsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAnnouncementsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAnnouncementsIdDismiss(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAnnouncementsIdDismissRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthorizedApplications(ctx context.Context, params *GetAuthorizedApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthorizedApplicationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuthorizedApplicationsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthorizedApplicationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCommentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCommentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComments(ctx context.Context, body PostCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCommentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCommentsUuid(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCommentsUuidRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCommentsUuidWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCommentsUuidRequestWithBody(c.Server, uuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCommentsUuid(ctx context.Context, uuid openapi_types.UUID, body PutCommentsUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCommentsUuidRequest(c.Server, uuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetControlledTerms(ctx context.Context, params *GetControlledTermsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetControlledTermsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetControlledTermsForTaxonTaxonId(ctx context.Context, taxonId []string, params *GetControlledTermsForTaxonTaxonIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetControlledTermsForTaxonTaxonIdRequest(c.Server, taxonId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFlagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFlagsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFlags(ctx context.Context, body PostFlagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFlagsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFlagsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFlagsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFlagsIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFlagsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFlagsId(ctx context.Context, id int, body PutFlagsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFlagsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGeomodelIdZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGeomodelIdZoomXYPngRequest(c.Server, id, zoom, x, y, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGeomodelComparisonIdZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelComparisonIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGeomodelComparisonIdZoomXYPngRequest(c.Server, id, zoom, x, y, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGeomodelTaxonRangeIdZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelTaxonRangeIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGeomodelTaxonRangeIdZoomXYPngRequest(c.Server, id, zoom, x, y, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGridZoomXYGridJson(ctx context.Context, zoom int, x int, y int, params *GetGridZoomXYGridJsonParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGridZoomXYGridJsonRequest(c.Server, zoom, x, y, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGridZoomXYPng(ctx context.Context, zoom int, x int, y int, params *GetGridZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGridZoomXYPngRequest(c.Server, zoom, x, y, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHeatmapZoomXYPng(ctx context.Context, zoom int, x int, y int, params *GetHeatmapZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHeatmapZoomXYPngRequest(c.Server, zoom, x, y, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdentificationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdentificationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdentifications(ctx context.Context, body PostIdentificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdentificationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdentificationsIdentifiers(ctx context.Context, params *GetIdentificationsIdentifiersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdentificationsIdentifiersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdentificationsRecentTaxa(ctx context.Context, params *GetIdentificationsRecentTaxaParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdentificationsRecentTaxaRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdentificationsSimilarSpecies(ctx context.Context, params *GetIdentificationsSimilarSpeciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdentificationsSimilarSpeciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdentificationsUuid(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdentificationsUuidRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdentificationsUuidWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdentificationsUuidRequestWithBody(c.Server, uuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIdentificationsUuid(ctx context.Context, uuid openapi_types.UUID, body PutIdentificationsUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIdentificationsUuidRequest(c.Server, uuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessages(ctx context.Context, params *GetMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMessagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessages(ctx context.Context, body PostMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMessagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessagesId(ctx context.Context, id int, params *GetMessagesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessagesIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObservationFieldValuesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObservationFieldValuesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObservationFieldValues(ctx context.Context, body PostObservationFieldValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObservationFieldValuesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObservationFieldValuesUuid(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObservationFieldValuesUuidRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObservationFieldValuesUuidWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObservationFieldValuesUuidRequestWithBody(c.Server, uuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObservationFieldValuesUuid(ctx context.Context, uuid openapi_types.UUID, body PutObservationFieldValuesUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObservationFieldValuesUuidRequest(c.Server, uuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObservationPhotosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObservationPhotosRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObservationPhotos(ctx context.Context, body PostObservationPhotosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObservationPhotosRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObservationPhotosUuid(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObservationPhotosUuidRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObservationPhotosUuidWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObservationPhotosUuidRequestWithBody(c.Server, uuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObservationPhotosUuid(ctx context.Context, uuid openapi_types.UUID, body PutObservationPhotosUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObservationPhotosUuidRequest(c.Server, uuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObservationSoundsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObservationSoundsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObservationSounds(ctx context.Context, body PostObservationSoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObservationSoundsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObservationSoundsUuid(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObservationSoundsUuidRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObservationSoundsUuidWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObservationSoundsUuidRequestWithBody(c.Server, uuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObservationSoundsUuid(ctx context.Context, uuid openapi_types.UUID, body PutObservationSoundsUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObservationSoundsUuidRequest(c.Server, uuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservations(ctx context.Context, params *GetObservationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObservationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObservationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObservations(ctx context.Context, body PostObservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObservationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsDeleted(ctx context.Context, params *GetObservationsDeletedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsDeletedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsHistogram(ctx context.Context, params *GetObservationsHistogramParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsHistogramRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsIconicTaxaSpeciesCounts(ctx context.Context, params *GetObservationsIconicTaxaSpeciesCountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsIconicTaxaSpeciesCountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsIdentificationCategories(ctx context.Context, params *GetObservationsIdentificationCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsIdentificationCategoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsIdentifiers(ctx context.Context, params *GetObservationsIdentifiersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsIdentifiersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsObservers(ctx context.Context, params *GetObservationsObserversParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsObserversRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsPopularFieldValues(ctx context.Context, params *GetObservationsPopularFieldValuesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsPopularFieldValuesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsQualityGrades(ctx context.Context, params *GetObservationsQualityGradesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsQualityGradesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsSpeciesCounts(ctx context.Context, params *GetObservationsSpeciesCountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsSpeciesCountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsUmbrellaProjectStats(ctx context.Context, params *GetObservationsUmbrellaProjectStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsUmbrellaProjectStatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsUpdates(ctx context.Context, params *GetObservationsUpdatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsUpdatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObservationsUuid(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObservationsUuidRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsUuid(ctx context.Context, uuid []openapi_types.UUID, params *GetObservationsUuidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsUuidRequest(c.Server, uuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObservationsUuidWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObservationsUuidRequestWithBody(c.Server, uuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObservationsUuid(ctx context.Context, uuid openapi_types.UUID, body PutObservationsUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObservationsUuidRequest(c.Server, uuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObservationsUuidFave(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObservationsUuidFaveRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObservationsUuidFave(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObservationsUuidFaveRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObservationsUuidQualityMetric(ctx context.Context, uuid []openapi_types.UUID, metric DeleteObservationsUuidQualityMetricParamsMetric, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObservationsUuidQualityMetricRequest(c.Server, uuid, metric)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObservationsUuidQualityMetric(ctx context.Context, uuid []openapi_types.UUID, metric PostObservationsUuidQualityMetricParamsMetric, params *PostObservationsUuidQualityMetricParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObservationsUuidQualityMetricRequest(c.Server, uuid, metric, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsUuidQualityMetrics(ctx context.Context, uuid []openapi_types.UUID, params *GetObservationsUuidQualityMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsUuidQualityMetricsRequest(c.Server, uuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObservationsUuidReview(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObservationsUuidReviewRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObservationsUuidReview(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObservationsUuidReviewRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObservationsUuidSubscription(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObservationsUuidSubscriptionRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsUuidSubscriptions(ctx context.Context, uuid openapi_types.UUID, params *GetObservationsUuidSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsUuidSubscriptionsRequest(c.Server, uuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObservationsUuidTaxonSummary(ctx context.Context, uuid openapi_types.UUID, params *GetObservationsUuidTaxonSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObservationsUuidTaxonSummaryRequest(c.Server, uuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObservationsUuidViewedUpdates(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObservationsUuidViewedUpdatesRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPhotosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPhotosRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPhotosId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPhotosIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaces(ctx context.Context, params *GetPlacesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacesNearby(ctx context.Context, params *GetPlacesNearbyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacesNearbyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacesIdZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetPlacesIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacesIdZoomXYPngRequest(c.Server, id, zoom, x, y, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacesUuid(ctx context.Context, uuid []string, params *GetPlacesUuidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacesUuidRequest(c.Server, uuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPointsZoomXYGridJson(ctx context.Context, zoom int, x int, y int, params *GetPointsZoomXYGridJsonParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPointsZoomXYGridJsonRequest(c.Server, zoom, x, y, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPointsZoomXYPng(ctx context.Context, zoom int, x int, y int, params *GetPointsZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPointsZoomXYPngRequest(c.Server, zoom, x, y, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectObservationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectObservationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectObservations(ctx context.Context, body PostProjectObservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectObservationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProjectObservationsUuid(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectObservationsUuidRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProjectObservationsUuidWithBody(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProjectObservationsUuidRequestWithBody(c.Server, uuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProjectObservationsUuid(ctx context.Context, uuid openapi_types.UUID, body PutProjectObservationsUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProjectObservationsUuidRequest(c.Server, uuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProjectUsersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProjectUsersIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProjectUsersId(ctx context.Context, id string, body PutProjectUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProjectUsersIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjects(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectsId(ctx context.Context, id []int, params *GetProjectsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectsIdMembers(ctx context.Context, id int, params *GetProjectsIdMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsIdMembersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProjectsIdMembership(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectsIdMembershipRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectsIdMembership(ctx context.Context, id []int, params *GetProjectsIdMembershipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsIdMembershipRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsIdMembership(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsIdMembershipRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectsIdPosts(ctx context.Context, id []int, params *GetProjectsIdPostsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsIdPostsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProviderAuthorizations(ctx context.Context, params *GetProviderAuthorizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProviderAuthorizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProviderAuthorizationsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProviderAuthorizationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRelationshipsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRelationshipsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRelationships(ctx context.Context, body PostRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRelationshipsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRelationshipsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRelationshipsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRelationshipsIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRelationshipsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRelationshipsId(ctx context.Context, id int, body PutRelationshipsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRelationshipsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSavedLocations(ctx context.Context, params *GetSavedLocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSavedLocationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSavedLocationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSavedLocationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSavedLocations(ctx context.Context, body PostSavedLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSavedLocationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSavedLocationsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSavedLocationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearch(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSites(ctx context.Context, params *GetSitesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSitesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSoundsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSoundsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxa(ctx context.Context, params *GetTaxaParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxaRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxaAutocomplete(ctx context.Context, params *GetTaxaAutocompleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxaAutocompleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxaIconic(ctx context.Context, params *GetTaxaIconicParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxaIconicRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxaSuggest(ctx context.Context, params *GetTaxaSuggestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxaSuggestRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTaxaSuggestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTaxaSuggestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxaId(ctx context.Context, id []int, params *GetTaxaIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxaIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxaIdWanted(ctx context.Context, id int, params *GetTaxaIdWantedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxaIdWantedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTaxonNamePrioritiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTaxonNamePrioritiesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTaxonNamePriorities(ctx context.Context, body PostTaxonNamePrioritiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTaxonNamePrioritiesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTaxonNamePrioritiesId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTaxonNamePrioritiesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTaxonNamePrioritiesIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTaxonNamePrioritiesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTaxonNamePrioritiesId(ctx context.Context, id int, body PutTaxonNamePrioritiesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTaxonNamePrioritiesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxonPlacesIdZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetTaxonPlacesIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxonPlacesIdZoomXYPngRequest(c.Server, id, zoom, x, y, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxonRangesIdZoomXYPng(ctx context.Context, id string, zoom int, x int, y int, params *GetTaxonRangesIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxonRangesIdZoomXYPngRequest(c.Server, id, zoom, x, y, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTranslationsLocales(ctx context.Context, params *GetTranslationsLocalesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTranslationsLocalesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersAutocomplete(ctx context.Context, params *GetUsersAutocompleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersAutocompleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersEmailAvailable(ctx context.Context, params *GetUsersEmailAvailableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersEmailAvailableRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersMe(ctx context.Context, params *GetUsersMeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersMeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersNotificationCounts(ctx context.Context, params *GetUsersNotificationCountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersNotificationCountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersRecentObservationFields(ctx context.Context, params *GetUsersRecentObservationFieldsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRecentObservationFieldsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersResendConfirmation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersResendConfirmationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersResetPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersResetPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersResetPassword(ctx context.Context, body PostUsersResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersResetPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUsersUpdateSession(ctx context.Context, params *PutUsersUpdateSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUsersUpdateSessionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersId(ctx context.Context, id string, params *GetUsersIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUsersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUsersIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUsersId(ctx context.Context, id string, body PutUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUsersIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsersIdBlock(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsersIdBlockRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersIdBlock(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersIdBlockRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsersIdMute(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsersIdMuteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersIdMute(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersIdMuteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersIdProjects(ctx context.Context, id int, params *GetUsersIdProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersIdProjectsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAnnotationsRequest calls the generic PostAnnotations builder with application/json body
func NewPostAnnotationsRequest(server string, body PostAnnotationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAnnotationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAnnotationsRequestWithBody generates requests for PostAnnotations with any type of body
func NewPostAnnotationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/annotations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAnnotationsUuidRequest generates requests for DeleteAnnotationsUuid
func NewDeleteAnnotationsUuidRequest(server string, uuid []openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/annotations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAnnotationsUuidVoteRequest generates requests for DeleteAnnotationsUuidVote
func NewDeleteAnnotationsUuidVoteRequest(server string, uuid []openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/annotations/%s/vote", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAnnotationsUuidVoteRequest generates requests for PostAnnotationsUuidVote
func NewPostAnnotationsUuidVoteRequest(server string, uuid []openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/annotations/%s/vote", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAnnouncementsRequest generates requests for GetAnnouncements
func NewGetAnnouncementsRequest(server string, params *GetAnnouncementsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/announcements")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Placement != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "placement", runtime.ParamLocationQuery, *params.Placement); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Client != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client", runtime.ParamLocationQuery, *params.Client); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewPutAnnouncementsIdDismissRequest generates requests for PutAnnouncementsIdDismiss
func NewPutAnnouncementsIdDismissRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/announcements/%s/dismiss", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthorizedApplicationsRequest generates requests for GetAuthorizedApplications
func NewGetAuthorizedApplicationsRequest(server string, params *GetAuthorizedApplicationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorized_applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteAuthorizedApplicationsIdRequest generates requests for DeleteAuthorizedApplicationsId
func NewDeleteAuthorizedApplicationsIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorized_applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCommentsRequest calls the generic PostComments builder with application/json body
func NewPostCommentsRequest(server string, body PostCommentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCommentsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCommentsRequestWithBody generates requests for PostComments with any type of body
func NewPostCommentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/comments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCommentsUuidRequest generates requests for DeleteCommentsUuid
func NewDeleteCommentsUuidRequest(server string, uuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/comments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCommentsUuidRequest calls the generic PutCommentsUuid builder with application/json body
func NewPutCommentsUuidRequest(server string, uuid openapi_types.UUID, body PutCommentsUuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCommentsUuidRequestWithBody(server, uuid, "application/json", bodyReader)
}

// NewPutCommentsUuidRequestWithBody generates requests for PutCommentsUuid with any type of body
func NewPutCommentsUuidRequestWithBody(server string, uuid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/comments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetControlledTermsRequest generates requests for GetControlledTerms
func NewGetControlledTermsRequest(server string, params *GetControlledTermsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/controlled_terms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetControlledTermsForTaxonTaxonIdRequest generates requests for GetControlledTermsForTaxonTaxonId
func NewGetControlledTermsForTaxonTaxonIdRequest(server string, taxonId []string, params *GetControlledTermsForTaxonTaxonIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "taxon_id", runtime.ParamLocationPath, taxonId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/controlled_terms/for_taxon/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewPostFlagsRequest calls the generic PostFlags builder with application/json body
func NewPostFlagsRequest(server string, body PostFlagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFlagsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFlagsRequestWithBody generates requests for PostFlags with any type of body
func NewPostFlagsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/flags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFlagsIdRequest generates requests for DeleteFlagsId
func NewDeleteFlagsIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/flags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutFlagsIdRequest calls the generic PutFlagsId builder with application/json body
func NewPutFlagsIdRequest(server string, id int, body PutFlagsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFlagsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutFlagsIdRequestWithBody generates requests for PutFlagsId with any type of body
func NewPutFlagsIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/flags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGeomodelIdZoomXYPngRequest generates requests for GetGeomodelIdZoomXYPng
func NewGetGeomodelIdZoomXYPngRequest(server string, id string, zoom int, x int, y int, params *GetGeomodelIdZoomXYPngParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/geomodel/%s/%s/%s/%s.png", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TileSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tile_size", runtime.ParamLocationQuery, *params.TileSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thresholded", runtime.ParamLocationQuery, params.Thresholded); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGeomodelComparisonIdZoomXYPngRequest generates requests for GetGeomodelComparisonIdZoomXYPng
func NewGetGeomodelComparisonIdZoomXYPngRequest(server string, id string, zoom int, x int, y int, params *GetGeomodelComparisonIdZoomXYPngParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/geomodel_comparison/%s/%s/%s/%s.png", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TileSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tile_size", runtime.ParamLocationQuery, *params.TileSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGeomodelTaxonRangeIdZoomXYPngRequest generates requests for GetGeomodelTaxonRangeIdZoomXYPng
func NewGetGeomodelTaxonRangeIdZoomXYPngRequest(server string, id string, zoom int, x int, y int, params *GetGeomodelTaxonRangeIdZoomXYPngParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/geomodel_taxon_range/%s/%s/%s/%s.png", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TileSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tile_size", runtime.ParamLocationQuery, *params.TileSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGridZoomXYGridJsonRequest generates requests for GetGridZoomXYGridJson
func NewGetGridZoomXYGridJsonRequest(server string, zoom int, x int, y int, params *GetGridZoomXYGridJsonParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grid/%s/%s/%s.grid.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TileSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tile_size", runtime.ParamLocationQuery, *params.TileSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IdPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, *params.NotId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.License != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, *params.License); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhotoLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, *params.PhotoLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, *params.PlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Rank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, *params.Rank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoundLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, *params.SoundLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, *params.TaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, *params.WithoutTaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, *params.TaxonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserLogin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, *params.UserLogin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hour != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, *params.Hour); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Day != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, *params.Day); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Month != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, *params.Month); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, *params.CreatedDay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedMonth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, *params.CreatedMonth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, *params.CreatedYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, *params.TermId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, *params.TermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, *params.WithoutTermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermIdOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, *params.TermIdOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AnnotationUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, *params.AnnotationUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, *params.AccAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, *params.AccBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelowOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, *params.AccBelowOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, *params.D1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, *params.D2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, *params.CreatedD1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, *params.CreatedD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, *params.CreatedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, *params.ObservedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnobservedByUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, *params.UnobservedByUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplyProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, *params.ApplyProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservationAccuracyExperimentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, *params.ObservationAccuracyExperimentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, *params.Cs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, *params.Csa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, *params.Csi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Geoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, *params.Geoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonGeoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, *params.TaxonGeoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Obscuration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, *params.Obscuration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, *params.Hrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, *params.Lrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IconicTaxa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, *params.IconicTaxa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, *params.IdAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, *params.IdBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Identifications != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, *params.Identifications); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Lat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, *params.Lat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, *params.Lng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Radius != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, *params.Radius); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, *params.Nelat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, *params.Nelng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, *params.Swlat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, *params.Swlng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, *params.ListId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotInProject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, *params.NotInProject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotMatchingProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, *params.NotMatchingProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, *params.SearchOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QualityGrade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, *params.QualityGrade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, *params.WithoutField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutlinkSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, *params.OutlinkSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, *params.UpdatedSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, *params.ViewerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreferredPlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, *params.PreferredPlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ttl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, *params.Ttl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGridZoomXYPngRequest generates requests for GetGridZoomXYPng
func NewGetGridZoomXYPngRequest(server string, zoom int, x int, y int, params *GetGridZoomXYPngParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grid/%s/%s/%s.png", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TileSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tile_size", runtime.ParamLocationQuery, *params.TileSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IdPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, *params.NotId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.License != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, *params.License); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhotoLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, *params.PhotoLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, *params.PlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Rank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, *params.Rank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoundLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, *params.SoundLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, *params.TaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, *params.WithoutTaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, *params.TaxonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserLogin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, *params.UserLogin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hour != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, *params.Hour); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Day != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, *params.Day); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Month != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, *params.Month); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, *params.CreatedDay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedMonth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, *params.CreatedMonth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, *params.CreatedYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, *params.TermId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, *params.TermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, *params.WithoutTermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermIdOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, *params.TermIdOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AnnotationUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, *params.AnnotationUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, *params.AccAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, *params.AccBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelowOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, *params.AccBelowOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, *params.D1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, *params.D2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, *params.CreatedD1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, *params.CreatedD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, *params.CreatedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, *params.ObservedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnobservedByUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, *params.UnobservedByUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplyProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, *params.ApplyProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservationAccuracyExperimentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, *params.ObservationAccuracyExperimentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, *params.Cs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, *params.Csa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, *params.Csi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Geoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, *params.Geoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonGeoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, *params.TaxonGeoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Obscuration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, *params.Obscuration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, *params.Hrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, *params.Lrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IconicTaxa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, *params.IconicTaxa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, *params.IdAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, *params.IdBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Identifications != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, *params.Identifications); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Lat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, *params.Lat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, *params.Lng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Radius != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, *params.Radius); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, *params.Nelat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, *params.Nelng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, *params.Swlat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, *params.Swlng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, *params.ListId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotInProject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, *params.NotInProject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotMatchingProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, *params.NotMatchingProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, *params.SearchOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QualityGrade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, *params.QualityGrade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, *params.WithoutField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutlinkSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, *params.OutlinkSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, *params.UpdatedSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, *params.ViewerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreferredPlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, *params.PreferredPlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ttl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, *params.Ttl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHeatmapZoomXYPngRequest generates requests for GetHeatmapZoomXYPng
func NewGetHeatmapZoomXYPngRequest(server string, zoom int, x int, y int, params *GetHeatmapZoomXYPngParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/heatmap/%s/%s/%s.png", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TileSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tile_size", runtime.ParamLocationQuery, *params.TileSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IdPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, *params.NotId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.License != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, *params.License); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhotoLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, *params.PhotoLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, *params.PlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Rank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, *params.Rank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoundLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, *params.SoundLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, *params.TaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, *params.WithoutTaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, *params.TaxonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserLogin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, *params.UserLogin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hour != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, *params.Hour); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Day != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, *params.Day); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Month != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, *params.Month); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, *params.CreatedDay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedMonth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, *params.CreatedMonth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, *params.CreatedYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, *params.TermId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, *params.TermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, *params.WithoutTermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermIdOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, *params.TermIdOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AnnotationUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, *params.AnnotationUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, *params.AccAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, *params.AccBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelowOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, *params.AccBelowOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, *params.D1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, *params.D2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, *params.CreatedD1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, *params.CreatedD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, *params.CreatedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, *params.ObservedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnobservedByUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, *params.UnobservedByUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplyProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, *params.ApplyProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservationAccuracyExperimentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, *params.ObservationAccuracyExperimentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, *params.Cs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, *params.Csa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, *params.Csi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Geoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, *params.Geoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonGeoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, *params.TaxonGeoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Obscuration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, *params.Obscuration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, *params.Hrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, *params.Lrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IconicTaxa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, *params.IconicTaxa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, *params.IdAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, *params.IdBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Identifications != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, *params.Identifications); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Lat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, *params.Lat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, *params.Lng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Radius != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, *params.Radius); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, *params.Nelat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, *params.Nelng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, *params.Swlat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, *params.Swlng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, *params.ListId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotInProject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, *params.NotInProject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotMatchingProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, *params.NotMatchingProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, *params.SearchOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QualityGrade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, *params.QualityGrade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, *params.WithoutField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutlinkSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, *params.OutlinkSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, *params.UpdatedSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, *params.ViewerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreferredPlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, *params.PreferredPlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ttl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, *params.Ttl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIdentificationsRequest calls the generic PostIdentifications builder with application/json body
func NewPostIdentificationsRequest(server string, body PostIdentificationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIdentificationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIdentificationsRequestWithBody generates requests for PostIdentifications with any type of body
func NewPostIdentificationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdentificationsIdentifiersRequest generates requests for GetIdentificationsIdentifiers
func NewGetIdentificationsIdentifiersRequest(server string, params *GetIdentificationsIdentifiersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identifications/identifiers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, *params.TaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QualityGrade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, *params.QualityGrade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetIdentificationsRecentTaxaRequest generates requests for GetIdentificationsRecentTaxa
func NewGetIdentificationsRecentTaxaRequest(server string, params *GetIdentificationsRecentTaxaParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identifications/recent_taxa")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, params.TaxonId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.QualityGrade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, *params.QualityGrade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Rank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rank", runtime.ParamLocationQuery, *params.Rank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetIdentificationsSimilarSpeciesRequest generates requests for GetIdentificationsSimilarSpecies
func NewGetIdentificationsSimilarSpeciesRequest(server string, params *GetIdentificationsSimilarSpeciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identifications/similar_species")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_id", runtime.ParamLocationQuery, params.TaxonId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.QualityGrade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, *params.QualityGrade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteIdentificationsUuidRequest generates requests for DeleteIdentificationsUuid
func NewDeleteIdentificationsUuidRequest(server string, uuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identifications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIdentificationsUuidRequest calls the generic PutIdentificationsUuid builder with application/json body
func NewPutIdentificationsUuidRequest(server string, uuid openapi_types.UUID, body PutIdentificationsUuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIdentificationsUuidRequestWithBody(server, uuid, "application/json", bodyReader)
}

// NewPutIdentificationsUuidRequestWithBody generates requests for PutIdentificationsUuid with any type of body
func NewPutIdentificationsUuidRequestWithBody(server string, uuid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identifications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMessagesRequest generates requests for GetMessages
func NewGetMessagesRequest(server string, params *GetMessagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewPostMessagesRequest calls the generic PostMessages builder with application/json body
func NewPostMessagesRequest(server string, body PostMessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMessagesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMessagesRequestWithBody generates requests for PostMessages with any type of body
func NewPostMessagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMessagesIdRequest generates requests for GetMessagesId
func NewGetMessagesIdRequest(server string, id int, params *GetMessagesIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewPostObservationFieldValuesRequest calls the generic PostObservationFieldValues builder with application/json body
func NewPostObservationFieldValuesRequest(server string, body PostObservationFieldValuesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostObservationFieldValuesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostObservationFieldValuesRequestWithBody generates requests for PostObservationFieldValues with any type of body
func NewPostObservationFieldValuesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observation_field_values")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteObservationFieldValuesUuidRequest generates requests for DeleteObservationFieldValuesUuid
func NewDeleteObservationFieldValuesUuidRequest(server string, uuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observation_field_values/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutObservationFieldValuesUuidRequest calls the generic PutObservationFieldValuesUuid builder with application/json body
func NewPutObservationFieldValuesUuidRequest(server string, uuid openapi_types.UUID, body PutObservationFieldValuesUuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutObservationFieldValuesUuidRequestWithBody(server, uuid, "application/json", bodyReader)
}

// NewPutObservationFieldValuesUuidRequestWithBody generates requests for PutObservationFieldValuesUuid with any type of body
func NewPutObservationFieldValuesUuidRequestWithBody(server string, uuid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observation_field_values/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostObservationPhotosRequest calls the generic PostObservationPhotos builder with application/json body
func NewPostObservationPhotosRequest(server string, body PostObservationPhotosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostObservationPhotosRequestWithBody(server, "application/json", bodyReader)
}

// NewPostObservationPhotosRequestWithBody generates requests for PostObservationPhotos with any type of body
func NewPostObservationPhotosRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observation_photos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteObservationPhotosUuidRequest generates requests for DeleteObservationPhotosUuid
func NewDeleteObservationPhotosUuidRequest(server string, uuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observation_photos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutObservationPhotosUuidRequest calls the generic PutObservationPhotosUuid builder with application/json body
func NewPutObservationPhotosUuidRequest(server string, uuid openapi_types.UUID, body PutObservationPhotosUuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutObservationPhotosUuidRequestWithBody(server, uuid, "application/json", bodyReader)
}

// NewPutObservationPhotosUuidRequestWithBody generates requests for PutObservationPhotosUuid with any type of body
func NewPutObservationPhotosUuidRequestWithBody(server string, uuid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observation_photos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostObservationSoundsRequest calls the generic PostObservationSounds builder with application/json body
func NewPostObservationSoundsRequest(server string, body PostObservationSoundsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostObservationSoundsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostObservationSoundsRequestWithBody generates requests for PostObservationSounds with any type of body
func NewPostObservationSoundsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observation_sounds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteObservationSoundsUuidRequest generates requests for DeleteObservationSoundsUuid
func NewDeleteObservationSoundsUuidRequest(server string, uuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observation_sounds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutObservationSoundsUuidRequest calls the generic PutObservationSoundsUuid builder with application/json body
func NewPutObservationSoundsUuidRequest(server string, uuid openapi_types.UUID, body PutObservationSoundsUuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutObservationSoundsUuidRequestWithBody(server, uuid, "application/json", bodyReader)
}

// NewPutObservationSoundsUuidRequestWithBody generates requests for PutObservationSoundsUuid with any type of body
func NewPutObservationSoundsUuidRequestWithBody(server string, uuid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observation_sounds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetObservationsRequest generates requests for GetObservations
func NewGetObservationsRequest(server string, params *GetObservationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IdPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, *params.NotId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.License != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, *params.License); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhotoLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, *params.PhotoLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, *params.PlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Rank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, *params.Rank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoundLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, *params.SoundLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, *params.TaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, *params.WithoutTaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, *params.TaxonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserLogin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, *params.UserLogin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hour != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, *params.Hour); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Day != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, *params.Day); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Month != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, *params.Month); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, *params.CreatedDay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedMonth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, *params.CreatedMonth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, *params.CreatedYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, *params.TermId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, *params.TermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, *params.WithoutTermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermIdOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, *params.TermIdOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AnnotationUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, *params.AnnotationUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, *params.AccAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, *params.AccBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelowOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, *params.AccBelowOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, *params.D1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, *params.D2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, *params.CreatedD1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, *params.CreatedD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, *params.CreatedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, *params.ObservedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnobservedByUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, *params.UnobservedByUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplyProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, *params.ApplyProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservationAccuracyExperimentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, *params.ObservationAccuracyExperimentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, *params.Cs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, *params.Csa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, *params.Csi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Geoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, *params.Geoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonGeoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, *params.TaxonGeoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Obscuration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, *params.Obscuration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, *params.Hrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, *params.Lrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IconicTaxa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, *params.IconicTaxa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, *params.IdAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, *params.IdBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Identifications != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, *params.Identifications); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Lat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, *params.Lat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, *params.Lng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Radius != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, *params.Radius); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, *params.Nelat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, *params.Nelng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, *params.Swlat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, *params.Swlng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, *params.ListId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotInProject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, *params.NotInProject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotMatchingProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, *params.NotMatchingProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, *params.SearchOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QualityGrade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, *params.QualityGrade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, *params.WithoutField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutlinkSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, *params.OutlinkSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, *params.UpdatedSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, *params.ViewerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreferredPlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, *params.PreferredPlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ttl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, *params.Ttl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewPostObservationsRequest calls the generic PostObservations builder with application/json body
func NewPostObservationsRequest(server string, body PostObservationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostObservationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostObservationsRequestWithBody generates requests for PostObservations with any type of body
func NewPostObservationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetObservationsDeletedRequest generates requests for GetObservationsDeleted
func NewGetObservationsDeletedRequest(server string, params *GetObservationsDeletedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/deleted")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetObservationsHistogramRequest generates requests for GetObservationsHistogram
func NewGetObservationsHistogramRequest(server string, params *GetObservationsHistogramParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/histogram")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IdPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, *params.NotId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.License != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, *params.License); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhotoLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, *params.PhotoLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, *params.PlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Rank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, *params.Rank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoundLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, *params.SoundLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, *params.TaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, *params.WithoutTaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, *params.TaxonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserLogin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, *params.UserLogin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hour != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, *params.Hour); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Day != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, *params.Day); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Month != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, *params.Month); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, *params.CreatedDay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedMonth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, *params.CreatedMonth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, *params.CreatedYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, *params.TermId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, *params.TermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, *params.WithoutTermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermIdOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, *params.TermIdOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AnnotationUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, *params.AnnotationUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, *params.AccAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, *params.AccBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelowOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, *params.AccBelowOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, *params.D1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, *params.D2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, *params.CreatedD1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, *params.CreatedD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, *params.CreatedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, *params.ObservedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnobservedByUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, *params.UnobservedByUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplyProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, *params.ApplyProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservationAccuracyExperimentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, *params.ObservationAccuracyExperimentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, *params.Cs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, *params.Csa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, *params.Csi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Geoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, *params.Geoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonGeoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, *params.TaxonGeoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Obscuration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, *params.Obscuration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, *params.Hrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, *params.Lrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IconicTaxa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, *params.IconicTaxa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, *params.IdAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, *params.IdBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Identifications != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, *params.Identifications); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Lat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, *params.Lat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, *params.Lng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Radius != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, *params.Radius); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, *params.Nelat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, *params.Nelng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, *params.Swlat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, *params.Swlng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, *params.ListId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotInProject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, *params.NotInProject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotMatchingProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, *params.NotMatchingProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, *params.SearchOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QualityGrade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, *params.QualityGrade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, *params.WithoutField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutlinkSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, *params.OutlinkSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, *params.UpdatedSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, *params.ViewerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreferredPlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, *params.PreferredPlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ttl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, *params.Ttl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.DateField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_field", runtime.ParamLocationQuery, *params.DateField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Interval != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "interval", runtime.ParamLocationQuery, *params.Interval); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetObservationsIconicTaxaSpeciesCountsRequest generates requests for GetObservationsIconicTaxaSpeciesCounts
func NewGetObservationsIconicTaxaSpeciesCountsRequest(server string, params *GetObservationsIconicTaxaSpeciesCountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/iconic_taxa_species_counts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IdPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, *params.NotId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.License != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, *params.License); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhotoLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, *params.PhotoLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, *params.PlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Rank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, *params.Rank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoundLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, *params.SoundLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, *params.TaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, *params.WithoutTaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, *params.TaxonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserLogin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, *params.UserLogin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hour != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, *params.Hour); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Day != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, *params.Day); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Month != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, *params.Month); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, *params.CreatedDay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedMonth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, *params.CreatedMonth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, *params.CreatedYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, *params.TermId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, *params.TermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, *params.WithoutTermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermIdOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, *params.TermIdOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AnnotationUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, *params.AnnotationUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, *params.AccAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, *params.AccBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelowOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, *params.AccBelowOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, *params.D1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, *params.D2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, *params.CreatedD1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, *params.CreatedD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, *params.CreatedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, *params.ObservedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnobservedByUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, *params.UnobservedByUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplyProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, *params.ApplyProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservationAccuracyExperimentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, *params.ObservationAccuracyExperimentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, *params.Cs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, *params.Csa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, *params.Csi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Geoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, *params.Geoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonGeoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, *params.TaxonGeoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Obscuration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, *params.Obscuration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, *params.Hrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, *params.Lrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IconicTaxa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, *params.IconicTaxa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, *params.IdAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, *params.IdBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Identifications != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, *params.Identifications); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Lat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, *params.Lat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, *params.Lng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Radius != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, *params.Radius); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, *params.Nelat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, *params.Nelng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, *params.Swlat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, *params.Swlng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, *params.ListId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotInProject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, *params.NotInProject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotMatchingProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, *params.NotMatchingProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, *params.SearchOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QualityGrade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, *params.QualityGrade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, *params.WithoutField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutlinkSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, *params.OutlinkSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, *params.UpdatedSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, *params.ViewerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreferredPlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, *params.PreferredPlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ttl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, *params.Ttl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetObservationsIdentificationCategoriesRequest generates requests for GetObservationsIdentificationCategories
func NewGetObservationsIdentificationCategoriesRequest(server string, params *GetObservationsIdentificationCategoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/identification_categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetObservationsIdentifiersRequest generates requests for GetObservationsIdentifiers
func NewGetObservationsIdentifiersRequest(server string, params *GetObservationsIdentifiersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/identifiers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IdPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, *params.NotId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.License != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, *params.License); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhotoLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, *params.PhotoLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, *params.PlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Rank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, *params.Rank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoundLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, *params.SoundLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, *params.TaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, *params.WithoutTaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, *params.TaxonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserLogin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, *params.UserLogin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hour != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, *params.Hour); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Day != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, *params.Day); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Month != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, *params.Month); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, *params.CreatedDay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedMonth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, *params.CreatedMonth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, *params.CreatedYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, *params.TermId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, *params.TermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, *params.WithoutTermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermIdOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, *params.TermIdOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AnnotationUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, *params.AnnotationUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, *params.AccAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, *params.AccBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelowOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, *params.AccBelowOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, *params.D1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, *params.D2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, *params.CreatedD1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, *params.CreatedD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, *params.CreatedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, *params.ObservedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnobservedByUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, *params.UnobservedByUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplyProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, *params.ApplyProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservationAccuracyExperimentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, *params.ObservationAccuracyExperimentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, *params.Cs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, *params.Csa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, *params.Csi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Geoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, *params.Geoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonGeoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, *params.TaxonGeoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Obscuration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, *params.Obscuration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, *params.Hrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, *params.Lrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IconicTaxa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, *params.IconicTaxa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, *params.IdAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, *params.IdBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Identifications != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, *params.Identifications); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Lat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, *params.Lat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, *params.Lng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Radius != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, *params.Radius); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, *params.Nelat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, *params.Nelng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, *params.Swlat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, *params.Swlng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, *params.ListId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotInProject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, *params.NotInProject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotMatchingProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, *params.NotMatchingProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, *params.SearchOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QualityGrade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, *params.QualityGrade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, *params.WithoutField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutlinkSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, *params.OutlinkSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, *params.UpdatedSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, *params.ViewerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreferredPlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, *params.PreferredPlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ttl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, *params.Ttl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetObservationsObserversRequest generates requests for GetObservationsObservers
func NewGetObservationsObserversRequest(server string, params *GetObservationsObserversParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/observers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IdPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, *params.NotId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.License != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, *params.License); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhotoLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, *params.PhotoLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, *params.PlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Rank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, *params.Rank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoundLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, *params.SoundLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, *params.TaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, *params.WithoutTaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, *params.TaxonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserLogin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, *params.UserLogin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hour != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, *params.Hour); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Day != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, *params.Day); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Month != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, *params.Month); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, *params.CreatedDay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedMonth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, *params.CreatedMonth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, *params.CreatedYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, *params.TermId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, *params.TermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, *params.WithoutTermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermIdOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, *params.TermIdOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AnnotationUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, *params.AnnotationUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, *params.AccAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, *params.AccBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelowOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, *params.AccBelowOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, *params.D1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, *params.D2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, *params.CreatedD1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, *params.CreatedD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, *params.CreatedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, *params.ObservedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnobservedByUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, *params.UnobservedByUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplyProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, *params.ApplyProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservationAccuracyExperimentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, *params.ObservationAccuracyExperimentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, *params.Cs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, *params.Csa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, *params.Csi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Geoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, *params.Geoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonGeoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, *params.TaxonGeoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Obscuration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, *params.Obscuration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, *params.Hrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, *params.Lrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IconicTaxa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, *params.IconicTaxa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, *params.IdAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, *params.IdBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Identifications != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, *params.Identifications); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Lat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, *params.Lat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, *params.Lng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Radius != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, *params.Radius); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, *params.Nelat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, *params.Nelng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, *params.Swlat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, *params.Swlng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, *params.ListId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotInProject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, *params.NotInProject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotMatchingProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, *params.NotMatchingProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, *params.SearchOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QualityGrade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, *params.QualityGrade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, *params.WithoutField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutlinkSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, *params.OutlinkSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, *params.UpdatedSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, *params.ViewerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreferredPlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, *params.PreferredPlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ttl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, *params.Ttl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetObservationsPopularFieldValuesRequest generates requests for GetObservationsPopularFieldValues
func NewGetObservationsPopularFieldValuesRequest(server string, params *GetObservationsPopularFieldValuesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/popular_field_values")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IdPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, *params.NotId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.License != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, *params.License); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhotoLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, *params.PhotoLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, *params.PlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Rank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, *params.Rank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoundLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, *params.SoundLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, *params.TaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, *params.WithoutTaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, *params.TaxonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserLogin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, *params.UserLogin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hour != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, *params.Hour); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Day != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, *params.Day); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Month != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, *params.Month); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, *params.CreatedDay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedMonth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, *params.CreatedMonth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, *params.CreatedYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, *params.TermId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, *params.TermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, *params.WithoutTermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermIdOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, *params.TermIdOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AnnotationUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, *params.AnnotationUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, *params.AccAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, *params.AccBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelowOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, *params.AccBelowOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, *params.D1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, *params.D2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, *params.CreatedD1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, *params.CreatedD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, *params.CreatedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, *params.ObservedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnobservedByUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, *params.UnobservedByUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplyProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, *params.ApplyProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservationAccuracyExperimentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, *params.ObservationAccuracyExperimentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, *params.Cs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, *params.Csa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, *params.Csi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Geoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, *params.Geoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonGeoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, *params.TaxonGeoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Obscuration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, *params.Obscuration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, *params.Hrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, *params.Lrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IconicTaxa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, *params.IconicTaxa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, *params.IdAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, *params.IdBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Identifications != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, *params.Identifications); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Lat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, *params.Lat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, *params.Lng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Radius != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, *params.Radius); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, *params.Nelat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, *params.Nelng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, *params.Swlat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, *params.Swlng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, *params.ListId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotInProject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, *params.NotInProject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotMatchingProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, *params.NotMatchingProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, *params.SearchOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QualityGrade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, *params.QualityGrade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, *params.WithoutField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutlinkSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, *params.OutlinkSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, *params.UpdatedSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, *params.ViewerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreferredPlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, *params.PreferredPlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ttl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, *params.Ttl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "no_histograms", runtime.ParamLocationQuery, params.NoHistograms); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unannotated", runtime.ParamLocationQuery, params.Unannotated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.DateField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_field", runtime.ParamLocationQuery, *params.DateField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Interval != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "interval", runtime.ParamLocationQuery, *params.Interval); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetObservationsQualityGradesRequest generates requests for GetObservationsQualityGrades
func NewGetObservationsQualityGradesRequest(server string, params *GetObservationsQualityGradesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/quality_grades")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetObservationsSpeciesCountsRequest generates requests for GetObservationsSpeciesCounts
func NewGetObservationsSpeciesCountsRequest(server string, params *GetObservationsSpeciesCountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/species_counts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IdPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, *params.NotId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.License != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, *params.License); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhotoLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, *params.PhotoLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, *params.PlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Rank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, *params.Rank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoundLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, *params.SoundLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, *params.TaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, *params.WithoutTaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, *params.TaxonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserLogin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, *params.UserLogin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hour != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, *params.Hour); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Day != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, *params.Day); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Month != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, *params.Month); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, *params.CreatedDay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedMonth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, *params.CreatedMonth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, *params.CreatedYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, *params.TermId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, *params.TermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, *params.WithoutTermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermIdOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, *params.TermIdOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AnnotationUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, *params.AnnotationUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, *params.AccAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, *params.AccBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelowOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, *params.AccBelowOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, *params.D1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, *params.D2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, *params.CreatedD1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, *params.CreatedD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, *params.CreatedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, *params.ObservedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnobservedByUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, *params.UnobservedByUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplyProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, *params.ApplyProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservationAccuracyExperimentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, *params.ObservationAccuracyExperimentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, *params.Cs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, *params.Csa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, *params.Csi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Geoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, *params.Geoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonGeoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, *params.TaxonGeoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Obscuration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, *params.Obscuration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, *params.Hrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, *params.Lrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IconicTaxa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, *params.IconicTaxa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, *params.IdAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, *params.IdBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Identifications != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, *params.Identifications); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Lat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, *params.Lat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, *params.Lng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Radius != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, *params.Radius); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, *params.Nelat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, *params.Nelng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, *params.Swlat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, *params.Swlng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, *params.ListId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotInProject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, *params.NotInProject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotMatchingProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, *params.NotMatchingProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, *params.SearchOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QualityGrade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, *params.QualityGrade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, *params.WithoutField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutlinkSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, *params.OutlinkSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, *params.UpdatedSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, *params.ViewerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreferredPlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, *params.PreferredPlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ttl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, *params.Ttl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_ancestors", runtime.ParamLocationQuery, params.IncludeAncestors); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetObservationsUmbrellaProjectStatsRequest generates requests for GetObservationsUmbrellaProjectStats
func NewGetObservationsUmbrellaProjectStatsRequest(server string, params *GetObservationsUmbrellaProjectStatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/umbrella_project_stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IdPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, *params.NotId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.License != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, *params.License); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhotoLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, *params.PhotoLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, *params.PlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Rank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, *params.Rank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoundLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, *params.SoundLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, *params.TaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, *params.WithoutTaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, *params.TaxonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserLogin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, *params.UserLogin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hour != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, *params.Hour); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Day != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, *params.Day); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Month != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, *params.Month); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, *params.CreatedDay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedMonth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, *params.CreatedMonth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, *params.CreatedYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, *params.TermId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, *params.TermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, *params.WithoutTermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermIdOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, *params.TermIdOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AnnotationUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, *params.AnnotationUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, *params.AccAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, *params.AccBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelowOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, *params.AccBelowOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, *params.D1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, *params.D2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, *params.CreatedD1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, *params.CreatedD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, *params.CreatedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, *params.ObservedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnobservedByUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, *params.UnobservedByUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplyProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, *params.ApplyProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservationAccuracyExperimentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, *params.ObservationAccuracyExperimentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, *params.Cs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, *params.Csa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, *params.Csi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Geoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, *params.Geoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonGeoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, *params.TaxonGeoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Obscuration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, *params.Obscuration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, *params.Hrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, *params.Lrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IconicTaxa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, *params.IconicTaxa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, *params.IdAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, *params.IdBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Identifications != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, *params.Identifications); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Lat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, *params.Lat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, *params.Lng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Radius != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, *params.Radius); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, *params.Nelat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, *params.Nelng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, *params.Swlat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, *params.Swlng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, *params.ListId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotInProject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, *params.NotInProject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotMatchingProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, *params.NotMatchingProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, *params.SearchOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QualityGrade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, *params.QualityGrade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, *params.WithoutField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutlinkSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, *params.OutlinkSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, *params.UpdatedSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, *params.ViewerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreferredPlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, *params.PreferredPlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ttl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, *params.Ttl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetObservationsUpdatesRequest generates requests for GetObservationsUpdates
func NewGetObservationsUpdatesRequest(server string, params *GetObservationsUpdatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/updates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CreatedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_after", runtime.ParamLocationQuery, *params.CreatedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewed", runtime.ParamLocationQuery, params.Viewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ObservationsBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observations_by", runtime.ParamLocationQuery, *params.ObservationsBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteObservationsUuidRequest generates requests for DeleteObservationsUuid
func NewDeleteObservationsUuidRequest(server string, uuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObservationsUuidRequest generates requests for GetObservationsUuid
func NewGetObservationsUuidRequest(server string, uuid []openapi_types.UUID, params *GetObservationsUuidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewPutObservationsUuidRequest calls the generic PutObservationsUuid builder with application/json body
func NewPutObservationsUuidRequest(server string, uuid openapi_types.UUID, body PutObservationsUuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutObservationsUuidRequestWithBody(server, uuid, "application/json", bodyReader)
}

// NewPutObservationsUuidRequestWithBody generates requests for PutObservationsUuid with any type of body
func NewPutObservationsUuidRequestWithBody(server string, uuid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteObservationsUuidFaveRequest generates requests for DeleteObservationsUuidFave
func NewDeleteObservationsUuidFaveRequest(server string, uuid []openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s/fave", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostObservationsUuidFaveRequest generates requests for PostObservationsUuidFave
func NewPostObservationsUuidFaveRequest(server string, uuid []openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s/fave", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteObservationsUuidQualityMetricRequest generates requests for DeleteObservationsUuidQualityMetric
func NewDeleteObservationsUuidQualityMetricRequest(server string, uuid []openapi_types.UUID, metric DeleteObservationsUuidQualityMetricParamsMetric) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metric", runtime.ParamLocationPath, metric)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s/quality/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostObservationsUuidQualityMetricRequest generates requests for PostObservationsUuidQualityMetric
func NewPostObservationsUuidQualityMetricRequest(server string, uuid []openapi_types.UUID, metric PostObservationsUuidQualityMetricParamsMetric, params *PostObservationsUuidQualityMetricParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metric", runtime.ParamLocationPath, metric)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s/quality/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "agree", runtime.ParamLocationQuery, params.Agree); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObservationsUuidQualityMetricsRequest generates requests for GetObservationsUuidQualityMetrics
func NewGetObservationsUuidQualityMetricsRequest(server string, uuid []openapi_types.UUID, params *GetObservationsUuidQualityMetricsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s/quality_metrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteObservationsUuidReviewRequest generates requests for DeleteObservationsUuidReview
func NewDeleteObservationsUuidReviewRequest(server string, uuid []openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s/review", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostObservationsUuidReviewRequest generates requests for PostObservationsUuidReview
func NewPostObservationsUuidReviewRequest(server string, uuid []openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s/review", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutObservationsUuidSubscriptionRequest generates requests for PutObservationsUuidSubscription
func NewPutObservationsUuidSubscriptionRequest(server string, uuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s/subscription", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObservationsUuidSubscriptionsRequest generates requests for GetObservationsUuidSubscriptions
func NewGetObservationsUuidSubscriptionsRequest(server string, uuid openapi_types.UUID, params *GetObservationsUuidSubscriptionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s/subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetObservationsUuidTaxonSummaryRequest generates requests for GetObservationsUuidTaxonSummary
func NewGetObservationsUuidTaxonSummaryRequest(server string, uuid openapi_types.UUID, params *GetObservationsUuidTaxonSummaryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s/taxon_summary", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "community", runtime.ParamLocationQuery, params.Community); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutObservationsUuidViewedUpdatesRequest generates requests for PutObservationsUuidViewedUpdates
func NewPutObservationsUuidViewedUpdatesRequest(server string, uuid []openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/observations/%s/viewed_updates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPhotosRequestWithBody generates requests for PostPhotos with any type of body
func NewPostPhotosRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/photos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutPhotosIdRequest generates requests for PutPhotosId
func NewPutPhotosIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/photos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacesRequest generates requests for GetPlaces
func NewGetPlacesRequest(server string, params *GetPlacesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/places")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetPlacesNearbyRequest generates requests for GetPlacesNearby
func NewGetPlacesNearbyRequest(server string, params *GetPlacesNearbyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/places/nearby")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IdPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, *params.NotId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.License != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, *params.License); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhotoLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, *params.PhotoLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, *params.PlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Rank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, *params.Rank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoundLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, *params.SoundLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, *params.TaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, *params.WithoutTaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, *params.TaxonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserLogin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, *params.UserLogin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hour != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, *params.Hour); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Day != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, *params.Day); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Month != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, *params.Month); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, *params.CreatedDay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedMonth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, *params.CreatedMonth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, *params.CreatedYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, *params.TermId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, *params.TermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, *params.WithoutTermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermIdOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, *params.TermIdOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AnnotationUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, *params.AnnotationUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, *params.AccAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, *params.AccBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelowOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, *params.AccBelowOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, *params.D1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, *params.D2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, *params.CreatedD1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, *params.CreatedD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, *params.CreatedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, *params.ObservedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnobservedByUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, *params.UnobservedByUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplyProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, *params.ApplyProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservationAccuracyExperimentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, *params.ObservationAccuracyExperimentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, *params.Cs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, *params.Csa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, *params.Csi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Geoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, *params.Geoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonGeoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, *params.TaxonGeoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Obscuration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, *params.Obscuration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, *params.Hrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, *params.Lrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IconicTaxa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, *params.IconicTaxa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, *params.IdAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, *params.IdBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Identifications != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, *params.Identifications); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Lat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, *params.Lat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, *params.Lng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Radius != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, *params.Radius); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, *params.Nelat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, *params.Nelng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, *params.Swlat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, *params.Swlng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, *params.ListId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotInProject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, *params.NotInProject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotMatchingProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, *params.NotMatchingProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, *params.SearchOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QualityGrade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, *params.QualityGrade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, *params.WithoutField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutlinkSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, *params.OutlinkSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, *params.UpdatedSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, *params.ViewerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreferredPlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, *params.PreferredPlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ttl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, *params.Ttl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.DateField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_field", runtime.ParamLocationQuery, *params.DateField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Interval != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "interval", runtime.ParamLocationQuery, *params.Interval); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetPlacesIdZoomXYPngRequest generates requests for GetPlacesIdZoomXYPng
func NewGetPlacesIdZoomXYPngRequest(server string, id string, zoom int, x int, y int, params *GetPlacesIdZoomXYPngParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/places/%s/%s/%s/%s.png", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TileSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tile_size", runtime.ParamLocationQuery, *params.TileSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IdPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.NotId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, *params.NotId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.License != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, *params.License); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhotoLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, *params.PhotoLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, *params.PlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Rank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, *params.Rank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoundLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, *params.SoundLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, *params.TaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, *params.WithoutTaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, *params.TaxonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserLogin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, *params.UserLogin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hour != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, *params.Hour); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Day != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, *params.Day); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Month != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, *params.Month); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, *params.CreatedDay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedMonth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, *params.CreatedMonth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, *params.CreatedYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, *params.TermId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, *params.TermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, *params.WithoutTermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermIdOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, *params.TermIdOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AnnotationUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, *params.AnnotationUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, *params.AccAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, *params.AccBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelowOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, *params.AccBelowOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, *params.D1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, *params.D2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, *params.CreatedD1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, *params.CreatedD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, *params.CreatedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, *params.ObservedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnobservedByUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, *params.UnobservedByUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplyProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, *params.ApplyProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservationAccuracyExperimentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, *params.ObservationAccuracyExperimentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, *params.Cs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, *params.Csa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, *params.Csi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Geoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, *params.Geoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonGeoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, *params.TaxonGeoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Obscuration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, *params.Obscuration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, *params.Hrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, *params.Lrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IconicTaxa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, *params.IconicTaxa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, *params.IdAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, *params.IdBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Identifications != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, *params.Identifications); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Lat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, *params.Lat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, *params.Lng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Radius != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, *params.Radius); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, *params.Nelat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, *params.Nelng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, *params.Swlat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, *params.Swlng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, *params.ListId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotInProject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, *params.NotInProject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotMatchingProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, *params.NotMatchingProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, *params.SearchOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QualityGrade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, *params.QualityGrade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, *params.WithoutField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutlinkSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, *params.OutlinkSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, *params.UpdatedSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, *params.ViewerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreferredPlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, *params.PreferredPlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ttl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, *params.Ttl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacesUuidRequest generates requests for GetPlacesUuid
func NewGetPlacesUuidRequest(server string, uuid []string, params *GetPlacesUuidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/places/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Lat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, *params.Lat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, *params.Lng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetPointsZoomXYGridJsonRequest generates requests for GetPointsZoomXYGridJson
func NewGetPointsZoomXYGridJsonRequest(server string, zoom int, x int, y int, params *GetPointsZoomXYGridJsonParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/points/%s/%s/%s.grid.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TileSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tile_size", runtime.ParamLocationQuery, *params.TileSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IdPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, *params.NotId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.License != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, *params.License); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhotoLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, *params.PhotoLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, *params.PlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Rank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, *params.Rank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoundLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, *params.SoundLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, *params.TaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, *params.WithoutTaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, *params.TaxonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserLogin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, *params.UserLogin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hour != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, *params.Hour); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Day != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, *params.Day); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Month != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, *params.Month); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, *params.CreatedDay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedMonth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, *params.CreatedMonth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, *params.CreatedYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, *params.TermId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, *params.TermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, *params.WithoutTermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermIdOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, *params.TermIdOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AnnotationUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, *params.AnnotationUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, *params.AccAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, *params.AccBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelowOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, *params.AccBelowOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, *params.D1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, *params.D2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, *params.CreatedD1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, *params.CreatedD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, *params.CreatedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, *params.ObservedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnobservedByUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, *params.UnobservedByUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplyProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, *params.ApplyProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservationAccuracyExperimentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, *params.ObservationAccuracyExperimentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, *params.Cs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, *params.Csa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, *params.Csi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Geoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, *params.Geoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonGeoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, *params.TaxonGeoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Obscuration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, *params.Obscuration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, *params.Hrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, *params.Lrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IconicTaxa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, *params.IconicTaxa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, *params.IdAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, *params.IdBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Identifications != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, *params.Identifications); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Lat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, *params.Lat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, *params.Lng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Radius != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, *params.Radius); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, *params.Nelat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, *params.Nelng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, *params.Swlat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, *params.Swlng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, *params.ListId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotInProject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, *params.NotInProject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotMatchingProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, *params.NotMatchingProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, *params.SearchOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QualityGrade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, *params.QualityGrade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, *params.WithoutField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutlinkSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, *params.OutlinkSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, *params.UpdatedSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, *params.ViewerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreferredPlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, *params.PreferredPlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ttl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, *params.Ttl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPointsZoomXYPngRequest generates requests for GetPointsZoomXYPng
func NewGetPointsZoomXYPngRequest(server string, zoom int, x int, y int, params *GetPointsZoomXYPngParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/points/%s/%s/%s.png", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TileSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tile_size", runtime.ParamLocationQuery, *params.TileSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IdPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, *params.NotId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.License != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, *params.License); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhotoLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, *params.PhotoLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, *params.PlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Rank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, *params.Rank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoundLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, *params.SoundLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, *params.TaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, *params.WithoutTaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, *params.TaxonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserLogin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, *params.UserLogin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hour != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, *params.Hour); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Day != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, *params.Day); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Month != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, *params.Month); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, *params.CreatedDay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedMonth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, *params.CreatedMonth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, *params.CreatedYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, *params.TermId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, *params.TermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, *params.WithoutTermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermIdOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, *params.TermIdOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AnnotationUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, *params.AnnotationUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, *params.AccAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, *params.AccBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelowOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, *params.AccBelowOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, *params.D1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, *params.D2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, *params.CreatedD1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, *params.CreatedD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, *params.CreatedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, *params.ObservedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnobservedByUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, *params.UnobservedByUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplyProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, *params.ApplyProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservationAccuracyExperimentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, *params.ObservationAccuracyExperimentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, *params.Cs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, *params.Csa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, *params.Csi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Geoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, *params.Geoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonGeoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, *params.TaxonGeoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Obscuration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, *params.Obscuration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, *params.Hrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, *params.Lrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IconicTaxa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, *params.IconicTaxa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, *params.IdAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, *params.IdBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Identifications != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, *params.Identifications); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Lat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, *params.Lat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, *params.Lng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Radius != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, *params.Radius); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, *params.Nelat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, *params.Nelng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, *params.Swlat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, *params.Swlng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, *params.ListId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotInProject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, *params.NotInProject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotMatchingProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, *params.NotMatchingProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, *params.SearchOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QualityGrade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, *params.QualityGrade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, *params.WithoutField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutlinkSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, *params.OutlinkSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, *params.UpdatedSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, *params.ViewerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreferredPlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, *params.PreferredPlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ttl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, *params.Ttl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostProjectObservationsRequest calls the generic PostProjectObservations builder with application/json body
func NewPostProjectObservationsRequest(server string, body PostProjectObservationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProjectObservationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostProjectObservationsRequestWithBody generates requests for PostProjectObservations with any type of body
func NewPostProjectObservationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project_observations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProjectObservationsUuidRequest generates requests for DeleteProjectObservationsUuid
func NewDeleteProjectObservationsUuidRequest(server string, uuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project_observations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutProjectObservationsUuidRequest calls the generic PutProjectObservationsUuid builder with application/json body
func NewPutProjectObservationsUuidRequest(server string, uuid openapi_types.UUID, body PutProjectObservationsUuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutProjectObservationsUuidRequestWithBody(server, uuid, "application/json", bodyReader)
}

// NewPutProjectObservationsUuidRequestWithBody generates requests for PutProjectObservationsUuid with any type of body
func NewPutProjectObservationsUuidRequestWithBody(server string, uuid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project_observations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutProjectUsersIdRequest calls the generic PutProjectUsersId builder with application/json body
func NewPutProjectUsersIdRequest(server string, id string, body PutProjectUsersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutProjectUsersIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutProjectUsersIdRequestWithBody generates requests for PutProjectUsersId with any type of body
func NewPutProjectUsersIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project_users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectsRequest generates requests for GetProjects
func NewGetProjectsRequest(server string, params *GetProjectsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, *params.NotId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, *params.Lat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, *params.Lng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Radius != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, *params.Radius); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, *params.PlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "features", runtime.ParamLocationQuery, params.Features); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "noteworthy", runtime.ParamLocationQuery, params.Noteworthy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site_id", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rule_details", runtime.ParamLocationQuery, params.RuleDetails); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MemberId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "member_id", runtime.ParamLocationQuery, *params.MemberId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "has_params", runtime.ParamLocationQuery, params.HasParams); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "has_posts", runtime.ParamLocationQuery, params.HasPosts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetProjectsIdRequest generates requests for GetProjectsId
func NewGetProjectsIdRequest(server string, id []int, params *GetProjectsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rule_details", runtime.ParamLocationQuery, params.RuleDetails); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetProjectsIdMembersRequest generates requests for GetProjectsIdMembers
func NewGetProjectsIdMembersRequest(server string, id int, params *GetProjectsIdMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip_counts", runtime.ParamLocationQuery, params.SkipCounts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteProjectsIdMembershipRequest generates requests for DeleteProjectsIdMembership
func NewDeleteProjectsIdMembershipRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/membership", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectsIdMembershipRequest generates requests for GetProjectsIdMembership
func NewGetProjectsIdMembershipRequest(server string, id []int, params *GetProjectsIdMembershipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/membership", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewPostProjectsIdMembershipRequest generates requests for PostProjectsIdMembership
func NewPostProjectsIdMembershipRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/membership", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectsIdPostsRequest generates requests for GetProjectsIdPosts
func NewGetProjectsIdPostsRequest(server string, id []int, params *GetProjectsIdPostsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/posts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetProviderAuthorizationsRequest generates requests for GetProviderAuthorizations
func NewGetProviderAuthorizationsRequest(server string, params *GetProviderAuthorizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/provider_authorizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteProviderAuthorizationsIdRequest generates requests for DeleteProviderAuthorizationsId
func NewDeleteProviderAuthorizationsIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/provider_authorizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRelationshipsRequest generates requests for GetRelationships
func NewGetRelationshipsRequest(server string, params *GetRelationshipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Trusted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trusted", runtime.ParamLocationQuery, *params.Trusted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Following != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "following", runtime.ParamLocationQuery, *params.Following); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewPostRelationshipsRequest calls the generic PostRelationships builder with application/json body
func NewPostRelationshipsRequest(server string, body PostRelationshipsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRelationshipsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRelationshipsRequestWithBody generates requests for PostRelationships with any type of body
func NewPostRelationshipsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRelationshipsIdRequest generates requests for DeleteRelationshipsId
func NewDeleteRelationshipsIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRelationshipsIdRequest calls the generic PutRelationshipsId builder with application/json body
func NewPutRelationshipsIdRequest(server string, id int, body PutRelationshipsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRelationshipsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutRelationshipsIdRequestWithBody generates requests for PutRelationshipsId with any type of body
func NewPutRelationshipsIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSavedLocationsRequest generates requests for GetSavedLocations
func NewGetSavedLocationsRequest(server string, params *GetSavedLocationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/saved_locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewPostSavedLocationsRequest calls the generic PostSavedLocations builder with application/json body
func NewPostSavedLocationsRequest(server string, body PostSavedLocationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSavedLocationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSavedLocationsRequestWithBody generates requests for PostSavedLocations with any type of body
func NewPostSavedLocationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/saved_locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSavedLocationsIdRequest generates requests for DeleteSavedLocationsId
func NewDeleteSavedLocationsIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/saved_locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSearchRequest generates requests for GetSearch
func NewGetSearchRequest(server string, params *GetSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "place_id", runtime.ParamLocationQuery, *params.PlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreferredPlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, *params.PreferredPlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sources != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sources", runtime.ParamLocationQuery, *params.Sources); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_taxon_ancestors", runtime.ParamLocationQuery, params.IncludeTaxonAncestors); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetSitesRequest generates requests for GetSites
func NewGetSitesRequest(server string, params *GetSitesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sites")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewPostSoundsRequestWithBody generates requests for PostSounds with any type of body
func NewPostSoundsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sounds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTaxaRequest generates requests for GetTaxa
func NewGetTaxaRequest(server string, params *GetTaxaParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxa")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_active", runtime.ParamLocationQuery, params.IsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "iconic", runtime.ParamLocationQuery, params.Iconic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_id", runtime.ParamLocationQuery, *params.TaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_id", runtime.ParamLocationQuery, *params.ParentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Rank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, *params.Rank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RankLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank_level", runtime.ParamLocationQuery, *params.RankLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, *params.IdAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, *params.IdBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreferredPlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, *params.PreferredPlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetTaxaAutocompleteRequest generates requests for GetTaxaAutocomplete
func NewGetTaxaAutocompleteRequest(server string, params *GetTaxaAutocompleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxa/autocomplete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_active", runtime.ParamLocationQuery, params.IsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "iconic", runtime.ParamLocationQuery, params.Iconic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreferredPlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, *params.PreferredPlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetTaxaIconicRequest generates requests for GetTaxaIconic
func NewGetTaxaIconicRequest(server string, params *GetTaxaIconicParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxa/iconic")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetTaxaSuggestRequest generates requests for GetTaxaSuggest
func NewGetTaxaSuggestRequest(server string, params *GetTaxaSuggestParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxa/suggest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FeaturedObservationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "featured_observation_id", runtime.ParamLocationQuery, *params.FeaturedObservationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ImageUrl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "image_url", runtime.ParamLocationQuery, *params.ImageUrl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeRepresentativePhotos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_representative_photos", runtime.ParamLocationQuery, *params.IncludeRepresentativePhotos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, *params.Lat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, *params.Lng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Months != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "months", runtime.ParamLocationQuery, *params.Months); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observation_id", runtime.ParamLocationQuery, *params.ObservationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, *params.ObservedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "place_id", runtime.ParamLocationQuery, *params.PlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlaceLat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "place_lat", runtime.ParamLocationQuery, *params.PlaceLat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlaceLng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "place_lng", runtime.ParamLocationQuery, *params.PlaceLng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Source != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source", runtime.ParamLocationQuery, *params.Source); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_id", runtime.ParamLocationQuery, *params.TaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewPostTaxaSuggestRequestWithBody generates requests for PostTaxaSuggest with any type of body
func NewPostTaxaSuggestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxa/suggest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTaxaIdRequest generates requests for GetTaxaId
func NewGetTaxaIdRequest(server string, id []int, params *GetTaxaIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxa/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RankLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank_level", runtime.ParamLocationQuery, *params.RankLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetTaxaIdWantedRequest generates requests for GetTaxaIdWanted
func NewGetTaxaIdWantedRequest(server string, id int, params *GetTaxaIdWantedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxa/%s/wanted", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewPostTaxonNamePrioritiesRequest calls the generic PostTaxonNamePriorities builder with application/json body
func NewPostTaxonNamePrioritiesRequest(server string, body PostTaxonNamePrioritiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTaxonNamePrioritiesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTaxonNamePrioritiesRequestWithBody generates requests for PostTaxonNamePriorities with any type of body
func NewPostTaxonNamePrioritiesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxon_name_priorities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTaxonNamePrioritiesIdRequest generates requests for DeleteTaxonNamePrioritiesId
func NewDeleteTaxonNamePrioritiesIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxon_name_priorities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTaxonNamePrioritiesIdRequest calls the generic PutTaxonNamePrioritiesId builder with application/json body
func NewPutTaxonNamePrioritiesIdRequest(server string, id int, body PutTaxonNamePrioritiesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTaxonNamePrioritiesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutTaxonNamePrioritiesIdRequestWithBody generates requests for PutTaxonNamePrioritiesId with any type of body
func NewPutTaxonNamePrioritiesIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxon_name_priorities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTaxonPlacesIdZoomXYPngRequest generates requests for GetTaxonPlacesIdZoomXYPng
func NewGetTaxonPlacesIdZoomXYPngRequest(server string, id string, zoom int, x int, y int, params *GetTaxonPlacesIdZoomXYPngParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxon_places/%s/%s/%s/%s.png", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TileSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tile_size", runtime.ParamLocationQuery, *params.TileSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IdPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.NotId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, *params.NotId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.License != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, *params.License); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhotoLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, *params.PhotoLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, *params.PlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Rank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, *params.Rank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoundLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, *params.SoundLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, *params.TaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, *params.WithoutTaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, *params.TaxonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserLogin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, *params.UserLogin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hour != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, *params.Hour); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Day != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, *params.Day); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Month != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, *params.Month); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, *params.CreatedDay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedMonth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, *params.CreatedMonth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, *params.CreatedYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, *params.TermId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, *params.TermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, *params.WithoutTermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermIdOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, *params.TermIdOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AnnotationUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, *params.AnnotationUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, *params.AccAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, *params.AccBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelowOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, *params.AccBelowOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, *params.D1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, *params.D2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, *params.CreatedD1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, *params.CreatedD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, *params.CreatedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, *params.ObservedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnobservedByUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, *params.UnobservedByUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplyProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, *params.ApplyProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservationAccuracyExperimentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, *params.ObservationAccuracyExperimentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, *params.Cs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, *params.Csa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, *params.Csi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Geoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, *params.Geoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonGeoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, *params.TaxonGeoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Obscuration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, *params.Obscuration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, *params.Hrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, *params.Lrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IconicTaxa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, *params.IconicTaxa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, *params.IdAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, *params.IdBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Identifications != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, *params.Identifications); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Lat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, *params.Lat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, *params.Lng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Radius != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, *params.Radius); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, *params.Nelat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, *params.Nelng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, *params.Swlat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, *params.Swlng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, *params.ListId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotInProject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, *params.NotInProject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotMatchingProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, *params.NotMatchingProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, *params.SearchOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QualityGrade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, *params.QualityGrade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, *params.WithoutField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutlinkSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, *params.OutlinkSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, *params.UpdatedSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, *params.ViewerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreferredPlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, *params.PreferredPlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ttl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, *params.Ttl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaxonRangesIdZoomXYPngRequest generates requests for GetTaxonRangesIdZoomXYPng
func NewGetTaxonRangesIdZoomXYPngRequest(server string, id string, zoom int, x int, y int, params *GetTaxonRangesIdZoomXYPngParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoom", runtime.ParamLocationPath, zoom)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxon_ranges/%s/%s/%s/%s.png", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TileSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tile_size", runtime.ParamLocationQuery, *params.TileSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc", runtime.ParamLocationQuery, params.Acc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "captive", runtime.ParamLocationQuery, params.Captive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endemic", runtime.ParamLocationQuery, params.Endemic); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "geo", runtime.ParamLocationQuery, params.Geo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_please", runtime.ParamLocationQuery, params.IdPlease); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identified", runtime.ParamLocationQuery, params.Identified); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "introduced", runtime.ParamLocationQuery, params.Introduced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mappable", runtime.ParamLocationQuery, params.Mappable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "native", runtime.ParamLocationQuery, params.Native); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_range", runtime.ParamLocationQuery, params.OutOfRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pcid", runtime.ParamLocationQuery, params.Pcid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photos", runtime.ParamLocationQuery, params.Photos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "popular", runtime.ParamLocationQuery, params.Popular); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sounds", runtime.ParamLocationQuery, params.Sounds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_is_active", runtime.ParamLocationQuery, params.TaxonIsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threatened", runtime.ParamLocationQuery, params.Threatened); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verifiable", runtime.ParamLocationQuery, params.Verifiable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.NotId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_id", runtime.ParamLocationQuery, *params.NotId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.License != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "license", runtime.ParamLocationQuery, *params.License); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhotoLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "photo_license", runtime.ParamLocationQuery, *params.PhotoLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licensed", runtime.ParamLocationQuery, params.Licensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "photo_licensed", runtime.ParamLocationQuery, params.PhotoLicensed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "place_id", runtime.ParamLocationQuery, *params.PlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coords_viewable_for_proj", runtime.ParamLocationQuery, params.CoordsViewableForProj); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Rank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rank", runtime.ParamLocationQuery, *params.Rank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "site_id", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoundLicense != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sound_license", runtime.ParamLocationQuery, *params.SoundLicense); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_id", runtime.ParamLocationQuery, *params.TaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTaxonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_taxon_id", runtime.ParamLocationQuery, *params.WithoutTaxonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxon_name", runtime.ParamLocationQuery, *params.TaxonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserLogin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_login", runtime.ParamLocationQuery, *params.UserLogin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hour != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hour", runtime.ParamLocationQuery, *params.Hour); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Day != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "day", runtime.ParamLocationQuery, *params.Day); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Month != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "month", runtime.ParamLocationQuery, *params.Month); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedDay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_day", runtime.ParamLocationQuery, *params.CreatedDay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedMonth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_month", runtime.ParamLocationQuery, *params.CreatedMonth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "created_year", runtime.ParamLocationQuery, *params.CreatedYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id", runtime.ParamLocationQuery, *params.TermId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_value_id", runtime.ParamLocationQuery, *params.TermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutTermValueId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_term_value_id", runtime.ParamLocationQuery, *params.WithoutTermValueId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TermIdOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "term_id_or_unknown", runtime.ParamLocationQuery, *params.TermIdOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AnnotationUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "annotation_user_id", runtime.ParamLocationQuery, *params.AnnotationUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_above", runtime.ParamLocationQuery, *params.AccAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below", runtime.ParamLocationQuery, *params.AccBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccBelowOrUnknown != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acc_below_or_unknown", runtime.ParamLocationQuery, *params.AccBelowOrUnknown); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d1", runtime.ParamLocationQuery, *params.D1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.D2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "d2", runtime.ParamLocationQuery, *params.D2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d1", runtime.ParamLocationQuery, *params.CreatedD1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedD2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_d2", runtime.ParamLocationQuery, *params.CreatedD2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_on", runtime.ParamLocationQuery, *params.CreatedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservedOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "observed_on", runtime.ParamLocationQuery, *params.ObservedOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnobservedByUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unobserved_by_user_id", runtime.ParamLocationQuery, *params.UnobservedByUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplyProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply_project_rules_for", runtime.ParamLocationQuery, *params.ApplyProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObservationAccuracyExperimentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "observation_accuracy_experiment_id", runtime.ParamLocationQuery, *params.ObservationAccuracyExperimentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cs", runtime.ParamLocationQuery, *params.Cs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "csa", runtime.ParamLocationQuery, *params.Csa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Csi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "csi", runtime.ParamLocationQuery, *params.Csi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Geoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "geoprivacy", runtime.ParamLocationQuery, *params.Geoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TaxonGeoprivacy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "taxon_geoprivacy", runtime.ParamLocationQuery, *params.TaxonGeoprivacy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Obscuration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "obscuration", runtime.ParamLocationQuery, *params.Obscuration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "hrank", runtime.ParamLocationQuery, *params.Hrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lrank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lrank", runtime.ParamLocationQuery, *params.Lrank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IconicTaxa != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "iconic_taxa", runtime.ParamLocationQuery, *params.IconicTaxa); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdAbove != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_above", runtime.ParamLocationQuery, *params.IdAbove); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdBelow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_below", runtime.ParamLocationQuery, *params.IdBelow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Identifications != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "identifications", runtime.ParamLocationQuery, *params.Identifications); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disagreements", runtime.ParamLocationQuery, params.Disagreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Lat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, *params.Lat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lng", runtime.ParamLocationQuery, *params.Lng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Radius != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "radius", runtime.ParamLocationQuery, *params.Radius); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelat", runtime.ParamLocationQuery, *params.Nelat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nelng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nelng", runtime.ParamLocationQuery, *params.Nelng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlat", runtime.ParamLocationQuery, *params.Swlat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Swlng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "swlng", runtime.ParamLocationQuery, *params.Swlng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list_id", runtime.ParamLocationQuery, *params.ListId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotInProject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_in_project", runtime.ParamLocationQuery, *params.NotInProject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotMatchingProjectRulesFor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_matching_project_rules_for", runtime.ParamLocationQuery, *params.NotMatchingProjectRulesFor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_on", runtime.ParamLocationQuery, *params.SearchOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.QualityGrade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "quality_grade", runtime.ParamLocationQuery, *params.QualityGrade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "without_field", runtime.ParamLocationQuery, *params.WithoutField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutlinkSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outlink_source", runtime.ParamLocationQuery, *params.OutlinkSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_since", runtime.ParamLocationQuery, *params.UpdatedSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewer_id", runtime.ParamLocationQuery, *params.ViewerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewed", runtime.ParamLocationQuery, params.Reviewed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expected_nearby", runtime.ParamLocationQuery, params.ExpectedNearby); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Locale != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, *params.Locale); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreferredPlaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preferred_place_id", runtime.ParamLocationQuery, *params.PreferredPlaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ttl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, *params.Ttl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_id", runtime.ParamLocationQuery, params.OnlyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTranslationsLocalesRequest generates requests for GetTranslationsLocales
func NewGetTranslationsLocalesRequest(server string, params *GetTranslationsLocalesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/translations/locales")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, params *GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Following != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "following", runtime.ParamLocationQuery, *params.Following); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FollowedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "followed_by", runtime.ParamLocationQuery, *params.FollowedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Orcid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orcid", runtime.ParamLocationQuery, *params.Orcid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetUsersAutocompleteRequest generates requests for GetUsersAutocomplete
func NewGetUsersAutocompleteRequest(server string, params *GetUsersAutocompleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/autocomplete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_suspended", runtime.ParamLocationQuery, params.IncludeSuspended); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersEmailAvailableRequest generates requests for GetUsersEmailAvailable
func NewGetUsersEmailAvailableRequest(server string, params *GetUsersEmailAvailableParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/email_available")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewGetUsersMeRequest generates requests for GetUsersMe
func NewGetUsersMeRequest(server string, params *GetUsersMeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersNotificationCountsRequest generates requests for GetUsersNotificationCounts
func NewGetUsersNotificationCountsRequest(server string, params *GetUsersNotificationCountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/notification_counts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersRecentObservationFieldsRequest generates requests for GetUsersRecentObservationFields
func NewGetUsersRecentObservationFieldsRequest(server string, params *GetUsersRecentObservationFieldsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/recent_observation_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersResendConfirmationRequest generates requests for PostUsersResendConfirmation
func NewPostUsersResendConfirmationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/resend_confirmation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersResetPasswordRequest calls the generic PostUsersResetPassword builder with application/json body
func NewPostUsersResetPasswordRequest(server string, body PostUsersResetPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersResetPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUsersResetPasswordRequestWithBody generates requests for PostUsersResetPassword with any type of body
func NewPostUsersResetPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/reset_password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutUsersUpdateSessionRequest generates requests for PutUsersUpdateSession
func NewPutUsersUpdateSessionRequest(server string, params *PutUsersUpdateSessionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/update_session")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefers_hide_obs_show_identifiers", runtime.ParamLocationQuery, params.PrefersHideObsShowIdentifiers); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersIdRequest generates requests for GetUsersId
func NewGetUsersIdRequest(server string, id string, params *GetUsersIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

// NewPutUsersIdRequest calls the generic PutUsersId builder with application/json body
func NewPutUsersIdRequest(server string, id string, body PutUsersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUsersIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutUsersIdRequestWithBody generates requests for PutUsersId with any type of body
func NewPutUsersIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUsersIdBlockRequest generates requests for DeleteUsersIdBlock
func NewDeleteUsersIdBlockRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/block", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersIdBlockRequest generates requests for PostUsersIdBlock
func NewPostUsersIdBlockRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/block", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUsersIdMuteRequest generates requests for DeleteUsersIdMute
func NewDeleteUsersIdMuteRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/mute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersIdMuteRequest generates requests for PostUsersIdMute
func NewPostUsersIdMuteRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/mute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersIdProjectsRequest generates requests for GetUsersIdProjects
func NewGetUsersIdProjectsRequest(server string, id int, params *GetUsersIdProjectsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/projects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XHTTPMethodOverride != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-HTTP-Method-Override", runtime.ParamLocationHeader, *params.XHTTPMethodOverride)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-HTTP-Method-Override", headerParam0)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAnnotationsWithBodyWithResponse request with any body
	PostAnnotationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAnnotationsResponse, error)

	PostAnnotationsWithResponse(ctx context.Context, body PostAnnotationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAnnotationsResponse, error)

	// DeleteAnnotationsUuidWithResponse request
	DeleteAnnotationsUuidWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteAnnotationsUuidResponse, error)

	// DeleteAnnotationsUuidVoteWithResponse request
	DeleteAnnotationsUuidVoteWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteAnnotationsUuidVoteResponse, error)

	// PostAnnotationsUuidVoteWithResponse request
	PostAnnotationsUuidVoteWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostAnnotationsUuidVoteResponse, error)

	// GetAnnouncementsWithResponse request
	GetAnnouncementsWithResponse(ctx context.Context, params *GetAnnouncementsParams, reqEditors ...RequestEditorFn) (*GetAnnouncementsResponse, error)

	// PutAnnouncementsIdDismissWithResponse request
	PutAnnouncementsIdDismissWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PutAnnouncementsIdDismissResponse, error)

	// GetAuthorizedApplicationsWithResponse request
	GetAuthorizedApplicationsWithResponse(ctx context.Context, params *GetAuthorizedApplicationsParams, reqEditors ...RequestEditorFn) (*GetAuthorizedApplicationsResponse, error)

	// DeleteAuthorizedApplicationsIdWithResponse request
	DeleteAuthorizedApplicationsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteAuthorizedApplicationsIdResponse, error)

	// PostCommentsWithBodyWithResponse request with any body
	PostCommentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCommentsResponse, error)

	PostCommentsWithResponse(ctx context.Context, body PostCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCommentsResponse, error)

	// DeleteCommentsUuidWithResponse request
	DeleteCommentsUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteCommentsUuidResponse, error)

	// PutCommentsUuidWithBodyWithResponse request with any body
	PutCommentsUuidWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCommentsUuidResponse, error)

	PutCommentsUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutCommentsUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCommentsUuidResponse, error)

	// GetControlledTermsWithResponse request
	GetControlledTermsWithResponse(ctx context.Context, params *GetControlledTermsParams, reqEditors ...RequestEditorFn) (*GetControlledTermsResponse, error)

	// GetControlledTermsForTaxonTaxonIdWithResponse request
	GetControlledTermsForTaxonTaxonIdWithResponse(ctx context.Context, taxonId []string, params *GetControlledTermsForTaxonTaxonIdParams, reqEditors ...RequestEditorFn) (*GetControlledTermsForTaxonTaxonIdResponse, error)

	// PostFlagsWithBodyWithResponse request with any body
	PostFlagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFlagsResponse, error)

	PostFlagsWithResponse(ctx context.Context, body PostFlagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFlagsResponse, error)

	// DeleteFlagsIdWithResponse request
	DeleteFlagsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteFlagsIdResponse, error)

	// PutFlagsIdWithBodyWithResponse request with any body
	PutFlagsIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFlagsIdResponse, error)

	PutFlagsIdWithResponse(ctx context.Context, id int, body PutFlagsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFlagsIdResponse, error)

	// GetGeomodelIdZoomXYPngWithResponse request
	GetGeomodelIdZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetGeomodelIdZoomXYPngResponse, error)

	// GetGeomodelComparisonIdZoomXYPngWithResponse request
	GetGeomodelComparisonIdZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelComparisonIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetGeomodelComparisonIdZoomXYPngResponse, error)

	// GetGeomodelTaxonRangeIdZoomXYPngWithResponse request
	GetGeomodelTaxonRangeIdZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelTaxonRangeIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetGeomodelTaxonRangeIdZoomXYPngResponse, error)

	// GetGridZoomXYGridJsonWithResponse request
	GetGridZoomXYGridJsonWithResponse(ctx context.Context, zoom int, x int, y int, params *GetGridZoomXYGridJsonParams, reqEditors ...RequestEditorFn) (*GetGridZoomXYGridJsonResponse, error)

	// GetGridZoomXYPngWithResponse request
	GetGridZoomXYPngWithResponse(ctx context.Context, zoom int, x int, y int, params *GetGridZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetGridZoomXYPngResponse, error)

	// GetHeatmapZoomXYPngWithResponse request
	GetHeatmapZoomXYPngWithResponse(ctx context.Context, zoom int, x int, y int, params *GetHeatmapZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetHeatmapZoomXYPngResponse, error)

	// PostIdentificationsWithBodyWithResponse request with any body
	PostIdentificationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIdentificationsResponse, error)

	PostIdentificationsWithResponse(ctx context.Context, body PostIdentificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIdentificationsResponse, error)

	// GetIdentificationsIdentifiersWithResponse request
	GetIdentificationsIdentifiersWithResponse(ctx context.Context, params *GetIdentificationsIdentifiersParams, reqEditors ...RequestEditorFn) (*GetIdentificationsIdentifiersResponse, error)

	// GetIdentificationsRecentTaxaWithResponse request
	GetIdentificationsRecentTaxaWithResponse(ctx context.Context, params *GetIdentificationsRecentTaxaParams, reqEditors ...RequestEditorFn) (*GetIdentificationsRecentTaxaResponse, error)

	// GetIdentificationsSimilarSpeciesWithResponse request
	GetIdentificationsSimilarSpeciesWithResponse(ctx context.Context, params *GetIdentificationsSimilarSpeciesParams, reqEditors ...RequestEditorFn) (*GetIdentificationsSimilarSpeciesResponse, error)

	// DeleteIdentificationsUuidWithResponse request
	DeleteIdentificationsUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteIdentificationsUuidResponse, error)

	// PutIdentificationsUuidWithBodyWithResponse request with any body
	PutIdentificationsUuidWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIdentificationsUuidResponse, error)

	PutIdentificationsUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutIdentificationsUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIdentificationsUuidResponse, error)

	// GetMessagesWithResponse request
	GetMessagesWithResponse(ctx context.Context, params *GetMessagesParams, reqEditors ...RequestEditorFn) (*GetMessagesResponse, error)

	// PostMessagesWithBodyWithResponse request with any body
	PostMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMessagesResponse, error)

	PostMessagesWithResponse(ctx context.Context, body PostMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMessagesResponse, error)

	// GetMessagesIdWithResponse request
	GetMessagesIdWithResponse(ctx context.Context, id int, params *GetMessagesIdParams, reqEditors ...RequestEditorFn) (*GetMessagesIdResponse, error)

	// PostObservationFieldValuesWithBodyWithResponse request with any body
	PostObservationFieldValuesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObservationFieldValuesResponse, error)

	PostObservationFieldValuesWithResponse(ctx context.Context, body PostObservationFieldValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObservationFieldValuesResponse, error)

	// DeleteObservationFieldValuesUuidWithResponse request
	DeleteObservationFieldValuesUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationFieldValuesUuidResponse, error)

	// PutObservationFieldValuesUuidWithBodyWithResponse request with any body
	PutObservationFieldValuesUuidWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObservationFieldValuesUuidResponse, error)

	PutObservationFieldValuesUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutObservationFieldValuesUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObservationFieldValuesUuidResponse, error)

	// PostObservationPhotosWithBodyWithResponse request with any body
	PostObservationPhotosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObservationPhotosResponse, error)

	PostObservationPhotosWithResponse(ctx context.Context, body PostObservationPhotosJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObservationPhotosResponse, error)

	// DeleteObservationPhotosUuidWithResponse request
	DeleteObservationPhotosUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationPhotosUuidResponse, error)

	// PutObservationPhotosUuidWithBodyWithResponse request with any body
	PutObservationPhotosUuidWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObservationPhotosUuidResponse, error)

	PutObservationPhotosUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutObservationPhotosUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObservationPhotosUuidResponse, error)

	// PostObservationSoundsWithBodyWithResponse request with any body
	PostObservationSoundsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObservationSoundsResponse, error)

	PostObservationSoundsWithResponse(ctx context.Context, body PostObservationSoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObservationSoundsResponse, error)

	// DeleteObservationSoundsUuidWithResponse request
	DeleteObservationSoundsUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationSoundsUuidResponse, error)

	// PutObservationSoundsUuidWithBodyWithResponse request with any body
	PutObservationSoundsUuidWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObservationSoundsUuidResponse, error)

	PutObservationSoundsUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutObservationSoundsUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObservationSoundsUuidResponse, error)

	// GetObservationsWithResponse request
	GetObservationsWithResponse(ctx context.Context, params *GetObservationsParams, reqEditors ...RequestEditorFn) (*GetObservationsResponse, error)

	// PostObservationsWithBodyWithResponse request with any body
	PostObservationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObservationsResponse, error)

	PostObservationsWithResponse(ctx context.Context, body PostObservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObservationsResponse, error)

	// GetObservationsDeletedWithResponse request
	GetObservationsDeletedWithResponse(ctx context.Context, params *GetObservationsDeletedParams, reqEditors ...RequestEditorFn) (*GetObservationsDeletedResponse, error)

	// GetObservationsHistogramWithResponse request
	GetObservationsHistogramWithResponse(ctx context.Context, params *GetObservationsHistogramParams, reqEditors ...RequestEditorFn) (*GetObservationsHistogramResponse, error)

	// GetObservationsIconicTaxaSpeciesCountsWithResponse request
	GetObservationsIconicTaxaSpeciesCountsWithResponse(ctx context.Context, params *GetObservationsIconicTaxaSpeciesCountsParams, reqEditors ...RequestEditorFn) (*GetObservationsIconicTaxaSpeciesCountsResponse, error)

	// GetObservationsIdentificationCategoriesWithResponse request
	GetObservationsIdentificationCategoriesWithResponse(ctx context.Context, params *GetObservationsIdentificationCategoriesParams, reqEditors ...RequestEditorFn) (*GetObservationsIdentificationCategoriesResponse, error)

	// GetObservationsIdentifiersWithResponse request
	GetObservationsIdentifiersWithResponse(ctx context.Context, params *GetObservationsIdentifiersParams, reqEditors ...RequestEditorFn) (*GetObservationsIdentifiersResponse, error)

	// GetObservationsObserversWithResponse request
	GetObservationsObserversWithResponse(ctx context.Context, params *GetObservationsObserversParams, reqEditors ...RequestEditorFn) (*GetObservationsObserversResponse, error)

	// GetObservationsPopularFieldValuesWithResponse request
	GetObservationsPopularFieldValuesWithResponse(ctx context.Context, params *GetObservationsPopularFieldValuesParams, reqEditors ...RequestEditorFn) (*GetObservationsPopularFieldValuesResponse, error)

	// GetObservationsQualityGradesWithResponse request
	GetObservationsQualityGradesWithResponse(ctx context.Context, params *GetObservationsQualityGradesParams, reqEditors ...RequestEditorFn) (*GetObservationsQualityGradesResponse, error)

	// GetObservationsSpeciesCountsWithResponse request
	GetObservationsSpeciesCountsWithResponse(ctx context.Context, params *GetObservationsSpeciesCountsParams, reqEditors ...RequestEditorFn) (*GetObservationsSpeciesCountsResponse, error)

	// GetObservationsUmbrellaProjectStatsWithResponse request
	GetObservationsUmbrellaProjectStatsWithResponse(ctx context.Context, params *GetObservationsUmbrellaProjectStatsParams, reqEditors ...RequestEditorFn) (*GetObservationsUmbrellaProjectStatsResponse, error)

	// GetObservationsUpdatesWithResponse request
	GetObservationsUpdatesWithResponse(ctx context.Context, params *GetObservationsUpdatesParams, reqEditors ...RequestEditorFn) (*GetObservationsUpdatesResponse, error)

	// DeleteObservationsUuidWithResponse request
	DeleteObservationsUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationsUuidResponse, error)

	// GetObservationsUuidWithResponse request
	GetObservationsUuidWithResponse(ctx context.Context, uuid []openapi_types.UUID, params *GetObservationsUuidParams, reqEditors ...RequestEditorFn) (*GetObservationsUuidResponse, error)

	// PutObservationsUuidWithBodyWithResponse request with any body
	PutObservationsUuidWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObservationsUuidResponse, error)

	PutObservationsUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutObservationsUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObservationsUuidResponse, error)

	// DeleteObservationsUuidFaveWithResponse request
	DeleteObservationsUuidFaveWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationsUuidFaveResponse, error)

	// PostObservationsUuidFaveWithResponse request
	PostObservationsUuidFaveWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostObservationsUuidFaveResponse, error)

	// DeleteObservationsUuidQualityMetricWithResponse request
	DeleteObservationsUuidQualityMetricWithResponse(ctx context.Context, uuid []openapi_types.UUID, metric DeleteObservationsUuidQualityMetricParamsMetric, reqEditors ...RequestEditorFn) (*DeleteObservationsUuidQualityMetricResponse, error)

	// PostObservationsUuidQualityMetricWithResponse request
	PostObservationsUuidQualityMetricWithResponse(ctx context.Context, uuid []openapi_types.UUID, metric PostObservationsUuidQualityMetricParamsMetric, params *PostObservationsUuidQualityMetricParams, reqEditors ...RequestEditorFn) (*PostObservationsUuidQualityMetricResponse, error)

	// GetObservationsUuidQualityMetricsWithResponse request
	GetObservationsUuidQualityMetricsWithResponse(ctx context.Context, uuid []openapi_types.UUID, params *GetObservationsUuidQualityMetricsParams, reqEditors ...RequestEditorFn) (*GetObservationsUuidQualityMetricsResponse, error)

	// DeleteObservationsUuidReviewWithResponse request
	DeleteObservationsUuidReviewWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationsUuidReviewResponse, error)

	// PostObservationsUuidReviewWithResponse request
	PostObservationsUuidReviewWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostObservationsUuidReviewResponse, error)

	// PutObservationsUuidSubscriptionWithResponse request
	PutObservationsUuidSubscriptionWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*PutObservationsUuidSubscriptionResponse, error)

	// GetObservationsUuidSubscriptionsWithResponse request
	GetObservationsUuidSubscriptionsWithResponse(ctx context.Context, uuid openapi_types.UUID, params *GetObservationsUuidSubscriptionsParams, reqEditors ...RequestEditorFn) (*GetObservationsUuidSubscriptionsResponse, error)

	// GetObservationsUuidTaxonSummaryWithResponse request
	GetObservationsUuidTaxonSummaryWithResponse(ctx context.Context, uuid openapi_types.UUID, params *GetObservationsUuidTaxonSummaryParams, reqEditors ...RequestEditorFn) (*GetObservationsUuidTaxonSummaryResponse, error)

	// PutObservationsUuidViewedUpdatesWithResponse request
	PutObservationsUuidViewedUpdatesWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*PutObservationsUuidViewedUpdatesResponse, error)

	// PostPhotosWithBodyWithResponse request with any body
	PostPhotosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPhotosResponse, error)

	// PutPhotosIdWithResponse request
	PutPhotosIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PutPhotosIdResponse, error)

	// GetPlacesWithResponse request
	GetPlacesWithResponse(ctx context.Context, params *GetPlacesParams, reqEditors ...RequestEditorFn) (*GetPlacesResponse, error)

	// GetPlacesNearbyWithResponse request
	GetPlacesNearbyWithResponse(ctx context.Context, params *GetPlacesNearbyParams, reqEditors ...RequestEditorFn) (*GetPlacesNearbyResponse, error)

	// GetPlacesIdZoomXYPngWithResponse request
	GetPlacesIdZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetPlacesIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetPlacesIdZoomXYPngResponse, error)

	// GetPlacesUuidWithResponse request
	GetPlacesUuidWithResponse(ctx context.Context, uuid []string, params *GetPlacesUuidParams, reqEditors ...RequestEditorFn) (*GetPlacesUuidResponse, error)

	// GetPointsZoomXYGridJsonWithResponse request
	GetPointsZoomXYGridJsonWithResponse(ctx context.Context, zoom int, x int, y int, params *GetPointsZoomXYGridJsonParams, reqEditors ...RequestEditorFn) (*GetPointsZoomXYGridJsonResponse, error)

	// GetPointsZoomXYPngWithResponse request
	GetPointsZoomXYPngWithResponse(ctx context.Context, zoom int, x int, y int, params *GetPointsZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetPointsZoomXYPngResponse, error)

	// PostProjectObservationsWithBodyWithResponse request with any body
	PostProjectObservationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectObservationsResponse, error)

	PostProjectObservationsWithResponse(ctx context.Context, body PostProjectObservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectObservationsResponse, error)

	// DeleteProjectObservationsUuidWithResponse request
	DeleteProjectObservationsUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteProjectObservationsUuidResponse, error)

	// PutProjectObservationsUuidWithBodyWithResponse request with any body
	PutProjectObservationsUuidWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProjectObservationsUuidResponse, error)

	PutProjectObservationsUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutProjectObservationsUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProjectObservationsUuidResponse, error)

	// PutProjectUsersIdWithBodyWithResponse request with any body
	PutProjectUsersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProjectUsersIdResponse, error)

	PutProjectUsersIdWithResponse(ctx context.Context, id string, body PutProjectUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProjectUsersIdResponse, error)

	// GetProjectsWithResponse request
	GetProjectsWithResponse(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error)

	// GetProjectsIdWithResponse request
	GetProjectsIdWithResponse(ctx context.Context, id []int, params *GetProjectsIdParams, reqEditors ...RequestEditorFn) (*GetProjectsIdResponse, error)

	// GetProjectsIdMembersWithResponse request
	GetProjectsIdMembersWithResponse(ctx context.Context, id int, params *GetProjectsIdMembersParams, reqEditors ...RequestEditorFn) (*GetProjectsIdMembersResponse, error)

	// DeleteProjectsIdMembershipWithResponse request
	DeleteProjectsIdMembershipWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteProjectsIdMembershipResponse, error)

	// GetProjectsIdMembershipWithResponse request
	GetProjectsIdMembershipWithResponse(ctx context.Context, id []int, params *GetProjectsIdMembershipParams, reqEditors ...RequestEditorFn) (*GetProjectsIdMembershipResponse, error)

	// PostProjectsIdMembershipWithResponse request
	PostProjectsIdMembershipWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostProjectsIdMembershipResponse, error)

	// GetProjectsIdPostsWithResponse request
	GetProjectsIdPostsWithResponse(ctx context.Context, id []int, params *GetProjectsIdPostsParams, reqEditors ...RequestEditorFn) (*GetProjectsIdPostsResponse, error)

	// GetProviderAuthorizationsWithResponse request
	GetProviderAuthorizationsWithResponse(ctx context.Context, params *GetProviderAuthorizationsParams, reqEditors ...RequestEditorFn) (*GetProviderAuthorizationsResponse, error)

	// DeleteProviderAuthorizationsIdWithResponse request
	DeleteProviderAuthorizationsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteProviderAuthorizationsIdResponse, error)

	// GetRelationshipsWithResponse request
	GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error)

	// PostRelationshipsWithBodyWithResponse request with any body
	PostRelationshipsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRelationshipsResponse, error)

	PostRelationshipsWithResponse(ctx context.Context, body PostRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRelationshipsResponse, error)

	// DeleteRelationshipsIdWithResponse request
	DeleteRelationshipsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteRelationshipsIdResponse, error)

	// PutRelationshipsIdWithBodyWithResponse request with any body
	PutRelationshipsIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRelationshipsIdResponse, error)

	PutRelationshipsIdWithResponse(ctx context.Context, id int, body PutRelationshipsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRelationshipsIdResponse, error)

	// GetSavedLocationsWithResponse request
	GetSavedLocationsWithResponse(ctx context.Context, params *GetSavedLocationsParams, reqEditors ...RequestEditorFn) (*GetSavedLocationsResponse, error)

	// PostSavedLocationsWithBodyWithResponse request with any body
	PostSavedLocationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSavedLocationsResponse, error)

	PostSavedLocationsWithResponse(ctx context.Context, body PostSavedLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSavedLocationsResponse, error)

	// DeleteSavedLocationsIdWithResponse request
	DeleteSavedLocationsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteSavedLocationsIdResponse, error)

	// GetSearchWithResponse request
	GetSearchWithResponse(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*GetSearchResponse, error)

	// GetSitesWithResponse request
	GetSitesWithResponse(ctx context.Context, params *GetSitesParams, reqEditors ...RequestEditorFn) (*GetSitesResponse, error)

	// PostSoundsWithBodyWithResponse request with any body
	PostSoundsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSoundsResponse, error)

	// GetTaxaWithResponse request
	GetTaxaWithResponse(ctx context.Context, params *GetTaxaParams, reqEditors ...RequestEditorFn) (*GetTaxaResponse, error)

	// GetTaxaAutocompleteWithResponse request
	GetTaxaAutocompleteWithResponse(ctx context.Context, params *GetTaxaAutocompleteParams, reqEditors ...RequestEditorFn) (*GetTaxaAutocompleteResponse, error)

	// GetTaxaIconicWithResponse request
	GetTaxaIconicWithResponse(ctx context.Context, params *GetTaxaIconicParams, reqEditors ...RequestEditorFn) (*GetTaxaIconicResponse, error)

	// GetTaxaSuggestWithResponse request
	GetTaxaSuggestWithResponse(ctx context.Context, params *GetTaxaSuggestParams, reqEditors ...RequestEditorFn) (*GetTaxaSuggestResponse, error)

	// PostTaxaSuggestWithBodyWithResponse request with any body
	PostTaxaSuggestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTaxaSuggestResponse, error)

	// GetTaxaIdWithResponse request
	GetTaxaIdWithResponse(ctx context.Context, id []int, params *GetTaxaIdParams, reqEditors ...RequestEditorFn) (*GetTaxaIdResponse, error)

	// GetTaxaIdWantedWithResponse request
	GetTaxaIdWantedWithResponse(ctx context.Context, id int, params *GetTaxaIdWantedParams, reqEditors ...RequestEditorFn) (*GetTaxaIdWantedResponse, error)

	// PostTaxonNamePrioritiesWithBodyWithResponse request with any body
	PostTaxonNamePrioritiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTaxonNamePrioritiesResponse, error)

	PostTaxonNamePrioritiesWithResponse(ctx context.Context, body PostTaxonNamePrioritiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTaxonNamePrioritiesResponse, error)

	// DeleteTaxonNamePrioritiesIdWithResponse request
	DeleteTaxonNamePrioritiesIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteTaxonNamePrioritiesIdResponse, error)

	// PutTaxonNamePrioritiesIdWithBodyWithResponse request with any body
	PutTaxonNamePrioritiesIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTaxonNamePrioritiesIdResponse, error)

	PutTaxonNamePrioritiesIdWithResponse(ctx context.Context, id int, body PutTaxonNamePrioritiesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTaxonNamePrioritiesIdResponse, error)

	// GetTaxonPlacesIdZoomXYPngWithResponse request
	GetTaxonPlacesIdZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetTaxonPlacesIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetTaxonPlacesIdZoomXYPngResponse, error)

	// GetTaxonRangesIdZoomXYPngWithResponse request
	GetTaxonRangesIdZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetTaxonRangesIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetTaxonRangesIdZoomXYPngResponse, error)

	// GetTranslationsLocalesWithResponse request
	GetTranslationsLocalesWithResponse(ctx context.Context, params *GetTranslationsLocalesParams, reqEditors ...RequestEditorFn) (*GetTranslationsLocalesResponse, error)

	// GetUsersWithResponse request
	GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// GetUsersAutocompleteWithResponse request
	GetUsersAutocompleteWithResponse(ctx context.Context, params *GetUsersAutocompleteParams, reqEditors ...RequestEditorFn) (*GetUsersAutocompleteResponse, error)

	// GetUsersEmailAvailableWithResponse request
	GetUsersEmailAvailableWithResponse(ctx context.Context, params *GetUsersEmailAvailableParams, reqEditors ...RequestEditorFn) (*GetUsersEmailAvailableResponse, error)

	// GetUsersMeWithResponse request
	GetUsersMeWithResponse(ctx context.Context, params *GetUsersMeParams, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error)

	// GetUsersNotificationCountsWithResponse request
	GetUsersNotificationCountsWithResponse(ctx context.Context, params *GetUsersNotificationCountsParams, reqEditors ...RequestEditorFn) (*GetUsersNotificationCountsResponse, error)

	// GetUsersRecentObservationFieldsWithResponse request
	GetUsersRecentObservationFieldsWithResponse(ctx context.Context, params *GetUsersRecentObservationFieldsParams, reqEditors ...RequestEditorFn) (*GetUsersRecentObservationFieldsResponse, error)

	// PostUsersResendConfirmationWithResponse request
	PostUsersResendConfirmationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostUsersResendConfirmationResponse, error)

	// PostUsersResetPasswordWithBodyWithResponse request with any body
	PostUsersResetPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersResetPasswordResponse, error)

	PostUsersResetPasswordWithResponse(ctx context.Context, body PostUsersResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersResetPasswordResponse, error)

	// PutUsersUpdateSessionWithResponse request
	PutUsersUpdateSessionWithResponse(ctx context.Context, params *PutUsersUpdateSessionParams, reqEditors ...RequestEditorFn) (*PutUsersUpdateSessionResponse, error)

	// GetUsersIdWithResponse request
	GetUsersIdWithResponse(ctx context.Context, id string, params *GetUsersIdParams, reqEditors ...RequestEditorFn) (*GetUsersIdResponse, error)

	// PutUsersIdWithBodyWithResponse request with any body
	PutUsersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUsersIdResponse, error)

	PutUsersIdWithResponse(ctx context.Context, id string, body PutUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUsersIdResponse, error)

	// DeleteUsersIdBlockWithResponse request
	DeleteUsersIdBlockWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteUsersIdBlockResponse, error)

	// PostUsersIdBlockWithResponse request
	PostUsersIdBlockWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostUsersIdBlockResponse, error)

	// DeleteUsersIdMuteWithResponse request
	DeleteUsersIdMuteWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteUsersIdMuteResponse, error)

	// PostUsersIdMuteWithResponse request
	PostUsersIdMuteWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostUsersIdMuteResponse, error)

	// GetUsersIdProjectsWithResponse request
	GetUsersIdProjectsWithResponse(ctx context.Context, id int, params *GetUsersIdProjectsParams, reqEditors ...RequestEditorFn) (*GetUsersIdProjectsResponse, error)
}

type PostAnnotationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsAnnotations
}

// Status returns HTTPResponse.Status
func (r PostAnnotationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAnnotationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAnnotationsUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAnnotationsUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAnnotationsUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAnnotationsUuidVoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAnnotationsUuidVoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAnnotationsUuidVoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAnnotationsUuidVoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAnnotationsUuidVoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAnnotationsUuidVoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAnnouncementsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsAnnouncements
}

// Status returns HTTPResponse.Status
func (r GetAnnouncementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAnnouncementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAnnouncementsIdDismissResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAnnouncementsIdDismissResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAnnouncementsIdDismissResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthorizedApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsAuthorizedApplications
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetAuthorizedApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthorizedApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAuthorizedApplicationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteAuthorizedApplicationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthorizedApplicationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCommentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsComments
}

// Status returns HTTPResponse.Status
func (r PostCommentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCommentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCommentsUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCommentsUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCommentsUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCommentsUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsComments
}

// Status returns HTTPResponse.Status
func (r PutCommentsUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCommentsUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetControlledTermsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsControlledTerms
}

// Status returns HTTPResponse.Status
func (r GetControlledTermsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetControlledTermsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetControlledTermsForTaxonTaxonIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsControlledTerms
}

// Status returns HTTPResponse.Status
func (r GetControlledTermsForTaxonTaxonIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetControlledTermsForTaxonTaxonIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFlagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsFlags
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostFlagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFlagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFlagsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteFlagsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFlagsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFlagsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsFlags
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutFlagsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFlagsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGeomodelIdZoomXYPngResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetGeomodelIdZoomXYPngResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGeomodelIdZoomXYPngResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGeomodelComparisonIdZoomXYPngResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetGeomodelComparisonIdZoomXYPngResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGeomodelComparisonIdZoomXYPngResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGeomodelTaxonRangeIdZoomXYPngResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetGeomodelTaxonRangeIdZoomXYPngResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGeomodelTaxonRangeIdZoomXYPngResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGridZoomXYGridJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UtfGrid
}

// Status returns HTTPResponse.Status
func (r GetGridZoomXYGridJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGridZoomXYGridJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGridZoomXYPngResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetGridZoomXYPngResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGridZoomXYPngResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHeatmapZoomXYPngResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHeatmapZoomXYPngResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHeatmapZoomXYPngResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdentificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsIdentifications
}

// Status returns HTTPResponse.Status
func (r PostIdentificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdentificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdentificationsIdentifiersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsIdentifiers
}

// Status returns HTTPResponse.Status
func (r GetIdentificationsIdentifiersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdentificationsIdentifiersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdentificationsRecentTaxaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsIdentificationsRecentTaxa
}

// Status returns HTTPResponse.Status
func (r GetIdentificationsRecentTaxaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdentificationsRecentTaxaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdentificationsSimilarSpeciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTaxaCounts
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetIdentificationsSimilarSpeciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdentificationsSimilarSpeciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdentificationsUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdentificationsUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdentificationsUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIdentificationsUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservations
}

// Status returns HTTPResponse.Status
func (r PutIdentificationsUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIdentificationsUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsMessages
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsMessages
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsMessagesThread
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetMessagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObservationFieldValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationFieldValues
}

// Status returns HTTPResponse.Status
func (r PostObservationFieldValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObservationFieldValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObservationFieldValuesUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObservationFieldValuesUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObservationFieldValuesUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutObservationFieldValuesUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationFieldValues
}

// Status returns HTTPResponse.Status
func (r PutObservationFieldValuesUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutObservationFieldValuesUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObservationPhotosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationPhotos
}

// Status returns HTTPResponse.Status
func (r PostObservationPhotosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObservationPhotosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObservationPhotosUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObservationPhotosUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObservationPhotosUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutObservationPhotosUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationPhotos
}

// Status returns HTTPResponse.Status
func (r PutObservationPhotosUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutObservationPhotosUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObservationSoundsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationSounds
}

// Status returns HTTPResponse.Status
func (r PostObservationSoundsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObservationSoundsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObservationSoundsUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObservationSoundsUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObservationSoundsUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutObservationSoundsUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationSounds
}

// Status returns HTTPResponse.Status
func (r PutObservationSoundsUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutObservationSoundsUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservations
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetObservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservations
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostObservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsDeletedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationsDeleted
}

// Status returns HTTPResponse.Status
func (r GetObservationsDeletedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsDeletedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsHistogramResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationsHistogram
}

// Status returns HTTPResponse.Status
func (r GetObservationsHistogramResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsHistogramResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsIconicTaxaSpeciesCountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationsSpeciesCounts
}

// Status returns HTTPResponse.Status
func (r GetObservationsIconicTaxaSpeciesCountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsIconicTaxaSpeciesCountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsIdentificationCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationsIdentificationCategories
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetObservationsIdentificationCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsIdentificationCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsIdentifiersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationsIdentifiers
}

// Status returns HTTPResponse.Status
func (r GetObservationsIdentifiersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsIdentifiersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsObserversResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationsObservers
}

// Status returns HTTPResponse.Status
func (r GetObservationsObserversResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsObserversResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsPopularFieldValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationsPopularFieldValues
}

// Status returns HTTPResponse.Status
func (r GetObservationsPopularFieldValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsPopularFieldValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsQualityGradesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationsQualityGrades
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetObservationsQualityGradesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsQualityGradesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsSpeciesCountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationsSpeciesCounts
}

// Status returns HTTPResponse.Status
func (r GetObservationsSpeciesCountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsSpeciesCountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsUmbrellaProjectStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationsUmbrellaProjectStats
}

// Status returns HTTPResponse.Status
func (r GetObservationsUmbrellaProjectStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsUmbrellaProjectStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsUpdatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsUpdates
}

// Status returns HTTPResponse.Status
func (r GetObservationsUpdatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsUpdatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObservationsUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObservationsUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObservationsUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservations
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetObservationsUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutObservationsUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservations
}

// Status returns HTTPResponse.Status
func (r PutObservationsUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutObservationsUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObservationsUuidFaveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObservationsUuidFaveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObservationsUuidFaveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObservationsUuidFaveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostObservationsUuidFaveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObservationsUuidFaveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObservationsUuidQualityMetricResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObservationsUuidQualityMetricResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObservationsUuidQualityMetricResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObservationsUuidQualityMetricResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostObservationsUuidQualityMetricResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObservationsUuidQualityMetricResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsUuidQualityMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsQualityMetrics
}

// Status returns HTTPResponse.Status
func (r GetObservationsUuidQualityMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsUuidQualityMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObservationsUuidReviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObservationsUuidReviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObservationsUuidReviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObservationsUuidReviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostObservationsUuidReviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObservationsUuidReviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutObservationsUuidSubscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutObservationsUuidSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutObservationsUuidSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsUuidSubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsSubscriptions
}

// Status returns HTTPResponse.Status
func (r GetObservationsUuidSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsUuidSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObservationsUuidTaxonSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTaxonSummary
}

// Status returns HTTPResponse.Status
func (r GetObservationsUuidTaxonSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObservationsUuidTaxonSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutObservationsUuidViewedUpdatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutObservationsUuidViewedUpdatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutObservationsUuidViewedUpdatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPhotosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsPhotos
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostPhotosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPhotosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPhotosIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsPhotos
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutPhotosIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPhotosIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsPlaces
}

// Status returns HTTPResponse.Status
func (r GetPlacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacesNearbyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsPlacesNearby
}

// Status returns HTTPResponse.Status
func (r GetPlacesNearbyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacesNearbyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacesIdZoomXYPngResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlacesIdZoomXYPngResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacesIdZoomXYPngResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacesUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsPlaces
}

// Status returns HTTPResponse.Status
func (r GetPlacesUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacesUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPointsZoomXYGridJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UtfGrid
}

// Status returns HTTPResponse.Status
func (r GetPointsZoomXYGridJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPointsZoomXYGridJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPointsZoomXYPngResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPointsZoomXYPngResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPointsZoomXYPngResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectObservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsProjectObservations
}

// Status returns HTTPResponse.Status
func (r PostProjectObservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectObservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectObservationsUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteProjectObservationsUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectObservationsUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutProjectObservationsUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsProjectObservations
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutProjectObservationsUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutProjectObservationsUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutProjectUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectUser
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutProjectUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutProjectUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsProjects
}

// Status returns HTTPResponse.Status
func (r GetProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsProjects
}

// Status returns HTTPResponse.Status
func (r GetProjectsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsIdMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsProjectsMembers
}

// Status returns HTTPResponse.Status
func (r GetProjectsIdMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsIdMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectsIdMembershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteProjectsIdMembershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectsIdMembershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsIdMembershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsProjectMembership
}

// Status returns HTTPResponse.Status
func (r GetProjectsIdMembershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsIdMembershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsIdMembershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostProjectsIdMembershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsIdMembershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsIdPostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsProjectsPosts
}

// Status returns HTTPResponse.Status
func (r GetProjectsIdPostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsIdPostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProviderAuthorizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsProviderAuthorizations
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetProviderAuthorizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProviderAuthorizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProviderAuthorizationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteProviderAuthorizationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProviderAuthorizationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsRelationships
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsRelationships
}

// Status returns HTTPResponse.Status
func (r PostRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRelationshipsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRelationshipsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRelationshipsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRelationshipsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsRelationships
}

// Status returns HTTPResponse.Status
func (r PutRelationshipsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRelationshipsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSavedLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsSavedLocations
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetSavedLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSavedLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSavedLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsSavedLocations
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostSavedLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSavedLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSavedLocationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSavedLocationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSavedLocationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsSearch
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSitesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsSites
}

// Status returns HTTPResponse.Status
func (r GetSitesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSitesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSoundsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsSounds
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostSoundsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSoundsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTaxa
}

// Status returns HTTPResponse.Status
func (r GetTaxaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxaAutocompleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTaxa
}

// Status returns HTTPResponse.Status
func (r GetTaxaAutocompleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxaAutocompleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxaIconicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTaxa
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetTaxaIconicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxaIconicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxaSuggestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTaxaSuggest
}

// Status returns HTTPResponse.Status
func (r GetTaxaSuggestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxaSuggestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTaxaSuggestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTaxaSuggest
}

// Status returns HTTPResponse.Status
func (r PostTaxaSuggestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTaxaSuggestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxaIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTaxa
}

// Status returns HTTPResponse.Status
func (r GetTaxaIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxaIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxaIdWantedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTaxa
}

// Status returns HTTPResponse.Status
func (r GetTaxaIdWantedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxaIdWantedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTaxonNamePrioritiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTaxonNamePriorities
}

// Status returns HTTPResponse.Status
func (r PostTaxonNamePrioritiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTaxonNamePrioritiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTaxonNamePrioritiesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTaxonNamePrioritiesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTaxonNamePrioritiesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTaxonNamePrioritiesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTaxonNamePriorities
}

// Status returns HTTPResponse.Status
func (r PutTaxonNamePrioritiesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTaxonNamePrioritiesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxonPlacesIdZoomXYPngResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTaxonPlacesIdZoomXYPngResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxonPlacesIdZoomXYPngResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxonRangesIdZoomXYPngResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTaxonRangesIdZoomXYPngResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxonRangesIdZoomXYPngResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTranslationsLocalesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsTranslationsLocales
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetTranslationsLocalesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTranslationsLocalesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsUsers
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersAutocompleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsUsers
}

// Status returns HTTPResponse.Status
func (r GetUsersAutocompleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersAutocompleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersEmailAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsEmailAvailable
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersEmailAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersEmailAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsUsersMe
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersNotificationCountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsUsersNotificationCounts
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersNotificationCountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersNotificationCountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersRecentObservationFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsObservationFields
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersRecentObservationFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersRecentObservationFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersResendConfirmationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUsersResendConfirmationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersResendConfirmationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersResetPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostUsersResetPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersResetPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUsersUpdateSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutUsersUpdateSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUsersUpdateSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsUsers
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsersIdBlockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUsersIdBlockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsersIdBlockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersIdBlockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUsersIdBlockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersIdBlockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsersIdMuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUsersIdMuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsersIdMuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersIdMuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUsersIdMuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersIdMuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersIdProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsProjects
}

// Status returns HTTPResponse.Status
func (r GetUsersIdProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersIdProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAnnotationsWithBodyWithResponse request with arbitrary body returning *PostAnnotationsResponse
func (c *ClientWithResponses) PostAnnotationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAnnotationsResponse, error) {
	rsp, err := c.PostAnnotationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnnotationsResponse(rsp)
}

func (c *ClientWithResponses) PostAnnotationsWithResponse(ctx context.Context, body PostAnnotationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAnnotationsResponse, error) {
	rsp, err := c.PostAnnotations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnnotationsResponse(rsp)
}

// DeleteAnnotationsUuidWithResponse request returning *DeleteAnnotationsUuidResponse
func (c *ClientWithResponses) DeleteAnnotationsUuidWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteAnnotationsUuidResponse, error) {
	rsp, err := c.DeleteAnnotationsUuid(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAnnotationsUuidResponse(rsp)
}

// DeleteAnnotationsUuidVoteWithResponse request returning *DeleteAnnotationsUuidVoteResponse
func (c *ClientWithResponses) DeleteAnnotationsUuidVoteWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteAnnotationsUuidVoteResponse, error) {
	rsp, err := c.DeleteAnnotationsUuidVote(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAnnotationsUuidVoteResponse(rsp)
}

// PostAnnotationsUuidVoteWithResponse request returning *PostAnnotationsUuidVoteResponse
func (c *ClientWithResponses) PostAnnotationsUuidVoteWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostAnnotationsUuidVoteResponse, error) {
	rsp, err := c.PostAnnotationsUuidVote(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnnotationsUuidVoteResponse(rsp)
}

// GetAnnouncementsWithResponse request returning *GetAnnouncementsResponse
func (c *ClientWithResponses) GetAnnouncementsWithResponse(ctx context.Context, params *GetAnnouncementsParams, reqEditors ...RequestEditorFn) (*GetAnnouncementsResponse, error) {
	rsp, err := c.GetAnnouncements(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAnnouncementsResponse(rsp)
}

// PutAnnouncementsIdDismissWithResponse request returning *PutAnnouncementsIdDismissResponse
func (c *ClientWithResponses) PutAnnouncementsIdDismissWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PutAnnouncementsIdDismissResponse, error) {
	rsp, err := c.PutAnnouncementsIdDismiss(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAnnouncementsIdDismissResponse(rsp)
}

// GetAuthorizedApplicationsWithResponse request returning *GetAuthorizedApplicationsResponse
func (c *ClientWithResponses) GetAuthorizedApplicationsWithResponse(ctx context.Context, params *GetAuthorizedApplicationsParams, reqEditors ...RequestEditorFn) (*GetAuthorizedApplicationsResponse, error) {
	rsp, err := c.GetAuthorizedApplications(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthorizedApplicationsResponse(rsp)
}

// DeleteAuthorizedApplicationsIdWithResponse request returning *DeleteAuthorizedApplicationsIdResponse
func (c *ClientWithResponses) DeleteAuthorizedApplicationsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteAuthorizedApplicationsIdResponse, error) {
	rsp, err := c.DeleteAuthorizedApplicationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthorizedApplicationsIdResponse(rsp)
}

// PostCommentsWithBodyWithResponse request with arbitrary body returning *PostCommentsResponse
func (c *ClientWithResponses) PostCommentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCommentsResponse, error) {
	rsp, err := c.PostCommentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCommentsResponse(rsp)
}

func (c *ClientWithResponses) PostCommentsWithResponse(ctx context.Context, body PostCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCommentsResponse, error) {
	rsp, err := c.PostComments(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCommentsResponse(rsp)
}

// DeleteCommentsUuidWithResponse request returning *DeleteCommentsUuidResponse
func (c *ClientWithResponses) DeleteCommentsUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteCommentsUuidResponse, error) {
	rsp, err := c.DeleteCommentsUuid(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCommentsUuidResponse(rsp)
}

// PutCommentsUuidWithBodyWithResponse request with arbitrary body returning *PutCommentsUuidResponse
func (c *ClientWithResponses) PutCommentsUuidWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCommentsUuidResponse, error) {
	rsp, err := c.PutCommentsUuidWithBody(ctx, uuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCommentsUuidResponse(rsp)
}

func (c *ClientWithResponses) PutCommentsUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutCommentsUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCommentsUuidResponse, error) {
	rsp, err := c.PutCommentsUuid(ctx, uuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCommentsUuidResponse(rsp)
}

// GetControlledTermsWithResponse request returning *GetControlledTermsResponse
func (c *ClientWithResponses) GetControlledTermsWithResponse(ctx context.Context, params *GetControlledTermsParams, reqEditors ...RequestEditorFn) (*GetControlledTermsResponse, error) {
	rsp, err := c.GetControlledTerms(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetControlledTermsResponse(rsp)
}

// GetControlledTermsForTaxonTaxonIdWithResponse request returning *GetControlledTermsForTaxonTaxonIdResponse
func (c *ClientWithResponses) GetControlledTermsForTaxonTaxonIdWithResponse(ctx context.Context, taxonId []string, params *GetControlledTermsForTaxonTaxonIdParams, reqEditors ...RequestEditorFn) (*GetControlledTermsForTaxonTaxonIdResponse, error) {
	rsp, err := c.GetControlledTermsForTaxonTaxonId(ctx, taxonId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetControlledTermsForTaxonTaxonIdResponse(rsp)
}

// PostFlagsWithBodyWithResponse request with arbitrary body returning *PostFlagsResponse
func (c *ClientWithResponses) PostFlagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFlagsResponse, error) {
	rsp, err := c.PostFlagsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFlagsResponse(rsp)
}

func (c *ClientWithResponses) PostFlagsWithResponse(ctx context.Context, body PostFlagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFlagsResponse, error) {
	rsp, err := c.PostFlags(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFlagsResponse(rsp)
}

// DeleteFlagsIdWithResponse request returning *DeleteFlagsIdResponse
func (c *ClientWithResponses) DeleteFlagsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteFlagsIdResponse, error) {
	rsp, err := c.DeleteFlagsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFlagsIdResponse(rsp)
}

// PutFlagsIdWithBodyWithResponse request with arbitrary body returning *PutFlagsIdResponse
func (c *ClientWithResponses) PutFlagsIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFlagsIdResponse, error) {
	rsp, err := c.PutFlagsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFlagsIdResponse(rsp)
}

func (c *ClientWithResponses) PutFlagsIdWithResponse(ctx context.Context, id int, body PutFlagsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFlagsIdResponse, error) {
	rsp, err := c.PutFlagsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFlagsIdResponse(rsp)
}

// GetGeomodelIdZoomXYPngWithResponse request returning *GetGeomodelIdZoomXYPngResponse
func (c *ClientWithResponses) GetGeomodelIdZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetGeomodelIdZoomXYPngResponse, error) {
	rsp, err := c.GetGeomodelIdZoomXYPng(ctx, id, zoom, x, y, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGeomodelIdZoomXYPngResponse(rsp)
}

// GetGeomodelComparisonIdZoomXYPngWithResponse request returning *GetGeomodelComparisonIdZoomXYPngResponse
func (c *ClientWithResponses) GetGeomodelComparisonIdZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelComparisonIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetGeomodelComparisonIdZoomXYPngResponse, error) {
	rsp, err := c.GetGeomodelComparisonIdZoomXYPng(ctx, id, zoom, x, y, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGeomodelComparisonIdZoomXYPngResponse(rsp)
}

// GetGeomodelTaxonRangeIdZoomXYPngWithResponse request returning *GetGeomodelTaxonRangeIdZoomXYPngResponse
func (c *ClientWithResponses) GetGeomodelTaxonRangeIdZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetGeomodelTaxonRangeIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetGeomodelTaxonRangeIdZoomXYPngResponse, error) {
	rsp, err := c.GetGeomodelTaxonRangeIdZoomXYPng(ctx, id, zoom, x, y, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGeomodelTaxonRangeIdZoomXYPngResponse(rsp)
}

// GetGridZoomXYGridJsonWithResponse request returning *GetGridZoomXYGridJsonResponse
func (c *ClientWithResponses) GetGridZoomXYGridJsonWithResponse(ctx context.Context, zoom int, x int, y int, params *GetGridZoomXYGridJsonParams, reqEditors ...RequestEditorFn) (*GetGridZoomXYGridJsonResponse, error) {
	rsp, err := c.GetGridZoomXYGridJson(ctx, zoom, x, y, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGridZoomXYGridJsonResponse(rsp)
}

// GetGridZoomXYPngWithResponse request returning *GetGridZoomXYPngResponse
func (c *ClientWithResponses) GetGridZoomXYPngWithResponse(ctx context.Context, zoom int, x int, y int, params *GetGridZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetGridZoomXYPngResponse, error) {
	rsp, err := c.GetGridZoomXYPng(ctx, zoom, x, y, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGridZoomXYPngResponse(rsp)
}

// GetHeatmapZoomXYPngWithResponse request returning *GetHeatmapZoomXYPngResponse
func (c *ClientWithResponses) GetHeatmapZoomXYPngWithResponse(ctx context.Context, zoom int, x int, y int, params *GetHeatmapZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetHeatmapZoomXYPngResponse, error) {
	rsp, err := c.GetHeatmapZoomXYPng(ctx, zoom, x, y, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHeatmapZoomXYPngResponse(rsp)
}

// PostIdentificationsWithBodyWithResponse request with arbitrary body returning *PostIdentificationsResponse
func (c *ClientWithResponses) PostIdentificationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIdentificationsResponse, error) {
	rsp, err := c.PostIdentificationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdentificationsResponse(rsp)
}

func (c *ClientWithResponses) PostIdentificationsWithResponse(ctx context.Context, body PostIdentificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIdentificationsResponse, error) {
	rsp, err := c.PostIdentifications(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdentificationsResponse(rsp)
}

// GetIdentificationsIdentifiersWithResponse request returning *GetIdentificationsIdentifiersResponse
func (c *ClientWithResponses) GetIdentificationsIdentifiersWithResponse(ctx context.Context, params *GetIdentificationsIdentifiersParams, reqEditors ...RequestEditorFn) (*GetIdentificationsIdentifiersResponse, error) {
	rsp, err := c.GetIdentificationsIdentifiers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdentificationsIdentifiersResponse(rsp)
}

// GetIdentificationsRecentTaxaWithResponse request returning *GetIdentificationsRecentTaxaResponse
func (c *ClientWithResponses) GetIdentificationsRecentTaxaWithResponse(ctx context.Context, params *GetIdentificationsRecentTaxaParams, reqEditors ...RequestEditorFn) (*GetIdentificationsRecentTaxaResponse, error) {
	rsp, err := c.GetIdentificationsRecentTaxa(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdentificationsRecentTaxaResponse(rsp)
}

// GetIdentificationsSimilarSpeciesWithResponse request returning *GetIdentificationsSimilarSpeciesResponse
func (c *ClientWithResponses) GetIdentificationsSimilarSpeciesWithResponse(ctx context.Context, params *GetIdentificationsSimilarSpeciesParams, reqEditors ...RequestEditorFn) (*GetIdentificationsSimilarSpeciesResponse, error) {
	rsp, err := c.GetIdentificationsSimilarSpecies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdentificationsSimilarSpeciesResponse(rsp)
}

// DeleteIdentificationsUuidWithResponse request returning *DeleteIdentificationsUuidResponse
func (c *ClientWithResponses) DeleteIdentificationsUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteIdentificationsUuidResponse, error) {
	rsp, err := c.DeleteIdentificationsUuid(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdentificationsUuidResponse(rsp)
}

// PutIdentificationsUuidWithBodyWithResponse request with arbitrary body returning *PutIdentificationsUuidResponse
func (c *ClientWithResponses) PutIdentificationsUuidWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIdentificationsUuidResponse, error) {
	rsp, err := c.PutIdentificationsUuidWithBody(ctx, uuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIdentificationsUuidResponse(rsp)
}

func (c *ClientWithResponses) PutIdentificationsUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutIdentificationsUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIdentificationsUuidResponse, error) {
	rsp, err := c.PutIdentificationsUuid(ctx, uuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIdentificationsUuidResponse(rsp)
}

// GetMessagesWithResponse request returning *GetMessagesResponse
func (c *ClientWithResponses) GetMessagesWithResponse(ctx context.Context, params *GetMessagesParams, reqEditors ...RequestEditorFn) (*GetMessagesResponse, error) {
	rsp, err := c.GetMessages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessagesResponse(rsp)
}

// PostMessagesWithBodyWithResponse request with arbitrary body returning *PostMessagesResponse
func (c *ClientWithResponses) PostMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMessagesResponse, error) {
	rsp, err := c.PostMessagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMessagesResponse(rsp)
}

func (c *ClientWithResponses) PostMessagesWithResponse(ctx context.Context, body PostMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMessagesResponse, error) {
	rsp, err := c.PostMessages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMessagesResponse(rsp)
}

// GetMessagesIdWithResponse request returning *GetMessagesIdResponse
func (c *ClientWithResponses) GetMessagesIdWithResponse(ctx context.Context, id int, params *GetMessagesIdParams, reqEditors ...RequestEditorFn) (*GetMessagesIdResponse, error) {
	rsp, err := c.GetMessagesId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessagesIdResponse(rsp)
}

// PostObservationFieldValuesWithBodyWithResponse request with arbitrary body returning *PostObservationFieldValuesResponse
func (c *ClientWithResponses) PostObservationFieldValuesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObservationFieldValuesResponse, error) {
	rsp, err := c.PostObservationFieldValuesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObservationFieldValuesResponse(rsp)
}

func (c *ClientWithResponses) PostObservationFieldValuesWithResponse(ctx context.Context, body PostObservationFieldValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObservationFieldValuesResponse, error) {
	rsp, err := c.PostObservationFieldValues(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObservationFieldValuesResponse(rsp)
}

// DeleteObservationFieldValuesUuidWithResponse request returning *DeleteObservationFieldValuesUuidResponse
func (c *ClientWithResponses) DeleteObservationFieldValuesUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationFieldValuesUuidResponse, error) {
	rsp, err := c.DeleteObservationFieldValuesUuid(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObservationFieldValuesUuidResponse(rsp)
}

// PutObservationFieldValuesUuidWithBodyWithResponse request with arbitrary body returning *PutObservationFieldValuesUuidResponse
func (c *ClientWithResponses) PutObservationFieldValuesUuidWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObservationFieldValuesUuidResponse, error) {
	rsp, err := c.PutObservationFieldValuesUuidWithBody(ctx, uuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObservationFieldValuesUuidResponse(rsp)
}

func (c *ClientWithResponses) PutObservationFieldValuesUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutObservationFieldValuesUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObservationFieldValuesUuidResponse, error) {
	rsp, err := c.PutObservationFieldValuesUuid(ctx, uuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObservationFieldValuesUuidResponse(rsp)
}

// PostObservationPhotosWithBodyWithResponse request with arbitrary body returning *PostObservationPhotosResponse
func (c *ClientWithResponses) PostObservationPhotosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObservationPhotosResponse, error) {
	rsp, err := c.PostObservationPhotosWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObservationPhotosResponse(rsp)
}

func (c *ClientWithResponses) PostObservationPhotosWithResponse(ctx context.Context, body PostObservationPhotosJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObservationPhotosResponse, error) {
	rsp, err := c.PostObservationPhotos(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObservationPhotosResponse(rsp)
}

// DeleteObservationPhotosUuidWithResponse request returning *DeleteObservationPhotosUuidResponse
func (c *ClientWithResponses) DeleteObservationPhotosUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationPhotosUuidResponse, error) {
	rsp, err := c.DeleteObservationPhotosUuid(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObservationPhotosUuidResponse(rsp)
}

// PutObservationPhotosUuidWithBodyWithResponse request with arbitrary body returning *PutObservationPhotosUuidResponse
func (c *ClientWithResponses) PutObservationPhotosUuidWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObservationPhotosUuidResponse, error) {
	rsp, err := c.PutObservationPhotosUuidWithBody(ctx, uuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObservationPhotosUuidResponse(rsp)
}

func (c *ClientWithResponses) PutObservationPhotosUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutObservationPhotosUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObservationPhotosUuidResponse, error) {
	rsp, err := c.PutObservationPhotosUuid(ctx, uuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObservationPhotosUuidResponse(rsp)
}

// PostObservationSoundsWithBodyWithResponse request with arbitrary body returning *PostObservationSoundsResponse
func (c *ClientWithResponses) PostObservationSoundsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObservationSoundsResponse, error) {
	rsp, err := c.PostObservationSoundsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObservationSoundsResponse(rsp)
}

func (c *ClientWithResponses) PostObservationSoundsWithResponse(ctx context.Context, body PostObservationSoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObservationSoundsResponse, error) {
	rsp, err := c.PostObservationSounds(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObservationSoundsResponse(rsp)
}

// DeleteObservationSoundsUuidWithResponse request returning *DeleteObservationSoundsUuidResponse
func (c *ClientWithResponses) DeleteObservationSoundsUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationSoundsUuidResponse, error) {
	rsp, err := c.DeleteObservationSoundsUuid(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObservationSoundsUuidResponse(rsp)
}

// PutObservationSoundsUuidWithBodyWithResponse request with arbitrary body returning *PutObservationSoundsUuidResponse
func (c *ClientWithResponses) PutObservationSoundsUuidWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObservationSoundsUuidResponse, error) {
	rsp, err := c.PutObservationSoundsUuidWithBody(ctx, uuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObservationSoundsUuidResponse(rsp)
}

func (c *ClientWithResponses) PutObservationSoundsUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutObservationSoundsUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObservationSoundsUuidResponse, error) {
	rsp, err := c.PutObservationSoundsUuid(ctx, uuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObservationSoundsUuidResponse(rsp)
}

// GetObservationsWithResponse request returning *GetObservationsResponse
func (c *ClientWithResponses) GetObservationsWithResponse(ctx context.Context, params *GetObservationsParams, reqEditors ...RequestEditorFn) (*GetObservationsResponse, error) {
	rsp, err := c.GetObservations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsResponse(rsp)
}

// PostObservationsWithBodyWithResponse request with arbitrary body returning *PostObservationsResponse
func (c *ClientWithResponses) PostObservationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObservationsResponse, error) {
	rsp, err := c.PostObservationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObservationsResponse(rsp)
}

func (c *ClientWithResponses) PostObservationsWithResponse(ctx context.Context, body PostObservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObservationsResponse, error) {
	rsp, err := c.PostObservations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObservationsResponse(rsp)
}

// GetObservationsDeletedWithResponse request returning *GetObservationsDeletedResponse
func (c *ClientWithResponses) GetObservationsDeletedWithResponse(ctx context.Context, params *GetObservationsDeletedParams, reqEditors ...RequestEditorFn) (*GetObservationsDeletedResponse, error) {
	rsp, err := c.GetObservationsDeleted(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsDeletedResponse(rsp)
}

// GetObservationsHistogramWithResponse request returning *GetObservationsHistogramResponse
func (c *ClientWithResponses) GetObservationsHistogramWithResponse(ctx context.Context, params *GetObservationsHistogramParams, reqEditors ...RequestEditorFn) (*GetObservationsHistogramResponse, error) {
	rsp, err := c.GetObservationsHistogram(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsHistogramResponse(rsp)
}

// GetObservationsIconicTaxaSpeciesCountsWithResponse request returning *GetObservationsIconicTaxaSpeciesCountsResponse
func (c *ClientWithResponses) GetObservationsIconicTaxaSpeciesCountsWithResponse(ctx context.Context, params *GetObservationsIconicTaxaSpeciesCountsParams, reqEditors ...RequestEditorFn) (*GetObservationsIconicTaxaSpeciesCountsResponse, error) {
	rsp, err := c.GetObservationsIconicTaxaSpeciesCounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsIconicTaxaSpeciesCountsResponse(rsp)
}

// GetObservationsIdentificationCategoriesWithResponse request returning *GetObservationsIdentificationCategoriesResponse
func (c *ClientWithResponses) GetObservationsIdentificationCategoriesWithResponse(ctx context.Context, params *GetObservationsIdentificationCategoriesParams, reqEditors ...RequestEditorFn) (*GetObservationsIdentificationCategoriesResponse, error) {
	rsp, err := c.GetObservationsIdentificationCategories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsIdentificationCategoriesResponse(rsp)
}

// GetObservationsIdentifiersWithResponse request returning *GetObservationsIdentifiersResponse
func (c *ClientWithResponses) GetObservationsIdentifiersWithResponse(ctx context.Context, params *GetObservationsIdentifiersParams, reqEditors ...RequestEditorFn) (*GetObservationsIdentifiersResponse, error) {
	rsp, err := c.GetObservationsIdentifiers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsIdentifiersResponse(rsp)
}

// GetObservationsObserversWithResponse request returning *GetObservationsObserversResponse
func (c *ClientWithResponses) GetObservationsObserversWithResponse(ctx context.Context, params *GetObservationsObserversParams, reqEditors ...RequestEditorFn) (*GetObservationsObserversResponse, error) {
	rsp, err := c.GetObservationsObservers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsObserversResponse(rsp)
}

// GetObservationsPopularFieldValuesWithResponse request returning *GetObservationsPopularFieldValuesResponse
func (c *ClientWithResponses) GetObservationsPopularFieldValuesWithResponse(ctx context.Context, params *GetObservationsPopularFieldValuesParams, reqEditors ...RequestEditorFn) (*GetObservationsPopularFieldValuesResponse, error) {
	rsp, err := c.GetObservationsPopularFieldValues(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsPopularFieldValuesResponse(rsp)
}

// GetObservationsQualityGradesWithResponse request returning *GetObservationsQualityGradesResponse
func (c *ClientWithResponses) GetObservationsQualityGradesWithResponse(ctx context.Context, params *GetObservationsQualityGradesParams, reqEditors ...RequestEditorFn) (*GetObservationsQualityGradesResponse, error) {
	rsp, err := c.GetObservationsQualityGrades(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsQualityGradesResponse(rsp)
}

// GetObservationsSpeciesCountsWithResponse request returning *GetObservationsSpeciesCountsResponse
func (c *ClientWithResponses) GetObservationsSpeciesCountsWithResponse(ctx context.Context, params *GetObservationsSpeciesCountsParams, reqEditors ...RequestEditorFn) (*GetObservationsSpeciesCountsResponse, error) {
	rsp, err := c.GetObservationsSpeciesCounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsSpeciesCountsResponse(rsp)
}

// GetObservationsUmbrellaProjectStatsWithResponse request returning *GetObservationsUmbrellaProjectStatsResponse
func (c *ClientWithResponses) GetObservationsUmbrellaProjectStatsWithResponse(ctx context.Context, params *GetObservationsUmbrellaProjectStatsParams, reqEditors ...RequestEditorFn) (*GetObservationsUmbrellaProjectStatsResponse, error) {
	rsp, err := c.GetObservationsUmbrellaProjectStats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsUmbrellaProjectStatsResponse(rsp)
}

// GetObservationsUpdatesWithResponse request returning *GetObservationsUpdatesResponse
func (c *ClientWithResponses) GetObservationsUpdatesWithResponse(ctx context.Context, params *GetObservationsUpdatesParams, reqEditors ...RequestEditorFn) (*GetObservationsUpdatesResponse, error) {
	rsp, err := c.GetObservationsUpdates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsUpdatesResponse(rsp)
}

// DeleteObservationsUuidWithResponse request returning *DeleteObservationsUuidResponse
func (c *ClientWithResponses) DeleteObservationsUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationsUuidResponse, error) {
	rsp, err := c.DeleteObservationsUuid(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObservationsUuidResponse(rsp)
}

// GetObservationsUuidWithResponse request returning *GetObservationsUuidResponse
func (c *ClientWithResponses) GetObservationsUuidWithResponse(ctx context.Context, uuid []openapi_types.UUID, params *GetObservationsUuidParams, reqEditors ...RequestEditorFn) (*GetObservationsUuidResponse, error) {
	rsp, err := c.GetObservationsUuid(ctx, uuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsUuidResponse(rsp)
}

// PutObservationsUuidWithBodyWithResponse request with arbitrary body returning *PutObservationsUuidResponse
func (c *ClientWithResponses) PutObservationsUuidWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObservationsUuidResponse, error) {
	rsp, err := c.PutObservationsUuidWithBody(ctx, uuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObservationsUuidResponse(rsp)
}

func (c *ClientWithResponses) PutObservationsUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutObservationsUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObservationsUuidResponse, error) {
	rsp, err := c.PutObservationsUuid(ctx, uuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObservationsUuidResponse(rsp)
}

// DeleteObservationsUuidFaveWithResponse request returning *DeleteObservationsUuidFaveResponse
func (c *ClientWithResponses) DeleteObservationsUuidFaveWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationsUuidFaveResponse, error) {
	rsp, err := c.DeleteObservationsUuidFave(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObservationsUuidFaveResponse(rsp)
}

// PostObservationsUuidFaveWithResponse request returning *PostObservationsUuidFaveResponse
func (c *ClientWithResponses) PostObservationsUuidFaveWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostObservationsUuidFaveResponse, error) {
	rsp, err := c.PostObservationsUuidFave(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObservationsUuidFaveResponse(rsp)
}

// DeleteObservationsUuidQualityMetricWithResponse request returning *DeleteObservationsUuidQualityMetricResponse
func (c *ClientWithResponses) DeleteObservationsUuidQualityMetricWithResponse(ctx context.Context, uuid []openapi_types.UUID, metric DeleteObservationsUuidQualityMetricParamsMetric, reqEditors ...RequestEditorFn) (*DeleteObservationsUuidQualityMetricResponse, error) {
	rsp, err := c.DeleteObservationsUuidQualityMetric(ctx, uuid, metric, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObservationsUuidQualityMetricResponse(rsp)
}

// PostObservationsUuidQualityMetricWithResponse request returning *PostObservationsUuidQualityMetricResponse
func (c *ClientWithResponses) PostObservationsUuidQualityMetricWithResponse(ctx context.Context, uuid []openapi_types.UUID, metric PostObservationsUuidQualityMetricParamsMetric, params *PostObservationsUuidQualityMetricParams, reqEditors ...RequestEditorFn) (*PostObservationsUuidQualityMetricResponse, error) {
	rsp, err := c.PostObservationsUuidQualityMetric(ctx, uuid, metric, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObservationsUuidQualityMetricResponse(rsp)
}

// GetObservationsUuidQualityMetricsWithResponse request returning *GetObservationsUuidQualityMetricsResponse
func (c *ClientWithResponses) GetObservationsUuidQualityMetricsWithResponse(ctx context.Context, uuid []openapi_types.UUID, params *GetObservationsUuidQualityMetricsParams, reqEditors ...RequestEditorFn) (*GetObservationsUuidQualityMetricsResponse, error) {
	rsp, err := c.GetObservationsUuidQualityMetrics(ctx, uuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsUuidQualityMetricsResponse(rsp)
}

// DeleteObservationsUuidReviewWithResponse request returning *DeleteObservationsUuidReviewResponse
func (c *ClientWithResponses) DeleteObservationsUuidReviewWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObservationsUuidReviewResponse, error) {
	rsp, err := c.DeleteObservationsUuidReview(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObservationsUuidReviewResponse(rsp)
}

// PostObservationsUuidReviewWithResponse request returning *PostObservationsUuidReviewResponse
func (c *ClientWithResponses) PostObservationsUuidReviewWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostObservationsUuidReviewResponse, error) {
	rsp, err := c.PostObservationsUuidReview(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObservationsUuidReviewResponse(rsp)
}

// PutObservationsUuidSubscriptionWithResponse request returning *PutObservationsUuidSubscriptionResponse
func (c *ClientWithResponses) PutObservationsUuidSubscriptionWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*PutObservationsUuidSubscriptionResponse, error) {
	rsp, err := c.PutObservationsUuidSubscription(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObservationsUuidSubscriptionResponse(rsp)
}

// GetObservationsUuidSubscriptionsWithResponse request returning *GetObservationsUuidSubscriptionsResponse
func (c *ClientWithResponses) GetObservationsUuidSubscriptionsWithResponse(ctx context.Context, uuid openapi_types.UUID, params *GetObservationsUuidSubscriptionsParams, reqEditors ...RequestEditorFn) (*GetObservationsUuidSubscriptionsResponse, error) {
	rsp, err := c.GetObservationsUuidSubscriptions(ctx, uuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsUuidSubscriptionsResponse(rsp)
}

// GetObservationsUuidTaxonSummaryWithResponse request returning *GetObservationsUuidTaxonSummaryResponse
func (c *ClientWithResponses) GetObservationsUuidTaxonSummaryWithResponse(ctx context.Context, uuid openapi_types.UUID, params *GetObservationsUuidTaxonSummaryParams, reqEditors ...RequestEditorFn) (*GetObservationsUuidTaxonSummaryResponse, error) {
	rsp, err := c.GetObservationsUuidTaxonSummary(ctx, uuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObservationsUuidTaxonSummaryResponse(rsp)
}

// PutObservationsUuidViewedUpdatesWithResponse request returning *PutObservationsUuidViewedUpdatesResponse
func (c *ClientWithResponses) PutObservationsUuidViewedUpdatesWithResponse(ctx context.Context, uuid []openapi_types.UUID, reqEditors ...RequestEditorFn) (*PutObservationsUuidViewedUpdatesResponse, error) {
	rsp, err := c.PutObservationsUuidViewedUpdates(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObservationsUuidViewedUpdatesResponse(rsp)
}

// PostPhotosWithBodyWithResponse request with arbitrary body returning *PostPhotosResponse
func (c *ClientWithResponses) PostPhotosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPhotosResponse, error) {
	rsp, err := c.PostPhotosWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPhotosResponse(rsp)
}

// PutPhotosIdWithResponse request returning *PutPhotosIdResponse
func (c *ClientWithResponses) PutPhotosIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PutPhotosIdResponse, error) {
	rsp, err := c.PutPhotosId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPhotosIdResponse(rsp)
}

// GetPlacesWithResponse request returning *GetPlacesResponse
func (c *ClientWithResponses) GetPlacesWithResponse(ctx context.Context, params *GetPlacesParams, reqEditors ...RequestEditorFn) (*GetPlacesResponse, error) {
	rsp, err := c.GetPlaces(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacesResponse(rsp)
}

// GetPlacesNearbyWithResponse request returning *GetPlacesNearbyResponse
func (c *ClientWithResponses) GetPlacesNearbyWithResponse(ctx context.Context, params *GetPlacesNearbyParams, reqEditors ...RequestEditorFn) (*GetPlacesNearbyResponse, error) {
	rsp, err := c.GetPlacesNearby(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacesNearbyResponse(rsp)
}

// GetPlacesIdZoomXYPngWithResponse request returning *GetPlacesIdZoomXYPngResponse
func (c *ClientWithResponses) GetPlacesIdZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetPlacesIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetPlacesIdZoomXYPngResponse, error) {
	rsp, err := c.GetPlacesIdZoomXYPng(ctx, id, zoom, x, y, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacesIdZoomXYPngResponse(rsp)
}

// GetPlacesUuidWithResponse request returning *GetPlacesUuidResponse
func (c *ClientWithResponses) GetPlacesUuidWithResponse(ctx context.Context, uuid []string, params *GetPlacesUuidParams, reqEditors ...RequestEditorFn) (*GetPlacesUuidResponse, error) {
	rsp, err := c.GetPlacesUuid(ctx, uuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacesUuidResponse(rsp)
}

// GetPointsZoomXYGridJsonWithResponse request returning *GetPointsZoomXYGridJsonResponse
func (c *ClientWithResponses) GetPointsZoomXYGridJsonWithResponse(ctx context.Context, zoom int, x int, y int, params *GetPointsZoomXYGridJsonParams, reqEditors ...RequestEditorFn) (*GetPointsZoomXYGridJsonResponse, error) {
	rsp, err := c.GetPointsZoomXYGridJson(ctx, zoom, x, y, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPointsZoomXYGridJsonResponse(rsp)
}

// GetPointsZoomXYPngWithResponse request returning *GetPointsZoomXYPngResponse
func (c *ClientWithResponses) GetPointsZoomXYPngWithResponse(ctx context.Context, zoom int, x int, y int, params *GetPointsZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetPointsZoomXYPngResponse, error) {
	rsp, err := c.GetPointsZoomXYPng(ctx, zoom, x, y, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPointsZoomXYPngResponse(rsp)
}

// PostProjectObservationsWithBodyWithResponse request with arbitrary body returning *PostProjectObservationsResponse
func (c *ClientWithResponses) PostProjectObservationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectObservationsResponse, error) {
	rsp, err := c.PostProjectObservationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectObservationsResponse(rsp)
}

func (c *ClientWithResponses) PostProjectObservationsWithResponse(ctx context.Context, body PostProjectObservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectObservationsResponse, error) {
	rsp, err := c.PostProjectObservations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectObservationsResponse(rsp)
}

// DeleteProjectObservationsUuidWithResponse request returning *DeleteProjectObservationsUuidResponse
func (c *ClientWithResponses) DeleteProjectObservationsUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteProjectObservationsUuidResponse, error) {
	rsp, err := c.DeleteProjectObservationsUuid(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectObservationsUuidResponse(rsp)
}

// PutProjectObservationsUuidWithBodyWithResponse request with arbitrary body returning *PutProjectObservationsUuidResponse
func (c *ClientWithResponses) PutProjectObservationsUuidWithBodyWithResponse(ctx context.Context, uuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProjectObservationsUuidResponse, error) {
	rsp, err := c.PutProjectObservationsUuidWithBody(ctx, uuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProjectObservationsUuidResponse(rsp)
}

func (c *ClientWithResponses) PutProjectObservationsUuidWithResponse(ctx context.Context, uuid openapi_types.UUID, body PutProjectObservationsUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProjectObservationsUuidResponse, error) {
	rsp, err := c.PutProjectObservationsUuid(ctx, uuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProjectObservationsUuidResponse(rsp)
}

// PutProjectUsersIdWithBodyWithResponse request with arbitrary body returning *PutProjectUsersIdResponse
func (c *ClientWithResponses) PutProjectUsersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProjectUsersIdResponse, error) {
	rsp, err := c.PutProjectUsersIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProjectUsersIdResponse(rsp)
}

func (c *ClientWithResponses) PutProjectUsersIdWithResponse(ctx context.Context, id string, body PutProjectUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProjectUsersIdResponse, error) {
	rsp, err := c.PutProjectUsersId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProjectUsersIdResponse(rsp)
}

// GetProjectsWithResponse request returning *GetProjectsResponse
func (c *ClientWithResponses) GetProjectsWithResponse(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error) {
	rsp, err := c.GetProjects(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsResponse(rsp)
}

// GetProjectsIdWithResponse request returning *GetProjectsIdResponse
func (c *ClientWithResponses) GetProjectsIdWithResponse(ctx context.Context, id []int, params *GetProjectsIdParams, reqEditors ...RequestEditorFn) (*GetProjectsIdResponse, error) {
	rsp, err := c.GetProjectsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsIdResponse(rsp)
}

// GetProjectsIdMembersWithResponse request returning *GetProjectsIdMembersResponse
func (c *ClientWithResponses) GetProjectsIdMembersWithResponse(ctx context.Context, id int, params *GetProjectsIdMembersParams, reqEditors ...RequestEditorFn) (*GetProjectsIdMembersResponse, error) {
	rsp, err := c.GetProjectsIdMembers(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsIdMembersResponse(rsp)
}

// DeleteProjectsIdMembershipWithResponse request returning *DeleteProjectsIdMembershipResponse
func (c *ClientWithResponses) DeleteProjectsIdMembershipWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteProjectsIdMembershipResponse, error) {
	rsp, err := c.DeleteProjectsIdMembership(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectsIdMembershipResponse(rsp)
}

// GetProjectsIdMembershipWithResponse request returning *GetProjectsIdMembershipResponse
func (c *ClientWithResponses) GetProjectsIdMembershipWithResponse(ctx context.Context, id []int, params *GetProjectsIdMembershipParams, reqEditors ...RequestEditorFn) (*GetProjectsIdMembershipResponse, error) {
	rsp, err := c.GetProjectsIdMembership(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsIdMembershipResponse(rsp)
}

// PostProjectsIdMembershipWithResponse request returning *PostProjectsIdMembershipResponse
func (c *ClientWithResponses) PostProjectsIdMembershipWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostProjectsIdMembershipResponse, error) {
	rsp, err := c.PostProjectsIdMembership(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsIdMembershipResponse(rsp)
}

// GetProjectsIdPostsWithResponse request returning *GetProjectsIdPostsResponse
func (c *ClientWithResponses) GetProjectsIdPostsWithResponse(ctx context.Context, id []int, params *GetProjectsIdPostsParams, reqEditors ...RequestEditorFn) (*GetProjectsIdPostsResponse, error) {
	rsp, err := c.GetProjectsIdPosts(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsIdPostsResponse(rsp)
}

// GetProviderAuthorizationsWithResponse request returning *GetProviderAuthorizationsResponse
func (c *ClientWithResponses) GetProviderAuthorizationsWithResponse(ctx context.Context, params *GetProviderAuthorizationsParams, reqEditors ...RequestEditorFn) (*GetProviderAuthorizationsResponse, error) {
	rsp, err := c.GetProviderAuthorizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProviderAuthorizationsResponse(rsp)
}

// DeleteProviderAuthorizationsIdWithResponse request returning *DeleteProviderAuthorizationsIdResponse
func (c *ClientWithResponses) DeleteProviderAuthorizationsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteProviderAuthorizationsIdResponse, error) {
	rsp, err := c.DeleteProviderAuthorizationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProviderAuthorizationsIdResponse(rsp)
}

// GetRelationshipsWithResponse request returning *GetRelationshipsResponse
func (c *ClientWithResponses) GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error) {
	rsp, err := c.GetRelationships(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsResponse(rsp)
}

// PostRelationshipsWithBodyWithResponse request with arbitrary body returning *PostRelationshipsResponse
func (c *ClientWithResponses) PostRelationshipsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRelationshipsResponse, error) {
	rsp, err := c.PostRelationshipsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRelationshipsResponse(rsp)
}

func (c *ClientWithResponses) PostRelationshipsWithResponse(ctx context.Context, body PostRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRelationshipsResponse, error) {
	rsp, err := c.PostRelationships(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRelationshipsResponse(rsp)
}

// DeleteRelationshipsIdWithResponse request returning *DeleteRelationshipsIdResponse
func (c *ClientWithResponses) DeleteRelationshipsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteRelationshipsIdResponse, error) {
	rsp, err := c.DeleteRelationshipsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRelationshipsIdResponse(rsp)
}

// PutRelationshipsIdWithBodyWithResponse request with arbitrary body returning *PutRelationshipsIdResponse
func (c *ClientWithResponses) PutRelationshipsIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRelationshipsIdResponse, error) {
	rsp, err := c.PutRelationshipsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRelationshipsIdResponse(rsp)
}

func (c *ClientWithResponses) PutRelationshipsIdWithResponse(ctx context.Context, id int, body PutRelationshipsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRelationshipsIdResponse, error) {
	rsp, err := c.PutRelationshipsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRelationshipsIdResponse(rsp)
}

// GetSavedLocationsWithResponse request returning *GetSavedLocationsResponse
func (c *ClientWithResponses) GetSavedLocationsWithResponse(ctx context.Context, params *GetSavedLocationsParams, reqEditors ...RequestEditorFn) (*GetSavedLocationsResponse, error) {
	rsp, err := c.GetSavedLocations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSavedLocationsResponse(rsp)
}

// PostSavedLocationsWithBodyWithResponse request with arbitrary body returning *PostSavedLocationsResponse
func (c *ClientWithResponses) PostSavedLocationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSavedLocationsResponse, error) {
	rsp, err := c.PostSavedLocationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSavedLocationsResponse(rsp)
}

func (c *ClientWithResponses) PostSavedLocationsWithResponse(ctx context.Context, body PostSavedLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSavedLocationsResponse, error) {
	rsp, err := c.PostSavedLocations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSavedLocationsResponse(rsp)
}

// DeleteSavedLocationsIdWithResponse request returning *DeleteSavedLocationsIdResponse
func (c *ClientWithResponses) DeleteSavedLocationsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteSavedLocationsIdResponse, error) {
	rsp, err := c.DeleteSavedLocationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSavedLocationsIdResponse(rsp)
}

// GetSearchWithResponse request returning *GetSearchResponse
func (c *ClientWithResponses) GetSearchWithResponse(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*GetSearchResponse, error) {
	rsp, err := c.GetSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchResponse(rsp)
}

// GetSitesWithResponse request returning *GetSitesResponse
func (c *ClientWithResponses) GetSitesWithResponse(ctx context.Context, params *GetSitesParams, reqEditors ...RequestEditorFn) (*GetSitesResponse, error) {
	rsp, err := c.GetSites(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSitesResponse(rsp)
}

// PostSoundsWithBodyWithResponse request with arbitrary body returning *PostSoundsResponse
func (c *ClientWithResponses) PostSoundsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSoundsResponse, error) {
	rsp, err := c.PostSoundsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSoundsResponse(rsp)
}

// GetTaxaWithResponse request returning *GetTaxaResponse
func (c *ClientWithResponses) GetTaxaWithResponse(ctx context.Context, params *GetTaxaParams, reqEditors ...RequestEditorFn) (*GetTaxaResponse, error) {
	rsp, err := c.GetTaxa(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxaResponse(rsp)
}

// GetTaxaAutocompleteWithResponse request returning *GetTaxaAutocompleteResponse
func (c *ClientWithResponses) GetTaxaAutocompleteWithResponse(ctx context.Context, params *GetTaxaAutocompleteParams, reqEditors ...RequestEditorFn) (*GetTaxaAutocompleteResponse, error) {
	rsp, err := c.GetTaxaAutocomplete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxaAutocompleteResponse(rsp)
}

// GetTaxaIconicWithResponse request returning *GetTaxaIconicResponse
func (c *ClientWithResponses) GetTaxaIconicWithResponse(ctx context.Context, params *GetTaxaIconicParams, reqEditors ...RequestEditorFn) (*GetTaxaIconicResponse, error) {
	rsp, err := c.GetTaxaIconic(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxaIconicResponse(rsp)
}

// GetTaxaSuggestWithResponse request returning *GetTaxaSuggestResponse
func (c *ClientWithResponses) GetTaxaSuggestWithResponse(ctx context.Context, params *GetTaxaSuggestParams, reqEditors ...RequestEditorFn) (*GetTaxaSuggestResponse, error) {
	rsp, err := c.GetTaxaSuggest(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxaSuggestResponse(rsp)
}

// PostTaxaSuggestWithBodyWithResponse request with arbitrary body returning *PostTaxaSuggestResponse
func (c *ClientWithResponses) PostTaxaSuggestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTaxaSuggestResponse, error) {
	rsp, err := c.PostTaxaSuggestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTaxaSuggestResponse(rsp)
}

// GetTaxaIdWithResponse request returning *GetTaxaIdResponse
func (c *ClientWithResponses) GetTaxaIdWithResponse(ctx context.Context, id []int, params *GetTaxaIdParams, reqEditors ...RequestEditorFn) (*GetTaxaIdResponse, error) {
	rsp, err := c.GetTaxaId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxaIdResponse(rsp)
}

// GetTaxaIdWantedWithResponse request returning *GetTaxaIdWantedResponse
func (c *ClientWithResponses) GetTaxaIdWantedWithResponse(ctx context.Context, id int, params *GetTaxaIdWantedParams, reqEditors ...RequestEditorFn) (*GetTaxaIdWantedResponse, error) {
	rsp, err := c.GetTaxaIdWanted(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxaIdWantedResponse(rsp)
}

// PostTaxonNamePrioritiesWithBodyWithResponse request with arbitrary body returning *PostTaxonNamePrioritiesResponse
func (c *ClientWithResponses) PostTaxonNamePrioritiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTaxonNamePrioritiesResponse, error) {
	rsp, err := c.PostTaxonNamePrioritiesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTaxonNamePrioritiesResponse(rsp)
}

func (c *ClientWithResponses) PostTaxonNamePrioritiesWithResponse(ctx context.Context, body PostTaxonNamePrioritiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTaxonNamePrioritiesResponse, error) {
	rsp, err := c.PostTaxonNamePriorities(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTaxonNamePrioritiesResponse(rsp)
}

// DeleteTaxonNamePrioritiesIdWithResponse request returning *DeleteTaxonNamePrioritiesIdResponse
func (c *ClientWithResponses) DeleteTaxonNamePrioritiesIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteTaxonNamePrioritiesIdResponse, error) {
	rsp, err := c.DeleteTaxonNamePrioritiesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTaxonNamePrioritiesIdResponse(rsp)
}

// PutTaxonNamePrioritiesIdWithBodyWithResponse request with arbitrary body returning *PutTaxonNamePrioritiesIdResponse
func (c *ClientWithResponses) PutTaxonNamePrioritiesIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTaxonNamePrioritiesIdResponse, error) {
	rsp, err := c.PutTaxonNamePrioritiesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTaxonNamePrioritiesIdResponse(rsp)
}

func (c *ClientWithResponses) PutTaxonNamePrioritiesIdWithResponse(ctx context.Context, id int, body PutTaxonNamePrioritiesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTaxonNamePrioritiesIdResponse, error) {
	rsp, err := c.PutTaxonNamePrioritiesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTaxonNamePrioritiesIdResponse(rsp)
}

// GetTaxonPlacesIdZoomXYPngWithResponse request returning *GetTaxonPlacesIdZoomXYPngResponse
func (c *ClientWithResponses) GetTaxonPlacesIdZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetTaxonPlacesIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetTaxonPlacesIdZoomXYPngResponse, error) {
	rsp, err := c.GetTaxonPlacesIdZoomXYPng(ctx, id, zoom, x, y, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxonPlacesIdZoomXYPngResponse(rsp)
}

// GetTaxonRangesIdZoomXYPngWithResponse request returning *GetTaxonRangesIdZoomXYPngResponse
func (c *ClientWithResponses) GetTaxonRangesIdZoomXYPngWithResponse(ctx context.Context, id string, zoom int, x int, y int, params *GetTaxonRangesIdZoomXYPngParams, reqEditors ...RequestEditorFn) (*GetTaxonRangesIdZoomXYPngResponse, error) {
	rsp, err := c.GetTaxonRangesIdZoomXYPng(ctx, id, zoom, x, y, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxonRangesIdZoomXYPngResponse(rsp)
}

// GetTranslationsLocalesWithResponse request returning *GetTranslationsLocalesResponse
func (c *ClientWithResponses) GetTranslationsLocalesWithResponse(ctx context.Context, params *GetTranslationsLocalesParams, reqEditors ...RequestEditorFn) (*GetTranslationsLocalesResponse, error) {
	rsp, err := c.GetTranslationsLocales(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTranslationsLocalesResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// GetUsersAutocompleteWithResponse request returning *GetUsersAutocompleteResponse
func (c *ClientWithResponses) GetUsersAutocompleteWithResponse(ctx context.Context, params *GetUsersAutocompleteParams, reqEditors ...RequestEditorFn) (*GetUsersAutocompleteResponse, error) {
	rsp, err := c.GetUsersAutocomplete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersAutocompleteResponse(rsp)
}

// GetUsersEmailAvailableWithResponse request returning *GetUsersEmailAvailableResponse
func (c *ClientWithResponses) GetUsersEmailAvailableWithResponse(ctx context.Context, params *GetUsersEmailAvailableParams, reqEditors ...RequestEditorFn) (*GetUsersEmailAvailableResponse, error) {
	rsp, err := c.GetUsersEmailAvailable(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersEmailAvailableResponse(rsp)
}

// GetUsersMeWithResponse request returning *GetUsersMeResponse
func (c *ClientWithResponses) GetUsersMeWithResponse(ctx context.Context, params *GetUsersMeParams, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error) {
	rsp, err := c.GetUsersMe(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersMeResponse(rsp)
}

// GetUsersNotificationCountsWithResponse request returning *GetUsersNotificationCountsResponse
func (c *ClientWithResponses) GetUsersNotificationCountsWithResponse(ctx context.Context, params *GetUsersNotificationCountsParams, reqEditors ...RequestEditorFn) (*GetUsersNotificationCountsResponse, error) {
	rsp, err := c.GetUsersNotificationCounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersNotificationCountsResponse(rsp)
}

// GetUsersRecentObservationFieldsWithResponse request returning *GetUsersRecentObservationFieldsResponse
func (c *ClientWithResponses) GetUsersRecentObservationFieldsWithResponse(ctx context.Context, params *GetUsersRecentObservationFieldsParams, reqEditors ...RequestEditorFn) (*GetUsersRecentObservationFieldsResponse, error) {
	rsp, err := c.GetUsersRecentObservationFields(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersRecentObservationFieldsResponse(rsp)
}

// PostUsersResendConfirmationWithResponse request returning *PostUsersResendConfirmationResponse
func (c *ClientWithResponses) PostUsersResendConfirmationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostUsersResendConfirmationResponse, error) {
	rsp, err := c.PostUsersResendConfirmation(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersResendConfirmationResponse(rsp)
}

// PostUsersResetPasswordWithBodyWithResponse request with arbitrary body returning *PostUsersResetPasswordResponse
func (c *ClientWithResponses) PostUsersResetPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersResetPasswordResponse, error) {
	rsp, err := c.PostUsersResetPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersResetPasswordResponse(rsp)
}

func (c *ClientWithResponses) PostUsersResetPasswordWithResponse(ctx context.Context, body PostUsersResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersResetPasswordResponse, error) {
	rsp, err := c.PostUsersResetPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersResetPasswordResponse(rsp)
}

// PutUsersUpdateSessionWithResponse request returning *PutUsersUpdateSessionResponse
func (c *ClientWithResponses) PutUsersUpdateSessionWithResponse(ctx context.Context, params *PutUsersUpdateSessionParams, reqEditors ...RequestEditorFn) (*PutUsersUpdateSessionResponse, error) {
	rsp, err := c.PutUsersUpdateSession(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUsersUpdateSessionResponse(rsp)
}

// GetUsersIdWithResponse request returning *GetUsersIdResponse
func (c *ClientWithResponses) GetUsersIdWithResponse(ctx context.Context, id string, params *GetUsersIdParams, reqEditors ...RequestEditorFn) (*GetUsersIdResponse, error) {
	rsp, err := c.GetUsersId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersIdResponse(rsp)
}

// PutUsersIdWithBodyWithResponse request with arbitrary body returning *PutUsersIdResponse
func (c *ClientWithResponses) PutUsersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUsersIdResponse, error) {
	rsp, err := c.PutUsersIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUsersIdResponse(rsp)
}

func (c *ClientWithResponses) PutUsersIdWithResponse(ctx context.Context, id string, body PutUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUsersIdResponse, error) {
	rsp, err := c.PutUsersId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUsersIdResponse(rsp)
}

// DeleteUsersIdBlockWithResponse request returning *DeleteUsersIdBlockResponse
func (c *ClientWithResponses) DeleteUsersIdBlockWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteUsersIdBlockResponse, error) {
	rsp, err := c.DeleteUsersIdBlock(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsersIdBlockResponse(rsp)
}

// PostUsersIdBlockWithResponse request returning *PostUsersIdBlockResponse
func (c *ClientWithResponses) PostUsersIdBlockWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostUsersIdBlockResponse, error) {
	rsp, err := c.PostUsersIdBlock(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersIdBlockResponse(rsp)
}

// DeleteUsersIdMuteWithResponse request returning *DeleteUsersIdMuteResponse
func (c *ClientWithResponses) DeleteUsersIdMuteWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteUsersIdMuteResponse, error) {
	rsp, err := c.DeleteUsersIdMute(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsersIdMuteResponse(rsp)
}

// PostUsersIdMuteWithResponse request returning *PostUsersIdMuteResponse
func (c *ClientWithResponses) PostUsersIdMuteWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostUsersIdMuteResponse, error) {
	rsp, err := c.PostUsersIdMute(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersIdMuteResponse(rsp)
}

// GetUsersIdProjectsWithResponse request returning *GetUsersIdProjectsResponse
func (c *ClientWithResponses) GetUsersIdProjectsWithResponse(ctx context.Context, id int, params *GetUsersIdProjectsParams, reqEditors ...RequestEditorFn) (*GetUsersIdProjectsResponse, error) {
	rsp, err := c.GetUsersIdProjects(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersIdProjectsResponse(rsp)
}

// ParsePostAnnotationsResponse parses an HTTP response from a PostAnnotationsWithResponse call
func ParsePostAnnotationsResponse(rsp *http.Response) (*PostAnnotationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAnnotationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsAnnotations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAnnotationsUuidResponse parses an HTTP response from a DeleteAnnotationsUuidWithResponse call
func ParseDeleteAnnotationsUuidResponse(rsp *http.Response) (*DeleteAnnotationsUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAnnotationsUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAnnotationsUuidVoteResponse parses an HTTP response from a DeleteAnnotationsUuidVoteWithResponse call
func ParseDeleteAnnotationsUuidVoteResponse(rsp *http.Response) (*DeleteAnnotationsUuidVoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAnnotationsUuidVoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAnnotationsUuidVoteResponse parses an HTTP response from a PostAnnotationsUuidVoteWithResponse call
func ParsePostAnnotationsUuidVoteResponse(rsp *http.Response) (*PostAnnotationsUuidVoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAnnotationsUuidVoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAnnouncementsResponse parses an HTTP response from a GetAnnouncementsWithResponse call
func ParseGetAnnouncementsResponse(rsp *http.Response) (*GetAnnouncementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAnnouncementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsAnnouncements
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAnnouncementsIdDismissResponse parses an HTTP response from a PutAnnouncementsIdDismissWithResponse call
func ParsePutAnnouncementsIdDismissResponse(rsp *http.Response) (*PutAnnouncementsIdDismissResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAnnouncementsIdDismissResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuthorizedApplicationsResponse parses an HTTP response from a GetAuthorizedApplicationsWithResponse call
func ParseGetAuthorizedApplicationsResponse(rsp *http.Response) (*GetAuthorizedApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthorizedApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsAuthorizedApplications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteAuthorizedApplicationsIdResponse parses an HTTP response from a DeleteAuthorizedApplicationsIdWithResponse call
func ParseDeleteAuthorizedApplicationsIdResponse(rsp *http.Response) (*DeleteAuthorizedApplicationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAuthorizedApplicationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostCommentsResponse parses an HTTP response from a PostCommentsWithResponse call
func ParsePostCommentsResponse(rsp *http.Response) (*PostCommentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCommentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsComments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCommentsUuidResponse parses an HTTP response from a DeleteCommentsUuidWithResponse call
func ParseDeleteCommentsUuidResponse(rsp *http.Response) (*DeleteCommentsUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCommentsUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutCommentsUuidResponse parses an HTTP response from a PutCommentsUuidWithResponse call
func ParsePutCommentsUuidResponse(rsp *http.Response) (*PutCommentsUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCommentsUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsComments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetControlledTermsResponse parses an HTTP response from a GetControlledTermsWithResponse call
func ParseGetControlledTermsResponse(rsp *http.Response) (*GetControlledTermsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetControlledTermsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsControlledTerms
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetControlledTermsForTaxonTaxonIdResponse parses an HTTP response from a GetControlledTermsForTaxonTaxonIdWithResponse call
func ParseGetControlledTermsForTaxonTaxonIdResponse(rsp *http.Response) (*GetControlledTermsForTaxonTaxonIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetControlledTermsForTaxonTaxonIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsControlledTerms
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostFlagsResponse parses an HTTP response from a PostFlagsWithResponse call
func ParsePostFlagsResponse(rsp *http.Response) (*PostFlagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFlagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsFlags
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteFlagsIdResponse parses an HTTP response from a DeleteFlagsIdWithResponse call
func ParseDeleteFlagsIdResponse(rsp *http.Response) (*DeleteFlagsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFlagsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutFlagsIdResponse parses an HTTP response from a PutFlagsIdWithResponse call
func ParsePutFlagsIdResponse(rsp *http.Response) (*PutFlagsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFlagsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsFlags
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGeomodelIdZoomXYPngResponse parses an HTTP response from a GetGeomodelIdZoomXYPngWithResponse call
func ParseGetGeomodelIdZoomXYPngResponse(rsp *http.Response) (*GetGeomodelIdZoomXYPngResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGeomodelIdZoomXYPngResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGeomodelComparisonIdZoomXYPngResponse parses an HTTP response from a GetGeomodelComparisonIdZoomXYPngWithResponse call
func ParseGetGeomodelComparisonIdZoomXYPngResponse(rsp *http.Response) (*GetGeomodelComparisonIdZoomXYPngResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGeomodelComparisonIdZoomXYPngResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGeomodelTaxonRangeIdZoomXYPngResponse parses an HTTP response from a GetGeomodelTaxonRangeIdZoomXYPngWithResponse call
func ParseGetGeomodelTaxonRangeIdZoomXYPngResponse(rsp *http.Response) (*GetGeomodelTaxonRangeIdZoomXYPngResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGeomodelTaxonRangeIdZoomXYPngResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGridZoomXYGridJsonResponse parses an HTTP response from a GetGridZoomXYGridJsonWithResponse call
func ParseGetGridZoomXYGridJsonResponse(rsp *http.Response) (*GetGridZoomXYGridJsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGridZoomXYGridJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UtfGrid
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGridZoomXYPngResponse parses an HTTP response from a GetGridZoomXYPngWithResponse call
func ParseGetGridZoomXYPngResponse(rsp *http.Response) (*GetGridZoomXYPngResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGridZoomXYPngResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetHeatmapZoomXYPngResponse parses an HTTP response from a GetHeatmapZoomXYPngWithResponse call
func ParseGetHeatmapZoomXYPngResponse(rsp *http.Response) (*GetHeatmapZoomXYPngResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHeatmapZoomXYPngResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostIdentificationsResponse parses an HTTP response from a PostIdentificationsWithResponse call
func ParsePostIdentificationsResponse(rsp *http.Response) (*PostIdentificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIdentificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsIdentifications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetIdentificationsIdentifiersResponse parses an HTTP response from a GetIdentificationsIdentifiersWithResponse call
func ParseGetIdentificationsIdentifiersResponse(rsp *http.Response) (*GetIdentificationsIdentifiersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdentificationsIdentifiersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsIdentifiers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetIdentificationsRecentTaxaResponse parses an HTTP response from a GetIdentificationsRecentTaxaWithResponse call
func ParseGetIdentificationsRecentTaxaResponse(rsp *http.Response) (*GetIdentificationsRecentTaxaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdentificationsRecentTaxaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsIdentificationsRecentTaxa
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetIdentificationsSimilarSpeciesResponse parses an HTTP response from a GetIdentificationsSimilarSpeciesWithResponse call
func ParseGetIdentificationsSimilarSpeciesResponse(rsp *http.Response) (*GetIdentificationsSimilarSpeciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdentificationsSimilarSpeciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTaxaCounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIdentificationsUuidResponse parses an HTTP response from a DeleteIdentificationsUuidWithResponse call
func ParseDeleteIdentificationsUuidResponse(rsp *http.Response) (*DeleteIdentificationsUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdentificationsUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutIdentificationsUuidResponse parses an HTTP response from a PutIdentificationsUuidWithResponse call
func ParsePutIdentificationsUuidResponse(rsp *http.Response) (*PutIdentificationsUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutIdentificationsUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMessagesResponse parses an HTTP response from a GetMessagesWithResponse call
func ParseGetMessagesResponse(rsp *http.Response) (*GetMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsMessages
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostMessagesResponse parses an HTTP response from a PostMessagesWithResponse call
func ParsePostMessagesResponse(rsp *http.Response) (*PostMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsMessages
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetMessagesIdResponse parses an HTTP response from a GetMessagesIdWithResponse call
func ParseGetMessagesIdResponse(rsp *http.Response) (*GetMessagesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsMessagesThread
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostObservationFieldValuesResponse parses an HTTP response from a PostObservationFieldValuesWithResponse call
func ParsePostObservationFieldValuesResponse(rsp *http.Response) (*PostObservationFieldValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObservationFieldValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationFieldValues
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteObservationFieldValuesUuidResponse parses an HTTP response from a DeleteObservationFieldValuesUuidWithResponse call
func ParseDeleteObservationFieldValuesUuidResponse(rsp *http.Response) (*DeleteObservationFieldValuesUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObservationFieldValuesUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutObservationFieldValuesUuidResponse parses an HTTP response from a PutObservationFieldValuesUuidWithResponse call
func ParsePutObservationFieldValuesUuidResponse(rsp *http.Response) (*PutObservationFieldValuesUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutObservationFieldValuesUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationFieldValues
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostObservationPhotosResponse parses an HTTP response from a PostObservationPhotosWithResponse call
func ParsePostObservationPhotosResponse(rsp *http.Response) (*PostObservationPhotosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObservationPhotosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationPhotos
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteObservationPhotosUuidResponse parses an HTTP response from a DeleteObservationPhotosUuidWithResponse call
func ParseDeleteObservationPhotosUuidResponse(rsp *http.Response) (*DeleteObservationPhotosUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObservationPhotosUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutObservationPhotosUuidResponse parses an HTTP response from a PutObservationPhotosUuidWithResponse call
func ParsePutObservationPhotosUuidResponse(rsp *http.Response) (*PutObservationPhotosUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutObservationPhotosUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationPhotos
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostObservationSoundsResponse parses an HTTP response from a PostObservationSoundsWithResponse call
func ParsePostObservationSoundsResponse(rsp *http.Response) (*PostObservationSoundsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObservationSoundsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationSounds
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteObservationSoundsUuidResponse parses an HTTP response from a DeleteObservationSoundsUuidWithResponse call
func ParseDeleteObservationSoundsUuidResponse(rsp *http.Response) (*DeleteObservationSoundsUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObservationSoundsUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutObservationSoundsUuidResponse parses an HTTP response from a PutObservationSoundsUuidWithResponse call
func ParsePutObservationSoundsUuidResponse(rsp *http.Response) (*PutObservationSoundsUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutObservationSoundsUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationSounds
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObservationsResponse parses an HTTP response from a GetObservationsWithResponse call
func ParseGetObservationsResponse(rsp *http.Response) (*GetObservationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostObservationsResponse parses an HTTP response from a PostObservationsWithResponse call
func ParsePostObservationsResponse(rsp *http.Response) (*PostObservationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetObservationsDeletedResponse parses an HTTP response from a GetObservationsDeletedWithResponse call
func ParseGetObservationsDeletedResponse(rsp *http.Response) (*GetObservationsDeletedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsDeletedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationsDeleted
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObservationsHistogramResponse parses an HTTP response from a GetObservationsHistogramWithResponse call
func ParseGetObservationsHistogramResponse(rsp *http.Response) (*GetObservationsHistogramResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsHistogramResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationsHistogram
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObservationsIconicTaxaSpeciesCountsResponse parses an HTTP response from a GetObservationsIconicTaxaSpeciesCountsWithResponse call
func ParseGetObservationsIconicTaxaSpeciesCountsResponse(rsp *http.Response) (*GetObservationsIconicTaxaSpeciesCountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsIconicTaxaSpeciesCountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationsSpeciesCounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObservationsIdentificationCategoriesResponse parses an HTTP response from a GetObservationsIdentificationCategoriesWithResponse call
func ParseGetObservationsIdentificationCategoriesResponse(rsp *http.Response) (*GetObservationsIdentificationCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsIdentificationCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationsIdentificationCategories
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetObservationsIdentifiersResponse parses an HTTP response from a GetObservationsIdentifiersWithResponse call
func ParseGetObservationsIdentifiersResponse(rsp *http.Response) (*GetObservationsIdentifiersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsIdentifiersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationsIdentifiers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObservationsObserversResponse parses an HTTP response from a GetObservationsObserversWithResponse call
func ParseGetObservationsObserversResponse(rsp *http.Response) (*GetObservationsObserversResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsObserversResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationsObservers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObservationsPopularFieldValuesResponse parses an HTTP response from a GetObservationsPopularFieldValuesWithResponse call
func ParseGetObservationsPopularFieldValuesResponse(rsp *http.Response) (*GetObservationsPopularFieldValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsPopularFieldValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationsPopularFieldValues
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObservationsQualityGradesResponse parses an HTTP response from a GetObservationsQualityGradesWithResponse call
func ParseGetObservationsQualityGradesResponse(rsp *http.Response) (*GetObservationsQualityGradesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsQualityGradesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationsQualityGrades
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetObservationsSpeciesCountsResponse parses an HTTP response from a GetObservationsSpeciesCountsWithResponse call
func ParseGetObservationsSpeciesCountsResponse(rsp *http.Response) (*GetObservationsSpeciesCountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsSpeciesCountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationsSpeciesCounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObservationsUmbrellaProjectStatsResponse parses an HTTP response from a GetObservationsUmbrellaProjectStatsWithResponse call
func ParseGetObservationsUmbrellaProjectStatsResponse(rsp *http.Response) (*GetObservationsUmbrellaProjectStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsUmbrellaProjectStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationsUmbrellaProjectStats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObservationsUpdatesResponse parses an HTTP response from a GetObservationsUpdatesWithResponse call
func ParseGetObservationsUpdatesResponse(rsp *http.Response) (*GetObservationsUpdatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsUpdatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsUpdates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteObservationsUuidResponse parses an HTTP response from a DeleteObservationsUuidWithResponse call
func ParseDeleteObservationsUuidResponse(rsp *http.Response) (*DeleteObservationsUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObservationsUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObservationsUuidResponse parses an HTTP response from a GetObservationsUuidWithResponse call
func ParseGetObservationsUuidResponse(rsp *http.Response) (*GetObservationsUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutObservationsUuidResponse parses an HTTP response from a PutObservationsUuidWithResponse call
func ParsePutObservationsUuidResponse(rsp *http.Response) (*PutObservationsUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutObservationsUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteObservationsUuidFaveResponse parses an HTTP response from a DeleteObservationsUuidFaveWithResponse call
func ParseDeleteObservationsUuidFaveResponse(rsp *http.Response) (*DeleteObservationsUuidFaveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObservationsUuidFaveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostObservationsUuidFaveResponse parses an HTTP response from a PostObservationsUuidFaveWithResponse call
func ParsePostObservationsUuidFaveResponse(rsp *http.Response) (*PostObservationsUuidFaveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObservationsUuidFaveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteObservationsUuidQualityMetricResponse parses an HTTP response from a DeleteObservationsUuidQualityMetricWithResponse call
func ParseDeleteObservationsUuidQualityMetricResponse(rsp *http.Response) (*DeleteObservationsUuidQualityMetricResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObservationsUuidQualityMetricResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostObservationsUuidQualityMetricResponse parses an HTTP response from a PostObservationsUuidQualityMetricWithResponse call
func ParsePostObservationsUuidQualityMetricResponse(rsp *http.Response) (*PostObservationsUuidQualityMetricResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObservationsUuidQualityMetricResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObservationsUuidQualityMetricsResponse parses an HTTP response from a GetObservationsUuidQualityMetricsWithResponse call
func ParseGetObservationsUuidQualityMetricsResponse(rsp *http.Response) (*GetObservationsUuidQualityMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsUuidQualityMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsQualityMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteObservationsUuidReviewResponse parses an HTTP response from a DeleteObservationsUuidReviewWithResponse call
func ParseDeleteObservationsUuidReviewResponse(rsp *http.Response) (*DeleteObservationsUuidReviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObservationsUuidReviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostObservationsUuidReviewResponse parses an HTTP response from a PostObservationsUuidReviewWithResponse call
func ParsePostObservationsUuidReviewResponse(rsp *http.Response) (*PostObservationsUuidReviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObservationsUuidReviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutObservationsUuidSubscriptionResponse parses an HTTP response from a PutObservationsUuidSubscriptionWithResponse call
func ParsePutObservationsUuidSubscriptionResponse(rsp *http.Response) (*PutObservationsUuidSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutObservationsUuidSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObservationsUuidSubscriptionsResponse parses an HTTP response from a GetObservationsUuidSubscriptionsWithResponse call
func ParseGetObservationsUuidSubscriptionsResponse(rsp *http.Response) (*GetObservationsUuidSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsUuidSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsSubscriptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObservationsUuidTaxonSummaryResponse parses an HTTP response from a GetObservationsUuidTaxonSummaryWithResponse call
func ParseGetObservationsUuidTaxonSummaryResponse(rsp *http.Response) (*GetObservationsUuidTaxonSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObservationsUuidTaxonSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTaxonSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutObservationsUuidViewedUpdatesResponse parses an HTTP response from a PutObservationsUuidViewedUpdatesWithResponse call
func ParsePutObservationsUuidViewedUpdatesResponse(rsp *http.Response) (*PutObservationsUuidViewedUpdatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutObservationsUuidViewedUpdatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPhotosResponse parses an HTTP response from a PostPhotosWithResponse call
func ParsePostPhotosResponse(rsp *http.Response) (*PostPhotosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPhotosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsPhotos
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutPhotosIdResponse parses an HTTP response from a PutPhotosIdWithResponse call
func ParsePutPhotosIdResponse(rsp *http.Response) (*PutPhotosIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPhotosIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsPhotos
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPlacesResponse parses an HTTP response from a GetPlacesWithResponse call
func ParseGetPlacesResponse(rsp *http.Response) (*GetPlacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsPlaces
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPlacesNearbyResponse parses an HTTP response from a GetPlacesNearbyWithResponse call
func ParseGetPlacesNearbyResponse(rsp *http.Response) (*GetPlacesNearbyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacesNearbyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsPlacesNearby
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPlacesIdZoomXYPngResponse parses an HTTP response from a GetPlacesIdZoomXYPngWithResponse call
func ParseGetPlacesIdZoomXYPngResponse(rsp *http.Response) (*GetPlacesIdZoomXYPngResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacesIdZoomXYPngResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlacesUuidResponse parses an HTTP response from a GetPlacesUuidWithResponse call
func ParseGetPlacesUuidResponse(rsp *http.Response) (*GetPlacesUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacesUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsPlaces
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPointsZoomXYGridJsonResponse parses an HTTP response from a GetPointsZoomXYGridJsonWithResponse call
func ParseGetPointsZoomXYGridJsonResponse(rsp *http.Response) (*GetPointsZoomXYGridJsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPointsZoomXYGridJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UtfGrid
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPointsZoomXYPngResponse parses an HTTP response from a GetPointsZoomXYPngWithResponse call
func ParseGetPointsZoomXYPngResponse(rsp *http.Response) (*GetPointsZoomXYPngResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPointsZoomXYPngResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostProjectObservationsResponse parses an HTTP response from a PostProjectObservationsWithResponse call
func ParsePostProjectObservationsResponse(rsp *http.Response) (*PostProjectObservationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectObservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsProjectObservations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteProjectObservationsUuidResponse parses an HTTP response from a DeleteProjectObservationsUuidWithResponse call
func ParseDeleteProjectObservationsUuidResponse(rsp *http.Response) (*DeleteProjectObservationsUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectObservationsUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutProjectObservationsUuidResponse parses an HTTP response from a PutProjectObservationsUuidWithResponse call
func ParsePutProjectObservationsUuidResponse(rsp *http.Response) (*PutProjectObservationsUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutProjectObservationsUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsProjectObservations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutProjectUsersIdResponse parses an HTTP response from a PutProjectUsersIdWithResponse call
func ParsePutProjectUsersIdResponse(rsp *http.Response) (*PutProjectUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutProjectUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetProjectsResponse parses an HTTP response from a GetProjectsWithResponse call
func ParseGetProjectsResponse(rsp *http.Response) (*GetProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsProjects
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProjectsIdResponse parses an HTTP response from a GetProjectsIdWithResponse call
func ParseGetProjectsIdResponse(rsp *http.Response) (*GetProjectsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsProjects
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProjectsIdMembersResponse parses an HTTP response from a GetProjectsIdMembersWithResponse call
func ParseGetProjectsIdMembersResponse(rsp *http.Response) (*GetProjectsIdMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsIdMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsProjectsMembers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteProjectsIdMembershipResponse parses an HTTP response from a DeleteProjectsIdMembershipWithResponse call
func ParseDeleteProjectsIdMembershipResponse(rsp *http.Response) (*DeleteProjectsIdMembershipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectsIdMembershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProjectsIdMembershipResponse parses an HTTP response from a GetProjectsIdMembershipWithResponse call
func ParseGetProjectsIdMembershipResponse(rsp *http.Response) (*GetProjectsIdMembershipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsIdMembershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsProjectMembership
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProjectsIdMembershipResponse parses an HTTP response from a PostProjectsIdMembershipWithResponse call
func ParsePostProjectsIdMembershipResponse(rsp *http.Response) (*PostProjectsIdMembershipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsIdMembershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProjectsIdPostsResponse parses an HTTP response from a GetProjectsIdPostsWithResponse call
func ParseGetProjectsIdPostsResponse(rsp *http.Response) (*GetProjectsIdPostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsIdPostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsProjectsPosts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProviderAuthorizationsResponse parses an HTTP response from a GetProviderAuthorizationsWithResponse call
func ParseGetProviderAuthorizationsResponse(rsp *http.Response) (*GetProviderAuthorizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProviderAuthorizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsProviderAuthorizations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteProviderAuthorizationsIdResponse parses an HTTP response from a DeleteProviderAuthorizationsIdWithResponse call
func ParseDeleteProviderAuthorizationsIdResponse(rsp *http.Response) (*DeleteProviderAuthorizationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProviderAuthorizationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetRelationshipsResponse parses an HTTP response from a GetRelationshipsWithResponse call
func ParseGetRelationshipsResponse(rsp *http.Response) (*GetRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsRelationships
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostRelationshipsResponse parses an HTTP response from a PostRelationshipsWithResponse call
func ParsePostRelationshipsResponse(rsp *http.Response) (*PostRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsRelationships
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteRelationshipsIdResponse parses an HTTP response from a DeleteRelationshipsIdWithResponse call
func ParseDeleteRelationshipsIdResponse(rsp *http.Response) (*DeleteRelationshipsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRelationshipsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutRelationshipsIdResponse parses an HTTP response from a PutRelationshipsIdWithResponse call
func ParsePutRelationshipsIdResponse(rsp *http.Response) (*PutRelationshipsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRelationshipsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsRelationships
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSavedLocationsResponse parses an HTTP response from a GetSavedLocationsWithResponse call
func ParseGetSavedLocationsResponse(rsp *http.Response) (*GetSavedLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSavedLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsSavedLocations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSavedLocationsResponse parses an HTTP response from a PostSavedLocationsWithResponse call
func ParsePostSavedLocationsResponse(rsp *http.Response) (*PostSavedLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSavedLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsSavedLocations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteSavedLocationsIdResponse parses an HTTP response from a DeleteSavedLocationsIdWithResponse call
func ParseDeleteSavedLocationsIdResponse(rsp *http.Response) (*DeleteSavedLocationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSavedLocationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSearchResponse parses an HTTP response from a GetSearchWithResponse call
func ParseGetSearchResponse(rsp *http.Response) (*GetSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsSearch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSitesResponse parses an HTTP response from a GetSitesWithResponse call
func ParseGetSitesResponse(rsp *http.Response) (*GetSitesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSitesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsSites
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSoundsResponse parses an HTTP response from a PostSoundsWithResponse call
func ParsePostSoundsResponse(rsp *http.Response) (*PostSoundsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSoundsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsSounds
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTaxaResponse parses an HTTP response from a GetTaxaWithResponse call
func ParseGetTaxaResponse(rsp *http.Response) (*GetTaxaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTaxa
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaxaAutocompleteResponse parses an HTTP response from a GetTaxaAutocompleteWithResponse call
func ParseGetTaxaAutocompleteResponse(rsp *http.Response) (*GetTaxaAutocompleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxaAutocompleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTaxa
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaxaIconicResponse parses an HTTP response from a GetTaxaIconicWithResponse call
func ParseGetTaxaIconicResponse(rsp *http.Response) (*GetTaxaIconicResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxaIconicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTaxa
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTaxaSuggestResponse parses an HTTP response from a GetTaxaSuggestWithResponse call
func ParseGetTaxaSuggestResponse(rsp *http.Response) (*GetTaxaSuggestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxaSuggestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTaxaSuggest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTaxaSuggestResponse parses an HTTP response from a PostTaxaSuggestWithResponse call
func ParsePostTaxaSuggestResponse(rsp *http.Response) (*PostTaxaSuggestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTaxaSuggestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTaxaSuggest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaxaIdResponse parses an HTTP response from a GetTaxaIdWithResponse call
func ParseGetTaxaIdResponse(rsp *http.Response) (*GetTaxaIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxaIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTaxa
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaxaIdWantedResponse parses an HTTP response from a GetTaxaIdWantedWithResponse call
func ParseGetTaxaIdWantedResponse(rsp *http.Response) (*GetTaxaIdWantedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxaIdWantedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTaxa
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTaxonNamePrioritiesResponse parses an HTTP response from a PostTaxonNamePrioritiesWithResponse call
func ParsePostTaxonNamePrioritiesResponse(rsp *http.Response) (*PostTaxonNamePrioritiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTaxonNamePrioritiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTaxonNamePriorities
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteTaxonNamePrioritiesIdResponse parses an HTTP response from a DeleteTaxonNamePrioritiesIdWithResponse call
func ParseDeleteTaxonNamePrioritiesIdResponse(rsp *http.Response) (*DeleteTaxonNamePrioritiesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTaxonNamePrioritiesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutTaxonNamePrioritiesIdResponse parses an HTTP response from a PutTaxonNamePrioritiesIdWithResponse call
func ParsePutTaxonNamePrioritiesIdResponse(rsp *http.Response) (*PutTaxonNamePrioritiesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTaxonNamePrioritiesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTaxonNamePriorities
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaxonPlacesIdZoomXYPngResponse parses an HTTP response from a GetTaxonPlacesIdZoomXYPngWithResponse call
func ParseGetTaxonPlacesIdZoomXYPngResponse(rsp *http.Response) (*GetTaxonPlacesIdZoomXYPngResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxonPlacesIdZoomXYPngResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTaxonRangesIdZoomXYPngResponse parses an HTTP response from a GetTaxonRangesIdZoomXYPngWithResponse call
func ParseGetTaxonRangesIdZoomXYPngResponse(rsp *http.Response) (*GetTaxonRangesIdZoomXYPngResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxonRangesIdZoomXYPngResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTranslationsLocalesResponse parses an HTTP response from a GetTranslationsLocalesWithResponse call
func ParseGetTranslationsLocalesResponse(rsp *http.Response) (*GetTranslationsLocalesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTranslationsLocalesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsTranslationsLocales
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsUsers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUsersAutocompleteResponse parses an HTTP response from a GetUsersAutocompleteWithResponse call
func ParseGetUsersAutocompleteResponse(rsp *http.Response) (*GetUsersAutocompleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersAutocompleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsUsers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersEmailAvailableResponse parses an HTTP response from a GetUsersEmailAvailableWithResponse call
func ParseGetUsersEmailAvailableResponse(rsp *http.Response) (*GetUsersEmailAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersEmailAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsEmailAvailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUsersMeResponse parses an HTTP response from a GetUsersMeWithResponse call
func ParseGetUsersMeResponse(rsp *http.Response) (*GetUsersMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsUsersMe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUsersNotificationCountsResponse parses an HTTP response from a GetUsersNotificationCountsWithResponse call
func ParseGetUsersNotificationCountsResponse(rsp *http.Response) (*GetUsersNotificationCountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersNotificationCountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsUsersNotificationCounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUsersRecentObservationFieldsResponse parses an HTTP response from a GetUsersRecentObservationFieldsWithResponse call
func ParseGetUsersRecentObservationFieldsResponse(rsp *http.Response) (*GetUsersRecentObservationFieldsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersRecentObservationFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsObservationFields
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUsersResendConfirmationResponse parses an HTTP response from a PostUsersResendConfirmationWithResponse call
func ParsePostUsersResendConfirmationResponse(rsp *http.Response) (*PostUsersResendConfirmationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersResendConfirmationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUsersResetPasswordResponse parses an HTTP response from a PostUsersResetPasswordWithResponse call
func ParsePostUsersResetPasswordResponse(rsp *http.Response) (*PostUsersResetPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersResetPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutUsersUpdateSessionResponse parses an HTTP response from a PutUsersUpdateSessionWithResponse call
func ParsePutUsersUpdateSessionResponse(rsp *http.Response) (*PutUsersUpdateSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUsersUpdateSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUsersIdResponse parses an HTTP response from a GetUsersIdWithResponse call
func ParseGetUsersIdResponse(rsp *http.Response) (*GetUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsUsers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutUsersIdResponse parses an HTTP response from a PutUsersIdWithResponse call
func ParsePutUsersIdResponse(rsp *http.Response) (*PutUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteUsersIdBlockResponse parses an HTTP response from a DeleteUsersIdBlockWithResponse call
func ParseDeleteUsersIdBlockResponse(rsp *http.Response) (*DeleteUsersIdBlockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsersIdBlockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUsersIdBlockResponse parses an HTTP response from a PostUsersIdBlockWithResponse call
func ParsePostUsersIdBlockResponse(rsp *http.Response) (*PostUsersIdBlockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersIdBlockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteUsersIdMuteResponse parses an HTTP response from a DeleteUsersIdMuteWithResponse call
func ParseDeleteUsersIdMuteResponse(rsp *http.Response) (*DeleteUsersIdMuteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsersIdMuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUsersIdMuteResponse parses an HTTP response from a PostUsersIdMuteWithResponse call
func ParsePostUsersIdMuteResponse(rsp *http.Response) (*PostUsersIdMuteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersIdMuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUsersIdProjectsResponse parses an HTTP response from a GetUsersIdProjectsWithResponse call
func ParseGetUsersIdProjectsResponse(rsp *http.Response) (*GetUsersIdProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersIdProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsProjects
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
